################################################################################
##   ____  ____
##  /   /\/   /
## /___/  \  /    Vendor: Xilinx
## \   \   \/     Version : 3.0
##  \   \         Application : XAPP589, All digital VCXO.
##  /   /         Filename : pre_route.tcl
## /___/   /\     Timestamp : v26_EA_0 @ Thu Mar 23 18:36:33 +0000 2017 Rev: 847:857
## \   \  /  \
##  \___\/\___\
##
##
## USER CONSTRAINTS FILE FOR MGT WRAPPER EXAMPLE DESIGN
## Generated by Xilinx 7 Series FPGAs Transceivers Wizard
##
## Device:  xc7k325t
## Package: ffg900
##
## (c) Copyright 2010-2014 Xilinx, Inc. All rights reserved.
##
## This file contains confidential and proprietary information
## of Xilinx, Inc. and is protected under U.S. and
## international copyright and other intellectual property
## laws.
##
## DISCLAIMER
## This disclaimer is not a license and does not grant any
## rights to the materials distributed herewith. Except as
## otherwise provided in a valid license issued to you by
## Xilinx, and to the maximum extent permitted by applicable
## law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
## WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
## AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
## BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
## INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
## (2) Xilinx shall not be liable (whether in contract or tort,
## including negligence, or under any other theory of
## liability) for any loss or damage of any kind or nature
## related to, arising under or in connection with these
## materials, including for any direct, or any indirect,
## special, incidental, or consequential loss or damage
## (including loss of data, profits, goodwill, or any type of
## loss or damage suffered as a result of any action brought
## by a third party) even if such damage or loss was
## reasonably foreseeable or Xilinx had been advised of the
## possibility of the same.
##
## CRITICAL APPLICATIONS
## Xilinx products are not designed or intended to be fail-
## safe, or for use in any application requiring fail-safe
## performance, such as life-support or safety devices or
## systems, Class III medical devices, nuclear facilities,
## applications related to the deployment of airbags, or any
## other applications that could lead to death, personal
## injury, or severe property or environmental damage
## (individually and collectively, "Critical
## Applications"). Customer assumes the sole risk and
## liability of any use of Xilinx products in Critical
## Applications, subject only to applicable laws and
## regulations governing limitations on product liability.
##
## THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
## PART OF THIS FILE AT ALL TIMES.

proc bin2hex {bin} {
  binary scan [binary format B8 [string range $bin 3 end]] H2 hex
  return $hex
};


proc get_rpm_elements {start} {
    set i 0;
    set pin_O [get_pins -leaf -of $start -filter {DIRECTION == OUT}];
    set pin_C {};
    while {[llength $pin_C] == 0 && $i != 50} {
        set net [get_nets -quiet -of $pin_O];
        set pin_I [get_pins -leaf -quiet -of $net -filter {DIRECTION == IN && NAME =~ "*I0"}];
        set pin_C [get_pins -leaf -quiet -of $net -filter {DIRECTION == IN && NAME =~ "*C"}];
        set pin_D [get_pins -leaf -quiet -of $net -filter {DIRECTION == IN && NAME =~ *D}];
        set cell [get_cells -quiet -of $pin_I];
        set FF [get_cells -quiet -of $pin_D];
        set pin_O [get_pins -leaf -quiet -of $cell -filter {DIRECTION == OUT}];
        lappend list_pin_I $pin_I;
        lappend list_cell $cell;
        lappend list_net $net;
        lappend list_FF $FF;
        incr i;
    };
    return [list "$list_net" "$list_cell" "$list_FF"];
};


proc main_picxo_pre_route {{picxo_dbg_msg 0} {picxo_dbg_runtime 0} {picxo_report_timing 0}} {
    set start_time [clock seconds]
    send_msg_id {PICXO-105} {INFO} "Running PICXO pre_route.tcl v2.6";
    set pre_route_ver_num "26";
    set rvsig_incr 0;
    set no_gt_incr 0;
    set routes {};
    set fixed_nets {};
    set pins_to_route_200 {};
    set pins_to_route_dith0 {};
    set pins_to_route_dith1 {};
    set pins_to_route_dith2 {};
    set pins_to_route_dith3 {};
    set pins_to_route_chain {};
    set picxos {};
 #  if {[info exists arch] == 0} {
 #      set arch [get_property architecture [get_property PART [current_project]]];
 #      if {$picxo_dbg_msg == 1} { puts "Arch is $arch, part is [get_property PART [current_project]]"; };
 #      if {[llength [get_sites -quiet -filter {SITE_TYPE == GTPE2_CHANNEL}]] != 0} {
 #                  if {[get_clock_region -of [get_sites GTPE2_CHANNEL_X0Y0]] == "X0Y0"} {set arch artix7_large;
 #                  } else { set arch artix7_small;
 #                  };
 #      } elseif {[llength [get_sites -quiet -filter {SITE_TYPE == GTHE2_CHANNEL}]] != 0} {set arch virtex7;
 #      } elseif {[llength [get_sites -quiet -filter {SITE_TYPE == GTXE2_CHANNEL}]] != 0} {set arch kintex7;
 #      } elseif {[llength [get_sites -quiet -filter {SITE_TYPE == GTHE3_CHANNEL}]] != 0} {set arch kintexu;
 #      } elseif {[llength [get_sites -quiet -filter {SITE_TYPE == GTYE3_CHANNEL}]] != 0} {set arch virtexu;
 #      };
 #  };
 #  if {$picxo_dbg_msg == 1} { puts "Arch is $arch";};

    #set picxos [lsort -dictionary [get_cells -hier -filter {LIB_CELL =~ *picxo_top || ORIG_REF_NAME =~ *picxo_top}]];
    #set picxos [lsort -dictionary [get_cells -quiet -hier -filter {ORIG_REF_NAME == picxo_top}]];
    if {[llength $picxos] == 0} {
        set picxos [lsort -dictionary [get_cells -hier -filter {I_AM_PICXO == "true"}]];
    }
    if {[llength $picxos] == 0} {
            send_msg_id {PICXO-015} {ERROR} "No Picxo instance found";
    } else {
            send_msg_id {PICXO-020} {INFO} "Found [llength $picxos] PICXOs:\n[join $picxos \n]";
    };

    set delays [dict create];
    foreach picxo $picxos {
        set picxo_dest {};
        set no_gt {};
        set gts {};
        set gt_sites {};
        set X_gt {};
        set Y_gt {};
        set X {};
        set Y {};
        set gt_type [get_property GT_TYPE [get_prop PARENT $picxo]];
        set clk_reg [get_property CLOCK_REGION [get_prop PARENT $picxo]];
        set route_done [get_property ROUTE_DONE $picxo];
        if { $route_done == "FALSE" } {  
            set ver_num [get_property VER_NUM $picxo];
            if {[bin2hex $ver_num] != $pre_route_ver_num} {send_msg_id {PICXO-030} {CRITICAL WARNING} "pre_route.tcl $pre_route_ver_num version does not match picxo version [bin2hex $ver_num]"}
            send_msg_id {PICXO-021} {INFO} "$picxo version [bin2hex $ver_num] with GT type $gt_type";
            set txoutclk_i_pin [get_pins -of [get_cells $picxo] -filter {NAME =~ *TXOUTCLK_I || NAME =~ *txoutclk_i}];
            set refclk_i_pin [get_pins -of [get_cells $picxo] -filter {NAME =~ *REF_CLK_I || NAME =~ *ref_clk_i}];
            if {$picxo_dbg_msg == 1} {puts "Found Picxo Pin TXOUTCLK_I $txoutclk_i_pin";puts "Found Picxo Pin REF_CLK_I $refclk_i_pin";};
            #### 1_2  INPUT CLK of UP flop
            #### 2_3   UP
            #### 20_30 DOWN
            #### 5_40  UP_d
            #### 50_4  DN_d
            set 20 [get_cells -filter "PARENT =~ $picxo*" -of [get_pins -leaf -filter "DIRECTION == IN && NAME =~ *C" -of [get_nets -of [get_pins -leaf -of [get_cells -of [get_pins -leaf -of [get_nets -of $txoutclk_i_pin -boundary_type lower] -filter "DIRECTION == IN && NAME =~ *C"]] -filter "DIRECTION == OUT"]]]]
            set 30_20 [get_nets -of [get_pins -leaf -of $20 -filter {NAME =~ *CLR}]];
            set 20_30 [get_nets -of [get_pins -leaf -of $20 -filter {NAME =~ *Q}]] ;
            set 30 [get_cells -of [get_pins -leaf -of $30_20 -filter {DIRECTION == OUT}]];
            set 10_20 [get_nets -of [get_pins -leaf -of $20 -filter {NAME =~ *C}]];
            set 10 [get_cells -of [get_pins -leaf -of $10_20 -filter {DIRECTION == OUT}]] ;
            set 50 [get_cells -of [get_nets -of [get_pins -of $20 -filter {NAME =~ *Q}]] -filter {REF_NAME == LUT1}];
            set dith_mux [get_cells -of [get_pins -leaf -of [get_nets -of [get_pins -hier -filter "NAME =~ $picxo/*C"]] -filter {DIRECTION == OUT}] -filter {REF_NAME == LUT6}];
            set 2 [get_cells -of [get_pins -of [get_nets -of [get_pins -of $dith_mux -filter {DIRECTION == OUT}]] -filter {DIRECTION == IN}]];
            set_property DONT_TOUCH true $dith_mux;
            set 3_2 [get_nets -of [get_pins -leaf -of $2 -filter {NAME =~ *CLR}]];
            set 2_3 [get_nets -of [get_pins -leaf -of $2 -filter {NAME =~ *Q}]]  ;
            set 3 [get_cells -of [get_pins -leaf -of $3_2 -filter {DIRECTION == OUT}]];
            set 1_2 [get_nets -of [get_pins -leaf -of $2 -filter {NAME =~ *C}]];
            set 1 [get_cells -of [get_pins -leaf -of [get_nets -of [get_pins -leaf -of $dith_mux -filter {NAME =~ *I0}]] -filter {DIRECTION == OUT}]];
            set 1_dith_mux [get_nets -of [get_pins -of $dith_mux -filter {NAME =~ *I0}]];
            set 5 [get_cells -of [get_nets -of [get_pins -of $2 -filter {NAME =~ *Q}]] -filter {REF_NAME == LUT1}];
            set 50_4 [get_nets -of [get_pins -leaf -of $50 -filter {DIRECTION == OUT}]];
            set 5_40 [get_nets -of [get_pins -leaf -of $5 -filter {DIRECTION == OUT}]];
            set 4 [get_cells -of [get_pins -leaf -of $50_4 -filter {DIRECTION == IN}]];
            set 40 [get_cells -of [get_pins -leaf -of $5_40 -filter {DIRECTION == IN}]];
            set 6 [get_pins -leaf -of [get_nets -of [get_pins -leaf -of $4 -filter {DIRECTION == OUT}]] -filter {DIRECTION == IN}];
            set 60 [get_pins -leaf -of [get_nets -of [get_pins -leaf -of $40 -filter {DIRECTION == OUT}]] -filter {DIRECTION == IN}];
            set 40_60 [get_nets -of [get_pins -leaf -of $40 -filter {DIRECTION == OUT}]];
            set 4_6 [get_nets -of [get_pins -leaf -of $4 -filter {DIRECTION == OUT}]];
            if {$picxo_dbg_msg == 1} {puts "1 is $1"; puts "2 is $2"; puts "3 is $3"; puts "4 is $4"; puts "5 is $5"; puts "10 is $10"; puts "20 is $20"; puts "30 is $30"; puts "40 is $40"; puts "50 is $50";};
            if {$picxo_dbg_msg == 1} {puts "1_2 is $1_2";};
            set rpm_element "[get_rpm_elements $4]"  ;
            set list_netd   [lindex $rpm_element 0];
            set LUT_listd   [lindex $rpm_element 1];
            set FF_listd    [lindex $rpm_element 2];
            set rpm_element "[get_rpm_elements $40]" ;
            set list_netu   [lindex $rpm_element 0];
            set LUT_listu   [lindex $rpm_element 1];
            set FF_listu    [lindex $rpm_element 2];

            if {$picxo_dbg_msg == 1} {
                puts "Found nets U $list_netu" ;
                puts "Found LUT U $LUT_listu"  ;
                puts "Found FF U $FF_listu"    ;
                puts "Found nets D $list_netd" ;
                puts "Found LUT D $LUT_listd"  ;
                puts "Found FF D $FF_listd"    ;
            };

            if {[get_property IS_ROUTE_FIXED $1_dith_mux] == 0} {
                if { [expr ([string range [version -short] 0 5] < 2016.1)] } {
                    route_design -quiet -no_drc -pin [get_pins $dith_mux/I0] -max_delay 200  -min_delay 100;
                    route_design -quiet -no_drc -pin [get_pins $dith_mux/I1] -max_delay 300  -min_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $dith_mux/I2] -max_delay 400  -min_delay 300;
                    route_design -quiet -no_drc -pin [get_pins $dith_mux/I3] -max_delay 500  -min_delay 400;
                    set_property IS_ROUTE_FIXED 1 $1_dith_mux;
                    send_msg_id {PICXO-209} {INFO} "Finished routing DON_I";
                } else { 
                    lappend pins_to_route_dith0 "[get_pins $dith_mux/I0]";
                    lappend pins_to_route_dith1 "[get_pins $dith_mux/I1]";
                    lappend pins_to_route_dith2 "[get_pins $dith_mux/I2]";
                    lappend pins_to_route_dith3 "[get_pins $dith_mux/I3]";
                };
                lappend fixed_nets $1_dith_mux;
            } else {
                send_msg_id {PICXO-208} {WARNING} "DON_I Nets are already routed, if GT location, PICXO location or GT type changed since the constraints were written, please remove the route constraints and re-run route_design";
            };
            if {$picxo_dbg_msg == 1} {puts "{[get_property IS_ROUTE_FIXED $1_2]} [get_property IS_ROUTE_FIXED $1_2]"; puts [expr ([string range [version -short] 0 5] < 2016.1)]};
            if {[get_property IS_ROUTE_FIXED $1_2] == 0} {
                if {[expr ([string range [version -short] 0 5] < 2016.1)] == 1} {
                    route_design -quiet -no_drc -pin [get_pins $20/C]   -max_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $2/C]    -max_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $20/CLR] -max_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $2/CLR]  -max_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $30/I0]  -max_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $30/I1]  -max_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $3/I0]   -max_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $3/I1]   -max_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $40/I0]  -max_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $40/I1]  -max_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $4/I0]   -max_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $4/I1]   -max_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $5/I0]   -max_delay 200;
                    route_design -quiet -no_drc -pin [get_pins $50/I0]  -max_delay 200;
                    set_property IS_ROUTE_FIXED 1 $1_2 $10_20 $20_30 $2_3 $5_40 $50_4 $3_2 $30_20;
                    send_msg_id {PICXO-211} {INFO} "First routing phase done";
                } else {
                    lappend pins_to_route_200 [get_pins "$5/I0 $50/I0 $40/I1 $4/I1 $40/I0 $4/I0 $20/C $2/C $20/CLR $2/CLR $30/I0 $30/I1 $3/I0 $3/I1"];
                    if {$picxo_dbg_msg == 1} {puts "pins to route 200 $pins_to_route_200"}
                };
                lappend fixed_nets $1_2 $10_20 $20_30 $2_3 $5_40 $50_4 $3_2 $30_20;
            };
            
            if {[get_property IS_ROUTE_FIXED [lindex $list_netu 1]] == 0} {
                if {[expr ([string range [version -short] 0 5] < 2016.1)] } {
                    for {set i 0} {$i < [llength $LUT_listu]} {incr i} {
                            route_design -quiet -pin [get_pins [lindex $LUT_listu $i]/I0] -max_delay 150  -min_delay 50  -no_drc;
                            set_property IS_ROUTE_FIXED 1 [lindex $list_netu $i];
                            set_disable_timing -from C -to D [get_cells [lindex $FF_listu $i]]; set_disable_timing [get_cells [lindex $LUT_listu $i]];
                        };
                    for {set i 0} {$i < [llength $LUT_listd]} {incr i} {
                            route_design -quiet -pin [get_pins [lindex $LUT_listd $i]/I0] -max_delay 150  -min_delay 50  -no_drc;
                            set_property IS_ROUTE_FIXED 1 [lindex $list_netd $i];
                            set_disable_timing -from C -to D [get_cells [lindex $FF_listd $i]]; set_disable_timing [get_cells [lindex $LUT_listd $i]];
                    };
                    send_msg_id {PICXO-212} {INFO} "Second routing phase done";
                } else {
                        lappend pins_to_route_chain [get_pins -of [get_cells "$LUT_listu $LUT_listd"] -filter {NAME =~ *I0}]
                };
                append fixed_nets " [get_nets -of [get_pins -of [get_cells "$LUT_listu $LUT_listd"] -filter {NAME =~ *I0}]]";
            };
            if {[expr ([string range [version -short] 0 5] < 2016.1)]} {
                set_property ROUTE_DONE "TRUE" $picxo;
                set picxo_time [clock seconds];
                send_msg_id {PICXO-107} {INFO} "Routing Complete for picxo $picxo, aggregate time [expr $picxo_time - $start_time ] seconds";
            };
        };
    };
    if {[expr ([string range [version -short] 0 5] >= 2016.1)]} {
         if {$picxo_dbg_msg == 1} {puts "ROUTE_DONE last picxo [get_property ROUTE_DONE [lindex $picxos end]]"};
        if {[get_property ROUTE_DONE [lindex $picxos end]] != "TRUE"} {
            set picxo_time [clock seconds];
            send_msg_id {PICXO-214} {INFO} "Start of routing, aggregate time [expr $picxo_time - $start_time ] seconds";
            if {$picxo_dbg_msg == 1} {puts "pins to route $pins_to_route_dith0 $pins_to_route_dith1 $pins_to_route_dith2 $pins_to_route_dith3"}
            route_design -quiet -no_drc -pins $pins_to_route_dith0 -max_delay 200  -min_delay 100;
            route_design -quiet -no_drc -pins $pins_to_route_dith1 -max_delay 300  -min_delay 200;
            route_design -quiet -no_drc -pins $pins_to_route_dith2 -max_delay 400  -min_delay 300;
            route_design -quiet -no_drc -pins $pins_to_route_dith3 -max_delay 500  -min_delay 400;
            set picxo_time [clock seconds];
            send_msg_id {PICXO-211} {INFO} "First routing phase done, aggregate time [expr $picxo_time - $start_time ] seconds";
            if {$picxo_dbg_msg == 1} {puts "pins to route $pins_to_route_200"}
            route_design -quiet -no_drc -pins $pins_to_route_200 -max_delay 200;
            set picxo_time [clock seconds];
            send_msg_id {PICXO-212} {INFO} "Second routing phase done, aggregate time [expr $picxo_time - $start_time ] seconds";
            if {$picxo_dbg_msg == 1} {puts "pins to route $pins_to_route_chain"}
            route_design -quiet -no_drc -pins $pins_to_route_chain -max_delay 150 -min_delay 50;
            set picxo_time [clock seconds];
            send_msg_id {PICXO-213} {INFO} "Third routing phase done, aggregate time [expr $picxo_time - $start_time ] seconds";
            set_property IS_ROUTE_FIXED 1 [get_nets $fixed_nets];
            set_property ROUTE_DONE "TRUE" $picxos;
            
            send_msg_id {PICXO-210} {INFO} "To speed up runtime, you can copy paste the constraints below in a tcl file and set the place_design tcl.pre option";
            send_msg_id {PICXO-210} {INFO} "If GT location, GT type and/or PICXO location change, please remove the constraints";
            foreach net $fixed_nets {
                puts "set_property FIXED_ROUTE [get_property ROUTE [get_nets $net]] \[get_nets $net\]";
                puts "set_property IS_ROUTE_FIXED TRUE \[get_nets $net\]";
            };
        };   
    } else {
        send_msg_id {PICXO-210} {INFO} "To speed up runtime, you can copy paste the constraints below in a tcl file and set the place_design tcl.pre option";
        send_msg_id {PICXO-210} {INFO} "If GT location, GT type and/or PICXO location change, please remove the constraints";
        foreach net $fixed_nets {
            puts "set_property FIXED_ROUTE [get_property ROUTE [get_nets $net]] \[get_nets $net\]";
            puts "set_property IS_ROUTE_FIXED TRUE \[get_nets $net\]";
        };
    };
    set stop_time [clock seconds];
    send_msg_id {PICXO-106} {INFO} "Completed pre_route.tcl in [expr $stop_time - $start_time ] seconds";
};


if {[info exists picxo_dbg_msg] == 0} {set picxo_dbg_msg 0;};
if {[info exists picxo_dbg_runtime] == 0} {set picxo_dbg_runtime 0;};
if {[info exists picxo_report_timing] == 0} {set picxo_report_timing 0;};

main_picxo_pre_route $picxo_dbg_msg $picxo_dbg_runtime $picxo_report_timing;













