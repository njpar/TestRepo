// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2019.1 (win64) Build 2552052 Fri May 24 14:49:42 MDT 2019
// Date        : Fri Jun 25 08:37:08 2021
// Host        : FM-B3P78C3 running 64-bit major release  (build 9200)
// Command     : write_verilog -force -mode funcsim
//               c:/Users/Noah.Parker/VivadoTest/TestRepo/ip/quadsgmii_0_TEST/quadsgmii_0_TEST_sim_netlist.v
// Design      : quadsgmii_0_TEST
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xczu19eg-ffve1924-1-e
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* EXAMPLE_SIMULATION = "0" *) (* X_CORE_INFO = "quadsgmii_v3_4_6,Vivado 2019.1" *) 
(* NotValidForBitStream *)
module quadsgmii_0_TEST
   (reset,
    gtrefclk,
    txp,
    txn,
    rxp,
    rxn,
    txoutclk,
    rxoutclk,
    resetdone,
    userclk,
    userclk2,
    rxuserclk,
    rxuserclk2,
    independent_clock_bufg,
    pma_reset,
    mmcm_locked,
    sgmii_clk_en_ch0,
    gmii_txd_ch0,
    gmii_tx_en_ch0,
    gmii_tx_er_ch0,
    gmii_rxd_ch0,
    gmii_rx_dv_ch0,
    gmii_rx_er_ch0,
    mdc_ch0,
    mdio_i_ch0,
    mdio_o_ch0,
    mdio_t_ch0,
    an_interrupt_ch0,
    speed_is_10_100_ch0,
    speed_is_100_ch0,
    status_vector_ch0,
    sgmii_clk_en_ch1,
    gmii_txd_ch1,
    gmii_tx_en_ch1,
    gmii_tx_er_ch1,
    gmii_rxd_ch1,
    gmii_rx_dv_ch1,
    gmii_rx_er_ch1,
    mdc_ch1,
    mdio_i_ch1,
    mdio_o_ch1,
    mdio_t_ch1,
    an_interrupt_ch1,
    speed_is_10_100_ch1,
    speed_is_100_ch1,
    status_vector_ch1,
    sgmii_clk_en_ch2,
    gmii_txd_ch2,
    gmii_tx_en_ch2,
    gmii_tx_er_ch2,
    gmii_rxd_ch2,
    gmii_rx_dv_ch2,
    gmii_rx_er_ch2,
    mdc_ch2,
    mdio_i_ch2,
    mdio_o_ch2,
    mdio_t_ch2,
    an_interrupt_ch2,
    speed_is_10_100_ch2,
    speed_is_100_ch2,
    status_vector_ch2,
    sgmii_clk_en_ch3,
    gmii_txd_ch3,
    gmii_tx_en_ch3,
    gmii_tx_er_ch3,
    gmii_rxd_ch3,
    gmii_rx_dv_ch3,
    gmii_rx_er_ch3,
    mdc_ch3,
    mdio_i_ch3,
    mdio_o_ch3,
    mdio_t_ch3,
    an_interrupt_ch3,
    speed_is_10_100_ch3,
    speed_is_100_ch3,
    status_vector_ch3,
    gt_powergood_out,
    independent_clock_bufgdiv4,
    signal_detect);
  input reset;
  input gtrefclk;
  output txp;
  output txn;
  input rxp;
  input rxn;
  output txoutclk;
  output rxoutclk;
  output resetdone;
  input userclk;
  input userclk2;
  input rxuserclk;
  input rxuserclk2;
  input independent_clock_bufg;
  input pma_reset;
  input mmcm_locked;
  output sgmii_clk_en_ch0;
  input [7:0]gmii_txd_ch0;
  input gmii_tx_en_ch0;
  input gmii_tx_er_ch0;
  output [7:0]gmii_rxd_ch0;
  output gmii_rx_dv_ch0;
  output gmii_rx_er_ch0;
  input mdc_ch0;
  input mdio_i_ch0;
  output mdio_o_ch0;
  output mdio_t_ch0;
  output an_interrupt_ch0;
  input speed_is_10_100_ch0;
  input speed_is_100_ch0;
  output [15:0]status_vector_ch0;
  output sgmii_clk_en_ch1;
  input [7:0]gmii_txd_ch1;
  input gmii_tx_en_ch1;
  input gmii_tx_er_ch1;
  output [7:0]gmii_rxd_ch1;
  output gmii_rx_dv_ch1;
  output gmii_rx_er_ch1;
  input mdc_ch1;
  input mdio_i_ch1;
  output mdio_o_ch1;
  output mdio_t_ch1;
  output an_interrupt_ch1;
  input speed_is_10_100_ch1;
  input speed_is_100_ch1;
  output [15:0]status_vector_ch1;
  output sgmii_clk_en_ch2;
  input [7:0]gmii_txd_ch2;
  input gmii_tx_en_ch2;
  input gmii_tx_er_ch2;
  output [7:0]gmii_rxd_ch2;
  output gmii_rx_dv_ch2;
  output gmii_rx_er_ch2;
  input mdc_ch2;
  input mdio_i_ch2;
  output mdio_o_ch2;
  output mdio_t_ch2;
  output an_interrupt_ch2;
  input speed_is_10_100_ch2;
  input speed_is_100_ch2;
  output [15:0]status_vector_ch2;
  output sgmii_clk_en_ch3;
  input [7:0]gmii_txd_ch3;
  input gmii_tx_en_ch3;
  input gmii_tx_er_ch3;
  output [7:0]gmii_rxd_ch3;
  output gmii_rx_dv_ch3;
  output gmii_rx_er_ch3;
  input mdc_ch3;
  input mdio_i_ch3;
  output mdio_o_ch3;
  output mdio_t_ch3;
  output an_interrupt_ch3;
  input speed_is_10_100_ch3;
  input speed_is_100_ch3;
  output [15:0]status_vector_ch3;
  output gt_powergood_out;
  input independent_clock_bufgdiv4;
  input signal_detect;

  wire an_interrupt_ch0;
  wire an_interrupt_ch1;
  wire an_interrupt_ch2;
  wire an_interrupt_ch3;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_ch3;
  wire [7:0]gmii_rxd_ch0;
  wire [7:0]gmii_rxd_ch1;
  wire [7:0]gmii_rxd_ch2;
  wire [7:0]gmii_rxd_ch3;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch3;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch3;
  wire [7:0]gmii_txd_ch0;
  wire [7:0]gmii_txd_ch1;
  wire [7:0]gmii_txd_ch2;
  wire [7:0]gmii_txd_ch3;
  wire gt_powergood_out;
  wire gtrefclk;
  wire independent_clock_bufg;
  wire independent_clock_bufgdiv4;
  wire mdc_ch0;
  wire mdc_ch1;
  wire mdc_ch2;
  wire mdc_ch3;
  wire mdio_i_ch0;
  wire mdio_i_ch1;
  wire mdio_i_ch2;
  wire mdio_i_ch3;
  wire mdio_o_ch0;
  wire mdio_o_ch1;
  wire mdio_o_ch2;
  wire mdio_o_ch3;
  wire mdio_t_ch0;
  wire mdio_t_ch1;
  wire mdio_t_ch2;
  wire mdio_t_ch3;
  wire mmcm_locked;
  wire pma_reset;
  wire reset;
  wire resetdone;
  wire rxn;
  wire rxoutclk;
  wire rxp;
  wire rxuserclk;
  wire rxuserclk2;
  wire sgmii_clk_en_ch0;
  wire sgmii_clk_en_ch1;
  wire sgmii_clk_en_ch2;
  wire sgmii_clk_en_ch3;
  wire signal_detect;
  wire speed_is_100_ch0;
  wire speed_is_100_ch1;
  wire speed_is_100_ch2;
  wire speed_is_100_ch3;
  wire speed_is_10_100_ch0;
  wire speed_is_10_100_ch1;
  wire speed_is_10_100_ch2;
  wire speed_is_10_100_ch3;
  wire [15:0]status_vector_ch0;
  wire [15:0]status_vector_ch1;
  wire [15:0]status_vector_ch2;
  wire [15:0]status_vector_ch3;
  wire txn;
  wire txoutclk;
  wire txp;
  wire userclk;
  wire userclk2;

  quadsgmii_0_TEST_quadsgmii_0_TEST_block inst
       (.an_interrupt_ch0(an_interrupt_ch0),
        .an_interrupt_ch1(an_interrupt_ch1),
        .an_interrupt_ch2(an_interrupt_ch2),
        .an_interrupt_ch3(an_interrupt_ch3),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3),
        .gmii_rx_er_ch0(gmii_rx_er_ch0),
        .gmii_rx_er_ch1(gmii_rx_er_ch1),
        .gmii_rx_er_ch2(gmii_rx_er_ch2),
        .gmii_rx_er_ch3(gmii_rx_er_ch3),
        .gmii_rxd_ch0(gmii_rxd_ch0),
        .gmii_rxd_ch1(gmii_rxd_ch1),
        .gmii_rxd_ch2(gmii_rxd_ch2),
        .gmii_rxd_ch3(gmii_rxd_ch3),
        .gmii_tx_en_ch0(gmii_tx_en_ch0),
        .gmii_tx_en_ch1(gmii_tx_en_ch1),
        .gmii_tx_en_ch2(gmii_tx_en_ch2),
        .gmii_tx_en_ch3(gmii_tx_en_ch3),
        .gmii_tx_er_ch0(gmii_tx_er_ch0),
        .gmii_tx_er_ch1(gmii_tx_er_ch1),
        .gmii_tx_er_ch2(gmii_tx_er_ch2),
        .gmii_tx_er_ch3(gmii_tx_er_ch3),
        .gmii_txd_ch0(gmii_txd_ch0),
        .gmii_txd_ch1(gmii_txd_ch1),
        .gmii_txd_ch2(gmii_txd_ch2),
        .gmii_txd_ch3(gmii_txd_ch3),
        .gt0_powergood_out(gt_powergood_out),
        .gtrefclk(gtrefclk),
        .independent_clock_bufg(independent_clock_bufg),
        .independent_clock_bufgdiv4(independent_clock_bufgdiv4),
        .link_timer_value_ch0({1'b0,1'b0,1'b0,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0}),
        .link_timer_value_ch1({1'b0,1'b0,1'b0,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0}),
        .link_timer_value_ch2({1'b0,1'b0,1'b0,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0}),
        .link_timer_value_ch3({1'b0,1'b0,1'b0,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0}),
        .mdc_ch0(mdc_ch0),
        .mdc_ch1(mdc_ch1),
        .mdc_ch2(mdc_ch2),
        .mdc_ch3(mdc_ch3),
        .mdio_i_ch0(mdio_i_ch0),
        .mdio_i_ch1(mdio_i_ch1),
        .mdio_i_ch2(mdio_i_ch2),
        .mdio_i_ch3(mdio_i_ch3),
        .mdio_o_ch0(mdio_o_ch0),
        .mdio_o_ch1(mdio_o_ch1),
        .mdio_o_ch2(mdio_o_ch2),
        .mdio_o_ch3(mdio_o_ch3),
        .mdio_t_ch0(mdio_t_ch0),
        .mdio_t_ch1(mdio_t_ch1),
        .mdio_t_ch2(mdio_t_ch2),
        .mdio_t_ch3(mdio_t_ch3),
        .mmcm_locked(mmcm_locked),
        .phyad_ch0({1'b0,1'b0,1'b0,1'b0,1'b1}),
        .phyad_ch1({1'b0,1'b0,1'b0,1'b1,1'b0}),
        .phyad_ch2({1'b0,1'b0,1'b0,1'b1,1'b1}),
        .phyad_ch3({1'b0,1'b0,1'b1,1'b0,1'b0}),
        .pma_reset(pma_reset),
        .reset(reset),
        .resetdone(resetdone),
        .rxn(rxn),
        .rxoutclk(rxoutclk),
        .rxp(rxp),
        .rxuserclk(rxuserclk),
        .rxuserclk2(rxuserclk2),
        .sgmii_clk_en_ch0(sgmii_clk_en_ch0),
        .sgmii_clk_en_ch1(sgmii_clk_en_ch1),
        .sgmii_clk_en_ch2(sgmii_clk_en_ch2),
        .sgmii_clk_en_ch3(sgmii_clk_en_ch3),
        .signal_detect(signal_detect),
        .speed_is_100_ch0(speed_is_100_ch0),
        .speed_is_100_ch1(speed_is_100_ch1),
        .speed_is_100_ch2(speed_is_100_ch2),
        .speed_is_100_ch3(speed_is_100_ch3),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .status_vector_ch0(status_vector_ch0),
        .status_vector_ch1(status_vector_ch1),
        .status_vector_ch2(status_vector_ch2),
        .status_vector_ch3(status_vector_ch3),
        .txn(txn),
        .txoutclk(txoutclk),
        .txp(txp),
        .userclk(userclk),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer
   (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ,
    rxresetdone_out,
    gtwiz_reset_clk_freerun_in);
  output \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ;
  input [0:0]rxresetdone_out;
  input [0:0]gtwiz_reset_clk_freerun_in;

  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  (* async_reg = "true" *) wire i_in_meta;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire [0:0]rxresetdone_out;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rxresetdone_out),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_10
   (plllock_rx_sync,
    i_in_out_reg_0,
    \FSM_sequential_sm_reset_rx_reg[1] ,
    cplllock_out,
    gtwiz_reset_clk_freerun_in,
    gtwiz_reset_rx_done_int_reg,
    \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ,
    Q,
    gtwiz_reset_rx_done_int_reg_0);
  output plllock_rx_sync;
  output i_in_out_reg_0;
  output \FSM_sequential_sm_reset_rx_reg[1] ;
  input [0:0]cplllock_out;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input gtwiz_reset_rx_done_int_reg;
  input \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ;
  input [2:0]Q;
  input gtwiz_reset_rx_done_int_reg_0;

  wire \FSM_sequential_sm_reset_rx_reg[1] ;
  wire [2:0]Q;
  wire [0:0]cplllock_out;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire gtwiz_reset_rx_done_int;
  wire gtwiz_reset_rx_done_int_reg;
  wire gtwiz_reset_rx_done_int_reg_0;
  (* async_reg = "true" *) wire i_in_meta;
  wire i_in_out_reg_0;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire plllock_rx_sync;

  LUT6 #(
    .INIT(64'hAAC0FFFFAAC00000)) 
    gtwiz_reset_rx_done_int_i_1
       (.I0(plllock_rx_sync),
        .I1(gtwiz_reset_rx_done_int_reg),
        .I2(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ),
        .I3(Q[0]),
        .I4(gtwiz_reset_rx_done_int),
        .I5(gtwiz_reset_rx_done_int_reg_0),
        .O(i_in_out_reg_0));
  LUT6 #(
    .INIT(64'h4C40000040400000)) 
    gtwiz_reset_rx_done_int_i_2
       (.I0(plllock_rx_sync),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ),
        .I4(Q[1]),
        .I5(gtwiz_reset_rx_done_int_reg),
        .O(gtwiz_reset_rx_done_int));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(cplllock_out),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(plllock_rx_sync),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h88880000F5FF5555)) 
    sm_reset_rx_timer_clr_i_3
       (.I0(Q[1]),
        .I1(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ),
        .I2(plllock_rx_sync),
        .I3(Q[0]),
        .I4(gtwiz_reset_rx_done_int_reg),
        .I5(Q[2]),
        .O(\FSM_sequential_sm_reset_rx_reg[1] ));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_11
   (plllock_tx_sync,
    gtwiz_reset_tx_done_int_reg,
    i_in_out_reg_0,
    cplllock_out,
    gtwiz_reset_clk_freerun_in,
    gtwiz_reset_tx_done_int_reg_0,
    Q,
    sm_reset_tx_timer_sat,
    gtwiz_reset_tx_done_int_reg_1,
    \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ,
    \FSM_sequential_sm_reset_tx_reg[0] );
  output plllock_tx_sync;
  output gtwiz_reset_tx_done_int_reg;
  output i_in_out_reg_0;
  input [0:0]cplllock_out;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input gtwiz_reset_tx_done_int_reg_0;
  input [2:0]Q;
  input sm_reset_tx_timer_sat;
  input gtwiz_reset_tx_done_int_reg_1;
  input \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ;
  input \FSM_sequential_sm_reset_tx_reg[0] ;

  wire \FSM_sequential_sm_reset_tx_reg[0] ;
  wire [2:0]Q;
  wire [0:0]cplllock_out;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire gtwiz_reset_tx_done_int;
  wire gtwiz_reset_tx_done_int_i_2_n_0;
  wire gtwiz_reset_tx_done_int_reg;
  wire gtwiz_reset_tx_done_int_reg_0;
  wire gtwiz_reset_tx_done_int_reg_1;
  (* async_reg = "true" *) wire i_in_meta;
  wire i_in_out_reg_0;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire plllock_tx_sync;
  wire sm_reset_tx_timer_sat;

  LUT6 #(
    .INIT(64'h00CFA00000000000)) 
    \FSM_sequential_sm_reset_tx[2]_i_4 
       (.I0(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ),
        .I1(plllock_tx_sync),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(\FSM_sequential_sm_reset_tx_reg[0] ),
        .O(i_in_out_reg_0));
  LUT3 #(
    .INIT(8'hB8)) 
    gtwiz_reset_tx_done_int_i_1
       (.I0(gtwiz_reset_tx_done_int_i_2_n_0),
        .I1(gtwiz_reset_tx_done_int),
        .I2(gtwiz_reset_tx_done_int_reg_0),
        .O(gtwiz_reset_tx_done_int_reg));
  LUT6 #(
    .INIT(64'h4444444444F44444)) 
    gtwiz_reset_tx_done_int_i_2
       (.I0(Q[0]),
        .I1(plllock_tx_sync),
        .I2(sm_reset_tx_timer_sat),
        .I3(gtwiz_reset_tx_done_int_reg_1),
        .I4(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ),
        .I5(Q[1]),
        .O(gtwiz_reset_tx_done_int_i_2_n_0));
  LUT6 #(
    .INIT(64'h3000404000004040)) 
    gtwiz_reset_tx_done_int_i_3
       (.I0(plllock_tx_sync),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(\FSM_sequential_sm_reset_tx_reg[0] ),
        .I4(Q[0]),
        .I5(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ),
        .O(gtwiz_reset_tx_done_int));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(cplllock_out),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(plllock_tx_sync),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_12
   (gtwiz_reset_rx_cdr_stable_out,
    \FSM_sequential_sm_reset_rx_reg[2] ,
    E,
    sm_reset_rx_cdr_to_sat_reg,
    rxcdrlock_out,
    gtwiz_reset_clk_freerun_in,
    sm_reset_rx_cdr_to_clr_reg,
    Q,
    plllock_rx_sync,
    sm_reset_rx_cdr_to_clr,
    \FSM_sequential_sm_reset_rx_reg[0] ,
    sm_reset_rx_pll_timer_clr,
    gtwiz_reset_rx_datapath_dly,
    gtwiz_reset_rx_pll_and_datapath_dly,
    \FSM_sequential_sm_reset_rx_reg[0]_0 ,
    \FSM_sequential_sm_reset_rx_reg[0]_1 ,
    \FSM_sequential_sm_reset_rx[2]_i_3_0 ,
    sm_reset_rx_cdr_to_sat);
  output [0:0]gtwiz_reset_rx_cdr_stable_out;
  output \FSM_sequential_sm_reset_rx_reg[2] ;
  output [0:0]E;
  output sm_reset_rx_cdr_to_sat_reg;
  input [0:0]rxcdrlock_out;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input sm_reset_rx_cdr_to_clr_reg;
  input [2:0]Q;
  input plllock_rx_sync;
  input sm_reset_rx_cdr_to_clr;
  input \FSM_sequential_sm_reset_rx_reg[0] ;
  input sm_reset_rx_pll_timer_clr;
  input gtwiz_reset_rx_datapath_dly;
  input gtwiz_reset_rx_pll_and_datapath_dly;
  input \FSM_sequential_sm_reset_rx_reg[0]_0 ;
  input \FSM_sequential_sm_reset_rx_reg[0]_1 ;
  input \FSM_sequential_sm_reset_rx[2]_i_3_0 ;
  input sm_reset_rx_cdr_to_sat;

  wire [0:0]E;
  wire \FSM_sequential_sm_reset_rx[2]_i_3_0 ;
  wire \FSM_sequential_sm_reset_rx[2]_i_3_n_0 ;
  wire \FSM_sequential_sm_reset_rx[2]_i_6_n_0 ;
  wire \FSM_sequential_sm_reset_rx_reg[0] ;
  wire \FSM_sequential_sm_reset_rx_reg[0]_0 ;
  wire \FSM_sequential_sm_reset_rx_reg[0]_1 ;
  wire \FSM_sequential_sm_reset_rx_reg[2] ;
  wire [2:0]Q;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire [0:0]gtwiz_reset_rx_cdr_stable_out;
  wire gtwiz_reset_rx_datapath_dly;
  wire gtwiz_reset_rx_pll_and_datapath_dly;
  (* async_reg = "true" *) wire i_in_meta;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire plllock_rx_sync;
  wire [0:0]rxcdrlock_out;
  wire sm_reset_rx_cdr_to_clr;
  wire sm_reset_rx_cdr_to_clr_i_2_n_0;
  wire sm_reset_rx_cdr_to_clr_reg;
  wire sm_reset_rx_cdr_to_sat;
  wire sm_reset_rx_cdr_to_sat_reg;
  wire sm_reset_rx_pll_timer_clr;

  LUT6 #(
    .INIT(64'hEFEEEFEEEFEEEEEE)) 
    \FSM_sequential_sm_reset_rx[2]_i_1 
       (.I0(\FSM_sequential_sm_reset_rx[2]_i_3_n_0 ),
        .I1(\FSM_sequential_sm_reset_rx_reg[0] ),
        .I2(Q[0]),
        .I3(sm_reset_rx_pll_timer_clr),
        .I4(gtwiz_reset_rx_datapath_dly),
        .I5(gtwiz_reset_rx_pll_and_datapath_dly),
        .O(E));
  LUT6 #(
    .INIT(64'hAAAAEEEAAAAAAAEA)) 
    \FSM_sequential_sm_reset_rx[2]_i_3 
       (.I0(\FSM_sequential_sm_reset_rx[2]_i_6_n_0 ),
        .I1(Q[0]),
        .I2(\FSM_sequential_sm_reset_rx_reg[0]_0 ),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(\FSM_sequential_sm_reset_rx_reg[0]_1 ),
        .O(\FSM_sequential_sm_reset_rx[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h000A000AC0C000C0)) 
    \FSM_sequential_sm_reset_rx[2]_i_6 
       (.I0(sm_reset_rx_cdr_to_sat_reg),
        .I1(\FSM_sequential_sm_reset_rx[2]_i_3_0 ),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(plllock_rx_sync),
        .I5(Q[2]),
        .O(\FSM_sequential_sm_reset_rx[2]_i_6_n_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rxcdrlock_out),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(gtwiz_reset_rx_cdr_stable_out),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair494" *) 
  LUT2 #(
    .INIT(4'hE)) 
    rxprogdivreset_out_i_2
       (.I0(sm_reset_rx_cdr_to_sat),
        .I1(gtwiz_reset_rx_cdr_stable_out),
        .O(sm_reset_rx_cdr_to_sat_reg));
  LUT6 #(
    .INIT(64'hFBFFFFFF0800AAAA)) 
    sm_reset_rx_cdr_to_clr_i_1
       (.I0(sm_reset_rx_cdr_to_clr_i_2_n_0),
        .I1(sm_reset_rx_cdr_to_clr_reg),
        .I2(Q[2]),
        .I3(plllock_rx_sync),
        .I4(Q[0]),
        .I5(sm_reset_rx_cdr_to_clr),
        .O(\FSM_sequential_sm_reset_rx_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair494" *) 
  LUT4 #(
    .INIT(16'h00EF)) 
    sm_reset_rx_cdr_to_clr_i_2
       (.I0(sm_reset_rx_cdr_to_sat),
        .I1(gtwiz_reset_rx_cdr_stable_out),
        .I2(Q[2]),
        .I3(Q[1]),
        .O(sm_reset_rx_cdr_to_clr_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_2
   (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ,
    txresetdone_out,
    gtwiz_reset_clk_freerun_in);
  output \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ;
  input [0:0]txresetdone_out;
  input [0:0]gtwiz_reset_clk_freerun_in;

  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  (* async_reg = "true" *) wire i_in_meta;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire [0:0]txresetdone_out;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(txresetdone_out),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_21
   (drprst_in_sync,
    E,
    i_in_out_reg_0,
    D,
    drprst_in,
    drpclk_in,
    \timeout_cntr_reg[0] ,
    drpen_in,
    \addr_i_reg[1] ,
    drpaddr_in,
    \addr_i_reg[1]_0 );
  output drprst_in_sync;
  output [0:0]E;
  output [0:0]i_in_out_reg_0;
  output [0:0]D;
  input [0:0]drprst_in;
  input [0:0]drpclk_in;
  input \timeout_cntr_reg[0] ;
  input [0:0]drpen_in;
  input \addr_i_reg[1] ;
  input [2:0]drpaddr_in;
  input \addr_i_reg[1]_0 ;

  wire [0:0]D;
  wire [0:0]E;
  wire \addr_i_reg[1] ;
  wire \addr_i_reg[1]_0 ;
  wire [2:0]drpaddr_in;
  wire [0:0]drpclk_in;
  wire [0:0]drpen_in;
  wire [0:0]drprst_in;
  wire drprst_in_sync;
  (* async_reg = "true" *) wire i_in_meta;
  wire [0:0]i_in_out_reg_0;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire \timeout_cntr_reg[0] ;

  LUT6 #(
    .INIT(64'h4500550055005500)) 
    \addr_i[1]_i_1 
       (.I0(drprst_in_sync),
        .I1(\addr_i_reg[1] ),
        .I2(drpaddr_in[2]),
        .I3(drpaddr_in[0]),
        .I4(drpaddr_in[1]),
        .I5(\addr_i_reg[1]_0 ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair431" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \addr_i[2]_i_1 
       (.I0(drprst_in_sync),
        .I1(drpen_in),
        .O(i_in_out_reg_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(drprst_in),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(drprst_in_sync),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair431" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \timeout_cntr[7]_i_1 
       (.I0(drprst_in_sync),
        .I1(\timeout_cntr_reg[0] ),
        .O(E));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_24
   (\cpll_cal_state_reg[22] ,
    \cpll_cal_state_reg[0] ,
    GTHE4_CPLLLOCK_IN,
    drpclk_in,
    cal_fail_store_reg,
    Q,
    cal_on_tx_reset_in_sync,
    USER_CPLLLOCK_OUT_reg);
  output \cpll_cal_state_reg[22] ;
  output \cpll_cal_state_reg[0] ;
  input GTHE4_CPLLLOCK_IN;
  input [0:0]drpclk_in;
  input cal_fail_store_reg;
  input [5:0]Q;
  input cal_on_tx_reset_in_sync;
  input USER_CPLLLOCK_OUT_reg;

  wire GTHE4_CPLLLOCK_IN;
  wire [5:0]Q;
  wire USER_CPLLLOCK_OUT_reg;
  wire cal_fail_store_reg;
  wire cal_on_tx_reset_in_sync;
  wire \cpll_cal_state_reg[0] ;
  wire \cpll_cal_state_reg[22] ;
  wire [0:0]drpclk_in;
  (* async_reg = "true" *) wire i_in_meta;
  wire i_in_out_reg_n_0;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;

  LUT5 #(
    .INIT(32'h00000004)) 
    USER_CPLLLOCK_OUT_i_1
       (.I0(Q[0]),
        .I1(i_in_out_reg_n_0),
        .I2(cal_on_tx_reset_in_sync),
        .I3(Q[5]),
        .I4(USER_CPLLLOCK_OUT_reg),
        .O(\cpll_cal_state_reg[0] ));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    cal_fail_store_i_3
       (.I0(cal_fail_store_reg),
        .I1(Q[3]),
        .I2(Q[1]),
        .I3(Q[2]),
        .I4(i_in_out_reg_n_0),
        .I5(Q[4]),
        .O(\cpll_cal_state_reg[22] ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(GTHE4_CPLLLOCK_IN),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(i_in_out_reg_n_0),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_25
   (D,
    txoutclksel_in,
    drpclk_in,
    txoutclksel_int,
    \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[0] );
  output [0:0]D;
  input [0:0]txoutclksel_in;
  input [0:0]drpclk_in;
  input [0:0]txoutclksel_int;
  input \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[0] ;

  wire [0:0]D;
  wire [0:0]drpclk_in;
  (* async_reg = "true" *) wire i_in_meta;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[0] ;
  wire [0:0]txoutclksel_in;
  wire [0:0]txoutclksel_int;
  wire [0:0]user_txoutclksel_sync;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(txoutclksel_in),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(user_txoutclksel_sync),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT[0]_i_1 
       (.I0(txoutclksel_int),
        .I1(\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[0] ),
        .I2(user_txoutclksel_sync),
        .O(D));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_26
   (D,
    txoutclksel_in,
    drpclk_in,
    \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[1] );
  output [0:0]D;
  input [0:0]txoutclksel_in;
  input [0:0]drpclk_in;
  input \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[1] ;

  wire [0:0]D;
  wire [0:0]drpclk_in;
  (* async_reg = "true" *) wire i_in_meta;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[1] ;
  wire [0:0]txoutclksel_in;
  wire [1:1]user_txoutclksel_sync;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(txoutclksel_in),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(user_txoutclksel_sync),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT[1]_i_1 
       (.I0(user_txoutclksel_sync),
        .I1(\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[1] ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_27
   (D,
    txoutclksel_in,
    drpclk_in,
    txoutclksel_int,
    \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2] );
  output [0:0]D;
  input [0:0]txoutclksel_in;
  input [0:0]drpclk_in;
  input [0:0]txoutclksel_int;
  input \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2] ;

  wire [0:0]D;
  wire [0:0]drpclk_in;
  (* async_reg = "true" *) wire i_in_meta;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2] ;
  wire [0:0]txoutclksel_in;
  wire [0:0]txoutclksel_int;
  wire [2:2]user_txoutclksel_sync;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(txoutclksel_in),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(user_txoutclksel_sync),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT[2]_i_1 
       (.I0(txoutclksel_int),
        .I1(\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2] ),
        .I2(user_txoutclksel_sync),
        .O(D));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_28
   (i_in_out_reg_0,
    D,
    \cpll_cal_state_reg[14] ,
    \cpll_cal_state_reg[17] ,
    GTHE4_TXPRGDIVRESETDONE_IN,
    drpclk_in,
    \cpll_cal_state_reg[19] ,
    \cpll_cal_state_reg[19]_0 ,
    Q,
    \cpll_cal_state_reg[30] ,
    \cpll_cal_state_reg[30]_0 ,
    \cpll_cal_state_reg[30]_1 ,
    \cpll_cal_state_reg[29] ,
    \cpll_cal_state_reg[29]_0 ,
    \cpll_cal_state_reg[29]_1 ,
    freq_counter_rst_reg,
    freq_counter_rst_reg_0,
    \cpll_cal_state_reg[31] );
  output i_in_out_reg_0;
  output [3:0]D;
  output \cpll_cal_state_reg[14] ;
  output \cpll_cal_state_reg[17] ;
  input GTHE4_TXPRGDIVRESETDONE_IN;
  input [0:0]drpclk_in;
  input \cpll_cal_state_reg[19] ;
  input \cpll_cal_state_reg[19]_0 ;
  input [13:0]Q;
  input \cpll_cal_state_reg[30] ;
  input \cpll_cal_state_reg[30]_0 ;
  input \cpll_cal_state_reg[30]_1 ;
  input \cpll_cal_state_reg[29] ;
  input \cpll_cal_state_reg[29]_0 ;
  input \cpll_cal_state_reg[29]_1 ;
  input freq_counter_rst_reg;
  input freq_counter_rst_reg_0;
  input \cpll_cal_state_reg[31] ;

  wire [3:0]D;
  wire GTHE4_TXPRGDIVRESETDONE_IN;
  wire [13:0]Q;
  wire \cpll_cal_state[29]_i_3_n_0 ;
  wire \cpll_cal_state[31]_i_3_n_0 ;
  wire \cpll_cal_state_reg[14] ;
  wire \cpll_cal_state_reg[17] ;
  wire \cpll_cal_state_reg[19] ;
  wire \cpll_cal_state_reg[19]_0 ;
  wire \cpll_cal_state_reg[29] ;
  wire \cpll_cal_state_reg[29]_0 ;
  wire \cpll_cal_state_reg[29]_1 ;
  wire \cpll_cal_state_reg[30] ;
  wire \cpll_cal_state_reg[30]_0 ;
  wire \cpll_cal_state_reg[30]_1 ;
  wire \cpll_cal_state_reg[31] ;
  wire [0:0]drpclk_in;
  wire freq_counter_rst_reg;
  wire freq_counter_rst_reg_0;
  (* async_reg = "true" *) wire i_in_meta;
  wire i_in_out_reg_0;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;

  LUT5 #(
    .INIT(32'h80888080)) 
    \cpll_cal_state[19]_i_1 
       (.I0(\cpll_cal_state_reg[19] ),
        .I1(\cpll_cal_state_reg[19]_0 ),
        .I2(Q[3]),
        .I3(i_in_out_reg_0),
        .I4(Q[4]),
        .O(D[0]));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \cpll_cal_state[20]_i_5 
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(i_in_out_reg_0),
        .O(\cpll_cal_state_reg[17] ));
  LUT6 #(
    .INIT(64'h0000000000000100)) 
    \cpll_cal_state[29]_i_1 
       (.I0(Q[7]),
        .I1(Q[6]),
        .I2(Q[5]),
        .I3(\cpll_cal_state_reg[29] ),
        .I4(\cpll_cal_state[29]_i_3_n_0 ),
        .I5(\cpll_cal_state_reg[29]_0 ),
        .O(D[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFBABB)) 
    \cpll_cal_state[29]_i_3 
       (.I0(\cpll_cal_state_reg[29]_1 ),
        .I1(Q[10]),
        .I2(i_in_out_reg_0),
        .I3(Q[11]),
        .I4(Q[9]),
        .I5(Q[8]),
        .O(\cpll_cal_state[29]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000002202)) 
    \cpll_cal_state[30]_i_1 
       (.I0(\cpll_cal_state_reg[30] ),
        .I1(\cpll_cal_state_reg[30]_0 ),
        .I2(Q[11]),
        .I3(i_in_out_reg_0),
        .I4(Q[10]),
        .I5(\cpll_cal_state_reg[30]_1 ),
        .O(D[2]));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \cpll_cal_state[31]_i_1 
       (.I0(\cpll_cal_state_reg[30] ),
        .I1(\cpll_cal_state[31]_i_3_n_0 ),
        .I2(\cpll_cal_state_reg[30]_0 ),
        .I3(Q[9]),
        .I4(Q[8]),
        .I5(Q[10]),
        .O(D[3]));
  LUT5 #(
    .INIT(32'hBFB0BFBF)) 
    \cpll_cal_state[31]_i_3 
       (.I0(\cpll_cal_state_reg[31] ),
        .I1(i_in_out_reg_0),
        .I2(Q[11]),
        .I3(Q[12]),
        .I4(Q[13]),
        .O(\cpll_cal_state[31]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hD0D0D0FF)) 
    freq_counter_rst_i_2
       (.I0(freq_counter_rst_reg),
        .I1(freq_counter_rst_reg_0),
        .I2(Q[0]),
        .I3(\cpll_cal_state_reg[17] ),
        .I4(Q[1]),
        .O(\cpll_cal_state_reg[14] ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(GTHE4_TXPRGDIVRESETDONE_IN),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(i_in_out_reg_0),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_29
   (txprogdivreset_int_reg,
    in0,
    drpclk_in,
    txprogdivreset_int,
    \non_pcie_txoutclksel.GTHE4_TXPROGDIVRESET_OUT_reg );
  output txprogdivreset_int_reg;
  input in0;
  input [0:0]drpclk_in;
  input txprogdivreset_int;
  input \non_pcie_txoutclksel.GTHE4_TXPROGDIVRESET_OUT_reg ;

  wire [0:0]drpclk_in;
  (* async_reg = "true" *) wire i_in_meta;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire in0;
  wire \non_pcie_txoutclksel.GTHE4_TXPROGDIVRESET_OUT_reg ;
  wire txprogdivreset_int;
  wire txprogdivreset_int_reg;
  wire user_txprogdivreset_sync;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(in0),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(user_txprogdivreset_sync),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    \non_pcie_txoutclksel.GTHE4_TXPROGDIVRESET_OUT_i_1 
       (.I0(txprogdivreset_int),
        .I1(\non_pcie_txoutclksel.GTHE4_TXPROGDIVRESET_OUT_reg ),
        .I2(user_txprogdivreset_sync),
        .O(txprogdivreset_int_reg));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_3
   (E,
    gtpowergood_out,
    gtwiz_reset_clk_freerun_in,
    \FSM_sequential_sm_reset_all_reg[0] ,
    Q,
    \FSM_sequential_sm_reset_all_reg[0]_0 );
  output [0:0]E;
  input [0:0]gtpowergood_out;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input \FSM_sequential_sm_reset_all_reg[0] ;
  input [2:0]Q;
  input \FSM_sequential_sm_reset_all_reg[0]_0 ;

  wire [0:0]E;
  wire \FSM_sequential_sm_reset_all_reg[0] ;
  wire \FSM_sequential_sm_reset_all_reg[0]_0 ;
  wire [2:0]Q;
  wire [0:0]gtpowergood_out;
  wire gtpowergood_sync;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  (* async_reg = "true" *) wire i_in_meta;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;

  LUT6 #(
    .INIT(64'hAF0FAF00CFFFCFFF)) 
    \FSM_sequential_sm_reset_all[2]_i_1 
       (.I0(gtpowergood_sync),
        .I1(\FSM_sequential_sm_reset_all_reg[0] ),
        .I2(Q[2]),
        .I3(Q[0]),
        .I4(\FSM_sequential_sm_reset_all_reg[0]_0 ),
        .I5(Q[1]),
        .O(E));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(gtpowergood_out),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(gtpowergood_sync),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_4
   (gtwiz_reset_rx_datapath_dly,
    in0,
    gtwiz_reset_clk_freerun_in);
  output gtwiz_reset_rx_datapath_dly;
  input in0;
  input [0:0]gtwiz_reset_clk_freerun_in;

  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire gtwiz_reset_rx_datapath_dly;
  (* async_reg = "true" *) wire i_in_meta;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire in0;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(in0),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(gtwiz_reset_rx_datapath_dly),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_5
   (gtwiz_reset_rx_pll_and_datapath_dly,
    D,
    in0,
    gtwiz_reset_clk_freerun_in,
    Q,
    \FSM_sequential_sm_reset_rx_reg[0] ,
    \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync );
  output gtwiz_reset_rx_pll_and_datapath_dly;
  output [1:0]D;
  input in0;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input [2:0]Q;
  input \FSM_sequential_sm_reset_rx_reg[0] ;
  input \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ;

  wire [1:0]D;
  wire \FSM_sequential_sm_reset_rx_reg[0] ;
  wire [2:0]Q;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire gtwiz_reset_rx_pll_and_datapath_dly;
  (* async_reg = "true" *) wire i_in_meta;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire in0;

  LUT6 #(
    .INIT(64'hAA55AA55F5EE55EE)) 
    \FSM_sequential_sm_reset_rx[0]_i_1 
       (.I0(Q[2]),
        .I1(gtwiz_reset_rx_pll_and_datapath_dly),
        .I2(\FSM_sequential_sm_reset_rx_reg[0] ),
        .I3(Q[1]),
        .I4(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ),
        .I5(Q[0]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h0000FFFF8F8F000F)) 
    \FSM_sequential_sm_reset_rx[1]_i_1 
       (.I0(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ),
        .I1(\FSM_sequential_sm_reset_rx_reg[0] ),
        .I2(Q[2]),
        .I3(gtwiz_reset_rx_pll_and_datapath_dly),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(D[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(in0),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(gtwiz_reset_rx_pll_and_datapath_dly),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_6
   (E,
    in0,
    gtwiz_reset_clk_freerun_in,
    Q,
    \FSM_sequential_sm_reset_tx_reg[0] ,
    gtwiz_reset_tx_pll_and_datapath_dly,
    \FSM_sequential_sm_reset_tx_reg[0]_0 ,
    \FSM_sequential_sm_reset_tx_reg[0]_1 );
  output [0:0]E;
  input in0;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input [0:0]Q;
  input \FSM_sequential_sm_reset_tx_reg[0] ;
  input gtwiz_reset_tx_pll_and_datapath_dly;
  input \FSM_sequential_sm_reset_tx_reg[0]_0 ;
  input \FSM_sequential_sm_reset_tx_reg[0]_1 ;

  wire [0:0]E;
  wire \FSM_sequential_sm_reset_tx_reg[0] ;
  wire \FSM_sequential_sm_reset_tx_reg[0]_0 ;
  wire \FSM_sequential_sm_reset_tx_reg[0]_1 ;
  wire [0:0]Q;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire gtwiz_reset_tx_datapath_dly;
  wire gtwiz_reset_tx_pll_and_datapath_dly;
  (* async_reg = "true" *) wire i_in_meta;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire in0;

  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF1110)) 
    \FSM_sequential_sm_reset_tx[2]_i_1 
       (.I0(Q),
        .I1(\FSM_sequential_sm_reset_tx_reg[0] ),
        .I2(gtwiz_reset_tx_datapath_dly),
        .I3(gtwiz_reset_tx_pll_and_datapath_dly),
        .I4(\FSM_sequential_sm_reset_tx_reg[0]_0 ),
        .I5(\FSM_sequential_sm_reset_tx_reg[0]_1 ),
        .O(E));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(in0),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(gtwiz_reset_tx_datapath_dly),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_7
   (gtwiz_reset_tx_pll_and_datapath_dly,
    D,
    in0,
    gtwiz_reset_clk_freerun_in,
    Q);
  output gtwiz_reset_tx_pll_and_datapath_dly;
  output [1:0]D;
  input in0;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input [2:0]Q;

  wire [1:0]D;
  wire [2:0]Q;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire gtwiz_reset_tx_pll_and_datapath_dly;
  (* async_reg = "true" *) wire i_in_meta;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire in0;

  (* SOFT_HLUTNM = "soft_lutpair493" *) 
  LUT4 #(
    .INIT(16'h1F1E)) 
    \FSM_sequential_sm_reset_tx[0]_i_1 
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(gtwiz_reset_tx_pll_and_datapath_dly),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair493" *) 
  LUT4 #(
    .INIT(16'h0FF1)) 
    \FSM_sequential_sm_reset_tx[1]_i_1 
       (.I0(Q[2]),
        .I1(gtwiz_reset_tx_pll_and_datapath_dly),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(D[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(in0),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(gtwiz_reset_tx_pll_and_datapath_dly),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_8
   (\FSM_sequential_sm_reset_rx_reg[0] ,
    sm_reset_rx_timer_clr_reg,
    \FSM_sequential_sm_reset_rx_reg[2] ,
    gtwiz_userclk_rx_active_in,
    gtwiz_reset_clk_freerun_in,
    sm_reset_rx_timer_clr_reg_0,
    Q,
    sm_reset_rx_timer_clr_reg_1,
    gtwiz_reset_rx_any_sync,
    \gen_gtwizard_gthe4.rxuserrdy_int ,
    sm_reset_rx_timer_sat);
  output \FSM_sequential_sm_reset_rx_reg[0] ;
  output sm_reset_rx_timer_clr_reg;
  output \FSM_sequential_sm_reset_rx_reg[2] ;
  input [0:0]gtwiz_userclk_rx_active_in;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input sm_reset_rx_timer_clr_reg_0;
  input [2:0]Q;
  input sm_reset_rx_timer_clr_reg_1;
  input gtwiz_reset_rx_any_sync;
  input \gen_gtwizard_gthe4.rxuserrdy_int ;
  input sm_reset_rx_timer_sat;

  wire \FSM_sequential_sm_reset_rx_reg[0] ;
  wire \FSM_sequential_sm_reset_rx_reg[2] ;
  wire [2:0]Q;
  wire \gen_gtwizard_gthe4.rxuserrdy_int ;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire gtwiz_reset_rx_any_sync;
  wire gtwiz_reset_userclk_rx_active_sync;
  wire [0:0]gtwiz_userclk_rx_active_in;
  (* async_reg = "true" *) wire i_in_meta;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire sm_reset_rx_timer_clr_reg;
  wire sm_reset_rx_timer_clr_reg_0;
  wire sm_reset_rx_timer_clr_reg_1;
  wire sm_reset_rx_timer_sat;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(gtwiz_userclk_rx_active_in),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(gtwiz_reset_userclk_rx_active_sync),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFAAF00000800)) 
    rxuserrdy_out_i_1
       (.I0(Q[2]),
        .I1(sm_reset_rx_timer_clr_reg),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(gtwiz_reset_rx_any_sync),
        .I5(\gen_gtwizard_gthe4.rxuserrdy_int ),
        .O(\FSM_sequential_sm_reset_rx_reg[2] ));
  LUT6 #(
    .INIT(64'hFCCCEFFE0CCCE00E)) 
    sm_reset_rx_timer_clr_i_1
       (.I0(sm_reset_rx_timer_clr_reg),
        .I1(sm_reset_rx_timer_clr_reg_0),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[1]),
        .I5(sm_reset_rx_timer_clr_reg_1),
        .O(\FSM_sequential_sm_reset_rx_reg[0] ));
  LUT3 #(
    .INIT(8'h40)) 
    sm_reset_rx_timer_clr_i_2
       (.I0(sm_reset_rx_timer_clr_reg_1),
        .I1(sm_reset_rx_timer_sat),
        .I2(gtwiz_reset_userclk_rx_active_sync),
        .O(sm_reset_rx_timer_clr_reg));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_bit_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_9
   (gtwiz_reset_userclk_tx_active_sync,
    \FSM_sequential_sm_reset_tx_reg[2] ,
    i_in_out_reg_0,
    gtwiz_userclk_tx_active_in,
    gtwiz_reset_clk_freerun_in,
    Q,
    sm_reset_tx_timer_clr_reg,
    \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ,
    sm_reset_tx_timer_clr_reg_0,
    plllock_tx_sync,
    \FSM_sequential_sm_reset_tx_reg[0] ,
    \FSM_sequential_sm_reset_tx_reg[0]_0 ,
    \FSM_sequential_sm_reset_tx_reg[0]_1 ,
    sm_reset_tx_pll_timer_sat);
  output gtwiz_reset_userclk_tx_active_sync;
  output \FSM_sequential_sm_reset_tx_reg[2] ;
  output i_in_out_reg_0;
  input [0:0]gtwiz_userclk_tx_active_in;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input [2:0]Q;
  input sm_reset_tx_timer_clr_reg;
  input \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ;
  input sm_reset_tx_timer_clr_reg_0;
  input plllock_tx_sync;
  input \FSM_sequential_sm_reset_tx_reg[0] ;
  input \FSM_sequential_sm_reset_tx_reg[0]_0 ;
  input \FSM_sequential_sm_reset_tx_reg[0]_1 ;
  input sm_reset_tx_pll_timer_sat;

  wire \FSM_sequential_sm_reset_tx_reg[0] ;
  wire \FSM_sequential_sm_reset_tx_reg[0]_0 ;
  wire \FSM_sequential_sm_reset_tx_reg[0]_1 ;
  wire \FSM_sequential_sm_reset_tx_reg[2] ;
  wire [2:0]Q;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire gtwiz_reset_userclk_tx_active_sync;
  wire [0:0]gtwiz_userclk_tx_active_in;
  (* async_reg = "true" *) wire i_in_meta;
  wire i_in_out_reg_0;
  (* async_reg = "true" *) wire i_in_sync1;
  (* async_reg = "true" *) wire i_in_sync2;
  (* async_reg = "true" *) wire i_in_sync3;
  wire plllock_tx_sync;
  wire sm_reset_tx_pll_timer_sat;
  wire sm_reset_tx_timer_clr_i_2_n_0;
  wire sm_reset_tx_timer_clr_reg;
  wire sm_reset_tx_timer_clr_reg_0;

  LUT6 #(
    .INIT(64'h000F000088888888)) 
    \FSM_sequential_sm_reset_tx[2]_i_5 
       (.I0(\FSM_sequential_sm_reset_tx_reg[0] ),
        .I1(gtwiz_reset_userclk_tx_active_sync),
        .I2(\FSM_sequential_sm_reset_tx_reg[0]_0 ),
        .I3(\FSM_sequential_sm_reset_tx_reg[0]_1 ),
        .I4(sm_reset_tx_pll_timer_sat),
        .I5(Q[0]),
        .O(i_in_out_reg_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(gtwiz_userclk_tx_active_in),
        .Q(i_in_meta),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    i_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync3),
        .Q(gtwiz_reset_userclk_tx_active_sync),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_meta),
        .Q(i_in_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync1),
        .Q(i_in_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    i_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(i_in_sync2),
        .Q(i_in_sync3),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEBEB282B)) 
    sm_reset_tx_timer_clr_i_1
       (.I0(sm_reset_tx_timer_clr_i_2_n_0),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .I4(sm_reset_tx_timer_clr_reg),
        .O(\FSM_sequential_sm_reset_tx_reg[2] ));
  LUT6 #(
    .INIT(64'hA0C0A0C0F0F000F0)) 
    sm_reset_tx_timer_clr_i_2
       (.I0(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ),
        .I1(gtwiz_reset_userclk_tx_active_sync),
        .I2(sm_reset_tx_timer_clr_reg_0),
        .I3(Q[0]),
        .I4(plllock_tx_sync),
        .I5(Q[2]),
        .O(sm_reset_tx_timer_clr_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_gte4_drp_arb" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gte4_drp_arb
   (GTHE4_CHANNEL_DRPEN_OUT,
    GTHE4_CHANNEL_DRPWE_OUT,
    done_reg_0,
    \drp_state_reg[5]_0 ,
    Q,
    \drp_state_reg[1]_0 ,
    \drp_state_reg[0]_0 ,
    \drp_state_reg[4]_0 ,
    \addr_i[1]_i_3_0 ,
    \DO_USR_O_reg[47]_0 ,
    cal_on_tx_drdy,
    drprdy_out,
    \DADDR_O_reg[9]_0 ,
    \DI_O_reg[15]_0 ,
    drprst_in_sync,
    drpclk_in,
    done_reg_1,
    cal_on_tx_drpwe_out,
    \addr_i_reg[27]_0 ,
    drpwe_in,
    drpen_in,
    \gen_gtwizard_gthe4.drprdy_int ,
    drpaddr_in,
    E,
    D,
    \addr_i_reg[2]_0 ,
    \addr_i_reg[2]_1 ,
    \addr_i_reg[27]_1 ,
    \addr_i_reg[7]_0 ,
    \addr_i_reg[6]_0 ,
    \addr_i_reg[5]_0 ,
    \addr_i_reg[3]_0 ,
    \addr_i_reg[0]_0 ,
    \data_i_reg[47]_0 ,
    drpdi_in,
    \data_i_reg[15]_0 );
  output GTHE4_CHANNEL_DRPEN_OUT;
  output GTHE4_CHANNEL_DRPWE_OUT;
  output done_reg_0;
  output \drp_state_reg[5]_0 ;
  output [1:0]Q;
  output \drp_state_reg[1]_0 ;
  output \drp_state_reg[0]_0 ;
  output \drp_state_reg[4]_0 ;
  output \addr_i[1]_i_3_0 ;
  output [31:0]\DO_USR_O_reg[47]_0 ;
  output cal_on_tx_drdy;
  output [0:0]drprdy_out;
  output [9:0]\DADDR_O_reg[9]_0 ;
  output [15:0]\DI_O_reg[15]_0 ;
  input drprst_in_sync;
  input [0:0]drpclk_in;
  input done_reg_1;
  input cal_on_tx_drpwe_out;
  input \addr_i_reg[27]_0 ;
  input [0:0]drpwe_in;
  input [0:0]drpen_in;
  input \gen_gtwizard_gthe4.drprdy_int ;
  input [6:0]drpaddr_in;
  input [0:0]E;
  input [15:0]D;
  input [0:0]\addr_i_reg[2]_0 ;
  input [1:0]\addr_i_reg[2]_1 ;
  input [6:0]\addr_i_reg[27]_1 ;
  input \addr_i_reg[7]_0 ;
  input \addr_i_reg[6]_0 ;
  input \addr_i_reg[5]_0 ;
  input \addr_i_reg[3]_0 ;
  input \addr_i_reg[0]_0 ;
  input [15:0]\data_i_reg[47]_0 ;
  input [14:0]drpdi_in;
  input \data_i_reg[15]_0 ;

  wire [1:1]B;
  wire CEB2;
  wire [15:0]D;
  wire \DADDR_O[9]_i_1_n_0 ;
  wire [9:0]\DADDR_O_reg[9]_0 ;
  wire DEN_O_i_1_n_0;
  wire DEN_O_i_2_n_0;
  wire \DI_O[15]_i_1_n_0 ;
  wire [15:0]\DI_O_reg[15]_0 ;
  wire [47:32]DO_USR_O0;
  wire [31:0]\DO_USR_O_reg[47]_0 ;
  wire \DRDY_USR_O[0]_i_1_n_0 ;
  wire \DRDY_USR_O[2]_i_1_n_0 ;
  wire \DRDY_USR_O[2]_i_2_n_0 ;
  wire [0:0]E;
  wire GTHE4_CHANNEL_DRPEN_OUT;
  wire GTHE4_CHANNEL_DRPWE_OUT;
  wire [1:0]Q;
  wire [27:0]addr_i;
  wire \addr_i[1]_i_3_0 ;
  wire \addr_i_reg[0]_0 ;
  wire \addr_i_reg[27]_0 ;
  wire [6:0]\addr_i_reg[27]_1 ;
  wire [0:0]\addr_i_reg[2]_0 ;
  wire [1:0]\addr_i_reg[2]_1 ;
  wire \addr_i_reg[3]_0 ;
  wire \addr_i_reg[5]_0 ;
  wire \addr_i_reg[6]_0 ;
  wire \addr_i_reg[7]_0 ;
  wire [3:0]arb_state;
  wire \arb_state[3]_i_2_n_0 ;
  wire \arb_state_reg_n_0_[0] ;
  wire \arb_state_reg_n_0_[1] ;
  wire \arb_state_reg_n_0_[2] ;
  wire \arb_state_reg_n_0_[3] ;
  wire cal_on_tx_drdy;
  wire cal_on_tx_drpwe_out;
  wire daddr;
  wire [9:0]daddr0;
  wire \daddr_reg_n_0_[0] ;
  wire \daddr_reg_n_0_[1] ;
  wire \daddr_reg_n_0_[2] ;
  wire \daddr_reg_n_0_[3] ;
  wire \daddr_reg_n_0_[4] ;
  wire \daddr_reg_n_0_[5] ;
  wire \daddr_reg_n_0_[6] ;
  wire \daddr_reg_n_0_[7] ;
  wire \daddr_reg_n_0_[8] ;
  wire \daddr_reg_n_0_[9] ;
  wire [47:0]data_i;
  wire \data_i_reg[15]_0 ;
  wire [15:0]\data_i_reg[47]_0 ;
  wire [15:0]di;
  wire \di[0]_i_1_n_0 ;
  wire \di[10]_i_1_n_0 ;
  wire \di[11]_i_1_n_0 ;
  wire \di[12]_i_1_n_0 ;
  wire \di[13]_i_1_n_0 ;
  wire \di[14]_i_1_n_0 ;
  wire \di[15]_i_1_n_0 ;
  wire \di[1]_i_1_n_0 ;
  wire \di[2]_i_1_n_0 ;
  wire \di[3]_i_1_n_0 ;
  wire \di[4]_i_1_n_0 ;
  wire \di[5]_i_1_n_0 ;
  wire \di[6]_i_1_n_0 ;
  wire \di[7]_i_1_n_0 ;
  wire \di[8]_i_1_n_0 ;
  wire \di[9]_i_1_n_0 ;
  wire do_r;
  wire done_i_5_n_0;
  wire done_reg_0;
  wire done_reg_1;
  wire [5:0]drp_state;
  wire \drp_state[0]_i_2_n_0 ;
  wire \drp_state[2]_i_2_n_0 ;
  wire \drp_state[4]_i_2_n_0 ;
  wire \drp_state[5]_i_2__0_n_0 ;
  wire \drp_state[6]_i_2__0_n_0 ;
  wire \drp_state[6]_i_3_n_0 ;
  wire \drp_state_reg[0]_0 ;
  wire \drp_state_reg[1]_0 ;
  wire \drp_state_reg[4]_0 ;
  wire \drp_state_reg[5]_0 ;
  wire \drp_state_reg_n_0_[0] ;
  wire \drp_state_reg_n_0_[2] ;
  wire \drp_state_reg_n_0_[4] ;
  wire \drp_state_reg_n_0_[5] ;
  wire [6:0]drpaddr_in;
  wire [0:0]drpclk_in;
  wire [14:0]drpdi_in;
  wire [0:0]drpen_in;
  wire [0:0]drprdy_out;
  wire drprst_in_sync;
  wire [0:0]drpwe_in;
  wire [2:0]en;
  wire \en[0]_i_2_n_0 ;
  wire \en[2]_i_2_n_0 ;
  wire \gen_gtwizard_gthe4.drprdy_int ;
  wire \idx[0]__0_i_2_n_0 ;
  wire \idx_reg[0]__0_n_0 ;
  wire \idx_reg[1]__0_n_0 ;
  wire [47:15]p_0_in;
  wire rd_i_1_n_0;
  wire rd_reg_n_0;
  wire [7:0]timeout_cntr;
  wire \timeout_cntr[5]_i_2_n_0 ;
  wire \timeout_cntr[7]_i_4_n_0 ;
  wire \timeout_cntr_reg_n_0_[0] ;
  wire \timeout_cntr_reg_n_0_[1] ;
  wire \timeout_cntr_reg_n_0_[2] ;
  wire \timeout_cntr_reg_n_0_[3] ;
  wire \timeout_cntr_reg_n_0_[4] ;
  wire \timeout_cntr_reg_n_0_[5] ;
  wire \timeout_cntr_reg_n_0_[6] ;
  wire \timeout_cntr_reg_n_0_[7] ;
  wire [2:0]we;
  wire \we[0]_i_1_n_0 ;
  wire \we[2]_i_1_n_0 ;
  wire \we_reg_n_0_[0] ;
  wire \we_reg_n_0_[2] ;
  wire wr;
  wire wr_i_2_n_0;
  wire wr_reg_n_0;

  LUT6 #(
    .INIT(64'h0000000000000104)) 
    \DADDR_O[9]_i_1 
       (.I0(\drp_state_reg_n_0_[2] ),
        .I1(Q[0]),
        .I2(\drp_state_reg_n_0_[0] ),
        .I3(\drp_state_reg_n_0_[4] ),
        .I4(Q[1]),
        .I5(\drp_state_reg_n_0_[5] ),
        .O(\DADDR_O[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \DADDR_O_reg[0] 
       (.C(drpclk_in),
        .CE(\DADDR_O[9]_i_1_n_0 ),
        .D(\daddr_reg_n_0_[0] ),
        .Q(\DADDR_O_reg[9]_0 [0]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DADDR_O_reg[1] 
       (.C(drpclk_in),
        .CE(\DADDR_O[9]_i_1_n_0 ),
        .D(\daddr_reg_n_0_[1] ),
        .Q(\DADDR_O_reg[9]_0 [1]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DADDR_O_reg[2] 
       (.C(drpclk_in),
        .CE(\DADDR_O[9]_i_1_n_0 ),
        .D(\daddr_reg_n_0_[2] ),
        .Q(\DADDR_O_reg[9]_0 [2]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DADDR_O_reg[3] 
       (.C(drpclk_in),
        .CE(\DADDR_O[9]_i_1_n_0 ),
        .D(\daddr_reg_n_0_[3] ),
        .Q(\DADDR_O_reg[9]_0 [3]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DADDR_O_reg[4] 
       (.C(drpclk_in),
        .CE(\DADDR_O[9]_i_1_n_0 ),
        .D(\daddr_reg_n_0_[4] ),
        .Q(\DADDR_O_reg[9]_0 [4]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DADDR_O_reg[5] 
       (.C(drpclk_in),
        .CE(\DADDR_O[9]_i_1_n_0 ),
        .D(\daddr_reg_n_0_[5] ),
        .Q(\DADDR_O_reg[9]_0 [5]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DADDR_O_reg[6] 
       (.C(drpclk_in),
        .CE(\DADDR_O[9]_i_1_n_0 ),
        .D(\daddr_reg_n_0_[6] ),
        .Q(\DADDR_O_reg[9]_0 [6]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DADDR_O_reg[7] 
       (.C(drpclk_in),
        .CE(\DADDR_O[9]_i_1_n_0 ),
        .D(\daddr_reg_n_0_[7] ),
        .Q(\DADDR_O_reg[9]_0 [7]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DADDR_O_reg[8] 
       (.C(drpclk_in),
        .CE(\DADDR_O[9]_i_1_n_0 ),
        .D(\daddr_reg_n_0_[8] ),
        .Q(\DADDR_O_reg[9]_0 [8]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DADDR_O_reg[9] 
       (.C(drpclk_in),
        .CE(\DADDR_O[9]_i_1_n_0 ),
        .D(\daddr_reg_n_0_[9] ),
        .Q(\DADDR_O_reg[9]_0 [9]),
        .R(drprst_in_sync));
  LUT6 #(
    .INIT(64'h0000000000000116)) 
    DEN_O_i_1
       (.I0(\drp_state_reg_n_0_[4] ),
        .I1(\drp_state_reg_n_0_[5] ),
        .I2(Q[0]),
        .I3(\drp_state_reg_n_0_[2] ),
        .I4(Q[1]),
        .I5(\drp_state_reg_n_0_[0] ),
        .O(DEN_O_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair433" *) 
  LUT2 #(
    .INIT(4'h1)) 
    DEN_O_i_2
       (.I0(\drp_state_reg_n_0_[5] ),
        .I1(\drp_state_reg_n_0_[2] ),
        .O(DEN_O_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    DEN_O_reg
       (.C(drpclk_in),
        .CE(DEN_O_i_1_n_0),
        .D(DEN_O_i_2_n_0),
        .Q(GTHE4_CHANNEL_DRPEN_OUT),
        .R(drprst_in_sync));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    \DI_O[15]_i_1 
       (.I0(\drp_state_reg_n_0_[5] ),
        .I1(Q[1]),
        .I2(\drp_state_reg_n_0_[4] ),
        .I3(\drp_state_reg_n_0_[0] ),
        .I4(Q[0]),
        .I5(\drp_state_reg_n_0_[2] ),
        .O(\DI_O[15]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[0] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[0]),
        .Q(\DI_O_reg[15]_0 [0]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[10] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[10]),
        .Q(\DI_O_reg[15]_0 [10]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[11] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[11]),
        .Q(\DI_O_reg[15]_0 [11]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[12] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[12]),
        .Q(\DI_O_reg[15]_0 [12]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[13] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[13]),
        .Q(\DI_O_reg[15]_0 [13]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[14] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[14]),
        .Q(\DI_O_reg[15]_0 [14]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[15] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[15]),
        .Q(\DI_O_reg[15]_0 [15]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[1] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[1]),
        .Q(\DI_O_reg[15]_0 [1]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[2] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[2]),
        .Q(\DI_O_reg[15]_0 [2]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[3] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[3]),
        .Q(\DI_O_reg[15]_0 [3]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[4] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[4]),
        .Q(\DI_O_reg[15]_0 [4]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[5] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[5]),
        .Q(\DI_O_reg[15]_0 [5]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[6] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[6]),
        .Q(\DI_O_reg[15]_0 [6]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[7] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[7]),
        .Q(\DI_O_reg[15]_0 [7]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[8] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[8]),
        .Q(\DI_O_reg[15]_0 [8]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DI_O_reg[9] 
       (.C(drpclk_in),
        .CE(\DI_O[15]_i_1_n_0 ),
        .D(di[9]),
        .Q(\DI_O_reg[15]_0 [9]),
        .R(drprst_in_sync));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \DO_USR_O[15]_i_1 
       (.I0(\arb_state_reg_n_0_[3] ),
        .I1(\arb_state_reg_n_0_[2] ),
        .I2(\arb_state_reg_n_0_[1] ),
        .I3(\arb_state_reg_n_0_[0] ),
        .I4(\idx_reg[0]__0_n_0 ),
        .I5(\idx_reg[1]__0_n_0 ),
        .O(p_0_in[15]));
  LUT6 #(
    .INIT(64'h0000000000040000)) 
    \DO_USR_O[47]_i_1 
       (.I0(\arb_state_reg_n_0_[3] ),
        .I1(\arb_state_reg_n_0_[2] ),
        .I2(\arb_state_reg_n_0_[1] ),
        .I3(\arb_state_reg_n_0_[0] ),
        .I4(\idx_reg[1]__0_n_0 ),
        .I5(\idx_reg[0]__0_n_0 ),
        .O(p_0_in[47]));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[0] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[32]),
        .Q(\DO_USR_O_reg[47]_0 [0]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[10] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[42]),
        .Q(\DO_USR_O_reg[47]_0 [10]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[11] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[43]),
        .Q(\DO_USR_O_reg[47]_0 [11]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[12] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[44]),
        .Q(\DO_USR_O_reg[47]_0 [12]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[13] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[45]),
        .Q(\DO_USR_O_reg[47]_0 [13]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[14] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[46]),
        .Q(\DO_USR_O_reg[47]_0 [14]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[15] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[47]),
        .Q(\DO_USR_O_reg[47]_0 [15]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[1] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[33]),
        .Q(\DO_USR_O_reg[47]_0 [1]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[2] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[34]),
        .Q(\DO_USR_O_reg[47]_0 [2]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[32] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[32]),
        .Q(\DO_USR_O_reg[47]_0 [16]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[33] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[33]),
        .Q(\DO_USR_O_reg[47]_0 [17]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[34] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[34]),
        .Q(\DO_USR_O_reg[47]_0 [18]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[35] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[35]),
        .Q(\DO_USR_O_reg[47]_0 [19]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[36] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[36]),
        .Q(\DO_USR_O_reg[47]_0 [20]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[37] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[37]),
        .Q(\DO_USR_O_reg[47]_0 [21]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[38] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[38]),
        .Q(\DO_USR_O_reg[47]_0 [22]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[39] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[39]),
        .Q(\DO_USR_O_reg[47]_0 [23]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[3] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[35]),
        .Q(\DO_USR_O_reg[47]_0 [3]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[40] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[40]),
        .Q(\DO_USR_O_reg[47]_0 [24]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[41] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[41]),
        .Q(\DO_USR_O_reg[47]_0 [25]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[42] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[42]),
        .Q(\DO_USR_O_reg[47]_0 [26]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[43] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[43]),
        .Q(\DO_USR_O_reg[47]_0 [27]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[44] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[44]),
        .Q(\DO_USR_O_reg[47]_0 [28]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[45] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[45]),
        .Q(\DO_USR_O_reg[47]_0 [29]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[46] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[46]),
        .Q(\DO_USR_O_reg[47]_0 [30]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[47] 
       (.C(drpclk_in),
        .CE(p_0_in[47]),
        .D(DO_USR_O0[47]),
        .Q(\DO_USR_O_reg[47]_0 [31]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[4] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[36]),
        .Q(\DO_USR_O_reg[47]_0 [4]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[5] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[37]),
        .Q(\DO_USR_O_reg[47]_0 [5]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[6] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[38]),
        .Q(\DO_USR_O_reg[47]_0 [6]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[7] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[39]),
        .Q(\DO_USR_O_reg[47]_0 [7]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[8] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[40]),
        .Q(\DO_USR_O_reg[47]_0 [8]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DO_USR_O_reg[9] 
       (.C(drpclk_in),
        .CE(p_0_in[15]),
        .D(DO_USR_O0[41]),
        .Q(\DO_USR_O_reg[47]_0 [9]),
        .R(drprst_in_sync));
  LUT6 #(
    .INIT(64'hFFFBFFFF00020000)) 
    \DRDY_USR_O[0]_i_1 
       (.I0(\arb_state_reg_n_0_[2] ),
        .I1(\arb_state_reg_n_0_[3] ),
        .I2(\arb_state_reg_n_0_[1] ),
        .I3(\arb_state_reg_n_0_[0] ),
        .I4(\idx[0]__0_i_2_n_0 ),
        .I5(drprdy_out),
        .O(\DRDY_USR_O[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFB00000002)) 
    \DRDY_USR_O[2]_i_1 
       (.I0(\arb_state_reg_n_0_[2] ),
        .I1(\arb_state_reg_n_0_[3] ),
        .I2(\arb_state_reg_n_0_[1] ),
        .I3(\arb_state_reg_n_0_[0] ),
        .I4(\DRDY_USR_O[2]_i_2_n_0 ),
        .I5(cal_on_tx_drdy),
        .O(\DRDY_USR_O[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair438" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \DRDY_USR_O[2]_i_2 
       (.I0(\idx_reg[0]__0_n_0 ),
        .I1(\idx_reg[1]__0_n_0 ),
        .O(\DRDY_USR_O[2]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \DRDY_USR_O_reg[0] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(\DRDY_USR_O[0]_i_1_n_0 ),
        .Q(drprdy_out),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \DRDY_USR_O_reg[2] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(\DRDY_USR_O[2]_i_1_n_0 ),
        .Q(cal_on_tx_drdy),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    DWE_O_reg
       (.C(drpclk_in),
        .CE(DEN_O_i_1_n_0),
        .D(\drp_state_reg_n_0_[4] ),
        .Q(GTHE4_CHANNEL_DRPWE_OUT),
        .R(drprst_in_sync));
  LUT6 #(
    .INIT(64'h0000000000000400)) 
    \addr_i[1]_i_3 
       (.I0(drpaddr_in[3]),
        .I1(drpaddr_in[1]),
        .I2(drpaddr_in[4]),
        .I3(drpaddr_in[0]),
        .I4(drpaddr_in[6]),
        .I5(drpaddr_in[5]),
        .O(\addr_i[1]_i_3_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[0] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(\addr_i_reg[0]_0 ),
        .Q(addr_i[0]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[1] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[2]_0 ),
        .D(\addr_i_reg[2]_1 [0]),
        .Q(addr_i[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[21] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\addr_i_reg[27]_1 [0]),
        .Q(addr_i[21]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[22] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\addr_i_reg[27]_1 [1]),
        .Q(addr_i[22]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[23] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\addr_i_reg[27]_1 [2]),
        .Q(addr_i[23]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[24] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\addr_i_reg[27]_1 [3]),
        .Q(addr_i[24]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[25] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\addr_i_reg[27]_1 [4]),
        .Q(addr_i[25]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[26] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\addr_i_reg[27]_1 [5]),
        .Q(addr_i[26]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[27] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\addr_i_reg[27]_1 [6]),
        .Q(addr_i[27]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[2] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[2]_0 ),
        .D(\addr_i_reg[2]_1 [1]),
        .Q(addr_i[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[3] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(\addr_i_reg[3]_0 ),
        .Q(addr_i[3]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[4] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpaddr_in[2]),
        .Q(addr_i[4]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[5] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(\addr_i_reg[5]_0 ),
        .Q(addr_i[5]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[6] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(\addr_i_reg[6]_0 ),
        .Q(addr_i[6]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[7] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(\addr_i_reg[7]_0 ),
        .Q(addr_i[7]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[8] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpaddr_in[5]),
        .Q(addr_i[8]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \addr_i_reg[9] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpaddr_in[6]),
        .Q(addr_i[9]),
        .R(drprst_in_sync));
  LUT4 #(
    .INIT(16'hFEEB)) 
    \arb_state[0]_i_1 
       (.I0(\arb_state_reg_n_0_[3] ),
        .I1(\arb_state_reg_n_0_[2] ),
        .I2(\arb_state_reg_n_0_[1] ),
        .I3(\arb_state_reg_n_0_[0] ),
        .O(arb_state[0]));
  LUT6 #(
    .INIT(64'h0005000000020002)) 
    \arb_state[1]_i_1 
       (.I0(\arb_state_reg_n_0_[1] ),
        .I1(done_reg_0),
        .I2(\arb_state_reg_n_0_[2] ),
        .I3(\arb_state_reg_n_0_[3] ),
        .I4(\arb_state[3]_i_2_n_0 ),
        .I5(\arb_state_reg_n_0_[0] ),
        .O(arb_state[1]));
  LUT5 #(
    .INIT(32'h00000008)) 
    \arb_state[2]_i_1 
       (.I0(done_reg_0),
        .I1(\arb_state_reg_n_0_[1] ),
        .I2(\arb_state_reg_n_0_[0] ),
        .I3(\arb_state_reg_n_0_[3] ),
        .I4(\arb_state_reg_n_0_[2] ),
        .O(arb_state[2]));
  LUT5 #(
    .INIT(32'h00020102)) 
    \arb_state[3]_i_1 
       (.I0(\arb_state_reg_n_0_[2] ),
        .I1(\arb_state_reg_n_0_[1] ),
        .I2(\arb_state_reg_n_0_[3] ),
        .I3(\arb_state_reg_n_0_[0] ),
        .I4(\arb_state[3]_i_2_n_0 ),
        .O(arb_state[3]));
  (* SOFT_HLUTNM = "soft_lutpair438" *) 
  LUT4 #(
    .INIT(16'h88B8)) 
    \arb_state[3]_i_2 
       (.I0(en[2]),
        .I1(\idx_reg[1]__0_n_0 ),
        .I2(en[0]),
        .I3(\idx_reg[0]__0_n_0 ),
        .O(\arb_state[3]_i_2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \arb_state_reg[0] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(arb_state[0]),
        .Q(\arb_state_reg_n_0_[0] ),
        .S(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[1] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(arb_state[1]),
        .Q(\arb_state_reg_n_0_[1] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[2] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(arb_state[2]),
        .Q(\arb_state_reg_n_0_[2] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \arb_state_reg[3] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(arb_state[3]),
        .Q(\arb_state_reg_n_0_[3] ),
        .R(drprst_in_sync));
  (* SOFT_HLUTNM = "soft_lutpair445" *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \daddr[0]_i_1 
       (.I0(addr_i[26]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(addr_i[0]),
        .O(daddr0[0]));
  LUT4 #(
    .INIT(16'h2320)) 
    \daddr[1]_i_1 
       (.I0(addr_i[21]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(addr_i[1]),
        .O(daddr0[1]));
  LUT4 #(
    .INIT(16'h2320)) 
    \daddr[2]_i_1 
       (.I0(addr_i[22]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(addr_i[2]),
        .O(daddr0[2]));
  LUT4 #(
    .INIT(16'h2320)) 
    \daddr[3]_i_1 
       (.I0(addr_i[23]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(addr_i[3]),
        .O(daddr0[3]));
  LUT4 #(
    .INIT(16'h2320)) 
    \daddr[4]_i_1 
       (.I0(addr_i[24]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(addr_i[4]),
        .O(daddr0[4]));
  LUT4 #(
    .INIT(16'h2320)) 
    \daddr[5]_i_1 
       (.I0(addr_i[25]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(addr_i[5]),
        .O(daddr0[5]));
  (* SOFT_HLUTNM = "soft_lutpair445" *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \daddr[6]_i_1 
       (.I0(addr_i[26]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(addr_i[6]),
        .O(daddr0[6]));
  (* SOFT_HLUTNM = "soft_lutpair439" *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \daddr[7]_i_1 
       (.I0(addr_i[27]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(addr_i[7]),
        .O(daddr0[7]));
  (* SOFT_HLUTNM = "soft_lutpair441" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \daddr[8]_i_1 
       (.I0(addr_i[8]),
        .I1(\idx_reg[1]__0_n_0 ),
        .I2(\idx_reg[0]__0_n_0 ),
        .O(daddr0[8]));
  LUT5 #(
    .INIT(32'h00020000)) 
    \daddr[9]_i_1 
       (.I0(\arb_state[3]_i_2_n_0 ),
        .I1(\arb_state_reg_n_0_[3] ),
        .I2(\arb_state_reg_n_0_[2] ),
        .I3(\arb_state_reg_n_0_[1] ),
        .I4(\arb_state_reg_n_0_[0] ),
        .O(daddr));
  (* SOFT_HLUTNM = "soft_lutpair440" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \daddr[9]_i_2 
       (.I0(addr_i[9]),
        .I1(\idx_reg[1]__0_n_0 ),
        .I2(\idx_reg[0]__0_n_0 ),
        .O(daddr0[9]));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[0] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(daddr0[0]),
        .Q(\daddr_reg_n_0_[0] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[1] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(daddr0[1]),
        .Q(\daddr_reg_n_0_[1] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[2] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(daddr0[2]),
        .Q(\daddr_reg_n_0_[2] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[3] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(daddr0[3]),
        .Q(\daddr_reg_n_0_[3] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[4] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(daddr0[4]),
        .Q(\daddr_reg_n_0_[4] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[5] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(daddr0[5]),
        .Q(\daddr_reg_n_0_[5] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[6] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(daddr0[6]),
        .Q(\daddr_reg_n_0_[6] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[7] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(daddr0[7]),
        .Q(\daddr_reg_n_0_[7] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[8] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(daddr0[8]),
        .Q(\daddr_reg_n_0_[8] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[9] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(daddr0[9]),
        .Q(\daddr_reg_n_0_[9] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[0] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[0]),
        .Q(data_i[0]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[10] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[10]),
        .Q(data_i[10]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[11] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[11]),
        .Q(data_i[11]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[12] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[12]),
        .Q(data_i[12]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[13] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[13]),
        .Q(data_i[13]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[14] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[14]),
        .Q(data_i[14]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[15] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(\data_i_reg[15]_0 ),
        .Q(data_i[15]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[1] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[1]),
        .Q(data_i[1]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[2] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[2]),
        .Q(data_i[2]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[32] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [0]),
        .Q(data_i[32]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[33] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [1]),
        .Q(data_i[33]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[34] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [2]),
        .Q(data_i[34]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[35] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [3]),
        .Q(data_i[35]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[36] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [4]),
        .Q(data_i[36]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[37] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [5]),
        .Q(data_i[37]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[38] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [6]),
        .Q(data_i[38]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[39] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [7]),
        .Q(data_i[39]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[3] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[3]),
        .Q(data_i[3]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[40] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [8]),
        .Q(data_i[40]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[41] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [9]),
        .Q(data_i[41]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[42] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [10]),
        .Q(data_i[42]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[43] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [11]),
        .Q(data_i[43]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[44] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [12]),
        .Q(data_i[44]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[45] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [13]),
        .Q(data_i[45]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[46] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [14]),
        .Q(data_i[46]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[47] 
       (.C(drpclk_in),
        .CE(\addr_i_reg[27]_0 ),
        .D(\data_i_reg[47]_0 [15]),
        .Q(data_i[47]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[4] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[4]),
        .Q(data_i[4]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[5] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[5]),
        .Q(data_i[5]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[6] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[6]),
        .Q(data_i[6]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[7] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[7]),
        .Q(data_i[7]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[8] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[8]),
        .Q(data_i[8]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \data_i_reg[9] 
       (.C(drpclk_in),
        .CE(drpen_in),
        .D(drpdi_in[9]),
        .Q(data_i[9]),
        .R(drprst_in_sync));
  (* SOFT_HLUTNM = "soft_lutpair444" *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \di[0]_i_1 
       (.I0(data_i[32]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[0]),
        .O(\di[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \di[10]_i_1 
       (.I0(data_i[42]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[10]),
        .O(\di[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair441" *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \di[11]_i_1 
       (.I0(data_i[43]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[11]),
        .O(\di[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair440" *) 
  LUT4 #(
    .INIT(16'h2320)) 
    \di[12]_i_1 
       (.I0(data_i[44]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[12]),
        .O(\di[12]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \di[13]_i_1 
       (.I0(data_i[45]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[13]),
        .O(\di[13]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \di[14]_i_1 
       (.I0(data_i[46]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[14]),
        .O(\di[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \di[15]_i_1 
       (.I0(data_i[47]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[15]),
        .O(\di[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \di[1]_i_1 
       (.I0(data_i[33]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[1]),
        .O(\di[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \di[2]_i_1 
       (.I0(data_i[34]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[2]),
        .O(\di[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \di[3]_i_1 
       (.I0(data_i[35]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[3]),
        .O(\di[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \di[4]_i_1 
       (.I0(data_i[36]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[4]),
        .O(\di[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \di[5]_i_1 
       (.I0(data_i[37]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[5]),
        .O(\di[5]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \di[6]_i_1 
       (.I0(data_i[38]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[6]),
        .O(\di[6]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \di[7]_i_1 
       (.I0(data_i[39]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[7]),
        .O(\di[7]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \di[8]_i_1 
       (.I0(data_i[40]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[8]),
        .O(\di[8]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2320)) 
    \di[9]_i_1 
       (.I0(data_i[41]),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(data_i[9]),
        .O(\di[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[0] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[0]_i_1_n_0 ),
        .Q(di[0]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[10] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[10]_i_1_n_0 ),
        .Q(di[10]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[11] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[11]_i_1_n_0 ),
        .Q(di[11]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[12] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[12]_i_1_n_0 ),
        .Q(di[12]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[13] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[13]_i_1_n_0 ),
        .Q(di[13]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[14] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[14]_i_1_n_0 ),
        .Q(di[14]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[15] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[15]_i_1_n_0 ),
        .Q(di[15]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[1] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[1]_i_1_n_0 ),
        .Q(di[1]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[2] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[2]_i_1_n_0 ),
        .Q(di[2]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[3] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[3]_i_1_n_0 ),
        .Q(di[3]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[4] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[4]_i_1_n_0 ),
        .Q(di[4]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[5] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[5]_i_1_n_0 ),
        .Q(di[5]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[6] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[6]_i_1_n_0 ),
        .Q(di[6]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[7] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[7]_i_1_n_0 ),
        .Q(di[7]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[8] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[8]_i_1_n_0 ),
        .Q(di[8]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \di_reg[9] 
       (.C(drpclk_in),
        .CE(daddr),
        .D(\di[9]_i_1_n_0 ),
        .Q(di[9]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[0] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[0]),
        .Q(DO_USR_O0[32]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[10] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[10]),
        .Q(DO_USR_O0[42]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[11] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[11]),
        .Q(DO_USR_O0[43]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[12] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[12]),
        .Q(DO_USR_O0[44]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[13] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[13]),
        .Q(DO_USR_O0[45]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[14] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[14]),
        .Q(DO_USR_O0[46]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[15] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[15]),
        .Q(DO_USR_O0[47]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[1] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[1]),
        .Q(DO_USR_O0[33]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[2] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[2]),
        .Q(DO_USR_O0[34]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[3] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[3]),
        .Q(DO_USR_O0[35]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[4] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[4]),
        .Q(DO_USR_O0[36]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[5] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[5]),
        .Q(DO_USR_O0[37]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[6] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[6]),
        .Q(DO_USR_O0[38]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[7] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[7]),
        .Q(DO_USR_O0[39]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[8] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[8]),
        .Q(DO_USR_O0[40]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \do_r_reg[9] 
       (.C(drpclk_in),
        .CE(do_r),
        .D(D[9]),
        .Q(DO_USR_O0[41]),
        .R(drprst_in_sync));
  (* SOFT_HLUTNM = "soft_lutpair432" *) 
  LUT5 #(
    .INIT(32'hAAAAFFBF)) 
    done_i_2
       (.I0(\drp_state_reg_n_0_[4] ),
        .I1(\timeout_cntr_reg_n_0_[7] ),
        .I2(\timeout_cntr_reg_n_0_[6] ),
        .I3(\timeout_cntr[7]_i_4_n_0 ),
        .I4(\gen_gtwizard_gthe4.drprdy_int ),
        .O(\drp_state_reg[4]_0 ));
  LUT6 #(
    .INIT(64'h0000000000000334)) 
    done_i_3
       (.I0(\drp_state[6]_i_2__0_n_0 ),
        .I1(\drp_state_reg_n_0_[5] ),
        .I2(\drp_state_reg_n_0_[4] ),
        .I3(Q[1]),
        .I4(\drp_state_reg_n_0_[2] ),
        .I5(\drp_state[6]_i_3_n_0 ),
        .O(\drp_state_reg[5]_0 ));
  LUT5 #(
    .INIT(32'hFFFF0040)) 
    done_i_4
       (.I0(\drp_state_reg_n_0_[0] ),
        .I1(\drp_state[4]_i_2_n_0 ),
        .I2(\drp_state_reg_n_0_[2] ),
        .I3(\drp_state[6]_i_2__0_n_0 ),
        .I4(done_i_5_n_0),
        .O(\drp_state_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h0000000000000100)) 
    done_i_5
       (.I0(\drp_state_reg_n_0_[4] ),
        .I1(\drp_state_reg_n_0_[5] ),
        .I2(\drp_state_reg_n_0_[2] ),
        .I3(Q[0]),
        .I4(\drp_state_reg_n_0_[0] ),
        .I5(Q[1]),
        .O(done_i_5_n_0));
  FDRE #(
    .INIT(1'b0)) 
    done_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(done_reg_1),
        .Q(done_reg_0),
        .R(drprst_in_sync));
  (* SOFT_HLUTNM = "soft_lutpair433" *) 
  LUT5 #(
    .INIT(32'hFFFFFEEA)) 
    \drp_state[0]_i_1 
       (.I0(\drp_state[0]_i_2_n_0 ),
        .I1(\drp_state_reg_n_0_[2] ),
        .I2(\drp_state_reg_n_0_[4] ),
        .I3(\drp_state_reg_n_0_[5] ),
        .I4(Q[1]),
        .O(drp_state[0]));
  LUT6 #(
    .INIT(64'hFFCDFFFFCC33CCCC)) 
    \drp_state[0]_i_2 
       (.I0(rd_reg_n_0),
        .I1(Q[0]),
        .I2(wr_reg_n_0),
        .I3(\drp_state_reg_n_0_[4] ),
        .I4(DEN_O_i_2_n_0),
        .I5(\drp_state_reg_n_0_[0] ),
        .O(\drp_state[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000100000000000)) 
    \drp_state[1]_i_1__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(\drp_state[2]_i_2_n_0 ),
        .I3(rd_reg_n_0),
        .I4(\drp_state_reg_n_0_[2] ),
        .I5(\drp_state_reg_n_0_[0] ),
        .O(drp_state[1]));
  LUT6 #(
    .INIT(64'h0002000000080008)) 
    \drp_state[2]_i_1 
       (.I0(\drp_state[2]_i_2_n_0 ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\drp_state_reg_n_0_[0] ),
        .I4(\drp_state[6]_i_2__0_n_0 ),
        .I5(\drp_state_reg_n_0_[2] ),
        .O(drp_state[2]));
  (* SOFT_HLUTNM = "soft_lutpair437" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \drp_state[2]_i_2 
       (.I0(\drp_state_reg_n_0_[5] ),
        .I1(\drp_state_reg_n_0_[4] ),
        .O(\drp_state[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00200000)) 
    \drp_state[4]_i_1__0 
       (.I0(\drp_state[4]_i_2_n_0 ),
        .I1(\drp_state_reg_n_0_[2] ),
        .I2(\drp_state_reg_n_0_[0] ),
        .I3(rd_reg_n_0),
        .I4(wr_reg_n_0),
        .O(drp_state[4]));
  (* SOFT_HLUTNM = "soft_lutpair437" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \drp_state[4]_i_2 
       (.I0(\drp_state_reg_n_0_[4] ),
        .I1(\drp_state_reg_n_0_[5] ),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(\drp_state[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000002C)) 
    \drp_state[5]_i_1__0 
       (.I0(\drp_state[6]_i_2__0_n_0 ),
        .I1(\drp_state_reg_n_0_[4] ),
        .I2(\drp_state_reg_n_0_[5] ),
        .I3(\drp_state[5]_i_2__0_n_0 ),
        .I4(Q[0]),
        .I5(\drp_state_reg_n_0_[2] ),
        .O(drp_state[5]));
  (* SOFT_HLUTNM = "soft_lutpair446" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \drp_state[5]_i_2__0 
       (.I0(\drp_state_reg_n_0_[0] ),
        .I1(Q[1]),
        .O(\drp_state[5]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000100010000)) 
    \drp_state[6]_i_1 
       (.I0(\drp_state[6]_i_2__0_n_0 ),
        .I1(\drp_state_reg_n_0_[4] ),
        .I2(Q[1]),
        .I3(\drp_state[6]_i_3_n_0 ),
        .I4(\drp_state_reg_n_0_[5] ),
        .I5(\drp_state_reg_n_0_[2] ),
        .O(do_r));
  (* SOFT_HLUTNM = "soft_lutpair432" *) 
  LUT4 #(
    .INIT(16'h4555)) 
    \drp_state[6]_i_2__0 
       (.I0(\gen_gtwizard_gthe4.drprdy_int ),
        .I1(\timeout_cntr[7]_i_4_n_0 ),
        .I2(\timeout_cntr_reg_n_0_[6] ),
        .I3(\timeout_cntr_reg_n_0_[7] ),
        .O(\drp_state[6]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair446" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \drp_state[6]_i_3 
       (.I0(\drp_state_reg_n_0_[0] ),
        .I1(Q[0]),
        .O(\drp_state[6]_i_3_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \drp_state_reg[0] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(drp_state[0]),
        .Q(\drp_state_reg_n_0_[0] ),
        .S(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \drp_state_reg[1] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(drp_state[1]),
        .Q(Q[0]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \drp_state_reg[2] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(drp_state[2]),
        .Q(\drp_state_reg_n_0_[2] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \drp_state_reg[4] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(drp_state[4]),
        .Q(\drp_state_reg_n_0_[4] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \drp_state_reg[5] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(drp_state[5]),
        .Q(\drp_state_reg_n_0_[5] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \drp_state_reg[6] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(do_r),
        .Q(Q[1]),
        .R(drprst_in_sync));
  LUT4 #(
    .INIT(16'hABAA)) 
    \en[0]_i_1 
       (.I0(drpen_in),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(done_reg_0),
        .O(we[0]));
  (* SOFT_HLUTNM = "soft_lutpair442" *) 
  LUT4 #(
    .INIT(16'hA8AA)) 
    \en[0]_i_2 
       (.I0(drpen_in),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(done_reg_0),
        .O(\en[0]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hBAAA)) 
    \en[2]_i_1 
       (.I0(\addr_i_reg[27]_0 ),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(done_reg_0),
        .O(we[2]));
  (* SOFT_HLUTNM = "soft_lutpair443" *) 
  LUT4 #(
    .INIT(16'h8AAA)) 
    \en[2]_i_2 
       (.I0(\addr_i_reg[27]_0 ),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(done_reg_0),
        .O(\en[2]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \en_reg[0] 
       (.C(drpclk_in),
        .CE(we[0]),
        .D(\en[0]_i_2_n_0 ),
        .Q(en[0]),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \en_reg[2] 
       (.C(drpclk_in),
        .CE(we[2]),
        .D(\en[2]_i_2_n_0 ),
        .Q(en[2]),
        .R(drprst_in_sync));
  LUT4 #(
    .INIT(16'h0010)) 
    \idx[0]__0_i_1 
       (.I0(\arb_state_reg_n_0_[0] ),
        .I1(\arb_state_reg_n_0_[1] ),
        .I2(\arb_state_reg_n_0_[3] ),
        .I3(\arb_state_reg_n_0_[2] ),
        .O(CEB2));
  (* SOFT_HLUTNM = "soft_lutpair439" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \idx[0]__0_i_2 
       (.I0(\idx_reg[0]__0_n_0 ),
        .I1(\idx_reg[1]__0_n_0 ),
        .O(\idx[0]__0_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair444" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \idx[1]__0_i_1 
       (.I0(\idx_reg[0]__0_n_0 ),
        .I1(\idx_reg[1]__0_n_0 ),
        .O(B));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[0]__0 
       (.C(drpclk_in),
        .CE(CEB2),
        .D(\idx[0]__0_i_2_n_0 ),
        .Q(\idx_reg[0]__0_n_0 ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \idx_reg[1]__0 
       (.C(drpclk_in),
        .CE(CEB2),
        .D(B),
        .Q(\idx_reg[1]__0_n_0 ),
        .R(drprst_in_sync));
  LUT6 #(
    .INIT(64'h000000000BFB0000)) 
    rd_i_1
       (.I0(\idx_reg[0]__0_n_0 ),
        .I1(\we_reg_n_0_[0] ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(\we_reg_n_0_[2] ),
        .I4(\arb_state[3]_i_2_n_0 ),
        .I5(\arb_state_reg_n_0_[1] ),
        .O(rd_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    rd_reg
       (.C(drpclk_in),
        .CE(wr),
        .D(rd_i_1_n_0),
        .Q(rd_reg_n_0),
        .R(drprst_in_sync));
  (* SOFT_HLUTNM = "soft_lutpair436" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \timeout_cntr[0]_i_1 
       (.I0(\timeout_cntr_reg_n_0_[0] ),
        .I1(\drp_state_reg_n_0_[2] ),
        .I2(\drp_state_reg_n_0_[5] ),
        .O(timeout_cntr[0]));
  (* SOFT_HLUTNM = "soft_lutpair434" *) 
  LUT4 #(
    .INIT(16'h6660)) 
    \timeout_cntr[1]_i_1 
       (.I0(\timeout_cntr_reg_n_0_[0] ),
        .I1(\timeout_cntr_reg_n_0_[1] ),
        .I2(\drp_state_reg_n_0_[5] ),
        .I3(\drp_state_reg_n_0_[2] ),
        .O(timeout_cntr[1]));
  (* SOFT_HLUTNM = "soft_lutpair434" *) 
  LUT5 #(
    .INIT(32'h78787800)) 
    \timeout_cntr[2]_i_1 
       (.I0(\timeout_cntr_reg_n_0_[1] ),
        .I1(\timeout_cntr_reg_n_0_[0] ),
        .I2(\timeout_cntr_reg_n_0_[2] ),
        .I3(\drp_state_reg_n_0_[5] ),
        .I4(\drp_state_reg_n_0_[2] ),
        .O(timeout_cntr[2]));
  LUT6 #(
    .INIT(64'h7F807F807F800000)) 
    \timeout_cntr[3]_i_1 
       (.I0(\timeout_cntr_reg_n_0_[2] ),
        .I1(\timeout_cntr_reg_n_0_[0] ),
        .I2(\timeout_cntr_reg_n_0_[1] ),
        .I3(\timeout_cntr_reg_n_0_[3] ),
        .I4(\drp_state_reg_n_0_[5] ),
        .I5(\drp_state_reg_n_0_[2] ),
        .O(timeout_cntr[3]));
  LUT6 #(
    .INIT(64'h000000007FFF8000)) 
    \timeout_cntr[4]_i_1 
       (.I0(\timeout_cntr_reg_n_0_[3] ),
        .I1(\timeout_cntr_reg_n_0_[1] ),
        .I2(\timeout_cntr_reg_n_0_[0] ),
        .I3(\timeout_cntr_reg_n_0_[2] ),
        .I4(\timeout_cntr_reg_n_0_[4] ),
        .I5(DEN_O_i_2_n_0),
        .O(timeout_cntr[4]));
  (* SOFT_HLUTNM = "soft_lutpair436" *) 
  LUT4 #(
    .INIT(16'h9990)) 
    \timeout_cntr[5]_i_1 
       (.I0(\timeout_cntr[5]_i_2_n_0 ),
        .I1(\timeout_cntr_reg_n_0_[5] ),
        .I2(\drp_state_reg_n_0_[5] ),
        .I3(\drp_state_reg_n_0_[2] ),
        .O(timeout_cntr[5]));
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \timeout_cntr[5]_i_2 
       (.I0(\timeout_cntr_reg_n_0_[3] ),
        .I1(\timeout_cntr_reg_n_0_[1] ),
        .I2(\timeout_cntr_reg_n_0_[0] ),
        .I3(\timeout_cntr_reg_n_0_[2] ),
        .I4(\timeout_cntr_reg_n_0_[4] ),
        .O(\timeout_cntr[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair435" *) 
  LUT4 #(
    .INIT(16'h9990)) 
    \timeout_cntr[6]_i_1 
       (.I0(\timeout_cntr[7]_i_4_n_0 ),
        .I1(\timeout_cntr_reg_n_0_[6] ),
        .I2(\drp_state_reg_n_0_[5] ),
        .I3(\drp_state_reg_n_0_[2] ),
        .O(timeout_cntr[6]));
  (* SOFT_HLUTNM = "soft_lutpair435" *) 
  LUT5 #(
    .INIT(32'hD2D2D200)) 
    \timeout_cntr[7]_i_2 
       (.I0(\timeout_cntr_reg_n_0_[6] ),
        .I1(\timeout_cntr[7]_i_4_n_0 ),
        .I2(\timeout_cntr_reg_n_0_[7] ),
        .I3(\drp_state_reg_n_0_[5] ),
        .I4(\drp_state_reg_n_0_[2] ),
        .O(timeout_cntr[7]));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEE9)) 
    \timeout_cntr[7]_i_3 
       (.I0(Q[0]),
        .I1(\drp_state_reg_n_0_[0] ),
        .I2(Q[1]),
        .I3(\drp_state_reg_n_0_[4] ),
        .I4(\drp_state_reg_n_0_[5] ),
        .I5(\drp_state_reg_n_0_[2] ),
        .O(\drp_state_reg[1]_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \timeout_cntr[7]_i_4 
       (.I0(\timeout_cntr_reg_n_0_[4] ),
        .I1(\timeout_cntr_reg_n_0_[2] ),
        .I2(\timeout_cntr_reg_n_0_[0] ),
        .I3(\timeout_cntr_reg_n_0_[1] ),
        .I4(\timeout_cntr_reg_n_0_[3] ),
        .I5(\timeout_cntr_reg_n_0_[5] ),
        .O(\timeout_cntr[7]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \timeout_cntr_reg[0] 
       (.C(drpclk_in),
        .CE(E),
        .D(timeout_cntr[0]),
        .Q(\timeout_cntr_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \timeout_cntr_reg[1] 
       (.C(drpclk_in),
        .CE(E),
        .D(timeout_cntr[1]),
        .Q(\timeout_cntr_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \timeout_cntr_reg[2] 
       (.C(drpclk_in),
        .CE(E),
        .D(timeout_cntr[2]),
        .Q(\timeout_cntr_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \timeout_cntr_reg[3] 
       (.C(drpclk_in),
        .CE(E),
        .D(timeout_cntr[3]),
        .Q(\timeout_cntr_reg_n_0_[3] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \timeout_cntr_reg[4] 
       (.C(drpclk_in),
        .CE(E),
        .D(timeout_cntr[4]),
        .Q(\timeout_cntr_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \timeout_cntr_reg[5] 
       (.C(drpclk_in),
        .CE(E),
        .D(timeout_cntr[5]),
        .Q(\timeout_cntr_reg_n_0_[5] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \timeout_cntr_reg[6] 
       (.C(drpclk_in),
        .CE(E),
        .D(timeout_cntr[6]),
        .Q(\timeout_cntr_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \timeout_cntr_reg[7] 
       (.C(drpclk_in),
        .CE(E),
        .D(timeout_cntr[7]),
        .Q(\timeout_cntr_reg_n_0_[7] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair443" *) 
  LUT4 #(
    .INIT(16'hA8AA)) 
    \we[0]_i_1 
       (.I0(drpwe_in),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(done_reg_0),
        .O(\we[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair442" *) 
  LUT4 #(
    .INIT(16'h8AAA)) 
    \we[2]_i_1 
       (.I0(cal_on_tx_drpwe_out),
        .I1(\idx_reg[0]__0_n_0 ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(done_reg_0),
        .O(\we[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \we_reg[0] 
       (.C(drpclk_in),
        .CE(we[0]),
        .D(\we[0]_i_1_n_0 ),
        .Q(\we_reg_n_0_[0] ),
        .R(drprst_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \we_reg[2] 
       (.C(drpclk_in),
        .CE(we[2]),
        .D(\we[2]_i_1_n_0 ),
        .Q(\we_reg_n_0_[2] ),
        .R(drprst_in_sync));
  LUT4 #(
    .INIT(16'h0006)) 
    wr_i_1
       (.I0(\arb_state_reg_n_0_[1] ),
        .I1(\arb_state_reg_n_0_[0] ),
        .I2(\arb_state_reg_n_0_[3] ),
        .I3(\arb_state_reg_n_0_[2] ),
        .O(wr));
  LUT6 #(
    .INIT(64'h00000000F4040000)) 
    wr_i_2
       (.I0(\idx_reg[0]__0_n_0 ),
        .I1(\we_reg_n_0_[0] ),
        .I2(\idx_reg[1]__0_n_0 ),
        .I3(\we_reg_n_0_[2] ),
        .I4(\arb_state[3]_i_2_n_0 ),
        .I5(\arb_state_reg_n_0_[1] ),
        .O(wr_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    wr_reg
       (.C(drpclk_in),
        .CE(wr),
        .D(wr_i_2_n_0),
        .Q(wr_reg_n_0),
        .R(drprst_in_sync));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_gthe4_channel" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gthe4_channel
   (bufgtce_out,
    bufgtreset_out,
    cpllfbclklost_out,
    GTHE4_CPLLLOCK_IN,
    cpllrefclklost_out,
    dmonitoroutclk_out,
    \gen_gtwizard_gthe4.drprdy_int ,
    eyescandataerror_out,
    gthtxn_out,
    gthtxp_out,
    \gen_gtwizard_gthe4.gtpowergood_int ,
    gtrefclkmonitor_out,
    pcierategen3_out,
    pcierateidle_out,
    pciesynctxsyncdone_out,
    pcieusergen3rdy_out,
    pcieuserphystatusrst_out,
    pcieuserratestart_out,
    phystatus_out,
    powerpresent_out,
    resetexception_out,
    rxbyteisaligned_out,
    rxbyterealign_out,
    rxcdrlock_out,
    rxcdrphdone_out,
    rxchanbondseq_out,
    rxchanisaligned_out,
    rxchanrealign_out,
    rxckcaldone_out,
    rxcominitdet_out,
    rxcommadet_out,
    rxcomsasdet_out,
    rxcomwakedet_out,
    rxdlysresetdone_out,
    rxelecidle_out,
    rxlfpstresetdet_out,
    rxlfpsu2lpexitdet_out,
    rxlfpsu3wakedet_out,
    rxosintdone_out,
    rxosintstarted_out,
    rxosintstrobedone_out,
    rxosintstrobestarted_out,
    rxoutclk_out,
    rxoutclkfabric_out,
    rxoutclkpcs_out,
    rxphaligndone_out,
    rxphalignerr_out,
    rxpmaresetdone_out,
    rxprbserr_out,
    rxprbslocked_out,
    rxprgdivresetdone_out,
    rxqpisenn_out,
    rxqpisenp_out,
    rxratedone_out,
    rxrecclkout_out,
    rxresetdone_out,
    rxsliderdy_out,
    rxslipdone_out,
    rxslipoutclkrdy_out,
    rxslippmardy_out,
    rxsyncdone_out,
    rxsyncout_out,
    rxvalid_out,
    txcomfinish_out,
    txdccdone_out,
    txdlysresetdone_out,
    txoutclk_out,
    txoutclkfabric_out,
    txoutclkpcs_out,
    txphaligndone_out,
    txphinitdone_out,
    txpmaresetdone_out,
    GTHE4_TXPRGDIVRESETDONE_IN,
    txqpisenn_out,
    txqpisenp_out,
    txratedone_out,
    txresetdone_out,
    txsyncdone_out,
    txsyncout_out,
    rxdata_out,
    dmonitorout_out,
    D,
    pcsrsvdout_out,
    pinrsrvdas_out,
    rxctrl0_out,
    rxctrl1_out,
    pcierateqpllpd_out,
    pcierateqpllreset_out,
    rxclkcorcnt_out,
    rxdatavalid_out,
    rxheadervalid_out,
    rxstartofseq_out,
    txbufstatus_out,
    bufgtcemask_out,
    bufgtrstmask_out,
    rxbufstatus_out,
    rxstatus_out,
    rxchbondo_out,
    rxheader_out,
    rxctrl2_out,
    rxctrl3_out,
    rxdataextendrsvd_out,
    rxmonitorout_out,
    bufgtdiv_out,
    cpllpd_int_reg,
    cdrstepdir_in,
    cdrstepsq_in,
    cdrstepsx_in,
    cfgreset_in,
    clkrsvd0_in,
    clkrsvd1_in,
    cpllfreqlock_in,
    cplllockdetclk_in,
    cplllocken_in,
    i_in_meta_reg,
    i_in_meta_reg_0,
    dmonfiforeset_in,
    dmonitorclk_in,
    drpclk_in,
    GTHE4_CHANNEL_DRPEN_OUT,
    drprst_in,
    GTHE4_CHANNEL_DRPWE_OUT,
    eyescanreset_in,
    eyescantrigger_in,
    freqos_in,
    gtgrefclk_in,
    gthrxn_in,
    gthrxp_in,
    gtnorthrefclk0_in,
    gtnorthrefclk1_in,
    gtrefclk0_in,
    gtrefclk1_in,
    \gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ,
    gtrxresetsel_in,
    gtsouthrefclk0_in,
    gtsouthrefclk1_in,
    \gen_gtwizard_gthe4.gttxreset_int ,
    gttxresetsel_in,
    incpctrl_in,
    pcieeqrxeqadaptdone_in,
    pcierstidle_in,
    pciersttxsyncstart_in,
    pcieuserratedone_in,
    qpll0clk_in,
    qpll0freqlock_in,
    qpll0refclk_in,
    qpll1clk_in,
    qpll1freqlock_in,
    qpll1refclk_in,
    resetovrd_in,
    rx8b10ben_in,
    rxafecfoken_in,
    rxbufreset_in,
    rxcdrfreqreset_in,
    rxcdrhold_in,
    rxcdrovrden_in,
    rxcdrreset_in,
    rxchbonden_in,
    rxchbondmaster_in,
    rxchbondslave_in,
    rxckcalreset_in,
    rxcommadeten_in,
    rxdfeagchold_in,
    rxdfeagcovrden_in,
    rxdfecfokfen_in,
    rxdfecfokfpulse_in,
    rxdfecfokhold_in,
    rxdfecfokovren_in,
    rxdfekhhold_in,
    rxdfekhovrden_in,
    rxdfelfhold_in,
    rxdfelfovrden_in,
    rxdfelpmreset_in,
    rxdfetap10hold_in,
    rxdfetap10ovrden_in,
    rxdfetap11hold_in,
    rxdfetap11ovrden_in,
    rxdfetap12hold_in,
    rxdfetap12ovrden_in,
    rxdfetap13hold_in,
    rxdfetap13ovrden_in,
    rxdfetap14hold_in,
    rxdfetap14ovrden_in,
    rxdfetap15hold_in,
    rxdfetap15ovrden_in,
    rxdfetap2hold_in,
    rxdfetap2ovrden_in,
    rxdfetap3hold_in,
    rxdfetap3ovrden_in,
    rxdfetap4hold_in,
    rxdfetap4ovrden_in,
    rxdfetap5hold_in,
    rxdfetap5ovrden_in,
    rxdfetap6hold_in,
    rxdfetap6ovrden_in,
    rxdfetap7hold_in,
    rxdfetap7ovrden_in,
    rxdfetap8hold_in,
    rxdfetap8ovrden_in,
    rxdfetap9hold_in,
    rxdfetap9ovrden_in,
    rxdfeuthold_in,
    rxdfeutovrden_in,
    rxdfevphold_in,
    rxdfevpovrden_in,
    rxdfexyden_in,
    rxdlybypass_in,
    rxdlyen_in,
    rxdlyovrden_in,
    rxdlysreset_in,
    rxeqtraining_in,
    rxgearboxslip_in,
    rxlatclk_in,
    rxlpmen_in,
    rxlpmgchold_in,
    rxlpmgcovrden_in,
    rxlpmhfhold_in,
    rxlpmhfovrden_in,
    rxlpmlfhold_in,
    rxlpmlfklovrden_in,
    rxlpmoshold_in,
    rxlpmosovrden_in,
    rxmcommaalignen_in,
    rxoobreset_in,
    rxoscalreset_in,
    rxoshold_in,
    rxosovrden_in,
    rxpcommaalignen_in,
    rxpcsreset_in,
    rxphalign_in,
    rxphalignen_in,
    rxphdlypd_in,
    rxphdlyreset_in,
    rxphovrden_in,
    \gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ,
    rxpolarity_in,
    rxprbscntreset_in,
    \gen_gtwizard_gthe4.rxprogdivreset_int ,
    rxqpien_in,
    i_in_meta_reg_1,
    rxslide_in,
    rxslipoutclk_in,
    rxslippma_in,
    rxsyncallin_in,
    rxsyncin_in,
    rxsyncmode_in,
    rxtermination_in,
    \gen_gtwizard_gthe4.rxuserrdy_int ,
    rxusrclk_in,
    rxusrclk2_in,
    sigvalidclk_in,
    tx8b10ben_in,
    txcominit_in,
    txcomsas_in,
    txcomwake_in,
    txdccforcestart_in,
    txdccreset_in,
    txdetectrx_in,
    txdlybypass_in,
    txdlyen_in,
    txdlyhold_in,
    txdlyovrden_in,
    txdlysreset_in,
    txdlyupdown_in,
    txelecidle_in,
    txinhibit_in,
    txlatclk_in,
    txlfpstreset_in,
    txlfpsu2lpexit_in,
    txlfpsu3wake_in,
    txmuxdcdexhold_in,
    txmuxdcdorwren_in,
    txoneszeros_in,
    txpcsreset_in,
    txpdelecidlemode_in,
    txphalign_in,
    txphalignen_in,
    txphdlypd_in,
    txphdlyreset_in,
    txphdlytstclk_in,
    txphinit_in,
    txphovrden_in,
    txpippmen_in,
    txpippmovrden_in,
    txpippmpd_in,
    txpippmsel_in,
    txpisopd_in,
    txpmareset_in,
    txpolarity_in,
    txprbsforceerr_in,
    GTHE4_TXPROGDIVRESET_OUT,
    txqpibiasen_in,
    txqpiweakpup_in,
    txratemode_in,
    txswing_in,
    txsyncallin_in,
    txsyncin_in,
    txsyncmode_in,
    \gen_gtwizard_gthe4.txuserrdy_int ,
    txusrclk_in,
    txusrclk2_in,
    gtwiz_userdata_tx_in,
    Q,
    gtrsvd_in,
    pcsrsvdin_in,
    txctrl0_in,
    txctrl1_in,
    tstin_in,
    rxdfeagcctrl_in,
    rxelecidlemode_in,
    rxmonitorsel_in,
    RXPD,
    rxpllclksel_in,
    rxsysclksel_in,
    txdeemph_in,
    txpd_in,
    txpllclksel_in,
    txsysclksel_in,
    cpllrefclksel_in,
    loopback_in,
    rxchbondlevel_in,
    rxoutclksel_in,
    RXRATE,
    txmargin_in,
    i_in_meta_reg_2,
    txrate_in,
    rxdfecfokfcnum_in,
    rxprbssel_in,
    txprbssel_in,
    rxchbondi_in,
    txdiffctrl_in,
    txpippmstepsize_in,
    txpostcursor_in,
    txprecursor_in,
    txheader_in,
    rxckcalstart_in,
    txmaincursor_in,
    txsequence_in,
    tx8b10bbypass_in,
    txctrl2_in,
    txdataextendrsvd_in,
    i_in_meta_reg_3,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]bufgtce_out;
  output [0:0]bufgtreset_out;
  output [0:0]cpllfbclklost_out;
  output GTHE4_CPLLLOCK_IN;
  output [0:0]cpllrefclklost_out;
  output [0:0]dmonitoroutclk_out;
  output \gen_gtwizard_gthe4.drprdy_int ;
  output [0:0]eyescandataerror_out;
  output [0:0]gthtxn_out;
  output [0:0]gthtxp_out;
  output \gen_gtwizard_gthe4.gtpowergood_int ;
  output [0:0]gtrefclkmonitor_out;
  output [0:0]pcierategen3_out;
  output [0:0]pcierateidle_out;
  output [0:0]pciesynctxsyncdone_out;
  output [0:0]pcieusergen3rdy_out;
  output [0:0]pcieuserphystatusrst_out;
  output [0:0]pcieuserratestart_out;
  output [0:0]phystatus_out;
  output [0:0]powerpresent_out;
  output [0:0]resetexception_out;
  output [0:0]rxbyteisaligned_out;
  output [0:0]rxbyterealign_out;
  output [0:0]rxcdrlock_out;
  output [0:0]rxcdrphdone_out;
  output [0:0]rxchanbondseq_out;
  output [0:0]rxchanisaligned_out;
  output [0:0]rxchanrealign_out;
  output [0:0]rxckcaldone_out;
  output [0:0]rxcominitdet_out;
  output [0:0]rxcommadet_out;
  output [0:0]rxcomsasdet_out;
  output [0:0]rxcomwakedet_out;
  output [0:0]rxdlysresetdone_out;
  output [0:0]rxelecidle_out;
  output [0:0]rxlfpstresetdet_out;
  output [0:0]rxlfpsu2lpexitdet_out;
  output [0:0]rxlfpsu3wakedet_out;
  output [0:0]rxosintdone_out;
  output [0:0]rxosintstarted_out;
  output [0:0]rxosintstrobedone_out;
  output [0:0]rxosintstrobestarted_out;
  output [0:0]rxoutclk_out;
  output [0:0]rxoutclkfabric_out;
  output [0:0]rxoutclkpcs_out;
  output [0:0]rxphaligndone_out;
  output [0:0]rxphalignerr_out;
  output [0:0]rxpmaresetdone_out;
  output [0:0]rxprbserr_out;
  output [0:0]rxprbslocked_out;
  output [0:0]rxprgdivresetdone_out;
  output [0:0]rxqpisenn_out;
  output [0:0]rxqpisenp_out;
  output [0:0]rxratedone_out;
  output [0:0]rxrecclkout_out;
  output [0:0]rxresetdone_out;
  output [0:0]rxsliderdy_out;
  output [0:0]rxslipdone_out;
  output [0:0]rxslipoutclkrdy_out;
  output [0:0]rxslippmardy_out;
  output [0:0]rxsyncdone_out;
  output [0:0]rxsyncout_out;
  output [0:0]rxvalid_out;
  output [0:0]txcomfinish_out;
  output [0:0]txdccdone_out;
  output [0:0]txdlysresetdone_out;
  output [0:0]txoutclk_out;
  output [0:0]txoutclkfabric_out;
  output [0:0]txoutclkpcs_out;
  output [0:0]txphaligndone_out;
  output [0:0]txphinitdone_out;
  output [0:0]txpmaresetdone_out;
  output GTHE4_TXPRGDIVRESETDONE_IN;
  output [0:0]txqpisenn_out;
  output [0:0]txqpisenp_out;
  output [0:0]txratedone_out;
  output [0:0]txresetdone_out;
  output [0:0]txsyncdone_out;
  output [0:0]txsyncout_out;
  output [127:0]rxdata_out;
  output [15:0]dmonitorout_out;
  output [15:0]D;
  output [15:0]pcsrsvdout_out;
  output [15:0]pinrsrvdas_out;
  output [15:0]rxctrl0_out;
  output [15:0]rxctrl1_out;
  output [1:0]pcierateqpllpd_out;
  output [1:0]pcierateqpllreset_out;
  output [1:0]rxclkcorcnt_out;
  output [1:0]rxdatavalid_out;
  output [1:0]rxheadervalid_out;
  output [1:0]rxstartofseq_out;
  output [1:0]txbufstatus_out;
  output [2:0]bufgtcemask_out;
  output [2:0]bufgtrstmask_out;
  output [2:0]rxbufstatus_out;
  output [2:0]rxstatus_out;
  output [4:0]rxchbondo_out;
  output [5:0]rxheader_out;
  output [7:0]rxctrl2_out;
  output [7:0]rxctrl3_out;
  output [7:0]rxdataextendrsvd_out;
  output [7:0]rxmonitorout_out;
  output [8:0]bufgtdiv_out;
  output cpllpd_int_reg;
  input [0:0]cdrstepdir_in;
  input [0:0]cdrstepsq_in;
  input [0:0]cdrstepsx_in;
  input [0:0]cfgreset_in;
  input [0:0]clkrsvd0_in;
  input [0:0]clkrsvd1_in;
  input [0:0]cpllfreqlock_in;
  input [0:0]cplllockdetclk_in;
  input [0:0]cplllocken_in;
  input i_in_meta_reg;
  input i_in_meta_reg_0;
  input [0:0]dmonfiforeset_in;
  input [0:0]dmonitorclk_in;
  input [0:0]drpclk_in;
  input GTHE4_CHANNEL_DRPEN_OUT;
  input [0:0]drprst_in;
  input GTHE4_CHANNEL_DRPWE_OUT;
  input [0:0]eyescanreset_in;
  input [0:0]eyescantrigger_in;
  input [0:0]freqos_in;
  input [0:0]gtgrefclk_in;
  input [0:0]gthrxn_in;
  input [0:0]gthrxp_in;
  input [0:0]gtnorthrefclk0_in;
  input [0:0]gtnorthrefclk1_in;
  input [0:0]gtrefclk0_in;
  input [0:0]gtrefclk1_in;
  input \gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ;
  input [0:0]gtrxresetsel_in;
  input [0:0]gtsouthrefclk0_in;
  input [0:0]gtsouthrefclk1_in;
  input \gen_gtwizard_gthe4.gttxreset_int ;
  input [0:0]gttxresetsel_in;
  input [0:0]incpctrl_in;
  input [0:0]pcieeqrxeqadaptdone_in;
  input [0:0]pcierstidle_in;
  input [0:0]pciersttxsyncstart_in;
  input [0:0]pcieuserratedone_in;
  input [0:0]qpll0clk_in;
  input [0:0]qpll0freqlock_in;
  input [0:0]qpll0refclk_in;
  input [0:0]qpll1clk_in;
  input [0:0]qpll1freqlock_in;
  input [0:0]qpll1refclk_in;
  input [0:0]resetovrd_in;
  input [0:0]rx8b10ben_in;
  input [0:0]rxafecfoken_in;
  input [0:0]rxbufreset_in;
  input [0:0]rxcdrfreqreset_in;
  input [0:0]rxcdrhold_in;
  input [0:0]rxcdrovrden_in;
  input [0:0]rxcdrreset_in;
  input [0:0]rxchbonden_in;
  input [0:0]rxchbondmaster_in;
  input [0:0]rxchbondslave_in;
  input [0:0]rxckcalreset_in;
  input [0:0]rxcommadeten_in;
  input [0:0]rxdfeagchold_in;
  input [0:0]rxdfeagcovrden_in;
  input [0:0]rxdfecfokfen_in;
  input [0:0]rxdfecfokfpulse_in;
  input [0:0]rxdfecfokhold_in;
  input [0:0]rxdfecfokovren_in;
  input [0:0]rxdfekhhold_in;
  input [0:0]rxdfekhovrden_in;
  input [0:0]rxdfelfhold_in;
  input [0:0]rxdfelfovrden_in;
  input [0:0]rxdfelpmreset_in;
  input [0:0]rxdfetap10hold_in;
  input [0:0]rxdfetap10ovrden_in;
  input [0:0]rxdfetap11hold_in;
  input [0:0]rxdfetap11ovrden_in;
  input [0:0]rxdfetap12hold_in;
  input [0:0]rxdfetap12ovrden_in;
  input [0:0]rxdfetap13hold_in;
  input [0:0]rxdfetap13ovrden_in;
  input [0:0]rxdfetap14hold_in;
  input [0:0]rxdfetap14ovrden_in;
  input [0:0]rxdfetap15hold_in;
  input [0:0]rxdfetap15ovrden_in;
  input [0:0]rxdfetap2hold_in;
  input [0:0]rxdfetap2ovrden_in;
  input [0:0]rxdfetap3hold_in;
  input [0:0]rxdfetap3ovrden_in;
  input [0:0]rxdfetap4hold_in;
  input [0:0]rxdfetap4ovrden_in;
  input [0:0]rxdfetap5hold_in;
  input [0:0]rxdfetap5ovrden_in;
  input [0:0]rxdfetap6hold_in;
  input [0:0]rxdfetap6ovrden_in;
  input [0:0]rxdfetap7hold_in;
  input [0:0]rxdfetap7ovrden_in;
  input [0:0]rxdfetap8hold_in;
  input [0:0]rxdfetap8ovrden_in;
  input [0:0]rxdfetap9hold_in;
  input [0:0]rxdfetap9ovrden_in;
  input [0:0]rxdfeuthold_in;
  input [0:0]rxdfeutovrden_in;
  input [0:0]rxdfevphold_in;
  input [0:0]rxdfevpovrden_in;
  input [0:0]rxdfexyden_in;
  input [0:0]rxdlybypass_in;
  input [0:0]rxdlyen_in;
  input [0:0]rxdlyovrden_in;
  input [0:0]rxdlysreset_in;
  input [0:0]rxeqtraining_in;
  input [0:0]rxgearboxslip_in;
  input [0:0]rxlatclk_in;
  input [0:0]rxlpmen_in;
  input [0:0]rxlpmgchold_in;
  input [0:0]rxlpmgcovrden_in;
  input [0:0]rxlpmhfhold_in;
  input [0:0]rxlpmhfovrden_in;
  input [0:0]rxlpmlfhold_in;
  input [0:0]rxlpmlfklovrden_in;
  input [0:0]rxlpmoshold_in;
  input [0:0]rxlpmosovrden_in;
  input [0:0]rxmcommaalignen_in;
  input [0:0]rxoobreset_in;
  input [0:0]rxoscalreset_in;
  input [0:0]rxoshold_in;
  input [0:0]rxosovrden_in;
  input [0:0]rxpcommaalignen_in;
  input [0:0]rxpcsreset_in;
  input [0:0]rxphalign_in;
  input [0:0]rxphalignen_in;
  input [0:0]rxphdlypd_in;
  input [0:0]rxphdlyreset_in;
  input [0:0]rxphovrden_in;
  input \gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ;
  input [0:0]rxpolarity_in;
  input [0:0]rxprbscntreset_in;
  input \gen_gtwizard_gthe4.rxprogdivreset_int ;
  input [0:0]rxqpien_in;
  input i_in_meta_reg_1;
  input [0:0]rxslide_in;
  input [0:0]rxslipoutclk_in;
  input [0:0]rxslippma_in;
  input [0:0]rxsyncallin_in;
  input [0:0]rxsyncin_in;
  input [0:0]rxsyncmode_in;
  input [0:0]rxtermination_in;
  input \gen_gtwizard_gthe4.rxuserrdy_int ;
  input [0:0]rxusrclk_in;
  input [0:0]rxusrclk2_in;
  input [0:0]sigvalidclk_in;
  input [0:0]tx8b10ben_in;
  input [0:0]txcominit_in;
  input [0:0]txcomsas_in;
  input [0:0]txcomwake_in;
  input [0:0]txdccforcestart_in;
  input [0:0]txdccreset_in;
  input [0:0]txdetectrx_in;
  input [0:0]txdlybypass_in;
  input [0:0]txdlyen_in;
  input [0:0]txdlyhold_in;
  input [0:0]txdlyovrden_in;
  input [0:0]txdlysreset_in;
  input [0:0]txdlyupdown_in;
  input [0:0]txelecidle_in;
  input [0:0]txinhibit_in;
  input [0:0]txlatclk_in;
  input [0:0]txlfpstreset_in;
  input [0:0]txlfpsu2lpexit_in;
  input [0:0]txlfpsu3wake_in;
  input [0:0]txmuxdcdexhold_in;
  input [0:0]txmuxdcdorwren_in;
  input [0:0]txoneszeros_in;
  input [0:0]txpcsreset_in;
  input [0:0]txpdelecidlemode_in;
  input [0:0]txphalign_in;
  input [0:0]txphalignen_in;
  input [0:0]txphdlypd_in;
  input [0:0]txphdlyreset_in;
  input [0:0]txphdlytstclk_in;
  input [0:0]txphinit_in;
  input [0:0]txphovrden_in;
  input [0:0]txpippmen_in;
  input [0:0]txpippmovrden_in;
  input [0:0]txpippmpd_in;
  input [0:0]txpippmsel_in;
  input [0:0]txpisopd_in;
  input [0:0]txpmareset_in;
  input [0:0]txpolarity_in;
  input [0:0]txprbsforceerr_in;
  input GTHE4_TXPROGDIVRESET_OUT;
  input [0:0]txqpibiasen_in;
  input [0:0]txqpiweakpup_in;
  input [0:0]txratemode_in;
  input [0:0]txswing_in;
  input [0:0]txsyncallin_in;
  input [0:0]txsyncin_in;
  input [0:0]txsyncmode_in;
  input \gen_gtwizard_gthe4.txuserrdy_int ;
  input [0:0]txusrclk_in;
  input [0:0]txusrclk2_in;
  input [31:0]gtwiz_userdata_tx_in;
  input [15:0]Q;
  input [15:0]gtrsvd_in;
  input [15:0]pcsrsvdin_in;
  input [15:0]txctrl0_in;
  input [15:0]txctrl1_in;
  input [19:0]tstin_in;
  input [1:0]rxdfeagcctrl_in;
  input [1:0]rxelecidlemode_in;
  input [1:0]rxmonitorsel_in;
  input [1:0]RXPD;
  input [1:0]rxpllclksel_in;
  input [1:0]rxsysclksel_in;
  input [1:0]txdeemph_in;
  input [1:0]txpd_in;
  input [1:0]txpllclksel_in;
  input [1:0]txsysclksel_in;
  input [2:0]cpllrefclksel_in;
  input [2:0]loopback_in;
  input [2:0]rxchbondlevel_in;
  input [2:0]rxoutclksel_in;
  input [2:0]RXRATE;
  input [2:0]txmargin_in;
  input [2:0]i_in_meta_reg_2;
  input [2:0]txrate_in;
  input [3:0]rxdfecfokfcnum_in;
  input [3:0]rxprbssel_in;
  input [3:0]txprbssel_in;
  input [4:0]rxchbondi_in;
  input [4:0]txdiffctrl_in;
  input [4:0]txpippmstepsize_in;
  input [4:0]txpostcursor_in;
  input [4:0]txprecursor_in;
  input [5:0]txheader_in;
  input [6:0]rxckcalstart_in;
  input [6:0]txmaincursor_in;
  input [6:0]txsequence_in;
  input [7:0]tx8b10bbypass_in;
  input [7:0]txctrl2_in;
  input [7:0]txdataextendrsvd_in;
  input [9:0]i_in_meta_reg_3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [15:0]D;
  wire GTHE4_CHANNEL_DRPEN_OUT;
  wire GTHE4_CHANNEL_DRPWE_OUT;
  wire GTHE4_CPLLLOCK_IN;
  wire GTHE4_TXPRGDIVRESETDONE_IN;
  wire GTHE4_TXPROGDIVRESET_OUT;
  wire [15:0]Q;
  wire [1:0]RXPD;
  wire [2:0]RXRATE;
  wire [0:0]bufgtce_out;
  wire [2:0]bufgtcemask_out;
  wire [8:0]bufgtdiv_out;
  wire [0:0]bufgtreset_out;
  wire [2:0]bufgtrstmask_out;
  wire [0:0]cdrstepdir_in;
  wire [0:0]cdrstepsq_in;
  wire [0:0]cdrstepsx_in;
  wire [0:0]cfgreset_in;
  wire [0:0]clkrsvd0_in;
  wire [0:0]clkrsvd1_in;
  wire [0:0]cpllfbclklost_out;
  wire [0:0]cpllfreqlock_in;
  wire [0:0]cplllockdetclk_in;
  wire [0:0]cplllocken_in;
  wire cpllpd_int_reg;
  wire [0:0]cpllrefclklost_out;
  wire [2:0]cpllrefclksel_in;
  wire [0:0]dmonfiforeset_in;
  wire [0:0]dmonitorclk_in;
  wire [15:0]dmonitorout_out;
  wire [0:0]dmonitoroutclk_out;
  wire [0:0]drpclk_in;
  wire [0:0]drprst_in;
  wire [0:0]eyescandataerror_out;
  wire [0:0]eyescanreset_in;
  wire [0:0]eyescantrigger_in;
  wire [0:0]freqos_in;
  wire \gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ;
  wire \gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ;
  wire \gen_gtwizard_gthe4.drprdy_int ;
  wire \gen_gtwizard_gthe4.gtpowergood_int ;
  wire \gen_gtwizard_gthe4.gttxreset_int ;
  wire \gen_gtwizard_gthe4.rxprogdivreset_int ;
  wire \gen_gtwizard_gthe4.rxuserrdy_int ;
  wire \gen_gtwizard_gthe4.txuserrdy_int ;
  wire [0:0]gtgrefclk_in;
  wire [0:0]gthrxn_in;
  wire [0:0]gthrxp_in;
  wire [0:0]gthtxn_out;
  wire [0:0]gthtxp_out;
  wire [0:0]gtnorthrefclk0_in;
  wire [0:0]gtnorthrefclk1_in;
  wire [0:0]gtrefclk0_in;
  wire [0:0]gtrefclk1_in;
  wire [0:0]gtrefclkmonitor_out;
  wire [15:0]gtrsvd_in;
  wire [0:0]gtrxresetsel_in;
  wire [0:0]gtsouthrefclk0_in;
  wire [0:0]gtsouthrefclk1_in;
  wire [0:0]gttxresetsel_in;
  wire [31:0]gtwiz_userdata_tx_in;
  wire i_in_meta_reg;
  wire i_in_meta_reg_0;
  wire i_in_meta_reg_1;
  wire [2:0]i_in_meta_reg_2;
  wire [9:0]i_in_meta_reg_3;
  wire [0:0]incpctrl_in;
  wire [2:0]loopback_in;
  wire lopt;
  wire [0:0]pcieeqrxeqadaptdone_in;
  wire [0:0]pcierategen3_out;
  wire [0:0]pcierateidle_out;
  wire [1:0]pcierateqpllpd_out;
  wire [1:0]pcierateqpllreset_out;
  wire [0:0]pcierstidle_in;
  wire [0:0]pciersttxsyncstart_in;
  wire [0:0]pciesynctxsyncdone_out;
  wire [0:0]pcieusergen3rdy_out;
  wire [0:0]pcieuserphystatusrst_out;
  wire [0:0]pcieuserratedone_in;
  wire [0:0]pcieuserratestart_out;
  wire [15:0]pcsrsvdin_in;
  wire [15:0]pcsrsvdout_out;
  wire [0:0]phystatus_out;
  wire [15:0]pinrsrvdas_out;
  wire [0:0]powerpresent_out;
  wire [0:0]qpll0clk_in;
  wire [0:0]qpll0freqlock_in;
  wire [0:0]qpll0refclk_in;
  wire [0:0]qpll1clk_in;
  wire [0:0]qpll1freqlock_in;
  wire [0:0]qpll1refclk_in;
  wire [0:0]resetexception_out;
  wire [0:0]resetovrd_in;
  wire [0:0]rx8b10ben_in;
  wire [0:0]rxafecfoken_in;
  wire [0:0]rxbufreset_in;
  wire [2:0]rxbufstatus_out;
  wire [0:0]rxbyteisaligned_out;
  wire [0:0]rxbyterealign_out;
  wire [0:0]rxcdrfreqreset_in;
  wire [0:0]rxcdrhold_in;
  wire [0:0]rxcdrlock_out;
  wire [0:0]rxcdrovrden_in;
  wire [0:0]rxcdrphdone_out;
  wire [0:0]rxcdrreset_in;
  wire [0:0]rxchanbondseq_out;
  wire [0:0]rxchanisaligned_out;
  wire [0:0]rxchanrealign_out;
  wire [0:0]rxchbonden_in;
  wire [4:0]rxchbondi_in;
  wire [2:0]rxchbondlevel_in;
  wire [0:0]rxchbondmaster_in;
  wire [4:0]rxchbondo_out;
  wire [0:0]rxchbondslave_in;
  wire [0:0]rxckcaldone_out;
  wire [0:0]rxckcalreset_in;
  wire [6:0]rxckcalstart_in;
  wire [1:0]rxclkcorcnt_out;
  wire [0:0]rxcominitdet_out;
  wire [0:0]rxcommadet_out;
  wire [0:0]rxcommadeten_in;
  wire [0:0]rxcomsasdet_out;
  wire [0:0]rxcomwakedet_out;
  wire [15:0]rxctrl0_out;
  wire [15:0]rxctrl1_out;
  wire [7:0]rxctrl2_out;
  wire [7:0]rxctrl3_out;
  wire [127:0]rxdata_out;
  wire [7:0]rxdataextendrsvd_out;
  wire [1:0]rxdatavalid_out;
  wire [1:0]rxdfeagcctrl_in;
  wire [0:0]rxdfeagchold_in;
  wire [0:0]rxdfeagcovrden_in;
  wire [3:0]rxdfecfokfcnum_in;
  wire [0:0]rxdfecfokfen_in;
  wire [0:0]rxdfecfokfpulse_in;
  wire [0:0]rxdfecfokhold_in;
  wire [0:0]rxdfecfokovren_in;
  wire [0:0]rxdfekhhold_in;
  wire [0:0]rxdfekhovrden_in;
  wire [0:0]rxdfelfhold_in;
  wire [0:0]rxdfelfovrden_in;
  wire [0:0]rxdfelpmreset_in;
  wire [0:0]rxdfetap10hold_in;
  wire [0:0]rxdfetap10ovrden_in;
  wire [0:0]rxdfetap11hold_in;
  wire [0:0]rxdfetap11ovrden_in;
  wire [0:0]rxdfetap12hold_in;
  wire [0:0]rxdfetap12ovrden_in;
  wire [0:0]rxdfetap13hold_in;
  wire [0:0]rxdfetap13ovrden_in;
  wire [0:0]rxdfetap14hold_in;
  wire [0:0]rxdfetap14ovrden_in;
  wire [0:0]rxdfetap15hold_in;
  wire [0:0]rxdfetap15ovrden_in;
  wire [0:0]rxdfetap2hold_in;
  wire [0:0]rxdfetap2ovrden_in;
  wire [0:0]rxdfetap3hold_in;
  wire [0:0]rxdfetap3ovrden_in;
  wire [0:0]rxdfetap4hold_in;
  wire [0:0]rxdfetap4ovrden_in;
  wire [0:0]rxdfetap5hold_in;
  wire [0:0]rxdfetap5ovrden_in;
  wire [0:0]rxdfetap6hold_in;
  wire [0:0]rxdfetap6ovrden_in;
  wire [0:0]rxdfetap7hold_in;
  wire [0:0]rxdfetap7ovrden_in;
  wire [0:0]rxdfetap8hold_in;
  wire [0:0]rxdfetap8ovrden_in;
  wire [0:0]rxdfetap9hold_in;
  wire [0:0]rxdfetap9ovrden_in;
  wire [0:0]rxdfeuthold_in;
  wire [0:0]rxdfeutovrden_in;
  wire [0:0]rxdfevphold_in;
  wire [0:0]rxdfevpovrden_in;
  wire [0:0]rxdfexyden_in;
  wire [0:0]rxdlybypass_in;
  wire [0:0]rxdlyen_in;
  wire [0:0]rxdlyovrden_in;
  wire [0:0]rxdlysreset_in;
  wire [0:0]rxdlysresetdone_out;
  wire [0:0]rxelecidle_out;
  wire [1:0]rxelecidlemode_in;
  wire [0:0]rxeqtraining_in;
  wire [0:0]rxgearboxslip_in;
  wire [5:0]rxheader_out;
  wire [1:0]rxheadervalid_out;
  wire [0:0]rxlatclk_in;
  wire [0:0]rxlfpstresetdet_out;
  wire [0:0]rxlfpsu2lpexitdet_out;
  wire [0:0]rxlfpsu3wakedet_out;
  wire [0:0]rxlpmen_in;
  wire [0:0]rxlpmgchold_in;
  wire [0:0]rxlpmgcovrden_in;
  wire [0:0]rxlpmhfhold_in;
  wire [0:0]rxlpmhfovrden_in;
  wire [0:0]rxlpmlfhold_in;
  wire [0:0]rxlpmlfklovrden_in;
  wire [0:0]rxlpmoshold_in;
  wire [0:0]rxlpmosovrden_in;
  wire [0:0]rxmcommaalignen_in;
  wire [7:0]rxmonitorout_out;
  wire [1:0]rxmonitorsel_in;
  wire [0:0]rxoobreset_in;
  wire [0:0]rxoscalreset_in;
  wire [0:0]rxoshold_in;
  wire [0:0]rxosintdone_out;
  wire [0:0]rxosintstarted_out;
  wire [0:0]rxosintstrobedone_out;
  wire [0:0]rxosintstrobestarted_out;
  wire [0:0]rxosovrden_in;
  wire [0:0]rxoutclk_out;
  wire [0:0]rxoutclkfabric_out;
  wire [0:0]rxoutclkpcs_out;
  wire [2:0]rxoutclksel_in;
  wire [0:0]rxpcommaalignen_in;
  wire [0:0]rxpcsreset_in;
  wire [0:0]rxphalign_in;
  wire [0:0]rxphaligndone_out;
  wire [0:0]rxphalignen_in;
  wire [0:0]rxphalignerr_out;
  wire [0:0]rxphdlypd_in;
  wire [0:0]rxphdlyreset_in;
  wire [0:0]rxphovrden_in;
  wire [1:0]rxpllclksel_in;
  wire [0:0]rxpmaresetdone_out;
  wire [0:0]rxpolarity_in;
  wire [0:0]rxprbscntreset_in;
  wire [0:0]rxprbserr_out;
  wire [0:0]rxprbslocked_out;
  wire [3:0]rxprbssel_in;
  wire [0:0]rxprgdivresetdone_out;
  wire [0:0]rxqpien_in;
  wire [0:0]rxqpisenn_out;
  wire [0:0]rxqpisenp_out;
  wire [0:0]rxratedone_out;
  wire [0:0]rxrecclkout_out;
  wire [0:0]rxresetdone_out;
  wire [0:0]rxslide_in;
  wire [0:0]rxsliderdy_out;
  wire [0:0]rxslipdone_out;
  wire [0:0]rxslipoutclk_in;
  wire [0:0]rxslipoutclkrdy_out;
  wire [0:0]rxslippma_in;
  wire [0:0]rxslippmardy_out;
  wire [1:0]rxstartofseq_out;
  wire [2:0]rxstatus_out;
  wire [0:0]rxsyncallin_in;
  wire [0:0]rxsyncdone_out;
  wire [0:0]rxsyncin_in;
  wire [0:0]rxsyncmode_in;
  wire [0:0]rxsyncout_out;
  wire [1:0]rxsysclksel_in;
  wire [0:0]rxtermination_in;
  wire [0:0]rxusrclk2_in;
  wire [0:0]rxusrclk_in;
  wire [0:0]rxvalid_out;
  wire [0:0]sigvalidclk_in;
  wire [19:0]tstin_in;
  wire [7:0]tx8b10bbypass_in;
  wire [0:0]tx8b10ben_in;
  wire [1:0]txbufstatus_out;
  wire [0:0]txcomfinish_out;
  wire [0:0]txcominit_in;
  wire [0:0]txcomsas_in;
  wire [0:0]txcomwake_in;
  wire [15:0]txctrl0_in;
  wire [15:0]txctrl1_in;
  wire [7:0]txctrl2_in;
  wire [7:0]txdataextendrsvd_in;
  wire [0:0]txdccdone_out;
  wire [0:0]txdccforcestart_in;
  wire [0:0]txdccreset_in;
  wire [1:0]txdeemph_in;
  wire [0:0]txdetectrx_in;
  wire [4:0]txdiffctrl_in;
  wire [0:0]txdlybypass_in;
  wire [0:0]txdlyen_in;
  wire [0:0]txdlyhold_in;
  wire [0:0]txdlyovrden_in;
  wire [0:0]txdlysreset_in;
  wire [0:0]txdlysresetdone_out;
  wire [0:0]txdlyupdown_in;
  wire [0:0]txelecidle_in;
  wire [5:0]txheader_in;
  wire [0:0]txinhibit_in;
  wire [0:0]txlatclk_in;
  wire [0:0]txlfpstreset_in;
  wire [0:0]txlfpsu2lpexit_in;
  wire [0:0]txlfpsu3wake_in;
  wire [6:0]txmaincursor_in;
  wire [2:0]txmargin_in;
  wire [0:0]txmuxdcdexhold_in;
  wire [0:0]txmuxdcdorwren_in;
  wire [0:0]txoneszeros_in;
  wire [0:0]txoutclk_out;
  wire [0:0]txoutclkfabric_out;
  wire [0:0]txoutclkpcs_out;
  wire [0:0]txpcsreset_in;
  wire [1:0]txpd_in;
  wire [0:0]txpdelecidlemode_in;
  wire [0:0]txphalign_in;
  wire [0:0]txphaligndone_out;
  wire [0:0]txphalignen_in;
  wire [0:0]txphdlypd_in;
  wire [0:0]txphdlyreset_in;
  wire [0:0]txphdlytstclk_in;
  wire [0:0]txphinit_in;
  wire [0:0]txphinitdone_out;
  wire [0:0]txphovrden_in;
  wire [0:0]txpippmen_in;
  wire [0:0]txpippmovrden_in;
  wire [0:0]txpippmpd_in;
  wire [0:0]txpippmsel_in;
  wire [4:0]txpippmstepsize_in;
  wire [0:0]txpisopd_in;
  wire [1:0]txpllclksel_in;
  wire [0:0]txpmareset_in;
  wire [0:0]txpmaresetdone_out;
  wire [0:0]txpolarity_in;
  wire [4:0]txpostcursor_in;
  wire [0:0]txprbsforceerr_in;
  wire [3:0]txprbssel_in;
  wire [4:0]txprecursor_in;
  wire [0:0]txqpibiasen_in;
  wire [0:0]txqpisenn_out;
  wire [0:0]txqpisenp_out;
  wire [0:0]txqpiweakpup_in;
  wire [2:0]txrate_in;
  wire [0:0]txratedone_out;
  wire [0:0]txratemode_in;
  wire [0:0]txresetdone_out;
  wire [6:0]txsequence_in;
  wire [0:0]txswing_in;
  wire [0:0]txsyncallin_in;
  wire [0:0]txsyncdone_out;
  wire [0:0]txsyncin_in;
  wire [0:0]txsyncmode_in;
  wire [0:0]txsyncout_out;
  wire [1:0]txsysclksel_in;
  wire [0:0]txusrclk2_in;
  wire [0:0]txusrclk_in;
  wire xlnx_opt_;
  wire xlnx_opt__1;

  assign lopt_1 = xlnx_opt_;
  assign lopt_2 = xlnx_opt__1;
  (* OPT_MODIFIED = "MLO" *) 
  BUFG_GT_SYNC BUFG_GT_SYNC
       (.CE(lopt),
        .CESYNC(xlnx_opt_),
        .CLK(txoutclk_out),
        .CLR(eyescanreset_in),
        .CLRSYNC(xlnx_opt__1));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_powergood_delay.intclk_rrst_n_r[4]_i_2 
       (.I0(\gen_gtwizard_gthe4.gtpowergood_int ),
        .O(cpllpd_int_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  GTHE4_CHANNEL #(
    .ACJTAG_DEBUG_MODE(1'b0),
    .ACJTAG_MODE(1'b0),
    .ACJTAG_RESET(1'b0),
    .ADAPT_CFG0(16'h1000),
    .ADAPT_CFG1(16'hC800),
    .ADAPT_CFG2(16'h0000),
    .ALIGN_COMMA_DOUBLE("FALSE"),
    .ALIGN_COMMA_ENABLE(10'b0001111111),
    .ALIGN_COMMA_WORD(1),
    .ALIGN_MCOMMA_DET("TRUE"),
    .ALIGN_MCOMMA_VALUE(10'b1010000011),
    .ALIGN_PCOMMA_DET("TRUE"),
    .ALIGN_PCOMMA_VALUE(10'b0101111100),
    .A_RXOSCALRESET(1'b0),
    .A_RXPROGDIVRESET(1'b0),
    .A_RXTERMINATION(1'b1),
    .A_TXDIFFCTRL(5'b01100),
    .A_TXPROGDIVRESET(1'b0),
    .CAPBYPASS_FORCE(1'b0),
    .CBCC_DATA_SOURCE_SEL("DECODED"),
    .CDR_SWAP_MODE_EN(1'b0),
    .CFOK_PWRSVE_EN(1'b1),
    .CHAN_BOND_KEEP_ALIGN("FALSE"),
    .CHAN_BOND_MAX_SKEW(1),
    .CHAN_BOND_SEQ_1_1(10'b0000000000),
    .CHAN_BOND_SEQ_1_2(10'b0000000000),
    .CHAN_BOND_SEQ_1_3(10'b0000000000),
    .CHAN_BOND_SEQ_1_4(10'b0000000000),
    .CHAN_BOND_SEQ_1_ENABLE(4'b1111),
    .CHAN_BOND_SEQ_2_1(10'b0000000000),
    .CHAN_BOND_SEQ_2_2(10'b0000000000),
    .CHAN_BOND_SEQ_2_3(10'b0000000000),
    .CHAN_BOND_SEQ_2_4(10'b0000000000),
    .CHAN_BOND_SEQ_2_ENABLE(4'b1111),
    .CHAN_BOND_SEQ_2_USE("FALSE"),
    .CHAN_BOND_SEQ_LEN(1),
    .CH_HSPMUX(16'h3C3C),
    .CKCAL1_CFG_0(16'b1100000011000000),
    .CKCAL1_CFG_1(16'b0101000011000000),
    .CKCAL1_CFG_2(16'b0000000000001010),
    .CKCAL1_CFG_3(16'b0000000000000000),
    .CKCAL2_CFG_0(16'b1100000011000000),
    .CKCAL2_CFG_1(16'b1000000011000000),
    .CKCAL2_CFG_2(16'b0000000000000000),
    .CKCAL2_CFG_3(16'b0000000000000000),
    .CKCAL2_CFG_4(16'b0000000000000000),
    .CKCAL_RSVD0(16'h0080),
    .CKCAL_RSVD1(16'h0400),
    .CLK_CORRECT_USE("FALSE"),
    .CLK_COR_KEEP_IDLE("FALSE"),
    .CLK_COR_MAX_LAT(12),
    .CLK_COR_MIN_LAT(8),
    .CLK_COR_PRECEDENCE("TRUE"),
    .CLK_COR_REPEAT_WAIT(0),
    .CLK_COR_SEQ_1_1(10'b0100000000),
    .CLK_COR_SEQ_1_2(10'b0100000000),
    .CLK_COR_SEQ_1_3(10'b0100000000),
    .CLK_COR_SEQ_1_4(10'b0100000000),
    .CLK_COR_SEQ_1_ENABLE(4'b1111),
    .CLK_COR_SEQ_2_1(10'b0100000000),
    .CLK_COR_SEQ_2_2(10'b0100000000),
    .CLK_COR_SEQ_2_3(10'b0100000000),
    .CLK_COR_SEQ_2_4(10'b0100000000),
    .CLK_COR_SEQ_2_ENABLE(4'b1111),
    .CLK_COR_SEQ_2_USE("FALSE"),
    .CLK_COR_SEQ_LEN(1),
    .CPLL_CFG0(16'h01FA),
    .CPLL_CFG1(16'h0023),
    .CPLL_CFG2(16'h0002),
    .CPLL_CFG3(16'h0000),
    .CPLL_FBDIV(5),
    .CPLL_FBDIV_45(4),
    .CPLL_INIT_CFG0(16'h02B2),
    .CPLL_LOCK_CFG(16'h01E8),
    .CPLL_REFCLK_DIV(1),
    .CTLE3_OCAP_EXT_CTRL(3'b000),
    .CTLE3_OCAP_EXT_EN(1'b0),
    .DDI_CTRL(2'b00),
    .DDI_REALIGN_WAIT(15),
    .DEC_MCOMMA_DETECT("TRUE"),
    .DEC_PCOMMA_DETECT("TRUE"),
    .DEC_VALID_COMMA_ONLY("FALSE"),
    .DELAY_ELEC(1'b0),
    .DMONITOR_CFG0(10'h000),
    .DMONITOR_CFG1(8'h00),
    .ES_CLK_PHASE_SEL(1'b0),
    .ES_CONTROL(6'b000000),
    .ES_ERRDET_EN("FALSE"),
    .ES_EYE_SCAN_EN("FALSE"),
    .ES_HORZ_OFFSET(12'h000),
    .ES_PRESCALE(5'b00000),
    .ES_QUALIFIER0(16'h0000),
    .ES_QUALIFIER1(16'h0000),
    .ES_QUALIFIER2(16'h0000),
    .ES_QUALIFIER3(16'h0000),
    .ES_QUALIFIER4(16'h0000),
    .ES_QUALIFIER5(16'h0000),
    .ES_QUALIFIER6(16'h0000),
    .ES_QUALIFIER7(16'h0000),
    .ES_QUALIFIER8(16'h0000),
    .ES_QUALIFIER9(16'h0000),
    .ES_QUAL_MASK0(16'h0000),
    .ES_QUAL_MASK1(16'h0000),
    .ES_QUAL_MASK2(16'h0000),
    .ES_QUAL_MASK3(16'h0000),
    .ES_QUAL_MASK4(16'h0000),
    .ES_QUAL_MASK5(16'h0000),
    .ES_QUAL_MASK6(16'h0000),
    .ES_QUAL_MASK7(16'h0000),
    .ES_QUAL_MASK8(16'h0000),
    .ES_QUAL_MASK9(16'h0000),
    .ES_SDATA_MASK0(16'h0000),
    .ES_SDATA_MASK1(16'h0000),
    .ES_SDATA_MASK2(16'h0000),
    .ES_SDATA_MASK3(16'h0000),
    .ES_SDATA_MASK4(16'h0000),
    .ES_SDATA_MASK5(16'h0000),
    .ES_SDATA_MASK6(16'h0000),
    .ES_SDATA_MASK7(16'h0000),
    .ES_SDATA_MASK8(16'h0000),
    .ES_SDATA_MASK9(16'h0000),
    .EYE_SCAN_SWAP_EN(1'b0),
    .FTS_DESKEW_SEQ_ENABLE(4'b1111),
    .FTS_LANE_DESKEW_CFG(4'b1111),
    .FTS_LANE_DESKEW_EN("FALSE"),
    .GEARBOX_MODE(5'b00000),
    .ISCAN_CK_PH_SEL2(1'b0),
    .LOCAL_MASTER(1'b1),
    .LPBK_BIAS_CTRL(3'b100),
    .LPBK_EN_RCAL_B(1'b0),
    .LPBK_EXT_RCAL(4'b1000),
    .LPBK_IND_CTRL0(3'b000),
    .LPBK_IND_CTRL1(3'b000),
    .LPBK_IND_CTRL2(3'b000),
    .LPBK_RG_CTRL(4'b1110),
    .OOBDIVCTL(2'b00),
    .OOB_PWRUP(1'b0),
    .PCI3_AUTO_REALIGN("OVR_1K_BLK"),
    .PCI3_PIPE_RX_ELECIDLE(1'b0),
    .PCI3_RX_ASYNC_EBUF_BYPASS(2'b00),
    .PCI3_RX_ELECIDLE_EI2_ENABLE(1'b0),
    .PCI3_RX_ELECIDLE_H2L_COUNT(6'b000000),
    .PCI3_RX_ELECIDLE_H2L_DISABLE(3'b000),
    .PCI3_RX_ELECIDLE_HI_COUNT(6'b000000),
    .PCI3_RX_ELECIDLE_LP4_DISABLE(1'b0),
    .PCI3_RX_FIFO_DISABLE(1'b0),
    .PCIE3_CLK_COR_EMPTY_THRSH(5'b00000),
    .PCIE3_CLK_COR_FULL_THRSH(6'b010000),
    .PCIE3_CLK_COR_MAX_LAT(5'b00100),
    .PCIE3_CLK_COR_MIN_LAT(5'b00000),
    .PCIE3_CLK_COR_THRSH_TIMER(6'b001000),
    .PCIE_BUFG_DIV_CTRL(16'h1000),
    .PCIE_PLL_SEL_MODE_GEN12(2'h0),
    .PCIE_PLL_SEL_MODE_GEN3(2'h3),
    .PCIE_PLL_SEL_MODE_GEN4(2'h2),
    .PCIE_RXPCS_CFG_GEN3(16'h0AA5),
    .PCIE_RXPMA_CFG(16'h280A),
    .PCIE_TXPCS_CFG_GEN3(16'h2CA4),
    .PCIE_TXPMA_CFG(16'h280A),
    .PCS_PCIE_EN("FALSE"),
    .PCS_RSVD0(16'b0000000000000000),
    .PD_TRANS_TIME_FROM_P2(12'h03C),
    .PD_TRANS_TIME_NONE_P2(8'h19),
    .PD_TRANS_TIME_TO_P2(8'h64),
    .PREIQ_FREQ_BST(0),
    .PROCESS_PAR(3'b010),
    .RATE_SW_USE_DRP(1'b1),
    .RCLK_SIPO_DLY_ENB(1'b0),
    .RCLK_SIPO_INV_EN(1'b0),
    .RESET_POWERSAVE_DISABLE(1'b0),
    .RTX_BUF_CML_CTRL(3'b010),
    .RTX_BUF_TERM_CTRL(2'b00),
    .RXBUFRESET_TIME(5'b00011),
    .RXBUF_ADDR_MODE("FAST"),
    .RXBUF_EIDLE_HI_CNT(4'b1000),
    .RXBUF_EIDLE_LO_CNT(4'b0000),
    .RXBUF_EN("TRUE"),
    .RXBUF_RESET_ON_CB_CHANGE("TRUE"),
    .RXBUF_RESET_ON_COMMAALIGN("FALSE"),
    .RXBUF_RESET_ON_EIDLE("FALSE"),
    .RXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .RXBUF_THRESH_OVFLW(57),
    .RXBUF_THRESH_OVRD("TRUE"),
    .RXBUF_THRESH_UNDFLW(3),
    .RXCDRFREQRESET_TIME(5'b00001),
    .RXCDRPHRESET_TIME(5'b00001),
    .RXCDR_CFG0(16'h0003),
    .RXCDR_CFG0_GEN3(16'h0003),
    .RXCDR_CFG1(16'h0000),
    .RXCDR_CFG1_GEN3(16'h0000),
    .RXCDR_CFG2(16'h0265),
    .RXCDR_CFG2_GEN2(10'h265),
    .RXCDR_CFG2_GEN3(16'h0265),
    .RXCDR_CFG2_GEN4(16'h0164),
    .RXCDR_CFG3(16'h0012),
    .RXCDR_CFG3_GEN2(6'h12),
    .RXCDR_CFG3_GEN3(16'h0012),
    .RXCDR_CFG3_GEN4(16'h0012),
    .RXCDR_CFG4(16'h5CF6),
    .RXCDR_CFG4_GEN3(16'h5CF6),
    .RXCDR_CFG5(16'hB46B),
    .RXCDR_CFG5_GEN3(16'h146B),
    .RXCDR_FR_RESET_ON_EIDLE(1'b0),
    .RXCDR_HOLD_DURING_EIDLE(1'b0),
    .RXCDR_LOCK_CFG0(16'h2201),
    .RXCDR_LOCK_CFG1(16'h9FFF),
    .RXCDR_LOCK_CFG2(16'h77C3),
    .RXCDR_LOCK_CFG3(16'h0001),
    .RXCDR_LOCK_CFG4(16'h0000),
    .RXCDR_PH_RESET_ON_EIDLE(1'b0),
    .RXCFOK_CFG0(16'h0000),
    .RXCFOK_CFG1(16'h8015),
    .RXCFOK_CFG2(16'h02AE),
    .RXCKCAL1_IQ_LOOP_RST_CFG(16'h0004),
    .RXCKCAL1_I_LOOP_RST_CFG(16'h0004),
    .RXCKCAL1_Q_LOOP_RST_CFG(16'h0004),
    .RXCKCAL2_DX_LOOP_RST_CFG(16'h0004),
    .RXCKCAL2_D_LOOP_RST_CFG(16'h0004),
    .RXCKCAL2_S_LOOP_RST_CFG(16'h0004),
    .RXCKCAL2_X_LOOP_RST_CFG(16'h0004),
    .RXDFELPMRESET_TIME(7'b0001111),
    .RXDFELPM_KL_CFG0(16'h0000),
    .RXDFELPM_KL_CFG1(16'hA0E2),
    .RXDFELPM_KL_CFG2(16'h0100),
    .RXDFE_CFG0(16'h0A00),
    .RXDFE_CFG1(16'h0000),
    .RXDFE_GC_CFG0(16'h0000),
    .RXDFE_GC_CFG1(16'h8000),
    .RXDFE_GC_CFG2(16'hFFE0),
    .RXDFE_H2_CFG0(16'h0000),
    .RXDFE_H2_CFG1(16'h0002),
    .RXDFE_H3_CFG0(16'h0000),
    .RXDFE_H3_CFG1(16'h8002),
    .RXDFE_H4_CFG0(16'h0000),
    .RXDFE_H4_CFG1(16'h8002),
    .RXDFE_H5_CFG0(16'h0000),
    .RXDFE_H5_CFG1(16'h8002),
    .RXDFE_H6_CFG0(16'h0000),
    .RXDFE_H6_CFG1(16'h8002),
    .RXDFE_H7_CFG0(16'h0000),
    .RXDFE_H7_CFG1(16'h8002),
    .RXDFE_H8_CFG0(16'h0000),
    .RXDFE_H8_CFG1(16'h8002),
    .RXDFE_H9_CFG0(16'h0000),
    .RXDFE_H9_CFG1(16'h8002),
    .RXDFE_HA_CFG0(16'h0000),
    .RXDFE_HA_CFG1(16'h8002),
    .RXDFE_HB_CFG0(16'h0000),
    .RXDFE_HB_CFG1(16'h8002),
    .RXDFE_HC_CFG0(16'h0000),
    .RXDFE_HC_CFG1(16'h8002),
    .RXDFE_HD_CFG0(16'h0000),
    .RXDFE_HD_CFG1(16'h8002),
    .RXDFE_HE_CFG0(16'h0000),
    .RXDFE_HE_CFG1(16'h8002),
    .RXDFE_HF_CFG0(16'h0000),
    .RXDFE_HF_CFG1(16'h8002),
    .RXDFE_KH_CFG0(16'h0000),
    .RXDFE_KH_CFG1(16'h8000),
    .RXDFE_KH_CFG2(16'h2613),
    .RXDFE_KH_CFG3(16'h411C),
    .RXDFE_OS_CFG0(16'h0000),
    .RXDFE_OS_CFG1(16'h8002),
    .RXDFE_PWR_SAVING(1'b1),
    .RXDFE_UT_CFG0(16'h0000),
    .RXDFE_UT_CFG1(16'h0003),
    .RXDFE_UT_CFG2(16'h0000),
    .RXDFE_VP_CFG0(16'h0000),
    .RXDFE_VP_CFG1(16'h8033),
    .RXDLY_CFG(16'h0010),
    .RXDLY_LCFG(16'h0030),
    .RXELECIDLE_CFG("SIGCFG_4"),
    .RXGBOX_FIFO_INIT_RD_ADDR(4),
    .RXGEARBOX_EN("FALSE"),
    .RXISCANRESET_TIME(5'b00001),
    .RXLPM_CFG(16'h0000),
    .RXLPM_GC_CFG(16'h8000),
    .RXLPM_KH_CFG0(16'h0000),
    .RXLPM_KH_CFG1(16'h0002),
    .RXLPM_OS_CFG0(16'h0000),
    .RXLPM_OS_CFG1(16'h8002),
    .RXOOB_CFG(9'b000000110),
    .RXOOB_CLK_CFG("PMA"),
    .RXOSCALRESET_TIME(5'b00011),
    .RXOUT_DIV(1),
    .RXPCSRESET_TIME(5'b00011),
    .RXPHBEACON_CFG(16'h0000),
    .RXPHDLY_CFG(16'h2070),
    .RXPHSAMP_CFG(16'h2100),
    .RXPHSLIP_CFG(16'h9933),
    .RXPH_MONITOR_SEL(5'b00000),
    .RXPI_AUTO_BW_SEL_BYPASS(1'b0),
    .RXPI_CFG0(16'h1300),
    .RXPI_CFG1(16'b0000000011111101),
    .RXPI_LPM(1'b0),
    .RXPI_SEL_LC(2'b00),
    .RXPI_STARTCODE(2'b00),
    .RXPI_VREFSEL(1'b0),
    .RXPMACLK_SEL("DATA"),
    .RXPMARESET_TIME(5'b00011),
    .RXPRBS_ERR_LOOPBACK(1'b0),
    .RXPRBS_LINKACQ_CNT(15),
    .RXREFCLKDIV2_SEL(1'b0),
    .RXSLIDE_AUTO_WAIT(7),
    .RXSLIDE_MODE("OFF"),
    .RXSYNC_MULTILANE(1'b0),
    .RXSYNC_OVRD(1'b0),
    .RXSYNC_SKIP_DA(1'b0),
    .RX_AFE_CM_EN(1'b0),
    .RX_BIAS_CFG0(16'h1554),
    .RX_BUFFER_CFG(6'b000000),
    .RX_CAPFF_SARC_ENB(1'b0),
    .RX_CLK25_DIV(5),
    .RX_CLKMUX_EN(1'b1),
    .RX_CLK_SLIP_OVRD(5'b00000),
    .RX_CM_BUF_CFG(4'b1010),
    .RX_CM_BUF_PD(1'b0),
    .RX_CM_SEL(3),
    .RX_CM_TRIM(10),
    .RX_CTLE3_LPF(8'b11111111),
    .RX_DATA_WIDTH(40),
    .RX_DDI_SEL(6'b000000),
    .RX_DEFER_RESET_BUF_EN("TRUE"),
    .RX_DEGEN_CTRL(3'b011),
    .RX_DFELPM_CFG0(6),
    .RX_DFELPM_CFG1(1'b1),
    .RX_DFELPM_KLKH_AGC_STUP_EN(1'b1),
    .RX_DFE_AGC_CFG0(2'b10),
    .RX_DFE_AGC_CFG1(4),
    .RX_DFE_KL_LPM_KH_CFG0(1),
    .RX_DFE_KL_LPM_KH_CFG1(4),
    .RX_DFE_KL_LPM_KL_CFG0(2'b01),
    .RX_DFE_KL_LPM_KL_CFG1(4),
    .RX_DFE_LPM_HOLD_DURING_EIDLE(1'b0),
    .RX_DISPERR_SEQ_MATCH("TRUE"),
    .RX_DIV2_MODE_B(1'b0),
    .RX_DIVRESET_TIME(5'b00001),
    .RX_EN_CTLE_RCAL_B(1'b0),
    .RX_EN_HI_LR(1'b1),
    .RX_EXT_RL_CTRL(9'b000000000),
    .RX_EYESCAN_VS_CODE(7'b0000000),
    .RX_EYESCAN_VS_NEG_DIR(1'b0),
    .RX_EYESCAN_VS_RANGE(2'b00),
    .RX_EYESCAN_VS_UT_SIGN(1'b0),
    .RX_FABINT_USRCLK_FLOP(1'b0),
    .RX_INT_DATAWIDTH(1),
    .RX_PMA_POWER_SAVE(1'b0),
    .RX_PMA_RSV0(16'h0000),
    .RX_PROGDIV_CFG(0.000000),
    .RX_PROGDIV_RATE(16'h0001),
    .RX_RESLOAD_CTRL(4'b0000),
    .RX_RESLOAD_OVRD(1'b0),
    .RX_SAMPLE_PERIOD(3'b111),
    .RX_SIG_VALID_DLY(11),
    .RX_SUM_DFETAPREP_EN(1'b0),
    .RX_SUM_IREF_TUNE(4'b0100),
    .RX_SUM_RESLOAD_CTRL(4'b0011),
    .RX_SUM_VCMTUNE(4'b0110),
    .RX_SUM_VCM_OVWR(1'b0),
    .RX_SUM_VREF_TUNE(3'b100),
    .RX_TUNE_AFE_OS(2'b00),
    .RX_VREG_CTRL(3'b101),
    .RX_VREG_PDB(1'b1),
    .RX_WIDEMODE_CDR(2'b00),
    .RX_WIDEMODE_CDR_GEN3(2'b00),
    .RX_WIDEMODE_CDR_GEN4(2'b01),
    .RX_XCLK_SEL("RXDES"),
    .RX_XMODE_SEL(1'b0),
    .SAMPLE_CLK_PHASE(1'b0),
    .SAS_12G_MODE(1'b0),
    .SATA_BURST_SEQ_LEN(4'b1111),
    .SATA_BURST_VAL(3'b100),
    .SATA_CPLL_CFG("VCO_3000MHZ"),
    .SATA_EIDLE_VAL(3'b100),
    .SHOW_REALIGN_COMMA("TRUE"),
    .SIM_DEVICE("ULTRASCALE_PLUS"),
    .SIM_MODE("FAST"),
    .SIM_RECEIVER_DETECT_PASS("TRUE"),
    .SIM_RESET_SPEEDUP("TRUE"),
    .SIM_TX_EIDLE_DRIVE_LEVEL("Z"),
    .SRSTMODE(1'b0),
    .TAPDLY_SET_TX(2'h0),
    .TEMPERATURE_PAR(4'b0010),
    .TERM_RCAL_CFG(15'b100001000010001),
    .TERM_RCAL_OVRD(3'b000),
    .TRANS_TIME_RATE(8'h0E),
    .TST_RSV0(8'h00),
    .TST_RSV1(8'h00),
    .TXBUF_EN("TRUE"),
    .TXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .TXDLY_CFG(16'h8010),
    .TXDLY_LCFG(16'h0030),
    .TXDRVBIAS_N(4'b1010),
    .TXFIFO_ADDR_CFG("LOW"),
    .TXGBOX_FIFO_INIT_RD_ADDR(4),
    .TXGEARBOX_EN("FALSE"),
    .TXOUT_DIV(1),
    .TXPCSRESET_TIME(5'b00011),
    .TXPHDLY_CFG0(16'h6070),
    .TXPHDLY_CFG1(16'h000F),
    .TXPH_CFG(16'h0323),
    .TXPH_CFG2(16'h0000),
    .TXPH_MONITOR_SEL(5'b00000),
    .TXPI_CFG(16'h03DF),
    .TXPI_CFG0(2'b00),
    .TXPI_CFG1(2'b00),
    .TXPI_CFG2(2'b00),
    .TXPI_CFG3(1'b1),
    .TXPI_CFG4(1'b1),
    .TXPI_CFG5(3'b000),
    .TXPI_GRAY_SEL(1'b0),
    .TXPI_INVSTROBE_SEL(1'b0),
    .TXPI_LPM(1'b0),
    .TXPI_PPM(1'b0),
    .TXPI_PPMCLK_SEL("TXUSRCLK2"),
    .TXPI_PPM_CFG(8'b00000000),
    .TXPI_SYNFREQ_PPM(3'b001),
    .TXPI_VREFSEL(1'b0),
    .TXPMARESET_TIME(5'b00011),
    .TXREFCLKDIV2_SEL(1'b0),
    .TXSYNC_MULTILANE(1'b0),
    .TXSYNC_OVRD(1'b0),
    .TXSYNC_SKIP_DA(1'b0),
    .TX_CLK25_DIV(5),
    .TX_CLKMUX_EN(1'b1),
    .TX_DATA_WIDTH(40),
    .TX_DCC_LOOP_RST_CFG(16'h0004),
    .TX_DEEMPH0(6'b000000),
    .TX_DEEMPH1(6'b000000),
    .TX_DEEMPH2(6'b000000),
    .TX_DEEMPH3(6'b000000),
    .TX_DIVRESET_TIME(5'b00001),
    .TX_DRIVE_MODE("DIRECT"),
    .TX_DRVMUX_CTRL(2),
    .TX_EIDLE_ASSERT_DELAY(3'b100),
    .TX_EIDLE_DEASSERT_DELAY(3'b011),
    .TX_FABINT_USRCLK_FLOP(1'b0),
    .TX_FIFO_BYP_EN(1'b0),
    .TX_IDLE_DATA_ZERO(1'b0),
    .TX_INT_DATAWIDTH(1),
    .TX_LOOPBACK_DRIVE_HIZ("FALSE"),
    .TX_MAINCURSOR_SEL(1'b0),
    .TX_MARGIN_FULL_0(7'b1011111),
    .TX_MARGIN_FULL_1(7'b1011110),
    .TX_MARGIN_FULL_2(7'b1011100),
    .TX_MARGIN_FULL_3(7'b1011010),
    .TX_MARGIN_FULL_4(7'b1011000),
    .TX_MARGIN_LOW_0(7'b1000110),
    .TX_MARGIN_LOW_1(7'b1000101),
    .TX_MARGIN_LOW_2(7'b1000011),
    .TX_MARGIN_LOW_3(7'b1000010),
    .TX_MARGIN_LOW_4(7'b1000000),
    .TX_PHICAL_CFG0(16'h0000),
    .TX_PHICAL_CFG1(16'h7E00),
    .TX_PHICAL_CFG2(16'h0201),
    .TX_PI_BIASSET(0),
    .TX_PI_IBIAS_MID(2'b00),
    .TX_PMADATA_OPT(1'b0),
    .TX_PMA_POWER_SAVE(1'b0),
    .TX_PMA_RSV0(16'h0008),
    .TX_PREDRV_CTRL(2),
    .TX_PROGCLK_SEL("PREPI"),
    .TX_PROGDIV_CFG(0.000000),
    .TX_PROGDIV_RATE(16'h0001),
    .TX_QPI_STATUS_EN(1'b0),
    .TX_RXDETECT_CFG(14'h0032),
    .TX_RXDETECT_REF(4),
    .TX_SAMPLE_PERIOD(3'b111),
    .TX_SARC_LPBK_ENB(1'b0),
    .TX_SW_MEAS(2'b00),
    .TX_VREG_CTRL(3'b000),
    .TX_VREG_PDB(1'b0),
    .TX_VREG_VREFSEL(2'b00),
    .TX_XCLK_SEL("TXOUT"),
    .USB_BOTH_BURST_IDLE(1'b0),
    .USB_BURSTMAX_U3WAKE(7'b1111111),
    .USB_BURSTMIN_U3WAKE(7'b1100011),
    .USB_CLK_COR_EQ_EN(1'b0),
    .USB_EXT_CNTL(1'b1),
    .USB_IDLEMAX_POLLING(10'b1010111011),
    .USB_IDLEMIN_POLLING(10'b0100101011),
    .USB_LFPSPING_BURST(9'b000000101),
    .USB_LFPSPOLLING_BURST(9'b000110001),
    .USB_LFPSPOLLING_IDLE_MS(9'b000000100),
    .USB_LFPSU1EXIT_BURST(9'b000011101),
    .USB_LFPSU2LPEXIT_BURST_MS(9'b001100011),
    .USB_LFPSU3WAKE_BURST_MS(9'b111110011),
    .USB_LFPS_TPERIOD(4'b0011),
    .USB_LFPS_TPERIOD_ACCURATE(1'b1),
    .USB_MODE(1'b0),
    .USB_PCIE_ERR_REP_DIS(1'b0),
    .USB_PING_SATA_MAX_INIT(21),
    .USB_PING_SATA_MIN_INIT(12),
    .USB_POLL_SATA_MAX_BURST(8),
    .USB_POLL_SATA_MIN_BURST(4),
    .USB_RAW_ELEC(1'b0),
    .USB_RXIDLE_P0_CTRL(1'b1),
    .USB_TXIDLE_TUNE_ENABLE(1'b1),
    .USB_U1_SATA_MAX_WAKE(7),
    .USB_U1_SATA_MIN_WAKE(4),
    .USB_U2_SAS_MAX_COM(64),
    .USB_U2_SAS_MIN_COM(36),
    .USE_PCS_CLK_PHASE_SEL(1'b0),
    .Y_ALL_MODE(1'b0)) 
    \gthe4_channel_gen.gen_gthe4_channel_inst[0].GTHE4_CHANNEL_PRIM_INST 
       (.BUFGTCE(bufgtce_out),
        .BUFGTCEMASK(bufgtcemask_out),
        .BUFGTDIV(bufgtdiv_out),
        .BUFGTRESET(bufgtreset_out),
        .BUFGTRSTMASK(bufgtrstmask_out),
        .CDRSTEPDIR(cdrstepdir_in),
        .CDRSTEPSQ(cdrstepsq_in),
        .CDRSTEPSX(cdrstepsx_in),
        .CFGRESET(cfgreset_in),
        .CLKRSVD0(clkrsvd0_in),
        .CLKRSVD1(clkrsvd1_in),
        .CPLLFBCLKLOST(cpllfbclklost_out),
        .CPLLFREQLOCK(cpllfreqlock_in),
        .CPLLLOCK(GTHE4_CPLLLOCK_IN),
        .CPLLLOCKDETCLK(cplllockdetclk_in),
        .CPLLLOCKEN(cplllocken_in),
        .CPLLPD(i_in_meta_reg),
        .CPLLREFCLKLOST(cpllrefclklost_out),
        .CPLLREFCLKSEL(cpllrefclksel_in),
        .CPLLRESET(i_in_meta_reg_0),
        .DMONFIFORESET(dmonfiforeset_in),
        .DMONITORCLK(dmonitorclk_in),
        .DMONITOROUT(dmonitorout_out),
        .DMONITOROUTCLK(dmonitoroutclk_out),
        .DRPADDR(i_in_meta_reg_3),
        .DRPCLK(drpclk_in),
        .DRPDI(Q),
        .DRPDO(D),
        .DRPEN(GTHE4_CHANNEL_DRPEN_OUT),
        .DRPRDY(\gen_gtwizard_gthe4.drprdy_int ),
        .DRPRST(drprst_in),
        .DRPWE(GTHE4_CHANNEL_DRPWE_OUT),
        .EYESCANDATAERROR(eyescandataerror_out),
        .EYESCANRESET(eyescanreset_in),
        .EYESCANTRIGGER(eyescantrigger_in),
        .FREQOS(freqos_in),
        .GTGREFCLK(gtgrefclk_in),
        .GTHRXN(gthrxn_in),
        .GTHRXP(gthrxp_in),
        .GTHTXN(gthtxn_out),
        .GTHTXP(gthtxp_out),
        .GTNORTHREFCLK0(gtnorthrefclk0_in),
        .GTNORTHREFCLK1(gtnorthrefclk1_in),
        .GTPOWERGOOD(\gen_gtwizard_gthe4.gtpowergood_int ),
        .GTREFCLK0(gtrefclk0_in),
        .GTREFCLK1(gtrefclk1_in),
        .GTREFCLKMONITOR(gtrefclkmonitor_out),
        .GTRSVD(gtrsvd_in),
        .GTRXRESET(\gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ),
        .GTRXRESETSEL(gtrxresetsel_in),
        .GTSOUTHREFCLK0(gtsouthrefclk0_in),
        .GTSOUTHREFCLK1(gtsouthrefclk1_in),
        .GTTXRESET(\gen_gtwizard_gthe4.gttxreset_int ),
        .GTTXRESETSEL(gttxresetsel_in),
        .INCPCTRL(incpctrl_in),
        .LOOPBACK(loopback_in),
        .PCIEEQRXEQADAPTDONE(pcieeqrxeqadaptdone_in),
        .PCIERATEGEN3(pcierategen3_out),
        .PCIERATEIDLE(pcierateidle_out),
        .PCIERATEQPLLPD(pcierateqpllpd_out),
        .PCIERATEQPLLRESET(pcierateqpllreset_out),
        .PCIERSTIDLE(pcierstidle_in),
        .PCIERSTTXSYNCSTART(pciersttxsyncstart_in),
        .PCIESYNCTXSYNCDONE(pciesynctxsyncdone_out),
        .PCIEUSERGEN3RDY(pcieusergen3rdy_out),
        .PCIEUSERPHYSTATUSRST(pcieuserphystatusrst_out),
        .PCIEUSERRATEDONE(pcieuserratedone_in),
        .PCIEUSERRATESTART(pcieuserratestart_out),
        .PCSRSVDIN(pcsrsvdin_in),
        .PCSRSVDOUT(pcsrsvdout_out),
        .PHYSTATUS(phystatus_out),
        .PINRSRVDAS(pinrsrvdas_out),
        .POWERPRESENT(powerpresent_out),
        .QPLL0CLK(qpll0clk_in),
        .QPLL0FREQLOCK(qpll0freqlock_in),
        .QPLL0REFCLK(qpll0refclk_in),
        .QPLL1CLK(qpll1clk_in),
        .QPLL1FREQLOCK(qpll1freqlock_in),
        .QPLL1REFCLK(qpll1refclk_in),
        .RESETEXCEPTION(resetexception_out),
        .RESETOVRD(resetovrd_in),
        .RX8B10BEN(rx8b10ben_in),
        .RXAFECFOKEN(rxafecfoken_in),
        .RXBUFRESET(rxbufreset_in),
        .RXBUFSTATUS(rxbufstatus_out),
        .RXBYTEISALIGNED(rxbyteisaligned_out),
        .RXBYTEREALIGN(rxbyterealign_out),
        .RXCDRFREQRESET(rxcdrfreqreset_in),
        .RXCDRHOLD(rxcdrhold_in),
        .RXCDRLOCK(rxcdrlock_out),
        .RXCDROVRDEN(rxcdrovrden_in),
        .RXCDRPHDONE(rxcdrphdone_out),
        .RXCDRRESET(rxcdrreset_in),
        .RXCHANBONDSEQ(rxchanbondseq_out),
        .RXCHANISALIGNED(rxchanisaligned_out),
        .RXCHANREALIGN(rxchanrealign_out),
        .RXCHBONDEN(rxchbonden_in),
        .RXCHBONDI(rxchbondi_in),
        .RXCHBONDLEVEL(rxchbondlevel_in),
        .RXCHBONDMASTER(rxchbondmaster_in),
        .RXCHBONDO(rxchbondo_out),
        .RXCHBONDSLAVE(rxchbondslave_in),
        .RXCKCALDONE(rxckcaldone_out),
        .RXCKCALRESET(rxckcalreset_in),
        .RXCKCALSTART(rxckcalstart_in),
        .RXCLKCORCNT(rxclkcorcnt_out),
        .RXCOMINITDET(rxcominitdet_out),
        .RXCOMMADET(rxcommadet_out),
        .RXCOMMADETEN(rxcommadeten_in),
        .RXCOMSASDET(rxcomsasdet_out),
        .RXCOMWAKEDET(rxcomwakedet_out),
        .RXCTRL0(rxctrl0_out),
        .RXCTRL1(rxctrl1_out),
        .RXCTRL2(rxctrl2_out),
        .RXCTRL3(rxctrl3_out),
        .RXDATA(rxdata_out),
        .RXDATAEXTENDRSVD(rxdataextendrsvd_out),
        .RXDATAVALID(rxdatavalid_out),
        .RXDFEAGCCTRL(rxdfeagcctrl_in),
        .RXDFEAGCHOLD(rxdfeagchold_in),
        .RXDFEAGCOVRDEN(rxdfeagcovrden_in),
        .RXDFECFOKFCNUM(rxdfecfokfcnum_in),
        .RXDFECFOKFEN(rxdfecfokfen_in),
        .RXDFECFOKFPULSE(rxdfecfokfpulse_in),
        .RXDFECFOKHOLD(rxdfecfokhold_in),
        .RXDFECFOKOVREN(rxdfecfokovren_in),
        .RXDFEKHHOLD(rxdfekhhold_in),
        .RXDFEKHOVRDEN(rxdfekhovrden_in),
        .RXDFELFHOLD(rxdfelfhold_in),
        .RXDFELFOVRDEN(rxdfelfovrden_in),
        .RXDFELPMRESET(rxdfelpmreset_in),
        .RXDFETAP10HOLD(rxdfetap10hold_in),
        .RXDFETAP10OVRDEN(rxdfetap10ovrden_in),
        .RXDFETAP11HOLD(rxdfetap11hold_in),
        .RXDFETAP11OVRDEN(rxdfetap11ovrden_in),
        .RXDFETAP12HOLD(rxdfetap12hold_in),
        .RXDFETAP12OVRDEN(rxdfetap12ovrden_in),
        .RXDFETAP13HOLD(rxdfetap13hold_in),
        .RXDFETAP13OVRDEN(rxdfetap13ovrden_in),
        .RXDFETAP14HOLD(rxdfetap14hold_in),
        .RXDFETAP14OVRDEN(rxdfetap14ovrden_in),
        .RXDFETAP15HOLD(rxdfetap15hold_in),
        .RXDFETAP15OVRDEN(rxdfetap15ovrden_in),
        .RXDFETAP2HOLD(rxdfetap2hold_in),
        .RXDFETAP2OVRDEN(rxdfetap2ovrden_in),
        .RXDFETAP3HOLD(rxdfetap3hold_in),
        .RXDFETAP3OVRDEN(rxdfetap3ovrden_in),
        .RXDFETAP4HOLD(rxdfetap4hold_in),
        .RXDFETAP4OVRDEN(rxdfetap4ovrden_in),
        .RXDFETAP5HOLD(rxdfetap5hold_in),
        .RXDFETAP5OVRDEN(rxdfetap5ovrden_in),
        .RXDFETAP6HOLD(rxdfetap6hold_in),
        .RXDFETAP6OVRDEN(rxdfetap6ovrden_in),
        .RXDFETAP7HOLD(rxdfetap7hold_in),
        .RXDFETAP7OVRDEN(rxdfetap7ovrden_in),
        .RXDFETAP8HOLD(rxdfetap8hold_in),
        .RXDFETAP8OVRDEN(rxdfetap8ovrden_in),
        .RXDFETAP9HOLD(rxdfetap9hold_in),
        .RXDFETAP9OVRDEN(rxdfetap9ovrden_in),
        .RXDFEUTHOLD(rxdfeuthold_in),
        .RXDFEUTOVRDEN(rxdfeutovrden_in),
        .RXDFEVPHOLD(rxdfevphold_in),
        .RXDFEVPOVRDEN(rxdfevpovrden_in),
        .RXDFEXYDEN(rxdfexyden_in),
        .RXDLYBYPASS(rxdlybypass_in),
        .RXDLYEN(rxdlyen_in),
        .RXDLYOVRDEN(rxdlyovrden_in),
        .RXDLYSRESET(rxdlysreset_in),
        .RXDLYSRESETDONE(rxdlysresetdone_out),
        .RXELECIDLE(rxelecidle_out),
        .RXELECIDLEMODE(rxelecidlemode_in),
        .RXEQTRAINING(rxeqtraining_in),
        .RXGEARBOXSLIP(rxgearboxslip_in),
        .RXHEADER(rxheader_out),
        .RXHEADERVALID(rxheadervalid_out),
        .RXLATCLK(rxlatclk_in),
        .RXLFPSTRESETDET(rxlfpstresetdet_out),
        .RXLFPSU2LPEXITDET(rxlfpsu2lpexitdet_out),
        .RXLFPSU3WAKEDET(rxlfpsu3wakedet_out),
        .RXLPMEN(rxlpmen_in),
        .RXLPMGCHOLD(rxlpmgchold_in),
        .RXLPMGCOVRDEN(rxlpmgcovrden_in),
        .RXLPMHFHOLD(rxlpmhfhold_in),
        .RXLPMHFOVRDEN(rxlpmhfovrden_in),
        .RXLPMLFHOLD(rxlpmlfhold_in),
        .RXLPMLFKLOVRDEN(rxlpmlfklovrden_in),
        .RXLPMOSHOLD(rxlpmoshold_in),
        .RXLPMOSOVRDEN(rxlpmosovrden_in),
        .RXMCOMMAALIGNEN(rxmcommaalignen_in),
        .RXMONITOROUT(rxmonitorout_out),
        .RXMONITORSEL(rxmonitorsel_in),
        .RXOOBRESET(rxoobreset_in),
        .RXOSCALRESET(rxoscalreset_in),
        .RXOSHOLD(rxoshold_in),
        .RXOSINTDONE(rxosintdone_out),
        .RXOSINTSTARTED(rxosintstarted_out),
        .RXOSINTSTROBEDONE(rxosintstrobedone_out),
        .RXOSINTSTROBESTARTED(rxosintstrobestarted_out),
        .RXOSOVRDEN(rxosovrden_in),
        .RXOUTCLK(rxoutclk_out),
        .RXOUTCLKFABRIC(rxoutclkfabric_out),
        .RXOUTCLKPCS(rxoutclkpcs_out),
        .RXOUTCLKSEL(rxoutclksel_in),
        .RXPCOMMAALIGNEN(rxpcommaalignen_in),
        .RXPCSRESET(rxpcsreset_in),
        .RXPD(RXPD),
        .RXPHALIGN(rxphalign_in),
        .RXPHALIGNDONE(rxphaligndone_out),
        .RXPHALIGNEN(rxphalignen_in),
        .RXPHALIGNERR(rxphalignerr_out),
        .RXPHDLYPD(rxphdlypd_in),
        .RXPHDLYRESET(rxphdlyreset_in),
        .RXPHOVRDEN(rxphovrden_in),
        .RXPLLCLKSEL(rxpllclksel_in),
        .RXPMARESET(\gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ),
        .RXPMARESETDONE(rxpmaresetdone_out),
        .RXPOLARITY(rxpolarity_in),
        .RXPRBSCNTRESET(rxprbscntreset_in),
        .RXPRBSERR(rxprbserr_out),
        .RXPRBSLOCKED(rxprbslocked_out),
        .RXPRBSSEL(rxprbssel_in),
        .RXPRGDIVRESETDONE(rxprgdivresetdone_out),
        .RXPROGDIVRESET(\gen_gtwizard_gthe4.rxprogdivreset_int ),
        .RXQPIEN(rxqpien_in),
        .RXQPISENN(rxqpisenn_out),
        .RXQPISENP(rxqpisenp_out),
        .RXRATE(RXRATE),
        .RXRATEDONE(rxratedone_out),
        .RXRATEMODE(i_in_meta_reg_1),
        .RXRECCLKOUT(rxrecclkout_out),
        .RXRESETDONE(rxresetdone_out),
        .RXSLIDE(rxslide_in),
        .RXSLIDERDY(rxsliderdy_out),
        .RXSLIPDONE(rxslipdone_out),
        .RXSLIPOUTCLK(rxslipoutclk_in),
        .RXSLIPOUTCLKRDY(rxslipoutclkrdy_out),
        .RXSLIPPMA(rxslippma_in),
        .RXSLIPPMARDY(rxslippmardy_out),
        .RXSTARTOFSEQ(rxstartofseq_out),
        .RXSTATUS(rxstatus_out),
        .RXSYNCALLIN(rxsyncallin_in),
        .RXSYNCDONE(rxsyncdone_out),
        .RXSYNCIN(rxsyncin_in),
        .RXSYNCMODE(rxsyncmode_in),
        .RXSYNCOUT(rxsyncout_out),
        .RXSYSCLKSEL(rxsysclksel_in),
        .RXTERMINATION(rxtermination_in),
        .RXUSERRDY(\gen_gtwizard_gthe4.rxuserrdy_int ),
        .RXUSRCLK(rxusrclk_in),
        .RXUSRCLK2(rxusrclk2_in),
        .RXVALID(rxvalid_out),
        .SIGVALIDCLK(sigvalidclk_in),
        .TSTIN(tstin_in),
        .TX8B10BBYPASS(tx8b10bbypass_in),
        .TX8B10BEN(tx8b10ben_in),
        .TXBUFSTATUS(txbufstatus_out),
        .TXCOMFINISH(txcomfinish_out),
        .TXCOMINIT(txcominit_in),
        .TXCOMSAS(txcomsas_in),
        .TXCOMWAKE(txcomwake_in),
        .TXCTRL0(txctrl0_in),
        .TXCTRL1(txctrl1_in),
        .TXCTRL2(txctrl2_in),
        .TXDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,gtwiz_userdata_tx_in}),
        .TXDATAEXTENDRSVD(txdataextendrsvd_in),
        .TXDCCDONE(txdccdone_out),
        .TXDCCFORCESTART(txdccforcestart_in),
        .TXDCCRESET(txdccreset_in),
        .TXDEEMPH(txdeemph_in),
        .TXDETECTRX(txdetectrx_in),
        .TXDIFFCTRL(txdiffctrl_in),
        .TXDLYBYPASS(txdlybypass_in),
        .TXDLYEN(txdlyen_in),
        .TXDLYHOLD(txdlyhold_in),
        .TXDLYOVRDEN(txdlyovrden_in),
        .TXDLYSRESET(txdlysreset_in),
        .TXDLYSRESETDONE(txdlysresetdone_out),
        .TXDLYUPDOWN(txdlyupdown_in),
        .TXELECIDLE(txelecidle_in),
        .TXHEADER(txheader_in),
        .TXINHIBIT(txinhibit_in),
        .TXLATCLK(txlatclk_in),
        .TXLFPSTRESET(txlfpstreset_in),
        .TXLFPSU2LPEXIT(txlfpsu2lpexit_in),
        .TXLFPSU3WAKE(txlfpsu3wake_in),
        .TXMAINCURSOR(txmaincursor_in),
        .TXMARGIN(txmargin_in),
        .TXMUXDCDEXHOLD(txmuxdcdexhold_in),
        .TXMUXDCDORWREN(txmuxdcdorwren_in),
        .TXONESZEROS(txoneszeros_in),
        .TXOUTCLK(txoutclk_out),
        .TXOUTCLKFABRIC(txoutclkfabric_out),
        .TXOUTCLKPCS(txoutclkpcs_out),
        .TXOUTCLKSEL(i_in_meta_reg_2),
        .TXPCSRESET(txpcsreset_in),
        .TXPD(txpd_in),
        .TXPDELECIDLEMODE(txpdelecidlemode_in),
        .TXPHALIGN(txphalign_in),
        .TXPHALIGNDONE(txphaligndone_out),
        .TXPHALIGNEN(txphalignen_in),
        .TXPHDLYPD(txphdlypd_in),
        .TXPHDLYRESET(txphdlyreset_in),
        .TXPHDLYTSTCLK(txphdlytstclk_in),
        .TXPHINIT(txphinit_in),
        .TXPHINITDONE(txphinitdone_out),
        .TXPHOVRDEN(txphovrden_in),
        .TXPIPPMEN(txpippmen_in),
        .TXPIPPMOVRDEN(txpippmovrden_in),
        .TXPIPPMPD(txpippmpd_in),
        .TXPIPPMSEL(txpippmsel_in),
        .TXPIPPMSTEPSIZE(txpippmstepsize_in),
        .TXPISOPD(txpisopd_in),
        .TXPLLCLKSEL(txpllclksel_in),
        .TXPMARESET(txpmareset_in),
        .TXPMARESETDONE(txpmaresetdone_out),
        .TXPOLARITY(txpolarity_in),
        .TXPOSTCURSOR(txpostcursor_in),
        .TXPRBSFORCEERR(txprbsforceerr_in),
        .TXPRBSSEL(txprbssel_in),
        .TXPRECURSOR(txprecursor_in),
        .TXPRGDIVRESETDONE(GTHE4_TXPRGDIVRESETDONE_IN),
        .TXPROGDIVRESET(GTHE4_TXPROGDIVRESET_OUT),
        .TXQPIBIASEN(txqpibiasen_in),
        .TXQPISENN(txqpisenn_out),
        .TXQPISENP(txqpisenp_out),
        .TXQPIWEAKPUP(txqpiweakpup_in),
        .TXRATE(txrate_in),
        .TXRATEDONE(txratedone_out),
        .TXRATEMODE(txratemode_in),
        .TXRESETDONE(txresetdone_out),
        .TXSEQUENCE(txsequence_in),
        .TXSWING(txswing_in),
        .TXSYNCALLIN(txsyncallin_in),
        .TXSYNCDONE(txsyncdone_out),
        .TXSYNCIN(txsyncin_in),
        .TXSYNCMODE(txsyncmode_in),
        .TXSYNCOUT(txsyncout_out),
        .TXSYSCLKSEL(txsysclksel_in),
        .TXUSERRDY(\gen_gtwizard_gthe4.txuserrdy_int ),
        .TXUSRCLK(txusrclk_in),
        .TXUSRCLK2(txusrclk2_in));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal
   (i_in_out,
    freq_counter_rst_reg,
    GTHE4_TXPROGDIVRESET_OUT,
    GTHE4_CHANNEL_DRPEN_OUT,
    GTHE4_CHANNEL_DRPWE_OUT,
    status_store_reg,
    cal_fail_store_reg,
    mask_user_in_reg,
    cpllpd_int_reg,
    cpllreset_int_reg,
    wr,
    rd,
    txprgdivresetdone_out,
    USER_CPLLLOCK_OUT_reg,
    txprogdivreset_int,
    cal_on_tx_drpen_out,
    cal_on_tx_drpwe_out,
    done_reg,
    Q,
    \drp_state_reg[6] ,
    \wait_ctr_reg[12] ,
    \wait_ctr_reg[14] ,
    \cpll_cal_state_reg[27] ,
    \cpll_cal_state_reg[11] ,
    \cpll_cal_state_reg[8] ,
    \cpll_cal_state_reg[25] ,
    rst_in0,
    \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2] ,
    \DO_USR_O_reg[47] ,
    \drp_state_reg[6]_0 ,
    drprdy_out,
    \DADDR_O_reg[9] ,
    \DI_O_reg[15] ,
    rst_in_out_reg,
    \cpll_cal_state_reg[13] ,
    \wait_ctr_reg[11] ,
    \cpll_cal_state_reg[14] ,
    \cpll_cal_state_reg[5] ,
    \cpll_cal_state_reg[13]_0 ,
    \cpll_cal_state_reg[9] ,
    \cpll_cal_state_reg[5]_0 ,
    \cpll_cal_state_reg[8]_0 ,
    \cpll_cal_state_reg[14]_0 ,
    \repeat_ctr_reg[3] ,
    \cpll_cal_state_reg[22] ,
    \drp_state_reg[5] ,
    \drp_state_reg[0] ,
    \cpll_cal_state_reg[5]_1 ,
    \drp_state_reg[4] ,
    drprst_in,
    GTHE4_CPLLLOCK_IN,
    in0,
    GTHE4_TXPRGDIVRESETDONE_IN,
    txoutclksel_in,
    gtwiz_userclk_tx_reset_in,
    txoutclk_out,
    drpclk_in,
    status_store_reg_0,
    freq_counter_rst_reg_0,
    cal_fail_store_reg_0,
    mask_user_in_reg_0,
    cpllpd_int_reg_0,
    cpllreset_int_reg_0,
    wr_reg,
    rd_reg,
    USER_TXPRGDIVRESETDONE_OUT_reg,
    txprogdivreset_int_reg,
    den_reg,
    dwe_reg,
    done_reg_0,
    drpaddr_in,
    drpwe_in,
    drpdi_in,
    D,
    drpen_in,
    RESET_IN,
    \gen_gtwizard_gthe4.drprdy_int ,
    lopt,
    lopt_1,
    lopt_2);
  output i_in_out;
  output freq_counter_rst_reg;
  output GTHE4_TXPROGDIVRESET_OUT;
  output GTHE4_CHANNEL_DRPEN_OUT;
  output GTHE4_CHANNEL_DRPWE_OUT;
  output status_store_reg;
  output cal_fail_store_reg;
  output mask_user_in_reg;
  output cpllpd_int_reg;
  output cpllreset_int_reg;
  output wr;
  output rd;
  output [0:0]txprgdivresetdone_out;
  output USER_CPLLLOCK_OUT_reg;
  output txprogdivreset_int;
  output cal_on_tx_drpen_out;
  output cal_on_tx_drpwe_out;
  output done_reg;
  output [13:0]Q;
  output [4:0]\drp_state_reg[6] ;
  output \wait_ctr_reg[12] ;
  output \wait_ctr_reg[14] ;
  output \cpll_cal_state_reg[27] ;
  output \cpll_cal_state_reg[11] ;
  output \cpll_cal_state_reg[8] ;
  output \cpll_cal_state_reg[25] ;
  output rst_in0;
  output [2:0]\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2] ;
  output [16:0]\DO_USR_O_reg[47] ;
  output [1:0]\drp_state_reg[6]_0 ;
  output [0:0]drprdy_out;
  output [9:0]\DADDR_O_reg[9] ;
  output [15:0]\DI_O_reg[15] ;
  output rst_in_out_reg;
  output \cpll_cal_state_reg[13] ;
  output \wait_ctr_reg[11] ;
  output \cpll_cal_state_reg[14] ;
  output \cpll_cal_state_reg[5] ;
  output \cpll_cal_state_reg[13]_0 ;
  output \cpll_cal_state_reg[9] ;
  output \cpll_cal_state_reg[5]_0 ;
  output \cpll_cal_state_reg[8]_0 ;
  output \cpll_cal_state_reg[14]_0 ;
  output \repeat_ctr_reg[3] ;
  output \cpll_cal_state_reg[22] ;
  output \drp_state_reg[5] ;
  output \drp_state_reg[0] ;
  output \cpll_cal_state_reg[5]_1 ;
  output \drp_state_reg[4] ;
  input [0:0]drprst_in;
  input GTHE4_CPLLLOCK_IN;
  input in0;
  input GTHE4_TXPRGDIVRESETDONE_IN;
  input [2:0]txoutclksel_in;
  input [0:0]gtwiz_userclk_tx_reset_in;
  input [0:0]txoutclk_out;
  input [0:0]drpclk_in;
  input status_store_reg_0;
  input freq_counter_rst_reg_0;
  input cal_fail_store_reg_0;
  input mask_user_in_reg_0;
  input cpllpd_int_reg_0;
  input cpllreset_int_reg_0;
  input wr_reg;
  input rd_reg;
  input USER_TXPRGDIVRESETDONE_OUT_reg;
  input txprogdivreset_int_reg;
  input den_reg;
  input dwe_reg;
  input done_reg_0;
  input [9:0]drpaddr_in;
  input [0:0]drpwe_in;
  input [15:0]drpdi_in;
  input [15:0]D;
  input [0:0]drpen_in;
  input RESET_IN;
  input \gen_gtwizard_gthe4.drprdy_int ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [15:0]D;
  wire [9:0]\DADDR_O_reg[9] ;
  wire [15:0]\DI_O_reg[15] ;
  wire [16:0]\DO_USR_O_reg[47] ;
  wire GTHE4_CHANNEL_DRPEN_OUT;
  wire GTHE4_CHANNEL_DRPWE_OUT;
  wire GTHE4_CPLLLOCK_IN;
  wire GTHE4_TXPRGDIVRESETDONE_IN;
  wire GTHE4_TXPROGDIVRESET_OUT;
  wire [13:0]Q;
  wire RESET_IN;
  wire USER_CPLLLOCK_OUT_reg;
  wire USER_TXPRGDIVRESETDONE_OUT_reg;
  wire bit_synchronizer_drprst_inst_n_1;
  wire bit_synchronizer_drprst_inst_n_2;
  wire cal_fail_store_reg;
  wire cal_fail_store_reg_0;
  wire [14:0]cal_on_tx_dout;
  wire cal_on_tx_drdy;
  wire [7:1]cal_on_tx_drpaddr_out;
  wire [15:0]cal_on_tx_drpdi_out;
  wire cal_on_tx_drpen_out;
  wire cal_on_tx_drpwe_out;
  wire cal_on_tx_reset_in_sync;
  wire \cpll_cal_state_reg[11] ;
  wire \cpll_cal_state_reg[13] ;
  wire \cpll_cal_state_reg[13]_0 ;
  wire \cpll_cal_state_reg[14] ;
  wire \cpll_cal_state_reg[14]_0 ;
  wire \cpll_cal_state_reg[22] ;
  wire \cpll_cal_state_reg[25] ;
  wire \cpll_cal_state_reg[27] ;
  wire \cpll_cal_state_reg[5] ;
  wire \cpll_cal_state_reg[5]_0 ;
  wire \cpll_cal_state_reg[5]_1 ;
  wire \cpll_cal_state_reg[8] ;
  wire \cpll_cal_state_reg[8]_0 ;
  wire \cpll_cal_state_reg[9] ;
  wire cpllpd_int_reg;
  wire cpllpd_int_reg_0;
  wire cpllreset_int_reg;
  wire cpllreset_int_reg_0;
  wire den_reg;
  wire done_reg;
  wire done_reg_0;
  wire \drp_state_reg[0] ;
  wire \drp_state_reg[4] ;
  wire \drp_state_reg[5] ;
  wire [4:0]\drp_state_reg[6] ;
  wire [1:0]\drp_state_reg[6]_0 ;
  wire [9:0]drpaddr_in;
  wire [0:0]drpclk_in;
  wire [15:0]drpdi_in;
  wire [0:0]drpen_in;
  wire [0:0]drprdy_out;
  wire [0:0]drprst_in;
  wire drprst_in_sync;
  wire [0:0]drpwe_in;
  wire dwe_reg;
  wire freq_counter_rst_reg;
  wire freq_counter_rst_reg_0;
  wire \gen_gtwizard_gthe4.drprdy_int ;
  wire [0:0]gtwiz_userclk_tx_reset_in;
  wire gtwizard_ultrascale_v1_7_6_gte4_drp_arb_i_n_6;
  wire gtwizard_ultrascale_v1_7_6_gte4_drp_arb_i_n_9;
  wire gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_40;
  wire gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_41;
  wire gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_42;
  wire gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_43;
  wire gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_44;
  wire gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_45;
  wire gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_46;
  wire i_in_out;
  wire in0;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire mask_user_in_reg;
  wire mask_user_in_reg_0;
  wire [2:0]\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2] ;
  wire [2:1]p_1_in;
  wire rd;
  wire rd_reg;
  wire \repeat_ctr_reg[3] ;
  wire rst_in0;
  wire rst_in_out_reg;
  wire status_store_reg;
  wire status_store_reg_0;
  wire [0:0]txoutclk_out;
  wire [2:0]txoutclksel_in;
  wire [0:0]txprgdivresetdone_out;
  wire txprogdivreset_int;
  wire txprogdivreset_int_reg;
  wire \wait_ctr_reg[11] ;
  wire \wait_ctr_reg[12] ;
  wire \wait_ctr_reg[14] ;
  wire wr;
  wire wr_reg;

  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_21 bit_synchronizer_drprst_inst
       (.D(p_1_in[1]),
        .E(bit_synchronizer_drprst_inst_n_1),
        .\addr_i_reg[1] (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_40),
        .\addr_i_reg[1]_0 (gtwizard_ultrascale_v1_7_6_gte4_drp_arb_i_n_9),
        .drpaddr_in({drpaddr_in[5:4],drpaddr_in[1]}),
        .drpclk_in(drpclk_in),
        .drpen_in(drpen_in),
        .drprst_in(drprst_in),
        .drprst_in_sync(drprst_in_sync),
        .i_in_out_reg_0(bit_synchronizer_drprst_inst_n_2),
        .\timeout_cntr_reg[0] (gtwizard_ultrascale_v1_7_6_gte4_drp_arb_i_n_6));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gte4_drp_arb gtwizard_ultrascale_v1_7_6_gte4_drp_arb_i
       (.D(D),
        .\DADDR_O_reg[9]_0 (\DADDR_O_reg[9] ),
        .\DI_O_reg[15]_0 (\DI_O_reg[15] ),
        .\DO_USR_O_reg[47]_0 ({\DO_USR_O_reg[47] [16],cal_on_tx_dout,\DO_USR_O_reg[47] [15:0]}),
        .E(bit_synchronizer_drprst_inst_n_1),
        .GTHE4_CHANNEL_DRPEN_OUT(GTHE4_CHANNEL_DRPEN_OUT),
        .GTHE4_CHANNEL_DRPWE_OUT(GTHE4_CHANNEL_DRPWE_OUT),
        .Q(\drp_state_reg[6]_0 ),
        .\addr_i[1]_i_3_0 (gtwizard_ultrascale_v1_7_6_gte4_drp_arb_i_n_9),
        .\addr_i_reg[0]_0 (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_43),
        .\addr_i_reg[27]_0 (cal_on_tx_drpen_out),
        .\addr_i_reg[27]_1 (cal_on_tx_drpaddr_out),
        .\addr_i_reg[2]_0 (bit_synchronizer_drprst_inst_n_2),
        .\addr_i_reg[2]_1 (p_1_in),
        .\addr_i_reg[3]_0 (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_46),
        .\addr_i_reg[5]_0 (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_42),
        .\addr_i_reg[6]_0 (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_41),
        .\addr_i_reg[7]_0 (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_45),
        .cal_on_tx_drdy(cal_on_tx_drdy),
        .cal_on_tx_drpwe_out(cal_on_tx_drpwe_out),
        .\data_i_reg[15]_0 (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_44),
        .\data_i_reg[47]_0 (cal_on_tx_drpdi_out),
        .done_reg_0(done_reg),
        .done_reg_1(done_reg_0),
        .\drp_state_reg[0]_0 (\drp_state_reg[0] ),
        .\drp_state_reg[1]_0 (gtwizard_ultrascale_v1_7_6_gte4_drp_arb_i_n_6),
        .\drp_state_reg[4]_0 (\drp_state_reg[4] ),
        .\drp_state_reg[5]_0 (\drp_state_reg[5] ),
        .drpaddr_in({drpaddr_in[9:6],drpaddr_in[4:2]}),
        .drpclk_in(drpclk_in),
        .drpdi_in(drpdi_in[14:0]),
        .drpen_in(drpen_in),
        .drprdy_out(drprdy_out),
        .drprst_in_sync(drprst_in_sync),
        .drpwe_in(drpwe_in),
        .\gen_gtwizard_gthe4.drprdy_int (\gen_gtwizard_gthe4.drprdy_int ));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i
       (.AR(freq_counter_rst_reg),
        .GTHE4_CPLLLOCK_IN(GTHE4_CPLLLOCK_IN),
        .GTHE4_TXPRGDIVRESETDONE_IN(GTHE4_TXPRGDIVRESETDONE_IN),
        .GTHE4_TXPROGDIVRESET_OUT(GTHE4_TXPROGDIVRESET_OUT),
        .Q(Q),
        .USER_CPLLLOCK_OUT_reg_0(USER_CPLLLOCK_OUT_reg),
        .USER_TXPRGDIVRESETDONE_OUT_reg_0(USER_TXPRGDIVRESETDONE_OUT_reg),
        .\addr_i_reg[6] (gtwizard_ultrascale_v1_7_6_gte4_drp_arb_i_n_9),
        .cal_fail_store_reg_0(cal_fail_store_reg),
        .cal_fail_store_reg_1(cal_fail_store_reg_0),
        .cal_on_tx_drdy(cal_on_tx_drdy),
        .cal_on_tx_drpen_out(cal_on_tx_drpen_out),
        .cal_on_tx_drpwe_out(cal_on_tx_drpwe_out),
        .cal_on_tx_reset_in_sync(cal_on_tx_reset_in_sync),
        .\cpll_cal_state_reg[0]_0 (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_40),
        .\cpll_cal_state_reg[0]_1 (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_41),
        .\cpll_cal_state_reg[0]_2 (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_42),
        .\cpll_cal_state_reg[0]_3 (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_43),
        .\cpll_cal_state_reg[0]_4 (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_44),
        .\cpll_cal_state_reg[0]_5 (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_45),
        .\cpll_cal_state_reg[0]_6 (gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i_n_46),
        .\cpll_cal_state_reg[11]_0 (\cpll_cal_state_reg[11] ),
        .\cpll_cal_state_reg[13]_0 (\cpll_cal_state_reg[13] ),
        .\cpll_cal_state_reg[13]_1 (\cpll_cal_state_reg[13]_0 ),
        .\cpll_cal_state_reg[14]_0 (\cpll_cal_state_reg[14] ),
        .\cpll_cal_state_reg[14]_1 (\cpll_cal_state_reg[14]_0 ),
        .\cpll_cal_state_reg[22]_0 (\cpll_cal_state_reg[22] ),
        .\cpll_cal_state_reg[25]_0 (\cpll_cal_state_reg[25] ),
        .\cpll_cal_state_reg[27]_0 (\cpll_cal_state_reg[27] ),
        .\cpll_cal_state_reg[5]_0 (\cpll_cal_state_reg[5] ),
        .\cpll_cal_state_reg[5]_1 (\cpll_cal_state_reg[5]_0 ),
        .\cpll_cal_state_reg[5]_2 (\cpll_cal_state_reg[5]_1 ),
        .\cpll_cal_state_reg[8]_0 (\cpll_cal_state_reg[8] ),
        .\cpll_cal_state_reg[8]_1 (\cpll_cal_state_reg[8]_0 ),
        .\cpll_cal_state_reg[9]_0 (\cpll_cal_state_reg[9] ),
        .cpllpd_int_reg_0(cpllpd_int_reg),
        .cpllpd_int_reg_1(cpllpd_int_reg_0),
        .cpllreset_int_reg_0(cpllreset_int_reg),
        .cpllreset_int_reg_1(cpllreset_int_reg_0),
        .\daddr_reg[7]_0 (cal_on_tx_drpaddr_out),
        .den_reg_0(den_reg),
        .\di_reg[15]_0 (cal_on_tx_drpdi_out),
        .\drp_state_reg[6]_0 (\drp_state_reg[6] ),
        .drpaddr_in(drpaddr_in[7:0]),
        .drpclk_in(drpclk_in),
        .drpdi_in(drpdi_in[15]),
        .drprst_in_sync(drprst_in_sync),
        .drpwe_in(drpwe_in),
        .dwe_reg_0(dwe_reg),
        .freq_counter_rst_reg_0(freq_counter_rst_reg_0),
        .gtwiz_userclk_tx_reset_in(gtwiz_userclk_tx_reset_in),
        .i_in_out_reg(i_in_out),
        .i_in_out_reg_0(p_1_in[2]),
        .in0(in0),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .mask_user_in_reg_0(mask_user_in_reg),
        .mask_user_in_reg_1(mask_user_in_reg_0),
        .\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2]_0 (\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2] ),
        .\progdiv_cfg_store_reg[15]_0 ({\DO_USR_O_reg[47] [16],cal_on_tx_dout}),
        .rd_reg_0(rd),
        .rd_reg_1(rd_reg),
        .\repeat_ctr_reg[3]_0 (\repeat_ctr_reg[3] ),
        .rst_in0(rst_in0),
        .status_store_reg_0(status_store_reg),
        .status_store_reg_1(status_store_reg_0),
        .txoutclk_out(txoutclk_out),
        .txoutclksel_in(txoutclksel_in),
        .txprgdivresetdone_out(txprgdivresetdone_out),
        .txprogdivreset_int(txprogdivreset_int),
        .txprogdivreset_int_reg_0(txprogdivreset_int_reg),
        .\wait_ctr_reg[11]_0 (\wait_ctr_reg[11] ),
        .\wait_ctr_reg[12]_0 (\wait_ctr_reg[12] ),
        .\wait_ctr_reg[14]_0 (\wait_ctr_reg[14] ),
        .wr(wr),
        .wr_reg_0(wr_reg));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_22 reset_synchronizer_resetin_rx_inst
       (.drpclk_in(drpclk_in));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_23 reset_synchronizer_resetin_tx_inst
       (.RESET_IN(RESET_IN),
        .cal_on_tx_reset_in_sync(cal_on_tx_reset_in_sync),
        .drpclk_in(drpclk_in),
        .rst_in_out_reg_0(rst_in_out_reg),
        .status_store_reg(\drp_state_reg[6] [4]));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_freq_counter" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_freq_counter
   (rst_in_out_reg,
    S,
    D,
    \repeat_ctr_reg[3] ,
    \freq_cnt_o_reg[14]_0 ,
    DI,
    \freq_cnt_o_reg[15]_0 ,
    \freq_cnt_o_reg[17]_0 ,
    \freq_cnt_o_reg[16]_0 ,
    \freq_cnt_o_reg[16]_1 ,
    drpclk_in,
    AS,
    txoutclkmon,
    cal_on_tx_reset_in_sync,
    CO,
    \repeat_ctr_reg[3]_0 ,
    \repeat_ctr_reg[3]_1 ,
    Q,
    \cpll_cal_state_reg[13] ,
    \cpll_cal_state_reg[13]_0 ,
    \cpll_cal_state_reg[13]_1 ,
    \cpll_cal_state_reg[13]_2 ,
    \cpll_cal_state_reg[21] ,
    \cpll_cal_state_reg[21]_0 ,
    \cpll_cal_state_reg[20] ,
    \cpll_cal_state_reg[20]_0 ,
    \cpll_cal_state_reg[20]_1 ,
    \cpll_cal_state_reg[20]_2 ,
    cal_fail_store_reg,
    cal_fail_store_reg_0,
    \cpll_cal_state_reg[21]_1 ,
    \cpll_cal_state_reg[21]_2 ,
    \cpll_cal_state_reg[21]_3 );
  output rst_in_out_reg;
  output [7:0]S;
  output [2:0]D;
  output \repeat_ctr_reg[3] ;
  output [7:0]\freq_cnt_o_reg[14]_0 ;
  output [5:0]DI;
  output [6:0]\freq_cnt_o_reg[15]_0 ;
  output [0:0]\freq_cnt_o_reg[17]_0 ;
  output [0:0]\freq_cnt_o_reg[16]_0 ;
  output [0:0]\freq_cnt_o_reg[16]_1 ;
  input [0:0]drpclk_in;
  input [0:0]AS;
  input txoutclkmon;
  input cal_on_tx_reset_in_sync;
  input [0:0]CO;
  input [0:0]\repeat_ctr_reg[3]_0 ;
  input \repeat_ctr_reg[3]_1 ;
  input [3:0]Q;
  input \cpll_cal_state_reg[13] ;
  input \cpll_cal_state_reg[13]_0 ;
  input \cpll_cal_state_reg[13]_1 ;
  input \cpll_cal_state_reg[13]_2 ;
  input [0:0]\cpll_cal_state_reg[21] ;
  input \cpll_cal_state_reg[21]_0 ;
  input \cpll_cal_state_reg[20] ;
  input \cpll_cal_state_reg[20]_0 ;
  input \cpll_cal_state_reg[20]_1 ;
  input \cpll_cal_state_reg[20]_2 ;
  input cal_fail_store_reg;
  input cal_fail_store_reg_0;
  input \cpll_cal_state_reg[21]_1 ;
  input \cpll_cal_state_reg[21]_2 ;
  input \cpll_cal_state_reg[21]_3 ;

  wire [0:0]AS;
  wire [0:0]CO;
  wire [2:0]D;
  wire [5:0]DI;
  wire [3:0]Q;
  wire [7:0]S;
  wire cal_fail_store_reg;
  wire cal_fail_store_reg_0;
  wire cal_on_tx_reset_in_sync;
  wire clear;
  wire \cpll_cal_state[13]_i_3_n_0 ;
  wire \cpll_cal_state[21]_i_2_n_0 ;
  wire \cpll_cal_state_reg[13] ;
  wire \cpll_cal_state_reg[13]_0 ;
  wire \cpll_cal_state_reg[13]_1 ;
  wire \cpll_cal_state_reg[13]_2 ;
  wire \cpll_cal_state_reg[20] ;
  wire \cpll_cal_state_reg[20]_0 ;
  wire \cpll_cal_state_reg[20]_1 ;
  wire \cpll_cal_state_reg[20]_2 ;
  wire [0:0]\cpll_cal_state_reg[21] ;
  wire \cpll_cal_state_reg[21]_0 ;
  wire \cpll_cal_state_reg[21]_1 ;
  wire \cpll_cal_state_reg[21]_2 ;
  wire \cpll_cal_state_reg[21]_3 ;
  wire done_o_reg_n_0;
  wire [0:0]drpclk_in;
  wire \freq_cnt_o[17]_i_1_n_0 ;
  wire [7:0]\freq_cnt_o_reg[14]_0 ;
  wire [6:0]\freq_cnt_o_reg[15]_0 ;
  wire [0:0]\freq_cnt_o_reg[16]_0 ;
  wire [0:0]\freq_cnt_o_reg[16]_1 ;
  wire [0:0]\freq_cnt_o_reg[17]_0 ;
  wire \freq_cnt_o_reg_n_0_[0] ;
  wire \freq_cnt_o_reg_n_0_[10] ;
  wire \freq_cnt_o_reg_n_0_[11] ;
  wire \freq_cnt_o_reg_n_0_[12] ;
  wire \freq_cnt_o_reg_n_0_[14] ;
  wire \freq_cnt_o_reg_n_0_[15] ;
  wire \freq_cnt_o_reg_n_0_[16] ;
  wire \freq_cnt_o_reg_n_0_[17] ;
  wire \freq_cnt_o_reg_n_0_[1] ;
  wire \freq_cnt_o_reg_n_0_[2] ;
  wire \freq_cnt_o_reg_n_0_[3] ;
  wire \freq_cnt_o_reg_n_0_[4] ;
  wire \freq_cnt_o_reg_n_0_[5] ;
  wire \freq_cnt_o_reg_n_0_[6] ;
  wire \freq_cnt_o_reg_n_0_[7] ;
  wire \freq_cnt_o_reg_n_0_[8] ;
  wire \hold_clk[5]_i_1_n_0 ;
  wire [5:0]hold_clk_reg;
  wire [5:0]p_0_in;
  wire [15:0]p_0_in__0;
  wire p_1_in;
  wire refclk_cnt0_carry__0_n_2;
  wire refclk_cnt0_carry__0_n_3;
  wire refclk_cnt0_carry__0_n_4;
  wire refclk_cnt0_carry__0_n_5;
  wire refclk_cnt0_carry__0_n_6;
  wire refclk_cnt0_carry__0_n_7;
  wire refclk_cnt0_carry_n_0;
  wire refclk_cnt0_carry_n_1;
  wire refclk_cnt0_carry_n_2;
  wire refclk_cnt0_carry_n_3;
  wire refclk_cnt0_carry_n_4;
  wire refclk_cnt0_carry_n_5;
  wire refclk_cnt0_carry_n_6;
  wire refclk_cnt0_carry_n_7;
  wire [15:0]refclk_cnt_reg;
  wire \repeat_ctr[3]_i_4_n_0 ;
  wire \repeat_ctr_reg[3] ;
  wire [0:0]\repeat_ctr_reg[3]_0 ;
  wire \repeat_ctr_reg[3]_1 ;
  wire rst_in_out;
  wire rst_in_out_reg;
  wire [0:0]sel0;
  wire [4:0]state;
  wire \state[2]_i_2_n_0 ;
  wire \state[2]_i_3_n_0 ;
  wire \state[2]_i_4_n_0 ;
  wire \state[2]_i_5_n_0 ;
  wire \state[2]_i_6_n_0 ;
  wire \state[3]_i_2_n_0 ;
  wire \state_reg_n_0_[2] ;
  wire testclk_cnt0_n_0;
  wire \testclk_cnt[0]_i_2_n_0 ;
  wire [17:0]testclk_cnt_reg;
  wire \testclk_cnt_reg[0]_i_1_n_0 ;
  wire \testclk_cnt_reg[0]_i_1_n_1 ;
  wire \testclk_cnt_reg[0]_i_1_n_10 ;
  wire \testclk_cnt_reg[0]_i_1_n_11 ;
  wire \testclk_cnt_reg[0]_i_1_n_12 ;
  wire \testclk_cnt_reg[0]_i_1_n_13 ;
  wire \testclk_cnt_reg[0]_i_1_n_14 ;
  wire \testclk_cnt_reg[0]_i_1_n_15 ;
  wire \testclk_cnt_reg[0]_i_1_n_2 ;
  wire \testclk_cnt_reg[0]_i_1_n_3 ;
  wire \testclk_cnt_reg[0]_i_1_n_4 ;
  wire \testclk_cnt_reg[0]_i_1_n_5 ;
  wire \testclk_cnt_reg[0]_i_1_n_6 ;
  wire \testclk_cnt_reg[0]_i_1_n_7 ;
  wire \testclk_cnt_reg[0]_i_1_n_8 ;
  wire \testclk_cnt_reg[0]_i_1_n_9 ;
  wire \testclk_cnt_reg[16]_i_1_n_14 ;
  wire \testclk_cnt_reg[16]_i_1_n_15 ;
  wire \testclk_cnt_reg[16]_i_1_n_7 ;
  wire \testclk_cnt_reg[8]_i_1_n_0 ;
  wire \testclk_cnt_reg[8]_i_1_n_1 ;
  wire \testclk_cnt_reg[8]_i_1_n_10 ;
  wire \testclk_cnt_reg[8]_i_1_n_11 ;
  wire \testclk_cnt_reg[8]_i_1_n_12 ;
  wire \testclk_cnt_reg[8]_i_1_n_13 ;
  wire \testclk_cnt_reg[8]_i_1_n_14 ;
  wire \testclk_cnt_reg[8]_i_1_n_15 ;
  wire \testclk_cnt_reg[8]_i_1_n_2 ;
  wire \testclk_cnt_reg[8]_i_1_n_3 ;
  wire \testclk_cnt_reg[8]_i_1_n_4 ;
  wire \testclk_cnt_reg[8]_i_1_n_5 ;
  wire \testclk_cnt_reg[8]_i_1_n_6 ;
  wire \testclk_cnt_reg[8]_i_1_n_7 ;
  wire \testclk_cnt_reg[8]_i_1_n_8 ;
  wire \testclk_cnt_reg[8]_i_1_n_9 ;
  wire [3:0]testclk_div4;
  wire testclk_en;
  (* async_reg = "true" *) wire testclk_en_dly1;
  (* async_reg = "true" *) wire testclk_en_dly2;
  wire testclk_rst;
  (* async_reg = "true" *) wire tstclk_rst_dly1;
  (* async_reg = "true" *) wire tstclk_rst_dly2;
  wire txoutclkmon;
  wire [7:6]NLW_refclk_cnt0_carry__0_CO_UNCONNECTED;
  wire [7:7]NLW_refclk_cnt0_carry__0_O_UNCONNECTED;
  wire [7:1]\NLW_testclk_cnt_reg[16]_i_1_CO_UNCONNECTED ;
  wire [7:2]\NLW_testclk_cnt_reg[16]_i_1_O_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hF888000000000000)) 
    cal_fail_store_i_4
       (.I0(CO),
        .I1(\repeat_ctr_reg[3]_0 ),
        .I2(cal_fail_store_reg),
        .I3(cal_fail_store_reg_0),
        .I4(Q[2]),
        .I5(done_o_reg_n_0),
        .O(\repeat_ctr_reg[3] ));
  LUT2 #(
    .INIT(4'h1)) 
    cpll_cal_state2_carry__0_i_1
       (.I0(\freq_cnt_o_reg_n_0_[16] ),
        .I1(\freq_cnt_o_reg_n_0_[17] ),
        .O(\freq_cnt_o_reg[16]_1 ));
  LUT2 #(
    .INIT(4'h1)) 
    cpll_cal_state2_carry_i_1
       (.I0(\freq_cnt_o_reg_n_0_[12] ),
        .I1(\freq_cnt_o_reg[15]_0 [5]),
        .O(DI[5]));
  LUT2 #(
    .INIT(4'h2)) 
    cpll_cal_state2_carry_i_10
       (.I0(\freq_cnt_o_reg[15]_0 [3]),
        .I1(\freq_cnt_o_reg_n_0_[8] ),
        .O(\freq_cnt_o_reg[14]_0 [4]));
  LUT2 #(
    .INIT(4'h2)) 
    cpll_cal_state2_carry_i_11
       (.I0(\freq_cnt_o_reg_n_0_[6] ),
        .I1(\freq_cnt_o_reg_n_0_[7] ),
        .O(\freq_cnt_o_reg[14]_0 [3]));
  LUT2 #(
    .INIT(4'h1)) 
    cpll_cal_state2_carry_i_12
       (.I0(\freq_cnt_o_reg_n_0_[4] ),
        .I1(\freq_cnt_o_reg_n_0_[5] ),
        .O(\freq_cnt_o_reg[14]_0 [2]));
  LUT2 #(
    .INIT(4'h8)) 
    cpll_cal_state2_carry_i_13
       (.I0(\freq_cnt_o_reg_n_0_[2] ),
        .I1(\freq_cnt_o_reg_n_0_[3] ),
        .O(\freq_cnt_o_reg[14]_0 [1]));
  LUT2 #(
    .INIT(4'h2)) 
    cpll_cal_state2_carry_i_14
       (.I0(\freq_cnt_o_reg_n_0_[1] ),
        .I1(\freq_cnt_o_reg_n_0_[0] ),
        .O(\freq_cnt_o_reg[14]_0 [0]));
  LUT1 #(
    .INIT(2'h1)) 
    cpll_cal_state2_carry_i_2
       (.I0(\freq_cnt_o_reg_n_0_[11] ),
        .O(DI[4]));
  LUT1 #(
    .INIT(2'h1)) 
    cpll_cal_state2_carry_i_3
       (.I0(\freq_cnt_o_reg[15]_0 [3]),
        .O(DI[3]));
  LUT2 #(
    .INIT(4'h1)) 
    cpll_cal_state2_carry_i_4
       (.I0(\freq_cnt_o_reg_n_0_[6] ),
        .I1(\freq_cnt_o_reg_n_0_[7] ),
        .O(DI[2]));
  LUT2 #(
    .INIT(4'h7)) 
    cpll_cal_state2_carry_i_5
       (.I0(\freq_cnt_o_reg_n_0_[3] ),
        .I1(\freq_cnt_o_reg_n_0_[2] ),
        .O(DI[1]));
  LUT1 #(
    .INIT(2'h1)) 
    cpll_cal_state2_carry_i_6
       (.I0(\freq_cnt_o_reg_n_0_[1] ),
        .O(DI[0]));
  LUT2 #(
    .INIT(4'h1)) 
    cpll_cal_state2_carry_i_7
       (.I0(\freq_cnt_o_reg_n_0_[14] ),
        .I1(\freq_cnt_o_reg_n_0_[15] ),
        .O(\freq_cnt_o_reg[14]_0 [7]));
  LUT2 #(
    .INIT(4'h2)) 
    cpll_cal_state2_carry_i_8
       (.I0(\freq_cnt_o_reg_n_0_[12] ),
        .I1(\freq_cnt_o_reg[15]_0 [5]),
        .O(\freq_cnt_o_reg[14]_0 [6]));
  LUT2 #(
    .INIT(4'h2)) 
    cpll_cal_state2_carry_i_9
       (.I0(\freq_cnt_o_reg_n_0_[11] ),
        .I1(\freq_cnt_o_reg_n_0_[10] ),
        .O(\freq_cnt_o_reg[14]_0 [5]));
  LUT6 #(
    .INIT(64'h4F4F4F4400000000)) 
    \cpll_cal_state[13]_i_1 
       (.I0(\cpll_cal_state_reg[13] ),
        .I1(\cpll_cal_state[13]_i_3_n_0 ),
        .I2(\cpll_cal_state_reg[13]_0 ),
        .I3(\cpll_cal_state_reg[13]_1 ),
        .I4(Q[1]),
        .I5(\cpll_cal_state_reg[13]_2 ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h0777000000000000)) 
    \cpll_cal_state[13]_i_3 
       (.I0(CO),
        .I1(\repeat_ctr_reg[3]_0 ),
        .I2(cal_fail_store_reg),
        .I3(cal_fail_store_reg_0),
        .I4(Q[2]),
        .I5(done_o_reg_n_0),
        .O(\cpll_cal_state[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h002000200020AAAA)) 
    \cpll_cal_state[20]_i_1 
       (.I0(\cpll_cal_state_reg[20] ),
        .I1(done_o_reg_n_0),
        .I2(Q[2]),
        .I3(\cpll_cal_state_reg[20]_0 ),
        .I4(\cpll_cal_state_reg[20]_1 ),
        .I5(\cpll_cal_state_reg[20]_2 ),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h0000000004F40404)) 
    \cpll_cal_state[21]_i_1 
       (.I0(\cpll_cal_state_reg[21] ),
        .I1(Q[3]),
        .I2(Q[2]),
        .I3(\cpll_cal_state[21]_i_2_n_0 ),
        .I4(done_o_reg_n_0),
        .I5(\cpll_cal_state_reg[21]_0 ),
        .O(D[2]));
  LUT6 #(
    .INIT(64'h00007FFF7FFF7FFF)) 
    \cpll_cal_state[21]_i_2 
       (.I0(\cpll_cal_state_reg[21]_1 ),
        .I1(\cpll_cal_state_reg[21]_2 ),
        .I2(\cpll_cal_state_reg[21]_3 ),
        .I3(cal_fail_store_reg),
        .I4(\repeat_ctr_reg[3]_0 ),
        .I5(CO),
        .O(\cpll_cal_state[21]_i_2_n_0 ));
  FDCE done_o_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(AS),
        .D(sel0),
        .Q(done_o_reg_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    \freq_cnt_o[17]_i_1 
       (.I0(p_1_in),
        .I1(AS),
        .O(\freq_cnt_o[17]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[0] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[0]),
        .Q(\freq_cnt_o_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[10] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[10]),
        .Q(\freq_cnt_o_reg_n_0_[10] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[11] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[11]),
        .Q(\freq_cnt_o_reg_n_0_[11] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[12] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[12]),
        .Q(\freq_cnt_o_reg_n_0_[12] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[13] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[13]),
        .Q(\freq_cnt_o_reg[15]_0 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[14] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[14]),
        .Q(\freq_cnt_o_reg_n_0_[14] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[15] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[15]),
        .Q(\freq_cnt_o_reg_n_0_[15] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[16] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[16]),
        .Q(\freq_cnt_o_reg_n_0_[16] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[17] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[17]),
        .Q(\freq_cnt_o_reg_n_0_[17] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[1] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[1]),
        .Q(\freq_cnt_o_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[2] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[2]),
        .Q(\freq_cnt_o_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[3] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[3]),
        .Q(\freq_cnt_o_reg_n_0_[3] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[4] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[4]),
        .Q(\freq_cnt_o_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[5] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[5]),
        .Q(\freq_cnt_o_reg_n_0_[5] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[6] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[6]),
        .Q(\freq_cnt_o_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[7] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[7]),
        .Q(\freq_cnt_o_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[8] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[8]),
        .Q(\freq_cnt_o_reg_n_0_[8] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \freq_cnt_o_reg[9] 
       (.C(drpclk_in),
        .CE(\freq_cnt_o[17]_i_1_n_0 ),
        .D(testclk_cnt_reg[9]),
        .Q(\freq_cnt_o_reg[15]_0 [3]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair451" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \hold_clk[0]_i_1 
       (.I0(hold_clk_reg[0]),
        .O(p_0_in[0]));
  (* SOFT_HLUTNM = "soft_lutpair451" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \hold_clk[1]_i_1 
       (.I0(hold_clk_reg[0]),
        .I1(hold_clk_reg[1]),
        .O(p_0_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair450" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \hold_clk[2]_i_1 
       (.I0(hold_clk_reg[0]),
        .I1(hold_clk_reg[1]),
        .I2(hold_clk_reg[2]),
        .O(p_0_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair450" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \hold_clk[3]_i_1 
       (.I0(hold_clk_reg[3]),
        .I1(hold_clk_reg[0]),
        .I2(hold_clk_reg[1]),
        .I3(hold_clk_reg[2]),
        .O(p_0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair447" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \hold_clk[4]_i_1 
       (.I0(hold_clk_reg[4]),
        .I1(hold_clk_reg[2]),
        .I2(hold_clk_reg[1]),
        .I3(hold_clk_reg[0]),
        .I4(hold_clk_reg[3]),
        .O(p_0_in[4]));
  LUT2 #(
    .INIT(4'h1)) 
    \hold_clk[5]_i_1 
       (.I0(\state_reg_n_0_[2] ),
        .I1(testclk_rst),
        .O(\hold_clk[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \hold_clk[5]_i_2 
       (.I0(hold_clk_reg[5]),
        .I1(hold_clk_reg[3]),
        .I2(hold_clk_reg[0]),
        .I3(hold_clk_reg[1]),
        .I4(hold_clk_reg[2]),
        .I5(hold_clk_reg[4]),
        .O(p_0_in[5]));
  FDRE #(
    .INIT(1'b0)) 
    \hold_clk_reg[0] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in[0]),
        .Q(hold_clk_reg[0]),
        .R(\hold_clk[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \hold_clk_reg[1] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in[1]),
        .Q(hold_clk_reg[1]),
        .R(\hold_clk[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \hold_clk_reg[2] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in[2]),
        .Q(hold_clk_reg[2]),
        .R(\hold_clk[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \hold_clk_reg[3] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in[3]),
        .Q(hold_clk_reg[3]),
        .R(\hold_clk[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \hold_clk_reg[4] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in[4]),
        .Q(hold_clk_reg[4]),
        .R(\hold_clk[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \hold_clk_reg[5] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in[5]),
        .Q(hold_clk_reg[5]),
        .R(\hold_clk[5]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    i__carry__0_i_1
       (.I0(\freq_cnt_o_reg_n_0_[17] ),
        .I1(\freq_cnt_o_reg_n_0_[16] ),
        .O(\freq_cnt_o_reg[17]_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    i__carry__0_i_2
       (.I0(\freq_cnt_o_reg_n_0_[16] ),
        .I1(\freq_cnt_o_reg_n_0_[17] ),
        .O(\freq_cnt_o_reg[16]_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    i__carry_i_1
       (.I0(\freq_cnt_o_reg_n_0_[15] ),
        .I1(\freq_cnt_o_reg_n_0_[14] ),
        .O(\freq_cnt_o_reg[15]_0 [6]));
  LUT2 #(
    .INIT(4'h8)) 
    i__carry_i_10
       (.I0(\freq_cnt_o_reg_n_0_[6] ),
        .I1(\freq_cnt_o_reg_n_0_[7] ),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h1)) 
    i__carry_i_11
       (.I0(\freq_cnt_o_reg_n_0_[4] ),
        .I1(\freq_cnt_o_reg_n_0_[5] ),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h2)) 
    i__carry_i_12
       (.I0(\freq_cnt_o_reg_n_0_[3] ),
        .I1(\freq_cnt_o_reg_n_0_[2] ),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h1)) 
    i__carry_i_13
       (.I0(\freq_cnt_o_reg_n_0_[1] ),
        .I1(\freq_cnt_o_reg_n_0_[0] ),
        .O(S[0]));
  LUT2 #(
    .INIT(4'h8)) 
    i__carry_i_2
       (.I0(\freq_cnt_o_reg_n_0_[11] ),
        .I1(\freq_cnt_o_reg_n_0_[10] ),
        .O(\freq_cnt_o_reg[15]_0 [4]));
  LUT2 #(
    .INIT(4'hE)) 
    i__carry_i_3
       (.I0(\freq_cnt_o_reg_n_0_[5] ),
        .I1(\freq_cnt_o_reg_n_0_[4] ),
        .O(\freq_cnt_o_reg[15]_0 [2]));
  LUT2 #(
    .INIT(4'h8)) 
    i__carry_i_4
       (.I0(\freq_cnt_o_reg_n_0_[2] ),
        .I1(\freq_cnt_o_reg_n_0_[3] ),
        .O(\freq_cnt_o_reg[15]_0 [1]));
  LUT2 #(
    .INIT(4'hE)) 
    i__carry_i_5
       (.I0(\freq_cnt_o_reg_n_0_[1] ),
        .I1(\freq_cnt_o_reg_n_0_[0] ),
        .O(\freq_cnt_o_reg[15]_0 [0]));
  LUT2 #(
    .INIT(4'h1)) 
    i__carry_i_6
       (.I0(\freq_cnt_o_reg_n_0_[14] ),
        .I1(\freq_cnt_o_reg_n_0_[15] ),
        .O(S[7]));
  LUT2 #(
    .INIT(4'h2)) 
    i__carry_i_7
       (.I0(\freq_cnt_o_reg_n_0_[12] ),
        .I1(\freq_cnt_o_reg[15]_0 [5]),
        .O(S[6]));
  LUT2 #(
    .INIT(4'h2)) 
    i__carry_i_8
       (.I0(\freq_cnt_o_reg_n_0_[11] ),
        .I1(\freq_cnt_o_reg_n_0_[10] ),
        .O(S[5]));
  LUT2 #(
    .INIT(4'h2)) 
    i__carry_i_9
       (.I0(\freq_cnt_o_reg_n_0_[8] ),
        .I1(\freq_cnt_o_reg[15]_0 [3]),
        .O(S[4]));
  CARRY8 refclk_cnt0_carry
       (.CI(refclk_cnt_reg[0]),
        .CI_TOP(1'b0),
        .CO({refclk_cnt0_carry_n_0,refclk_cnt0_carry_n_1,refclk_cnt0_carry_n_2,refclk_cnt0_carry_n_3,refclk_cnt0_carry_n_4,refclk_cnt0_carry_n_5,refclk_cnt0_carry_n_6,refclk_cnt0_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(p_0_in__0[8:1]),
        .S(refclk_cnt_reg[8:1]));
  CARRY8 refclk_cnt0_carry__0
       (.CI(refclk_cnt0_carry_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_refclk_cnt0_carry__0_CO_UNCONNECTED[7:6],refclk_cnt0_carry__0_n_2,refclk_cnt0_carry__0_n_3,refclk_cnt0_carry__0_n_4,refclk_cnt0_carry__0_n_5,refclk_cnt0_carry__0_n_6,refclk_cnt0_carry__0_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_refclk_cnt0_carry__0_O_UNCONNECTED[7],p_0_in__0[15:9]}),
        .S({1'b0,refclk_cnt_reg[15:9]}));
  (* SOFT_HLUTNM = "soft_lutpair449" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \refclk_cnt[0]_i_1 
       (.I0(refclk_cnt_reg[0]),
        .O(p_0_in__0[0]));
  LUT1 #(
    .INIT(2'h1)) 
    \refclk_cnt[15]_i_1 
       (.I0(testclk_en),
        .O(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[0] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(refclk_cnt_reg[0]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[10] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[10]),
        .Q(refclk_cnt_reg[10]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[11] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[11]),
        .Q(refclk_cnt_reg[11]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[12] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[12]),
        .Q(refclk_cnt_reg[12]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[13] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[13]),
        .Q(refclk_cnt_reg[13]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[14] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[14]),
        .Q(refclk_cnt_reg[14]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[15] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[15]),
        .Q(refclk_cnt_reg[15]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[1] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(refclk_cnt_reg[1]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[2] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(refclk_cnt_reg[2]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[3] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(refclk_cnt_reg[3]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[4] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[4]),
        .Q(refclk_cnt_reg[4]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[5] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[5]),
        .Q(refclk_cnt_reg[5]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[6] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[6]),
        .Q(refclk_cnt_reg[6]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[7] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[7]),
        .Q(refclk_cnt_reg[7]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[8] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[8]),
        .Q(refclk_cnt_reg[8]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \refclk_cnt_reg[9] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_0_in__0[9]),
        .Q(refclk_cnt_reg[9]),
        .R(clear));
  LUT6 #(
    .INIT(64'h5555555500001500)) 
    \repeat_ctr[3]_i_1 
       (.I0(cal_on_tx_reset_in_sync),
        .I1(CO),
        .I2(\repeat_ctr_reg[3]_0 ),
        .I3(\repeat_ctr_reg[3]_1 ),
        .I4(\repeat_ctr[3]_i_4_n_0 ),
        .I5(Q[0]),
        .O(rst_in_out_reg));
  LUT2 #(
    .INIT(4'h7)) 
    \repeat_ctr[3]_i_4 
       (.I0(done_o_reg_n_0),
        .I1(Q[2]),
        .O(\repeat_ctr[3]_i_4_n_0 ));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_30 reset_synchronizer_testclk_rst_inst
       (.out(testclk_rst),
        .rst_in_out(rst_in_out),
        .txoutclkmon(txoutclkmon));
  LUT4 #(
    .INIT(16'h2AAA)) 
    \state[0]_i_1 
       (.I0(testclk_rst),
        .I1(hold_clk_reg[4]),
        .I2(\state[3]_i_2_n_0 ),
        .I3(hold_clk_reg[5]),
        .O(state[0]));
  LUT5 #(
    .INIT(32'h8000AAAA)) 
    \state[1]_i_1 
       (.I0(\state[2]_i_2_n_0 ),
        .I1(hold_clk_reg[5]),
        .I2(\state[3]_i_2_n_0 ),
        .I3(hold_clk_reg[4]),
        .I4(testclk_rst),
        .O(state[1]));
  LUT6 #(
    .INIT(64'h00000000FFFFA8AA)) 
    \state[2]_i_1 
       (.I0(\state_reg_n_0_[2] ),
        .I1(hold_clk_reg[4]),
        .I2(hold_clk_reg[5]),
        .I3(\state[3]_i_2_n_0 ),
        .I4(testclk_en),
        .I5(\state[2]_i_2_n_0 ),
        .O(state[2]));
  LUT6 #(
    .INIT(64'hAAAAAA8AAAAAAAAA)) 
    \state[2]_i_2 
       (.I0(\state[2]_i_3_n_0 ),
        .I1(refclk_cnt_reg[8]),
        .I2(refclk_cnt_reg[7]),
        .I3(refclk_cnt_reg[15]),
        .I4(\state[2]_i_4_n_0 ),
        .I5(\state[2]_i_5_n_0 ),
        .O(\state[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair448" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \state[2]_i_3 
       (.I0(testclk_rst),
        .I1(testclk_en),
        .O(\state[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair449" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \state[2]_i_4 
       (.I0(refclk_cnt_reg[0]),
        .I1(refclk_cnt_reg[3]),
        .I2(refclk_cnt_reg[6]),
        .I3(refclk_cnt_reg[2]),
        .I4(\state[2]_i_6_n_0 ),
        .O(\state[2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000040000000000)) 
    \state[2]_i_5 
       (.I0(testclk_rst),
        .I1(refclk_cnt_reg[9]),
        .I2(refclk_cnt_reg[5]),
        .I3(refclk_cnt_reg[12]),
        .I4(refclk_cnt_reg[14]),
        .I5(refclk_cnt_reg[13]),
        .O(\state[2]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFFDF)) 
    \state[2]_i_6 
       (.I0(refclk_cnt_reg[10]),
        .I1(refclk_cnt_reg[4]),
        .I2(refclk_cnt_reg[11]),
        .I3(refclk_cnt_reg[1]),
        .O(\state[2]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \state[3]_i_1 
       (.I0(hold_clk_reg[4]),
        .I1(hold_clk_reg[5]),
        .I2(\state[3]_i_2_n_0 ),
        .I3(\state_reg_n_0_[2] ),
        .I4(testclk_rst),
        .I5(testclk_en),
        .O(state[3]));
  (* SOFT_HLUTNM = "soft_lutpair447" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \state[3]_i_2 
       (.I0(hold_clk_reg[3]),
        .I1(hold_clk_reg[0]),
        .I2(hold_clk_reg[1]),
        .I3(hold_clk_reg[2]),
        .O(\state[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair448" *) 
  LUT5 #(
    .INIT(32'h00001110)) 
    \state[4]_i_1 
       (.I0(testclk_rst),
        .I1(\state_reg_n_0_[2] ),
        .I2(p_1_in),
        .I3(sel0),
        .I4(testclk_en),
        .O(state[4]));
  FDPE #(
    .INIT(1'b1)) 
    \state_reg[0] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(state[0]),
        .PRE(AS),
        .Q(testclk_rst));
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[1] 
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(AS),
        .D(state[1]),
        .Q(testclk_en));
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[2] 
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(AS),
        .D(state[2]),
        .Q(\state_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[3] 
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(AS),
        .D(state[3]),
        .Q(p_1_in));
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[4] 
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(AS),
        .D(state[4]),
        .Q(sel0));
  LUT5 #(
    .INIT(32'h00000020)) 
    testclk_cnt0
       (.I0(testclk_en_dly2),
        .I1(testclk_div4[1]),
        .I2(testclk_div4[3]),
        .I3(testclk_div4[2]),
        .I4(testclk_div4[0]),
        .O(testclk_cnt0_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    \testclk_cnt[0]_i_2 
       (.I0(testclk_cnt_reg[0]),
        .O(\testclk_cnt[0]_i_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[0] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[0]_i_1_n_15 ),
        .Q(testclk_cnt_reg[0]));
  CARRY8 \testclk_cnt_reg[0]_i_1 
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({\testclk_cnt_reg[0]_i_1_n_0 ,\testclk_cnt_reg[0]_i_1_n_1 ,\testclk_cnt_reg[0]_i_1_n_2 ,\testclk_cnt_reg[0]_i_1_n_3 ,\testclk_cnt_reg[0]_i_1_n_4 ,\testclk_cnt_reg[0]_i_1_n_5 ,\testclk_cnt_reg[0]_i_1_n_6 ,\testclk_cnt_reg[0]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .O({\testclk_cnt_reg[0]_i_1_n_8 ,\testclk_cnt_reg[0]_i_1_n_9 ,\testclk_cnt_reg[0]_i_1_n_10 ,\testclk_cnt_reg[0]_i_1_n_11 ,\testclk_cnt_reg[0]_i_1_n_12 ,\testclk_cnt_reg[0]_i_1_n_13 ,\testclk_cnt_reg[0]_i_1_n_14 ,\testclk_cnt_reg[0]_i_1_n_15 }),
        .S({testclk_cnt_reg[7:1],\testclk_cnt[0]_i_2_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[10] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[8]_i_1_n_13 ),
        .Q(testclk_cnt_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[11] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[8]_i_1_n_12 ),
        .Q(testclk_cnt_reg[11]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[12] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[8]_i_1_n_11 ),
        .Q(testclk_cnt_reg[12]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[13] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[8]_i_1_n_10 ),
        .Q(testclk_cnt_reg[13]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[14] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[8]_i_1_n_9 ),
        .Q(testclk_cnt_reg[14]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[15] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[8]_i_1_n_8 ),
        .Q(testclk_cnt_reg[15]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[16] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[16]_i_1_n_15 ),
        .Q(testclk_cnt_reg[16]));
  CARRY8 \testclk_cnt_reg[16]_i_1 
       (.CI(\testclk_cnt_reg[8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_testclk_cnt_reg[16]_i_1_CO_UNCONNECTED [7:1],\testclk_cnt_reg[16]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_testclk_cnt_reg[16]_i_1_O_UNCONNECTED [7:2],\testclk_cnt_reg[16]_i_1_n_14 ,\testclk_cnt_reg[16]_i_1_n_15 }),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,testclk_cnt_reg[17:16]}));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[17] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[16]_i_1_n_14 ),
        .Q(testclk_cnt_reg[17]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[1] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[0]_i_1_n_14 ),
        .Q(testclk_cnt_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[2] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[0]_i_1_n_13 ),
        .Q(testclk_cnt_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[3] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[0]_i_1_n_12 ),
        .Q(testclk_cnt_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[4] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[0]_i_1_n_11 ),
        .Q(testclk_cnt_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[5] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[0]_i_1_n_10 ),
        .Q(testclk_cnt_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[6] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[0]_i_1_n_9 ),
        .Q(testclk_cnt_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[7] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[0]_i_1_n_8 ),
        .Q(testclk_cnt_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[8] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[8]_i_1_n_15 ),
        .Q(testclk_cnt_reg[8]));
  CARRY8 \testclk_cnt_reg[8]_i_1 
       (.CI(\testclk_cnt_reg[0]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\testclk_cnt_reg[8]_i_1_n_0 ,\testclk_cnt_reg[8]_i_1_n_1 ,\testclk_cnt_reg[8]_i_1_n_2 ,\testclk_cnt_reg[8]_i_1_n_3 ,\testclk_cnt_reg[8]_i_1_n_4 ,\testclk_cnt_reg[8]_i_1_n_5 ,\testclk_cnt_reg[8]_i_1_n_6 ,\testclk_cnt_reg[8]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\testclk_cnt_reg[8]_i_1_n_8 ,\testclk_cnt_reg[8]_i_1_n_9 ,\testclk_cnt_reg[8]_i_1_n_10 ,\testclk_cnt_reg[8]_i_1_n_11 ,\testclk_cnt_reg[8]_i_1_n_12 ,\testclk_cnt_reg[8]_i_1_n_13 ,\testclk_cnt_reg[8]_i_1_n_14 ,\testclk_cnt_reg[8]_i_1_n_15 }),
        .S(testclk_cnt_reg[15:8]));
  FDCE #(
    .INIT(1'b0)) 
    \testclk_cnt_reg[9] 
       (.C(txoutclkmon),
        .CE(testclk_cnt0_n_0),
        .CLR(rst_in_out),
        .D(\testclk_cnt_reg[8]_i_1_n_14 ),
        .Q(testclk_cnt_reg[9]));
  FDSE #(
    .INIT(1'b1)) 
    \testclk_div4_reg[0] 
       (.C(txoutclkmon),
        .CE(1'b1),
        .D(testclk_div4[3]),
        .Q(testclk_div4[0]),
        .S(tstclk_rst_dly2));
  FDRE #(
    .INIT(1'b0)) 
    \testclk_div4_reg[1] 
       (.C(txoutclkmon),
        .CE(1'b1),
        .D(testclk_div4[0]),
        .Q(testclk_div4[1]),
        .R(tstclk_rst_dly2));
  FDRE #(
    .INIT(1'b0)) 
    \testclk_div4_reg[2] 
       (.C(txoutclkmon),
        .CE(1'b1),
        .D(testclk_div4[1]),
        .Q(testclk_div4[2]),
        .R(tstclk_rst_dly2));
  FDRE #(
    .INIT(1'b0)) 
    \testclk_div4_reg[3] 
       (.C(txoutclkmon),
        .CE(1'b1),
        .D(testclk_div4[2]),
        .Q(testclk_div4[3]),
        .R(tstclk_rst_dly2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE testclk_en_dly1_reg
       (.C(txoutclkmon),
        .CE(1'b1),
        .D(testclk_en),
        .Q(testclk_en_dly1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE testclk_en_dly2_reg
       (.C(txoutclkmon),
        .CE(1'b1),
        .D(testclk_en_dly1),
        .Q(testclk_en_dly2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE tstclk_rst_dly1_reg
       (.C(txoutclkmon),
        .CE(1'b1),
        .D(testclk_rst),
        .Q(tstclk_rst_dly1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE tstclk_rst_dly2_reg
       (.C(txoutclkmon),
        .CE(1'b1),
        .D(tstclk_rst_dly1),
        .Q(tstclk_rst_dly2),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx
   (i_in_out_reg,
    AR,
    GTHE4_TXPROGDIVRESET_OUT,
    status_store_reg_0,
    cal_fail_store_reg_0,
    mask_user_in_reg_0,
    cpllpd_int_reg_0,
    cpllreset_int_reg_0,
    wr,
    rd_reg_0,
    txprgdivresetdone_out,
    USER_CPLLLOCK_OUT_reg_0,
    txprogdivreset_int,
    cal_on_tx_drpen_out,
    cal_on_tx_drpwe_out,
    Q,
    \drp_state_reg[6]_0 ,
    \wait_ctr_reg[12]_0 ,
    \wait_ctr_reg[14]_0 ,
    \cpll_cal_state_reg[27]_0 ,
    \cpll_cal_state_reg[11]_0 ,
    \cpll_cal_state_reg[8]_0 ,
    \cpll_cal_state_reg[25]_0 ,
    \cpll_cal_state_reg[0]_0 ,
    \cpll_cal_state_reg[0]_1 ,
    \cpll_cal_state_reg[0]_2 ,
    \cpll_cal_state_reg[0]_3 ,
    \cpll_cal_state_reg[0]_4 ,
    \cpll_cal_state_reg[0]_5 ,
    \cpll_cal_state_reg[0]_6 ,
    rst_in0,
    \cpll_cal_state_reg[13]_0 ,
    \wait_ctr_reg[11]_0 ,
    \cpll_cal_state_reg[14]_0 ,
    \cpll_cal_state_reg[5]_0 ,
    \cpll_cal_state_reg[13]_1 ,
    \cpll_cal_state_reg[9]_0 ,
    \cpll_cal_state_reg[5]_1 ,
    \cpll_cal_state_reg[8]_1 ,
    \cpll_cal_state_reg[14]_1 ,
    \repeat_ctr_reg[3]_0 ,
    \cpll_cal_state_reg[22]_0 ,
    \cpll_cal_state_reg[5]_2 ,
    i_in_out_reg_0,
    \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2]_0 ,
    \daddr_reg[7]_0 ,
    \di_reg[15]_0 ,
    GTHE4_CPLLLOCK_IN,
    in0,
    GTHE4_TXPRGDIVRESETDONE_IN,
    txoutclksel_in,
    gtwiz_userclk_tx_reset_in,
    txoutclk_out,
    drpclk_in,
    status_store_reg_1,
    freq_counter_rst_reg_0,
    cal_fail_store_reg_1,
    cal_on_tx_reset_in_sync,
    mask_user_in_reg_1,
    cpllpd_int_reg_1,
    cpllreset_int_reg_1,
    wr_reg_0,
    rd_reg_1,
    USER_TXPRGDIVRESETDONE_OUT_reg_0,
    txprogdivreset_int_reg_0,
    den_reg_0,
    dwe_reg_0,
    cal_on_tx_drdy,
    drpaddr_in,
    drpwe_in,
    \addr_i_reg[6] ,
    drpdi_in,
    \progdiv_cfg_store_reg[15]_0 ,
    drprst_in_sync,
    lopt,
    lopt_1,
    lopt_2);
  output i_in_out_reg;
  output [0:0]AR;
  output GTHE4_TXPROGDIVRESET_OUT;
  output status_store_reg_0;
  output cal_fail_store_reg_0;
  output mask_user_in_reg_0;
  output cpllpd_int_reg_0;
  output cpllreset_int_reg_0;
  output wr;
  output rd_reg_0;
  output [0:0]txprgdivresetdone_out;
  output USER_CPLLLOCK_OUT_reg_0;
  output txprogdivreset_int;
  output cal_on_tx_drpen_out;
  output cal_on_tx_drpwe_out;
  output [13:0]Q;
  output [4:0]\drp_state_reg[6]_0 ;
  output \wait_ctr_reg[12]_0 ;
  output \wait_ctr_reg[14]_0 ;
  output \cpll_cal_state_reg[27]_0 ;
  output \cpll_cal_state_reg[11]_0 ;
  output \cpll_cal_state_reg[8]_0 ;
  output \cpll_cal_state_reg[25]_0 ;
  output \cpll_cal_state_reg[0]_0 ;
  output \cpll_cal_state_reg[0]_1 ;
  output \cpll_cal_state_reg[0]_2 ;
  output \cpll_cal_state_reg[0]_3 ;
  output \cpll_cal_state_reg[0]_4 ;
  output \cpll_cal_state_reg[0]_5 ;
  output \cpll_cal_state_reg[0]_6 ;
  output rst_in0;
  output \cpll_cal_state_reg[13]_0 ;
  output \wait_ctr_reg[11]_0 ;
  output \cpll_cal_state_reg[14]_0 ;
  output \cpll_cal_state_reg[5]_0 ;
  output \cpll_cal_state_reg[13]_1 ;
  output \cpll_cal_state_reg[9]_0 ;
  output \cpll_cal_state_reg[5]_1 ;
  output \cpll_cal_state_reg[8]_1 ;
  output \cpll_cal_state_reg[14]_1 ;
  output \repeat_ctr_reg[3]_0 ;
  output \cpll_cal_state_reg[22]_0 ;
  output \cpll_cal_state_reg[5]_2 ;
  output [0:0]i_in_out_reg_0;
  output [2:0]\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2]_0 ;
  output [6:0]\daddr_reg[7]_0 ;
  output [15:0]\di_reg[15]_0 ;
  input GTHE4_CPLLLOCK_IN;
  input in0;
  input GTHE4_TXPRGDIVRESETDONE_IN;
  input [2:0]txoutclksel_in;
  input [0:0]gtwiz_userclk_tx_reset_in;
  input [0:0]txoutclk_out;
  input [0:0]drpclk_in;
  input status_store_reg_1;
  input freq_counter_rst_reg_0;
  input cal_fail_store_reg_1;
  input cal_on_tx_reset_in_sync;
  input mask_user_in_reg_1;
  input cpllpd_int_reg_1;
  input cpllreset_int_reg_1;
  input wr_reg_0;
  input rd_reg_1;
  input USER_TXPRGDIVRESETDONE_OUT_reg_0;
  input txprogdivreset_int_reg_0;
  input den_reg_0;
  input dwe_reg_0;
  input cal_on_tx_drdy;
  input [7:0]drpaddr_in;
  input [0:0]drpwe_in;
  input \addr_i_reg[6] ;
  input [0:0]drpdi_in;
  input [15:0]\progdiv_cfg_store_reg[15]_0 ;
  input drprst_in_sync;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \<const1> ;
  wire [0:0]AR;
  wire GTHE4_CPLLLOCK_IN;
  wire GTHE4_TXPRGDIVRESETDONE_IN;
  wire GTHE4_TXPROGDIVRESET_OUT;
  wire [13:0]Q;
  wire USER_CPLLLOCK_OUT_reg_0;
  wire USER_TXPRGDIVRESETDONE_OUT_reg_0;
  wire U_TXOUTCLK_FREQ_COUNTER_n_0;
  wire U_TXOUTCLK_FREQ_COUNTER_n_1;
  wire U_TXOUTCLK_FREQ_COUNTER_n_13;
  wire U_TXOUTCLK_FREQ_COUNTER_n_14;
  wire U_TXOUTCLK_FREQ_COUNTER_n_15;
  wire U_TXOUTCLK_FREQ_COUNTER_n_16;
  wire U_TXOUTCLK_FREQ_COUNTER_n_17;
  wire U_TXOUTCLK_FREQ_COUNTER_n_18;
  wire U_TXOUTCLK_FREQ_COUNTER_n_19;
  wire U_TXOUTCLK_FREQ_COUNTER_n_2;
  wire U_TXOUTCLK_FREQ_COUNTER_n_20;
  wire U_TXOUTCLK_FREQ_COUNTER_n_21;
  wire U_TXOUTCLK_FREQ_COUNTER_n_22;
  wire U_TXOUTCLK_FREQ_COUNTER_n_23;
  wire U_TXOUTCLK_FREQ_COUNTER_n_24;
  wire U_TXOUTCLK_FREQ_COUNTER_n_25;
  wire U_TXOUTCLK_FREQ_COUNTER_n_26;
  wire U_TXOUTCLK_FREQ_COUNTER_n_27;
  wire U_TXOUTCLK_FREQ_COUNTER_n_28;
  wire U_TXOUTCLK_FREQ_COUNTER_n_29;
  wire U_TXOUTCLK_FREQ_COUNTER_n_3;
  wire U_TXOUTCLK_FREQ_COUNTER_n_30;
  wire U_TXOUTCLK_FREQ_COUNTER_n_31;
  wire U_TXOUTCLK_FREQ_COUNTER_n_32;
  wire U_TXOUTCLK_FREQ_COUNTER_n_33;
  wire U_TXOUTCLK_FREQ_COUNTER_n_34;
  wire U_TXOUTCLK_FREQ_COUNTER_n_35;
  wire U_TXOUTCLK_FREQ_COUNTER_n_36;
  wire U_TXOUTCLK_FREQ_COUNTER_n_4;
  wire U_TXOUTCLK_FREQ_COUNTER_n_5;
  wire U_TXOUTCLK_FREQ_COUNTER_n_6;
  wire U_TXOUTCLK_FREQ_COUNTER_n_7;
  wire U_TXOUTCLK_FREQ_COUNTER_n_8;
  wire \addr_i[2]_i_3_n_0 ;
  wire \addr_i_reg[6] ;
  wire bit_synchronizer_cplllock_inst_n_1;
  wire bit_synchronizer_txoutclksel_inst0_n_0;
  wire bit_synchronizer_txoutclksel_inst1_n_0;
  wire bit_synchronizer_txoutclksel_inst2_n_0;
  wire bit_synchronizer_txprgdivresetdone_inst_n_6;
  wire bit_synchronizer_txprogdivreset_inst_n_0;
  wire cal_fail_store_i_7_n_0;
  wire cal_fail_store_i_8_n_0;
  wire cal_fail_store_reg_0;
  wire cal_fail_store_reg_1;
  wire cal_on_tx_drdy;
  wire cal_on_tx_drpen_out;
  wire cal_on_tx_drpwe_out;
  wire cal_on_tx_reset_in_sync;
  wire [31:1]cpll_cal_state;
  wire cpll_cal_state2;
  wire cpll_cal_state26_in;
  wire cpll_cal_state2_carry_n_0;
  wire cpll_cal_state2_carry_n_1;
  wire cpll_cal_state2_carry_n_2;
  wire cpll_cal_state2_carry_n_3;
  wire cpll_cal_state2_carry_n_4;
  wire cpll_cal_state2_carry_n_5;
  wire cpll_cal_state2_carry_n_6;
  wire cpll_cal_state2_carry_n_7;
  wire \cpll_cal_state2_inferred__0/i__carry_n_0 ;
  wire \cpll_cal_state2_inferred__0/i__carry_n_1 ;
  wire \cpll_cal_state2_inferred__0/i__carry_n_2 ;
  wire \cpll_cal_state2_inferred__0/i__carry_n_3 ;
  wire \cpll_cal_state2_inferred__0/i__carry_n_4 ;
  wire \cpll_cal_state2_inferred__0/i__carry_n_5 ;
  wire \cpll_cal_state2_inferred__0/i__carry_n_6 ;
  wire \cpll_cal_state2_inferred__0/i__carry_n_7 ;
  wire \cpll_cal_state[12]_i_2_n_0 ;
  wire \cpll_cal_state[13]_i_2_n_0 ;
  wire \cpll_cal_state[13]_i_4_n_0 ;
  wire \cpll_cal_state[13]_i_6_n_0 ;
  wire \cpll_cal_state[14]_i_10_n_0 ;
  wire \cpll_cal_state[14]_i_3_n_0 ;
  wire \cpll_cal_state[14]_i_4_n_0 ;
  wire \cpll_cal_state[14]_i_5_n_0 ;
  wire \cpll_cal_state[14]_i_6_n_0 ;
  wire \cpll_cal_state[14]_i_7_n_0 ;
  wire \cpll_cal_state[14]_i_8_n_0 ;
  wire \cpll_cal_state[14]_i_9_n_0 ;
  wire \cpll_cal_state[16]_i_2_n_0 ;
  wire \cpll_cal_state[17]_i_2_n_0 ;
  wire \cpll_cal_state[18]_i_2_n_0 ;
  wire \cpll_cal_state[18]_i_3_n_0 ;
  wire \cpll_cal_state[19]_i_2_n_0 ;
  wire \cpll_cal_state[19]_i_3_n_0 ;
  wire \cpll_cal_state[20]_i_2_n_0 ;
  wire \cpll_cal_state[20]_i_3_n_0 ;
  wire \cpll_cal_state[20]_i_4_n_0 ;
  wire \cpll_cal_state[21]_i_3_n_0 ;
  wire \cpll_cal_state[23]_i_2_n_0 ;
  wire \cpll_cal_state[23]_i_3_n_0 ;
  wire \cpll_cal_state[23]_i_4_n_0 ;
  wire \cpll_cal_state[23]_i_5_n_0 ;
  wire \cpll_cal_state[23]_i_6_n_0 ;
  wire \cpll_cal_state[23]_i_7_n_0 ;
  wire \cpll_cal_state[23]_i_8_n_0 ;
  wire \cpll_cal_state[27]_i_2_n_0 ;
  wire \cpll_cal_state[29]_i_2_n_0 ;
  wire \cpll_cal_state[29]_i_4_n_0 ;
  wire \cpll_cal_state[29]_i_5_n_0 ;
  wire \cpll_cal_state[29]_i_6_n_0 ;
  wire \cpll_cal_state[30]_i_2_n_0 ;
  wire \cpll_cal_state[31]_i_2_n_0 ;
  wire \cpll_cal_state[31]_i_5_n_0 ;
  wire \cpll_cal_state[5]_i_2_n_0 ;
  wire \cpll_cal_state[5]_i_3_n_0 ;
  wire \cpll_cal_state[6]_i_2_n_0 ;
  wire \cpll_cal_state[7]_i_1_n_0 ;
  wire \cpll_cal_state[8]_i_2_n_0 ;
  wire \cpll_cal_state[9]_i_1_n_0 ;
  wire \cpll_cal_state[9]_i_2_n_0 ;
  wire \cpll_cal_state_reg[0]_0 ;
  wire \cpll_cal_state_reg[0]_1 ;
  wire \cpll_cal_state_reg[0]_2 ;
  wire \cpll_cal_state_reg[0]_3 ;
  wire \cpll_cal_state_reg[0]_4 ;
  wire \cpll_cal_state_reg[0]_5 ;
  wire \cpll_cal_state_reg[0]_6 ;
  wire \cpll_cal_state_reg[11]_0 ;
  wire \cpll_cal_state_reg[13]_0 ;
  wire \cpll_cal_state_reg[13]_1 ;
  wire \cpll_cal_state_reg[14]_0 ;
  wire \cpll_cal_state_reg[14]_1 ;
  wire \cpll_cal_state_reg[22]_0 ;
  wire \cpll_cal_state_reg[25]_0 ;
  wire \cpll_cal_state_reg[27]_0 ;
  wire \cpll_cal_state_reg[5]_0 ;
  wire \cpll_cal_state_reg[5]_1 ;
  wire \cpll_cal_state_reg[5]_2 ;
  wire \cpll_cal_state_reg[8]_0 ;
  wire \cpll_cal_state_reg[8]_1 ;
  wire \cpll_cal_state_reg[9]_0 ;
  wire \cpll_cal_state_reg_n_0_[12] ;
  wire \cpll_cal_state_reg_n_0_[27] ;
  wire \cpll_cal_state_reg_n_0_[29] ;
  wire cpllpd_int_reg_0;
  wire cpllpd_int_reg_1;
  wire cpllreset_int_i_3_n_0;
  wire cpllreset_int_reg_0;
  wire cpllreset_int_reg_1;
  wire [5:1]daddr0_in;
  wire \daddr[2]_i_1__0_n_0 ;
  wire \daddr[5]_i_2_n_0 ;
  wire \daddr[6]_i_1__0_n_0 ;
  wire \daddr[6]_i_2_n_0 ;
  wire \daddr[7]_i_1__0_n_0 ;
  wire \daddr[7]_i_2_n_0 ;
  wire [6:0]\daddr_reg[7]_0 ;
  wire [14:0]data2;
  wire den_reg_0;
  wire [15:10]di_msk;
  wire \di_msk[0]_i_1_n_0 ;
  wire \di_msk[0]_i_2_n_0 ;
  wire \di_msk[10]_i_2_n_0 ;
  wire \di_msk[10]_i_3_n_0 ;
  wire \di_msk[11]_i_2_n_0 ;
  wire \di_msk[11]_i_3_n_0 ;
  wire \di_msk[11]_i_4_n_0 ;
  wire \di_msk[12]_i_1_n_0 ;
  wire \di_msk[12]_i_2_n_0 ;
  wire \di_msk[12]_i_3_n_0 ;
  wire \di_msk[13]_i_1_n_0 ;
  wire \di_msk[13]_i_2_n_0 ;
  wire \di_msk[13]_i_3_n_0 ;
  wire \di_msk[14]_i_1_n_0 ;
  wire \di_msk[14]_i_2_n_0 ;
  wire \di_msk[14]_i_3_n_0 ;
  wire \di_msk[14]_i_4_n_0 ;
  wire \di_msk[15]_i_1_n_0 ;
  wire \di_msk[15]_i_5_n_0 ;
  wire \di_msk[1]_i_1_n_0 ;
  wire \di_msk[1]_i_2_n_0 ;
  wire \di_msk[1]_i_3_n_0 ;
  wire \di_msk[2]_i_1_n_0 ;
  wire \di_msk[2]_i_2_n_0 ;
  wire \di_msk[3]_i_1_n_0 ;
  wire \di_msk[3]_i_2_n_0 ;
  wire \di_msk[4]_i_1_n_0 ;
  wire \di_msk[4]_i_2_n_0 ;
  wire \di_msk[5]_i_1_n_0 ;
  wire \di_msk[5]_i_2_n_0 ;
  wire \di_msk[5]_i_3_n_0 ;
  wire \di_msk[6]_i_1_n_0 ;
  wire \di_msk[6]_i_2_n_0 ;
  wire \di_msk[6]_i_3_n_0 ;
  wire \di_msk[7]_i_1_n_0 ;
  wire \di_msk[7]_i_2_n_0 ;
  wire \di_msk[8]_i_1_n_0 ;
  wire \di_msk[8]_i_2_n_0 ;
  wire \di_msk[9]_i_1_n_0 ;
  wire \di_msk[9]_i_2_n_0 ;
  wire \di_msk_reg_n_0_[0] ;
  wire \di_msk_reg_n_0_[10] ;
  wire \di_msk_reg_n_0_[11] ;
  wire \di_msk_reg_n_0_[12] ;
  wire \di_msk_reg_n_0_[13] ;
  wire \di_msk_reg_n_0_[14] ;
  wire \di_msk_reg_n_0_[15] ;
  wire \di_msk_reg_n_0_[1] ;
  wire \di_msk_reg_n_0_[2] ;
  wire \di_msk_reg_n_0_[3] ;
  wire \di_msk_reg_n_0_[4] ;
  wire \di_msk_reg_n_0_[5] ;
  wire \di_msk_reg_n_0_[6] ;
  wire \di_msk_reg_n_0_[7] ;
  wire \di_msk_reg_n_0_[8] ;
  wire \di_msk_reg_n_0_[9] ;
  wire [15:0]\di_reg[15]_0 ;
  wire [6:0]drp_state;
  wire \drp_state[0]_i_2__0_n_0 ;
  wire \drp_state[0]_i_3_n_0 ;
  wire \drp_state[2]_i_1__0_n_0 ;
  wire \drp_state[5]_i_2_n_0 ;
  wire \drp_state[6]_i_2_n_0 ;
  wire [4:0]\drp_state_reg[6]_0 ;
  wire \drp_state_reg_n_0_[0] ;
  wire \drp_state_reg_n_0_[3] ;
  wire [7:0]drpaddr_in;
  wire [0:0]drpclk_in;
  wire [0:0]drpdi_in;
  wire drprst_in_sync;
  wire [0:0]drpwe_in;
  wire dwe_reg_0;
  wire freq_counter_rst_i_4_n_0;
  wire freq_counter_rst_i_5_n_0;
  wire freq_counter_rst_i_6_n_0;
  wire freq_counter_rst_reg_0;
  wire [0:0]gtwiz_userclk_tx_reset_in;
  wire i_in_out_reg;
  wire [0:0]i_in_out_reg_0;
  wire in0;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire mask_user_in_reg_0;
  wire mask_user_in_reg_1;
  wire [2:0]\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2]_0 ;
  wire p_0_in0_in;
  wire p_0_in3_in;
  wire p_0_in7_in;
  wire p_0_in_0;
  wire p_11_in;
  wire p_12_in;
  wire p_14_in;
  wire p_1_in;
  wire p_1_in5_in;
  wire p_25_in;
  wire p_29_in;
  wire p_2_in;
  wire p_2_in1_in;
  wire p_2_in8_in;
  wire p_3_in9_in;
  wire \progclk_sel_store[14]_i_1_n_0 ;
  wire \progclk_sel_store[14]_i_2_n_0 ;
  wire \progclk_sel_store_reg_n_0_[0] ;
  wire \progclk_sel_store_reg_n_0_[10] ;
  wire \progclk_sel_store_reg_n_0_[11] ;
  wire \progclk_sel_store_reg_n_0_[12] ;
  wire \progclk_sel_store_reg_n_0_[13] ;
  wire \progclk_sel_store_reg_n_0_[14] ;
  wire \progclk_sel_store_reg_n_0_[1] ;
  wire \progclk_sel_store_reg_n_0_[2] ;
  wire \progclk_sel_store_reg_n_0_[3] ;
  wire \progclk_sel_store_reg_n_0_[4] ;
  wire \progclk_sel_store_reg_n_0_[5] ;
  wire \progclk_sel_store_reg_n_0_[6] ;
  wire \progclk_sel_store_reg_n_0_[7] ;
  wire \progclk_sel_store_reg_n_0_[8] ;
  wire \progclk_sel_store_reg_n_0_[9] ;
  wire [15:15]progdiv_cfg_store;
  wire \progdiv_cfg_store[15]_i_1_n_0 ;
  wire \progdiv_cfg_store[15]_i_3_n_0 ;
  wire \progdiv_cfg_store[15]_i_4_n_0 ;
  wire \progdiv_cfg_store[15]_i_5_n_0 ;
  wire [15:0]\progdiv_cfg_store_reg[15]_0 ;
  wire \progdiv_cfg_store_reg_n_0_[0] ;
  wire \progdiv_cfg_store_reg_n_0_[10] ;
  wire \progdiv_cfg_store_reg_n_0_[11] ;
  wire \progdiv_cfg_store_reg_n_0_[12] ;
  wire \progdiv_cfg_store_reg_n_0_[13] ;
  wire \progdiv_cfg_store_reg_n_0_[14] ;
  wire \progdiv_cfg_store_reg_n_0_[15] ;
  wire \progdiv_cfg_store_reg_n_0_[1] ;
  wire \progdiv_cfg_store_reg_n_0_[2] ;
  wire \progdiv_cfg_store_reg_n_0_[3] ;
  wire \progdiv_cfg_store_reg_n_0_[4] ;
  wire \progdiv_cfg_store_reg_n_0_[5] ;
  wire \progdiv_cfg_store_reg_n_0_[6] ;
  wire \progdiv_cfg_store_reg_n_0_[7] ;
  wire \progdiv_cfg_store_reg_n_0_[8] ;
  wire \progdiv_cfg_store_reg_n_0_[9] ;
  wire rd_reg_0;
  wire rd_reg_1;
  wire \repeat_ctr[0]_i_1_n_0 ;
  wire \repeat_ctr[1]_i_1_n_0 ;
  wire \repeat_ctr[2]_i_1_n_0 ;
  wire \repeat_ctr[3]_i_2_n_0 ;
  wire \repeat_ctr[3]_i_3_n_0 ;
  wire \repeat_ctr_reg[3]_0 ;
  wire \repeat_ctr_reg_n_0_[0] ;
  wire \repeat_ctr_reg_n_0_[1] ;
  wire \repeat_ctr_reg_n_0_[2] ;
  wire \repeat_ctr_reg_n_0_[3] ;
  wire rst_in0;
  wire status_store_reg_0;
  wire status_store_reg_1;
  wire [0:0]txoutclk_out;
  wire txoutclkmon;
  wire [2:0]txoutclksel_in;
  wire [2:2]txoutclksel_int;
  wire \txoutclksel_int[2]_i_1_n_0 ;
  wire [0:0]txprgdivresetdone_out;
  wire txprogdivreset_int;
  wire txprogdivreset_int_reg_0;
  wire wait_ctr0_carry__0_n_0;
  wire wait_ctr0_carry__0_n_1;
  wire wait_ctr0_carry__0_n_10;
  wire wait_ctr0_carry__0_n_11;
  wire wait_ctr0_carry__0_n_12;
  wire wait_ctr0_carry__0_n_13;
  wire wait_ctr0_carry__0_n_14;
  wire wait_ctr0_carry__0_n_15;
  wire wait_ctr0_carry__0_n_2;
  wire wait_ctr0_carry__0_n_3;
  wire wait_ctr0_carry__0_n_4;
  wire wait_ctr0_carry__0_n_5;
  wire wait_ctr0_carry__0_n_6;
  wire wait_ctr0_carry__0_n_7;
  wire wait_ctr0_carry__0_n_8;
  wire wait_ctr0_carry__0_n_9;
  wire wait_ctr0_carry__1_n_1;
  wire wait_ctr0_carry__1_n_10;
  wire wait_ctr0_carry__1_n_11;
  wire wait_ctr0_carry__1_n_12;
  wire wait_ctr0_carry__1_n_13;
  wire wait_ctr0_carry__1_n_14;
  wire wait_ctr0_carry__1_n_15;
  wire wait_ctr0_carry__1_n_2;
  wire wait_ctr0_carry__1_n_3;
  wire wait_ctr0_carry__1_n_4;
  wire wait_ctr0_carry__1_n_5;
  wire wait_ctr0_carry__1_n_6;
  wire wait_ctr0_carry__1_n_7;
  wire wait_ctr0_carry__1_n_8;
  wire wait_ctr0_carry__1_n_9;
  wire wait_ctr0_carry_n_0;
  wire wait_ctr0_carry_n_1;
  wire wait_ctr0_carry_n_10;
  wire wait_ctr0_carry_n_11;
  wire wait_ctr0_carry_n_12;
  wire wait_ctr0_carry_n_13;
  wire wait_ctr0_carry_n_14;
  wire wait_ctr0_carry_n_15;
  wire wait_ctr0_carry_n_2;
  wire wait_ctr0_carry_n_3;
  wire wait_ctr0_carry_n_4;
  wire wait_ctr0_carry_n_5;
  wire wait_ctr0_carry_n_6;
  wire wait_ctr0_carry_n_7;
  wire wait_ctr0_carry_n_8;
  wire wait_ctr0_carry_n_9;
  wire \wait_ctr[0]_i_1_n_0 ;
  wire \wait_ctr[10]_i_1_n_0 ;
  wire \wait_ctr[11]_i_1_n_0 ;
  wire \wait_ctr[12]_i_1_n_0 ;
  wire \wait_ctr[13]_i_1_n_0 ;
  wire \wait_ctr[14]_i_1_n_0 ;
  wire \wait_ctr[15]_i_1_n_0 ;
  wire \wait_ctr[16]_i_1_n_0 ;
  wire \wait_ctr[17]_i_1_n_0 ;
  wire \wait_ctr[18]_i_1_n_0 ;
  wire \wait_ctr[19]_i_1_n_0 ;
  wire \wait_ctr[1]_i_1_n_0 ;
  wire \wait_ctr[20]_i_1_n_0 ;
  wire \wait_ctr[21]_i_1_n_0 ;
  wire \wait_ctr[22]_i_1_n_0 ;
  wire \wait_ctr[23]_i_1_n_0 ;
  wire \wait_ctr[24]_i_10_n_0 ;
  wire \wait_ctr[24]_i_11_n_0 ;
  wire \wait_ctr[24]_i_12_n_0 ;
  wire \wait_ctr[24]_i_13_n_0 ;
  wire \wait_ctr[24]_i_14_n_0 ;
  wire \wait_ctr[24]_i_15_n_0 ;
  wire \wait_ctr[24]_i_1_n_0 ;
  wire \wait_ctr[24]_i_2_n_0 ;
  wire \wait_ctr[24]_i_3_n_0 ;
  wire \wait_ctr[24]_i_4_n_0 ;
  wire \wait_ctr[24]_i_6_n_0 ;
  wire \wait_ctr[24]_i_8_n_0 ;
  wire \wait_ctr[24]_i_9_n_0 ;
  wire \wait_ctr[2]_i_1_n_0 ;
  wire \wait_ctr[3]_i_1_n_0 ;
  wire \wait_ctr[4]_i_1_n_0 ;
  wire \wait_ctr[5]_i_1_n_0 ;
  wire \wait_ctr[6]_i_1_n_0 ;
  wire \wait_ctr[7]_i_1_n_0 ;
  wire \wait_ctr[8]_i_1_n_0 ;
  wire \wait_ctr[9]_i_1_n_0 ;
  wire \wait_ctr_reg[11]_0 ;
  wire \wait_ctr_reg[12]_0 ;
  wire \wait_ctr_reg[14]_0 ;
  wire \wait_ctr_reg_n_0_[0] ;
  wire \wait_ctr_reg_n_0_[10] ;
  wire \wait_ctr_reg_n_0_[11] ;
  wire \wait_ctr_reg_n_0_[12] ;
  wire \wait_ctr_reg_n_0_[13] ;
  wire \wait_ctr_reg_n_0_[14] ;
  wire \wait_ctr_reg_n_0_[15] ;
  wire \wait_ctr_reg_n_0_[16] ;
  wire \wait_ctr_reg_n_0_[17] ;
  wire \wait_ctr_reg_n_0_[18] ;
  wire \wait_ctr_reg_n_0_[19] ;
  wire \wait_ctr_reg_n_0_[1] ;
  wire \wait_ctr_reg_n_0_[20] ;
  wire \wait_ctr_reg_n_0_[21] ;
  wire \wait_ctr_reg_n_0_[22] ;
  wire \wait_ctr_reg_n_0_[23] ;
  wire \wait_ctr_reg_n_0_[24] ;
  wire \wait_ctr_reg_n_0_[2] ;
  wire \wait_ctr_reg_n_0_[3] ;
  wire \wait_ctr_reg_n_0_[4] ;
  wire \wait_ctr_reg_n_0_[5] ;
  wire \wait_ctr_reg_n_0_[6] ;
  wire \wait_ctr_reg_n_0_[7] ;
  wire \wait_ctr_reg_n_0_[8] ;
  wire \wait_ctr_reg_n_0_[9] ;
  wire wr;
  wire wr_reg_0;
  wire x0e1_store;
  wire [7:0]NLW_cpll_cal_state2_carry_O_UNCONNECTED;
  wire [7:1]NLW_cpll_cal_state2_carry__0_CO_UNCONNECTED;
  wire [7:0]NLW_cpll_cal_state2_carry__0_O_UNCONNECTED;
  wire [7:0]\NLW_cpll_cal_state2_inferred__0/i__carry_O_UNCONNECTED ;
  wire [7:1]\NLW_cpll_cal_state2_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [7:0]\NLW_cpll_cal_state2_inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [7:7]NLW_wait_ctr0_carry__1_CO_UNCONNECTED;

  assign \^lopt  = lopt_1;
  assign \^lopt_1  = lopt_2;
  assign lopt = \<const1> ;
  FDRE USER_CPLLLOCK_OUT_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(bit_synchronizer_cplllock_inst_n_1),
        .Q(USER_CPLLLOCK_OUT_reg_0),
        .R(1'b0));
  FDRE USER_TXPRGDIVRESETDONE_OUT_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(USER_TXPRGDIVRESETDONE_OUT_reg_0),
        .Q(txprgdivresetdone_out),
        .R(1'b0));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_freq_counter U_TXOUTCLK_FREQ_COUNTER
       (.AS(AR),
        .CO(cpll_cal_state2),
        .D({cpll_cal_state[21:20],cpll_cal_state[13]}),
        .DI({U_TXOUTCLK_FREQ_COUNTER_n_21,U_TXOUTCLK_FREQ_COUNTER_n_22,U_TXOUTCLK_FREQ_COUNTER_n_23,U_TXOUTCLK_FREQ_COUNTER_n_24,U_TXOUTCLK_FREQ_COUNTER_n_25,U_TXOUTCLK_FREQ_COUNTER_n_26}),
        .Q({p_2_in8_in,p_11_in,\cpll_cal_state_reg_n_0_[12] ,Q[0]}),
        .S({U_TXOUTCLK_FREQ_COUNTER_n_1,U_TXOUTCLK_FREQ_COUNTER_n_2,U_TXOUTCLK_FREQ_COUNTER_n_3,U_TXOUTCLK_FREQ_COUNTER_n_4,U_TXOUTCLK_FREQ_COUNTER_n_5,U_TXOUTCLK_FREQ_COUNTER_n_6,U_TXOUTCLK_FREQ_COUNTER_n_7,U_TXOUTCLK_FREQ_COUNTER_n_8}),
        .cal_fail_store_reg(\repeat_ctr_reg_n_0_[3] ),
        .cal_fail_store_reg_0(\cpll_cal_state[13]_i_6_n_0 ),
        .cal_on_tx_reset_in_sync(cal_on_tx_reset_in_sync),
        .\cpll_cal_state_reg[13] (\cpll_cal_state[13]_i_2_n_0 ),
        .\cpll_cal_state_reg[13]_0 (\cpll_cal_state[13]_i_4_n_0 ),
        .\cpll_cal_state_reg[13]_1 (\cpll_cal_state_reg[13]_0 ),
        .\cpll_cal_state_reg[13]_2 (\cpll_cal_state[23]_i_2_n_0 ),
        .\cpll_cal_state_reg[20] (\cpll_cal_state[20]_i_2_n_0 ),
        .\cpll_cal_state_reg[20]_0 (\cpll_cal_state[20]_i_3_n_0 ),
        .\cpll_cal_state_reg[20]_1 (\cpll_cal_state[20]_i_4_n_0 ),
        .\cpll_cal_state_reg[20]_2 (bit_synchronizer_txprgdivresetdone_inst_n_6),
        .\cpll_cal_state_reg[21] (\drp_state_reg[6]_0 [4]),
        .\cpll_cal_state_reg[21]_0 (\cpll_cal_state[21]_i_3_n_0 ),
        .\cpll_cal_state_reg[21]_1 (\repeat_ctr_reg_n_0_[1] ),
        .\cpll_cal_state_reg[21]_2 (\repeat_ctr_reg_n_0_[0] ),
        .\cpll_cal_state_reg[21]_3 (\repeat_ctr_reg_n_0_[2] ),
        .drpclk_in(drpclk_in),
        .\freq_cnt_o_reg[14]_0 ({U_TXOUTCLK_FREQ_COUNTER_n_13,U_TXOUTCLK_FREQ_COUNTER_n_14,U_TXOUTCLK_FREQ_COUNTER_n_15,U_TXOUTCLK_FREQ_COUNTER_n_16,U_TXOUTCLK_FREQ_COUNTER_n_17,U_TXOUTCLK_FREQ_COUNTER_n_18,U_TXOUTCLK_FREQ_COUNTER_n_19,U_TXOUTCLK_FREQ_COUNTER_n_20}),
        .\freq_cnt_o_reg[15]_0 ({U_TXOUTCLK_FREQ_COUNTER_n_27,U_TXOUTCLK_FREQ_COUNTER_n_28,U_TXOUTCLK_FREQ_COUNTER_n_29,U_TXOUTCLK_FREQ_COUNTER_n_30,U_TXOUTCLK_FREQ_COUNTER_n_31,U_TXOUTCLK_FREQ_COUNTER_n_32,U_TXOUTCLK_FREQ_COUNTER_n_33}),
        .\freq_cnt_o_reg[16]_0 (U_TXOUTCLK_FREQ_COUNTER_n_35),
        .\freq_cnt_o_reg[16]_1 (U_TXOUTCLK_FREQ_COUNTER_n_36),
        .\freq_cnt_o_reg[17]_0 (U_TXOUTCLK_FREQ_COUNTER_n_34),
        .\repeat_ctr_reg[3] (\repeat_ctr_reg[3]_0 ),
        .\repeat_ctr_reg[3]_0 (cpll_cal_state26_in),
        .\repeat_ctr_reg[3]_1 (\repeat_ctr[3]_i_3_n_0 ),
        .rst_in_out_reg(U_TXOUTCLK_FREQ_COUNTER_n_0),
        .txoutclkmon(txoutclkmon));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'hFFFFFFFF40010000)) 
    \addr_i[0]_i_1 
       (.I0(\cpll_cal_state_reg[0]_0 ),
        .I1(drpaddr_in[5]),
        .I2(drpaddr_in[1]),
        .I3(drpaddr_in[4]),
        .I4(\addr_i_reg[6] ),
        .I5(drpaddr_in[0]),
        .O(\cpll_cal_state_reg[0]_3 ));
  (* SOFT_HLUTNM = "soft_lutpair470" *) 
  LUT4 #(
    .INIT(16'hFEFF)) 
    \addr_i[1]_i_2 
       (.I0(drpaddr_in[0]),
        .I1(Q[0]),
        .I2(Q[13]),
        .I3(drpwe_in),
        .O(\cpll_cal_state_reg[0]_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \addr_i[2]_i_2 
       (.I0(drpaddr_in[2]),
        .I1(\addr_i[2]_i_3_n_0 ),
        .O(i_in_out_reg_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF00008002)) 
    \addr_i[2]_i_3 
       (.I0(\addr_i_reg[6] ),
        .I1(drpaddr_in[4]),
        .I2(drpaddr_in[1]),
        .I3(drpaddr_in[5]),
        .I4(\cpll_cal_state_reg[0]_0 ),
        .I5(drprst_in_sync),
        .O(\addr_i[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFD00000000)) 
    \addr_i[3]_i_1 
       (.I0(\addr_i_reg[6] ),
        .I1(drpaddr_in[1]),
        .I2(drpaddr_in[5]),
        .I3(drpaddr_in[4]),
        .I4(\cpll_cal_state_reg[0]_0 ),
        .I5(drpaddr_in[3]),
        .O(\cpll_cal_state_reg[0]_6 ));
  LUT5 #(
    .INIT(32'hCCCDCCCC)) 
    \addr_i[5]_i_1 
       (.I0(\cpll_cal_state_reg[0]_0 ),
        .I1(drpaddr_in[5]),
        .I2(drpaddr_in[1]),
        .I3(drpaddr_in[4]),
        .I4(\addr_i_reg[6] ),
        .O(\cpll_cal_state_reg[0]_2 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF40010000)) 
    \addr_i[6]_i_1 
       (.I0(\cpll_cal_state_reg[0]_0 ),
        .I1(drpaddr_in[5]),
        .I2(drpaddr_in[1]),
        .I3(drpaddr_in[4]),
        .I4(\addr_i_reg[6] ),
        .I5(drpaddr_in[6]),
        .O(\cpll_cal_state_reg[0]_1 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000002)) 
    \addr_i[7]_i_1 
       (.I0(\addr_i_reg[6] ),
        .I1(drpaddr_in[1]),
        .I2(drpaddr_in[5]),
        .I3(drpaddr_in[4]),
        .I4(\cpll_cal_state_reg[0]_0 ),
        .I5(drpaddr_in[7]),
        .O(\cpll_cal_state_reg[0]_5 ));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_24 bit_synchronizer_cplllock_inst
       (.GTHE4_CPLLLOCK_IN(GTHE4_CPLLLOCK_IN),
        .Q({Q[12],\cpll_cal_state_reg_n_0_[27] ,Q[9],p_2_in8_in,p_11_in,Q[0]}),
        .USER_CPLLLOCK_OUT_reg(mask_user_in_reg_0),
        .cal_fail_store_reg(cal_fail_store_i_7_n_0),
        .cal_on_tx_reset_in_sync(cal_on_tx_reset_in_sync),
        .\cpll_cal_state_reg[0] (bit_synchronizer_cplllock_inst_n_1),
        .\cpll_cal_state_reg[22] (\cpll_cal_state_reg[22]_0 ),
        .drpclk_in(drpclk_in));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_25 bit_synchronizer_txoutclksel_inst0
       (.D(bit_synchronizer_txoutclksel_inst0_n_0),
        .drpclk_in(drpclk_in),
        .\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[0] (mask_user_in_reg_0),
        .txoutclksel_in(txoutclksel_in[0]),
        .txoutclksel_int(txoutclksel_int));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_26 bit_synchronizer_txoutclksel_inst1
       (.D(bit_synchronizer_txoutclksel_inst1_n_0),
        .drpclk_in(drpclk_in),
        .\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[1] (mask_user_in_reg_0),
        .txoutclksel_in(txoutclksel_in[1]));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_27 bit_synchronizer_txoutclksel_inst2
       (.D(bit_synchronizer_txoutclksel_inst2_n_0),
        .drpclk_in(drpclk_in),
        .\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2] (mask_user_in_reg_0),
        .txoutclksel_in(txoutclksel_in[2]),
        .txoutclksel_int(txoutclksel_int));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_28 bit_synchronizer_txprgdivresetdone_inst
       (.D({cpll_cal_state[31:29],cpll_cal_state[19]}),
        .GTHE4_TXPRGDIVRESETDONE_IN(GTHE4_TXPRGDIVRESETDONE_IN),
        .Q({Q[13:12],\cpll_cal_state_reg_n_0_[29] ,Q[11],\cpll_cal_state_reg_n_0_[27] ,Q[10],p_3_in9_in,p_2_in1_in,p_2_in,p_12_in,Q[8],p_14_in,Q[7],Q[5]}),
        .\cpll_cal_state_reg[14] (\cpll_cal_state_reg[14]_1 ),
        .\cpll_cal_state_reg[17] (bit_synchronizer_txprgdivresetdone_inst_n_6),
        .\cpll_cal_state_reg[19] (\cpll_cal_state[19]_i_2_n_0 ),
        .\cpll_cal_state_reg[19]_0 (\cpll_cal_state[19]_i_3_n_0 ),
        .\cpll_cal_state_reg[29] (\cpll_cal_state[29]_i_2_n_0 ),
        .\cpll_cal_state_reg[29]_0 (\cpll_cal_state[29]_i_4_n_0 ),
        .\cpll_cal_state_reg[29]_1 (\cpll_cal_state[27]_i_2_n_0 ),
        .\cpll_cal_state_reg[30] (\cpll_cal_state[31]_i_2_n_0 ),
        .\cpll_cal_state_reg[30]_0 (\cpll_cal_state_reg[25]_0 ),
        .\cpll_cal_state_reg[30]_1 (\cpll_cal_state[30]_i_2_n_0 ),
        .\cpll_cal_state_reg[31] (cal_fail_store_reg_0),
        .drpclk_in(drpclk_in),
        .freq_counter_rst_reg(\wait_ctr[24]_i_10_n_0 ),
        .freq_counter_rst_reg_0(freq_counter_rst_i_4_n_0),
        .i_in_out_reg_0(i_in_out_reg));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_29 bit_synchronizer_txprogdivreset_inst
       (.drpclk_in(drpclk_in),
        .in0(in0),
        .\non_pcie_txoutclksel.GTHE4_TXPROGDIVRESET_OUT_reg (mask_user_in_reg_0),
        .txprogdivreset_int(txprogdivreset_int),
        .txprogdivreset_int_reg(bit_synchronizer_txprogdivreset_inst_n_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  BUFG_GT #(
    .SIM_DEVICE("ULTRASCALE"),
    .STARTUP_SYNC("FALSE")) 
    bufg_gt_txoutclkmon_inst
       (.CE(\^lopt ),
        .CEMASK(1'b1),
        .CLR(\^lopt_1 ),
        .CLRMASK(1'b1),
        .DIV({1'b0,1'b0,1'b0}),
        .I(txoutclk_out),
        .O(txoutclkmon));
  LUT3 #(
    .INIT(8'hBF)) 
    cal_fail_store_i_2
       (.I0(\cpll_cal_state_reg_n_0_[27] ),
        .I1(cpll_cal_state26_in),
        .I2(cpll_cal_state2),
        .O(\cpll_cal_state_reg[27]_0 ));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    cal_fail_store_i_5
       (.I0(p_0_in3_in),
        .I1(Q[3]),
        .I2(p_25_in),
        .I3(p_1_in),
        .I4(cal_fail_store_i_8_n_0),
        .I5(\cpll_cal_state[20]_i_3_n_0 ),
        .O(\cpll_cal_state_reg[8]_1 ));
  LUT3 #(
    .INIT(8'hFE)) 
    cal_fail_store_i_6
       (.I0(\cpll_cal_state[27]_i_2_n_0 ),
        .I1(p_1_in5_in),
        .I2(cal_on_tx_reset_in_sync),
        .O(\cpll_cal_state_reg[5]_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    cal_fail_store_i_7
       (.I0(Q[10]),
        .I1(p_2_in),
        .I2(p_2_in1_in),
        .I3(p_3_in9_in),
        .O(cal_fail_store_i_7_n_0));
  (* SOFT_HLUTNM = "soft_lutpair461" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    cal_fail_store_i_8
       (.I0(Q[4]),
        .I1(\cpll_cal_state_reg_n_0_[12] ),
        .I2(p_0_in0_in),
        .I3(p_0_in_0),
        .O(cal_fail_store_i_8_n_0));
  FDRE #(
    .INIT(1'b0)) 
    cal_fail_store_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cal_fail_store_reg_1),
        .Q(cal_fail_store_reg_0),
        .R(1'b0));
  CARRY8 cpll_cal_state2_carry
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({cpll_cal_state2_carry_n_0,cpll_cal_state2_carry_n_1,cpll_cal_state2_carry_n_2,cpll_cal_state2_carry_n_3,cpll_cal_state2_carry_n_4,cpll_cal_state2_carry_n_5,cpll_cal_state2_carry_n_6,cpll_cal_state2_carry_n_7}),
        .DI({1'b0,U_TXOUTCLK_FREQ_COUNTER_n_21,U_TXOUTCLK_FREQ_COUNTER_n_22,U_TXOUTCLK_FREQ_COUNTER_n_23,U_TXOUTCLK_FREQ_COUNTER_n_24,1'b0,U_TXOUTCLK_FREQ_COUNTER_n_25,U_TXOUTCLK_FREQ_COUNTER_n_26}),
        .O(NLW_cpll_cal_state2_carry_O_UNCONNECTED[7:0]),
        .S({U_TXOUTCLK_FREQ_COUNTER_n_13,U_TXOUTCLK_FREQ_COUNTER_n_14,U_TXOUTCLK_FREQ_COUNTER_n_15,U_TXOUTCLK_FREQ_COUNTER_n_16,U_TXOUTCLK_FREQ_COUNTER_n_17,U_TXOUTCLK_FREQ_COUNTER_n_18,U_TXOUTCLK_FREQ_COUNTER_n_19,U_TXOUTCLK_FREQ_COUNTER_n_20}));
  CARRY8 cpll_cal_state2_carry__0
       (.CI(cpll_cal_state2_carry_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_cpll_cal_state2_carry__0_CO_UNCONNECTED[7:1],cpll_cal_state2}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_cpll_cal_state2_carry__0_O_UNCONNECTED[7:0]),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,U_TXOUTCLK_FREQ_COUNTER_n_36}));
  CARRY8 \cpll_cal_state2_inferred__0/i__carry 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\cpll_cal_state2_inferred__0/i__carry_n_0 ,\cpll_cal_state2_inferred__0/i__carry_n_1 ,\cpll_cal_state2_inferred__0/i__carry_n_2 ,\cpll_cal_state2_inferred__0/i__carry_n_3 ,\cpll_cal_state2_inferred__0/i__carry_n_4 ,\cpll_cal_state2_inferred__0/i__carry_n_5 ,\cpll_cal_state2_inferred__0/i__carry_n_6 ,\cpll_cal_state2_inferred__0/i__carry_n_7 }),
        .DI({U_TXOUTCLK_FREQ_COUNTER_n_27,U_TXOUTCLK_FREQ_COUNTER_n_28,U_TXOUTCLK_FREQ_COUNTER_n_29,U_TXOUTCLK_FREQ_COUNTER_n_30,1'b0,U_TXOUTCLK_FREQ_COUNTER_n_31,U_TXOUTCLK_FREQ_COUNTER_n_32,U_TXOUTCLK_FREQ_COUNTER_n_33}),
        .O(\NLW_cpll_cal_state2_inferred__0/i__carry_O_UNCONNECTED [7:0]),
        .S({U_TXOUTCLK_FREQ_COUNTER_n_1,U_TXOUTCLK_FREQ_COUNTER_n_2,U_TXOUTCLK_FREQ_COUNTER_n_3,U_TXOUTCLK_FREQ_COUNTER_n_4,U_TXOUTCLK_FREQ_COUNTER_n_5,U_TXOUTCLK_FREQ_COUNTER_n_6,U_TXOUTCLK_FREQ_COUNTER_n_7,U_TXOUTCLK_FREQ_COUNTER_n_8}));
  CARRY8 \cpll_cal_state2_inferred__0/i__carry__0 
       (.CI(\cpll_cal_state2_inferred__0/i__carry_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_cpll_cal_state2_inferred__0/i__carry__0_CO_UNCONNECTED [7:1],cpll_cal_state26_in}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,U_TXOUTCLK_FREQ_COUNTER_n_34}),
        .O(\NLW_cpll_cal_state2_inferred__0/i__carry__0_O_UNCONNECTED [7:0]),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,U_TXOUTCLK_FREQ_COUNTER_n_35}));
  (* SOFT_HLUTNM = "soft_lutpair456" *) 
  LUT5 #(
    .INIT(32'h20022000)) 
    \cpll_cal_state[10]_i_1 
       (.I0(\cpll_cal_state[12]_i_2_n_0 ),
        .I1(p_0_in3_in),
        .I2(\drp_state_reg[6]_0 [4]),
        .I3(Q[3]),
        .I4(p_0_in0_in),
        .O(cpll_cal_state[10]));
  LUT6 #(
    .INIT(64'h0200000202000000)) 
    \cpll_cal_state[11]_i_1 
       (.I0(\cpll_cal_state[12]_i_2_n_0 ),
        .I1(p_0_in3_in),
        .I2(Q[3]),
        .I3(\drp_state_reg[6]_0 [4]),
        .I4(p_0_in0_in),
        .I5(p_0_in_0),
        .O(cpll_cal_state[11]));
  LUT6 #(
    .INIT(64'h0000000000000800)) 
    \cpll_cal_state[12]_i_1 
       (.I0(\cpll_cal_state[12]_i_2_n_0 ),
        .I1(\drp_state_reg[6]_0 [4]),
        .I2(Q[3]),
        .I3(p_0_in_0),
        .I4(p_0_in3_in),
        .I5(p_0_in0_in),
        .O(cpll_cal_state[12]));
  (* SOFT_HLUTNM = "soft_lutpair452" *) 
  LUT5 #(
    .INIT(32'h00000100)) 
    \cpll_cal_state[12]_i_2 
       (.I0(p_1_in),
        .I1(p_1_in5_in),
        .I2(p_25_in),
        .I3(\cpll_cal_state[29]_i_6_n_0 ),
        .I4(\cpll_cal_state[27]_i_2_n_0 ),
        .O(\cpll_cal_state[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFFFFFF)) 
    \cpll_cal_state[13]_i_2 
       (.I0(\cpll_cal_state[20]_i_4_n_0 ),
        .I1(\cpll_cal_state[29]_i_6_n_0 ),
        .I2(p_12_in),
        .I3(p_14_in),
        .I4(Q[8]),
        .I5(\cpll_cal_state[23]_i_8_n_0 ),
        .O(\cpll_cal_state[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \cpll_cal_state[13]_i_4 
       (.I0(p_1_in),
        .I1(p_1_in5_in),
        .I2(p_25_in),
        .I3(Q[3]),
        .I4(p_0_in3_in),
        .I5(\cpll_cal_state_reg[11]_0 ),
        .O(\cpll_cal_state[13]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair471" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \cpll_cal_state[13]_i_5 
       (.I0(Q[4]),
        .I1(\wait_ctr_reg[11]_0 ),
        .O(\cpll_cal_state_reg[13]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair479" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \cpll_cal_state[13]_i_6 
       (.I0(\repeat_ctr_reg_n_0_[1] ),
        .I1(\repeat_ctr_reg_n_0_[0] ),
        .I2(\repeat_ctr_reg_n_0_[2] ),
        .O(\cpll_cal_state[13]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h08080808AA080808)) 
    \cpll_cal_state[14]_i_1 
       (.I0(\cpll_cal_state[23]_i_2_n_0 ),
        .I1(\wait_ctr_reg[11]_0 ),
        .I2(\cpll_cal_state[14]_i_3_n_0 ),
        .I3(\wait_ctr_reg[12]_0 ),
        .I4(Q[5]),
        .I5(\cpll_cal_state[14]_i_4_n_0 ),
        .O(cpll_cal_state[14]));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \cpll_cal_state[14]_i_10 
       (.I0(\wait_ctr_reg_n_0_[21] ),
        .I1(\wait_ctr_reg_n_0_[23] ),
        .I2(\wait_ctr_reg_n_0_[18] ),
        .I3(\wait_ctr_reg_n_0_[20] ),
        .O(\cpll_cal_state[14]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFFFF)) 
    \cpll_cal_state[14]_i_2 
       (.I0(\cpll_cal_state[14]_i_5_n_0 ),
        .I1(\cpll_cal_state[14]_i_6_n_0 ),
        .I2(\cpll_cal_state[14]_i_7_n_0 ),
        .I3(\cpll_cal_state[14]_i_8_n_0 ),
        .I4(\cpll_cal_state[14]_i_9_n_0 ),
        .I5(\cpll_cal_state[14]_i_10_n_0 ),
        .O(\wait_ctr_reg[11]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFFFFFF)) 
    \cpll_cal_state[14]_i_3 
       (.I0(\cpll_cal_state[23]_i_7_n_0 ),
        .I1(Q[3]),
        .I2(p_0_in3_in),
        .I3(\cpll_cal_state_reg[11]_0 ),
        .I4(\cpll_cal_state_reg_n_0_[12] ),
        .I5(Q[4]),
        .O(\cpll_cal_state[14]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair460" *) 
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \cpll_cal_state[14]_i_4 
       (.I0(\cpll_cal_state[29]_i_6_n_0 ),
        .I1(\cpll_cal_state[20]_i_3_n_0 ),
        .I2(Q[9]),
        .I3(p_11_in),
        .I4(p_2_in8_in),
        .O(\cpll_cal_state[14]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \cpll_cal_state[14]_i_5 
       (.I0(\wait_ctr_reg_n_0_[11] ),
        .I1(\wait_ctr_reg_n_0_[12] ),
        .I2(\wait_ctr_reg_n_0_[8] ),
        .I3(\wait_ctr_reg_n_0_[9] ),
        .O(\cpll_cal_state[14]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \cpll_cal_state[14]_i_6 
       (.I0(\wait_ctr_reg_n_0_[6] ),
        .I1(\wait_ctr_reg_n_0_[7] ),
        .I2(\wait_ctr_reg_n_0_[5] ),
        .I3(\wait_ctr_reg_n_0_[10] ),
        .O(\cpll_cal_state[14]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h88888880)) 
    \cpll_cal_state[14]_i_7 
       (.I0(\wait_ctr_reg_n_0_[3] ),
        .I1(\wait_ctr_reg_n_0_[4] ),
        .I2(\wait_ctr_reg_n_0_[2] ),
        .I3(\wait_ctr_reg_n_0_[1] ),
        .I4(\wait_ctr_reg_n_0_[0] ),
        .O(\cpll_cal_state[14]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \cpll_cal_state[14]_i_8 
       (.I0(\wait_ctr_reg_n_0_[14] ),
        .I1(\wait_ctr_reg_n_0_[15] ),
        .I2(\wait_ctr_reg_n_0_[13] ),
        .I3(\wait_ctr_reg_n_0_[16] ),
        .O(\cpll_cal_state[14]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair458" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \cpll_cal_state[14]_i_9 
       (.I0(\wait_ctr_reg_n_0_[17] ),
        .I1(\wait_ctr_reg_n_0_[19] ),
        .I2(\wait_ctr_reg_n_0_[22] ),
        .I3(\wait_ctr_reg_n_0_[24] ),
        .O(\cpll_cal_state[14]_i_9_n_0 ));
  LUT5 #(
    .INIT(32'h0080AA80)) 
    \cpll_cal_state[15]_i_1 
       (.I0(\cpll_cal_state[16]_i_2_n_0 ),
        .I1(\wait_ctr_reg[14]_0 ),
        .I2(Q[6]),
        .I3(Q[5]),
        .I4(\wait_ctr_reg[12]_0 ),
        .O(cpll_cal_state[15]));
  LUT6 #(
    .INIT(64'h0000000020EC0000)) 
    \cpll_cal_state[16]_i_1 
       (.I0(\wait_ctr_reg[12]_0 ),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(\wait_ctr_reg[14]_0 ),
        .I4(\cpll_cal_state[16]_i_2_n_0 ),
        .I5(Q[5]),
        .O(cpll_cal_state[16]));
  LUT6 #(
    .INIT(64'h0000000000FD0000)) 
    \cpll_cal_state[16]_i_2 
       (.I0(\cpll_cal_state[29]_i_5_n_0 ),
        .I1(\cpll_cal_state[23]_i_8_n_0 ),
        .I2(\cpll_cal_state[20]_i_3_n_0 ),
        .I3(\cpll_cal_state[27]_i_2_n_0 ),
        .I4(\cpll_cal_state[20]_i_4_n_0 ),
        .I5(\cpll_cal_state[29]_i_6_n_0 ),
        .O(\cpll_cal_state[16]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h000000200000002A)) 
    \cpll_cal_state[17]_i_1 
       (.I0(\cpll_cal_state[20]_i_2_n_0 ),
        .I1(\wait_ctr_reg[12]_0 ),
        .I2(Q[7]),
        .I3(Q[6]),
        .I4(Q[5]),
        .I5(\cpll_cal_state[17]_i_2_n_0 ),
        .O(cpll_cal_state[17]));
  LUT6 #(
    .INIT(64'hDDD5DDDDFFFFFFFF)) 
    \cpll_cal_state[17]_i_2 
       (.I0(p_14_in),
        .I1(\wait_ctr_reg_n_0_[16] ),
        .I2(\wait_ctr_reg_n_0_[15] ),
        .I3(\wait_ctr_reg_n_0_[14] ),
        .I4(\wait_ctr[24]_i_13_n_0 ),
        .I5(\wait_ctr[24]_i_12_n_0 ),
        .O(\cpll_cal_state[17]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000404040)) 
    \cpll_cal_state[18]_i_1 
       (.I0(\cpll_cal_state[18]_i_2_n_0 ),
        .I1(\cpll_cal_state[18]_i_3_n_0 ),
        .I2(\cpll_cal_state[23]_i_2_n_0 ),
        .I3(p_14_in),
        .I4(\wait_ctr_reg[14]_0 ),
        .I5(\cpll_cal_state[19]_i_3_n_0 ),
        .O(cpll_cal_state[18]));
  (* SOFT_HLUTNM = "soft_lutpair469" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \cpll_cal_state[18]_i_2 
       (.I0(Q[5]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(\cpll_cal_state[29]_i_6_n_0 ),
        .O(\cpll_cal_state[18]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair454" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \cpll_cal_state[18]_i_3 
       (.I0(p_12_in),
        .I1(p_14_in),
        .I2(Q[8]),
        .O(\cpll_cal_state[18]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair463" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \cpll_cal_state[19]_i_2 
       (.I0(\cpll_cal_state[27]_i_2_n_0 ),
        .I1(\cpll_cal_state[18]_i_3_n_0 ),
        .I2(\cpll_cal_state[20]_i_4_n_0 ),
        .I3(\cpll_cal_state[29]_i_6_n_0 ),
        .O(\cpll_cal_state[19]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair490" *) 
  LUT3 #(
    .INIT(8'h23)) 
    \cpll_cal_state[19]_i_3 
       (.I0(\wait_ctr_reg[11]_0 ),
        .I1(p_14_in),
        .I2(Q[8]),
        .O(\cpll_cal_state[19]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair491" *) 
  LUT3 #(
    .INIT(8'hDC)) 
    \cpll_cal_state[1]_i_1 
       (.I0(\drp_state_reg[6]_0 [4]),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(cpll_cal_state[1]));
  LUT6 #(
    .INIT(64'h0000000055555554)) 
    \cpll_cal_state[20]_i_2 
       (.I0(\cpll_cal_state[27]_i_2_n_0 ),
        .I1(p_2_in8_in),
        .I2(p_11_in),
        .I3(Q[9]),
        .I4(\cpll_cal_state[20]_i_3_n_0 ),
        .I5(\cpll_cal_state[29]_i_6_n_0 ),
        .O(\cpll_cal_state[20]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \cpll_cal_state[20]_i_3 
       (.I0(Q[5]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(Q[8]),
        .I4(p_14_in),
        .I5(p_12_in),
        .O(\cpll_cal_state[20]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair462" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \cpll_cal_state[20]_i_4 
       (.I0(Q[7]),
        .I1(Q[6]),
        .I2(Q[5]),
        .O(\cpll_cal_state[20]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair463" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    \cpll_cal_state[21]_i_3 
       (.I0(\cpll_cal_state[23]_i_8_n_0 ),
        .I1(\cpll_cal_state[18]_i_3_n_0 ),
        .I2(\cpll_cal_state[20]_i_4_n_0 ),
        .I3(\cpll_cal_state[29]_i_6_n_0 ),
        .I4(\cpll_cal_state[27]_i_2_n_0 ),
        .O(\cpll_cal_state[21]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000220010)) 
    \cpll_cal_state[22]_i_1 
       (.I0(\drp_state_reg[6]_0 [4]),
        .I1(\cpll_cal_state[27]_i_2_n_0 ),
        .I2(Q[9]),
        .I3(p_11_in),
        .I4(p_2_in8_in),
        .I5(\cpll_cal_state[23]_i_3_n_0 ),
        .O(cpll_cal_state[22]));
  LUT6 #(
    .INIT(64'h00200A2A00200020)) 
    \cpll_cal_state[23]_i_1 
       (.I0(\cpll_cal_state[23]_i_2_n_0 ),
        .I1(\cpll_cal_state[23]_i_3_n_0 ),
        .I2(\drp_state_reg[6]_0 [4]),
        .I3(\cpll_cal_state[23]_i_4_n_0 ),
        .I4(\cpll_cal_state[23]_i_5_n_0 ),
        .I5(p_2_in),
        .O(cpll_cal_state[23]));
  LUT6 #(
    .INIT(64'h5555555555555554)) 
    \cpll_cal_state[23]_i_2 
       (.I0(\cpll_cal_state[27]_i_2_n_0 ),
        .I1(\cpll_cal_state[23]_i_5_n_0 ),
        .I2(Q[13]),
        .I3(Q[12]),
        .I4(\cpll_cal_state_reg_n_0_[29] ),
        .I5(\cpll_cal_state[31]_i_5_n_0 ),
        .O(\cpll_cal_state[23]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair454" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \cpll_cal_state[23]_i_3 
       (.I0(Q[8]),
        .I1(p_14_in),
        .I2(p_12_in),
        .I3(\cpll_cal_state[29]_i_6_n_0 ),
        .I4(\cpll_cal_state[20]_i_4_n_0 ),
        .O(\cpll_cal_state[23]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair489" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \cpll_cal_state[23]_i_4 
       (.I0(p_11_in),
        .I1(p_2_in8_in),
        .I2(Q[9]),
        .O(\cpll_cal_state[23]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \cpll_cal_state[23]_i_5 
       (.I0(\cpll_cal_state_reg_n_0_[12] ),
        .I1(\cpll_cal_state[23]_i_6_n_0 ),
        .I2(\cpll_cal_state[23]_i_7_n_0 ),
        .I3(Q[4]),
        .I4(\cpll_cal_state[20]_i_3_n_0 ),
        .I5(\cpll_cal_state[23]_i_8_n_0 ),
        .O(\cpll_cal_state[23]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \cpll_cal_state[23]_i_6 
       (.I0(p_0_in0_in),
        .I1(p_0_in_0),
        .I2(p_0_in3_in),
        .I3(Q[3]),
        .O(\cpll_cal_state[23]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair452" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \cpll_cal_state[23]_i_7 
       (.I0(p_25_in),
        .I1(p_1_in5_in),
        .I2(p_1_in),
        .O(\cpll_cal_state[23]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair460" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \cpll_cal_state[23]_i_8 
       (.I0(Q[9]),
        .I1(p_11_in),
        .I2(p_2_in8_in),
        .O(\cpll_cal_state[23]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h0000A008)) 
    \cpll_cal_state[24]_i_1 
       (.I0(\cpll_cal_state[29]_i_2_n_0 ),
        .I1(p_2_in1_in),
        .I2(p_2_in),
        .I3(\drp_state_reg[6]_0 [4]),
        .I4(\cpll_cal_state[27]_i_2_n_0 ),
        .O(cpll_cal_state[24]));
  (* SOFT_HLUTNM = "soft_lutpair459" *) 
  LUT5 #(
    .INIT(32'h00008280)) 
    \cpll_cal_state[25]_i_1 
       (.I0(\cpll_cal_state[31]_i_2_n_0 ),
        .I1(p_2_in1_in),
        .I2(\drp_state_reg[6]_0 [4]),
        .I3(p_3_in9_in),
        .I4(p_2_in),
        .O(cpll_cal_state[25]));
  LUT6 #(
    .INIT(64'h0000000000008280)) 
    \cpll_cal_state[26]_i_1 
       (.I0(\cpll_cal_state[31]_i_2_n_0 ),
        .I1(\drp_state_reg[6]_0 [4]),
        .I2(p_3_in9_in),
        .I3(Q[10]),
        .I4(p_2_in),
        .I5(p_2_in1_in),
        .O(cpll_cal_state[26]));
  LUT5 #(
    .INIT(32'h00004000)) 
    \cpll_cal_state[27]_i_1 
       (.I0(\cpll_cal_state_reg[25]_0 ),
        .I1(\cpll_cal_state[29]_i_2_n_0 ),
        .I2(\drp_state_reg[6]_0 [4]),
        .I3(Q[10]),
        .I4(\cpll_cal_state[27]_i_2_n_0 ),
        .O(cpll_cal_state[27]));
  (* SOFT_HLUTNM = "soft_lutpair455" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \cpll_cal_state[27]_i_2 
       (.I0(Q[2]),
        .I1(p_29_in),
        .I2(p_0_in7_in),
        .I3(Q[0]),
        .I4(Q[1]),
        .O(\cpll_cal_state[27]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h000000A8)) 
    \cpll_cal_state[28]_i_1 
       (.I0(\cpll_cal_state[31]_i_2_n_0 ),
        .I1(\cpll_cal_state_reg_n_0_[27] ),
        .I2(\cpll_cal_state[29]_i_4_n_0 ),
        .I3(Q[10]),
        .I4(\cpll_cal_state_reg[25]_0 ),
        .O(cpll_cal_state[28]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \cpll_cal_state[29]_i_2 
       (.I0(\cpll_cal_state[29]_i_5_n_0 ),
        .I1(p_2_in8_in),
        .I2(p_11_in),
        .I3(Q[9]),
        .I4(\cpll_cal_state[20]_i_3_n_0 ),
        .I5(\cpll_cal_state[29]_i_6_n_0 ),
        .O(\cpll_cal_state[29]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair490" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \cpll_cal_state[29]_i_4 
       (.I0(Q[11]),
        .I1(\wait_ctr_reg[11]_0 ),
        .O(\cpll_cal_state[29]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \cpll_cal_state[29]_i_5 
       (.I0(Q[13]),
        .I1(Q[12]),
        .I2(\cpll_cal_state_reg_n_0_[29] ),
        .I3(\cpll_cal_state[31]_i_5_n_0 ),
        .O(\cpll_cal_state[29]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \cpll_cal_state[29]_i_6 
       (.I0(Q[4]),
        .I1(\cpll_cal_state[23]_i_7_n_0 ),
        .I2(Q[3]),
        .I3(p_0_in3_in),
        .I4(\cpll_cal_state_reg[11]_0 ),
        .I5(\cpll_cal_state_reg_n_0_[12] ),
        .O(\cpll_cal_state[29]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair491" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \cpll_cal_state[2]_i_1 
       (.I0(Q[1]),
        .I1(\drp_state_reg[6]_0 [4]),
        .I2(Q[0]),
        .O(cpll_cal_state[2]));
  LUT5 #(
    .INIT(32'hEEEFFFEF)) 
    \cpll_cal_state[30]_i_2 
       (.I0(Q[10]),
        .I1(\cpll_cal_state_reg_n_0_[27] ),
        .I2(Q[12]),
        .I3(\cpll_cal_state_reg_n_0_[29] ),
        .I4(cal_fail_store_reg_0),
        .O(\cpll_cal_state[30]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000055555554)) 
    \cpll_cal_state[31]_i_2 
       (.I0(\cpll_cal_state[23]_i_5_n_0 ),
        .I1(Q[13]),
        .I2(Q[12]),
        .I3(\cpll_cal_state_reg_n_0_[29] ),
        .I4(\cpll_cal_state[31]_i_5_n_0 ),
        .I5(\cpll_cal_state[27]_i_2_n_0 ),
        .O(\cpll_cal_state[31]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair459" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \cpll_cal_state[31]_i_4 
       (.I0(p_3_in9_in),
        .I1(p_2_in1_in),
        .I2(p_2_in),
        .O(\cpll_cal_state_reg[25]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \cpll_cal_state[31]_i_5 
       (.I0(p_2_in),
        .I1(p_2_in1_in),
        .I2(p_3_in9_in),
        .I3(\cpll_cal_state_reg_n_0_[27] ),
        .I4(Q[10]),
        .I5(Q[11]),
        .O(\cpll_cal_state[31]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000001011001110)) 
    \cpll_cal_state[3]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(p_29_in),
        .I4(\drp_state_reg[6]_0 [4]),
        .I5(status_store_reg_0),
        .O(cpll_cal_state[3]));
  LUT6 #(
    .INIT(64'h0010000100100000)) 
    \cpll_cal_state[4]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(p_29_in),
        .I4(\drp_state_reg[6]_0 [4]),
        .I5(p_0_in7_in),
        .O(cpll_cal_state[4]));
  LUT6 #(
    .INIT(64'hACAC0000ABA80000)) 
    \cpll_cal_state[5]_i_1 
       (.I0(\cpll_cal_state[5]_i_2_n_0 ),
        .I1(p_0_in7_in),
        .I2(\cpll_cal_state[5]_i_3_n_0 ),
        .I3(p_1_in5_in),
        .I4(\cpll_cal_state[6]_i_2_n_0 ),
        .I5(\drp_state_reg[6]_0 [4]),
        .O(cpll_cal_state[5]));
  (* SOFT_HLUTNM = "soft_lutpair485" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \cpll_cal_state[5]_i_2 
       (.I0(status_store_reg_0),
        .I1(p_29_in),
        .O(\cpll_cal_state[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair455" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \cpll_cal_state[5]_i_3 
       (.I0(Q[2]),
        .I1(p_29_in),
        .O(\cpll_cal_state[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    \cpll_cal_state[6]_i_1 
       (.I0(\drp_state_reg[6]_0 [4]),
        .I1(\cpll_cal_state[6]_i_2_n_0 ),
        .I2(p_1_in5_in),
        .I3(Q[2]),
        .I4(p_29_in),
        .I5(p_0_in7_in),
        .O(cpll_cal_state[6]));
  (* SOFT_HLUTNM = "soft_lutpair470" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \cpll_cal_state[6]_i_2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(\cpll_cal_state[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000040401000504)) 
    \cpll_cal_state[7]_i_1 
       (.I0(\cpll_cal_state[27]_i_2_n_0 ),
        .I1(p_25_in),
        .I2(p_1_in5_in),
        .I3(p_1_in),
        .I4(status_store_reg_0),
        .I5(\drp_state_reg[6]_0 [4]),
        .O(\cpll_cal_state[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000010011000)) 
    \cpll_cal_state[8]_i_1 
       (.I0(p_1_in5_in),
        .I1(p_25_in),
        .I2(\drp_state_reg[6]_0 [4]),
        .I3(p_1_in),
        .I4(p_0_in3_in),
        .I5(\cpll_cal_state[8]_i_2_n_0 ),
        .O(cpll_cal_state[8]));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFFFFFF)) 
    \cpll_cal_state[8]_i_2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(p_0_in7_in),
        .I3(p_29_in),
        .I4(Q[2]),
        .I5(\cpll_cal_state[29]_i_6_n_0 ),
        .O(\cpll_cal_state[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h44544444)) 
    \cpll_cal_state[9]_i_1 
       (.I0(\cpll_cal_state[27]_i_2_n_0 ),
        .I1(\cpll_cal_state[9]_i_2_n_0 ),
        .I2(p_25_in),
        .I3(p_1_in5_in),
        .I4(status_store_reg_0),
        .O(\cpll_cal_state[9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000000C2)) 
    \cpll_cal_state[9]_i_2 
       (.I0(Q[3]),
        .I1(p_0_in3_in),
        .I2(\drp_state_reg[6]_0 [4]),
        .I3(p_25_in),
        .I4(p_1_in5_in),
        .I5(p_1_in),
        .O(\cpll_cal_state[9]_i_2_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[0] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(1'b0),
        .Q(Q[0]),
        .S(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[10] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[10]),
        .Q(p_0_in0_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[11] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[11]),
        .Q(p_0_in_0),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[12] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[12]),
        .Q(\cpll_cal_state_reg_n_0_[12] ),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[13] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[13]),
        .Q(Q[4]),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[14] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[14]),
        .Q(Q[5]),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[15] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[15]),
        .Q(Q[6]),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[16] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[16]),
        .Q(Q[7]),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[17] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[17]),
        .Q(p_14_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[18] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[18]),
        .Q(Q[8]),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[19] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[19]),
        .Q(p_12_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[1] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[1]),
        .Q(Q[1]),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[20] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[20]),
        .Q(p_11_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[21] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[21]),
        .Q(p_2_in8_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[22] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[22]),
        .Q(Q[9]),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[23] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[23]),
        .Q(p_2_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[24] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[24]),
        .Q(p_2_in1_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[25] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[25]),
        .Q(p_3_in9_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[26] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[26]),
        .Q(Q[10]),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[27] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[27]),
        .Q(\cpll_cal_state_reg_n_0_[27] ),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[28] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[28]),
        .Q(Q[11]),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[29] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[29]),
        .Q(\cpll_cal_state_reg_n_0_[29] ),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[2] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[2]),
        .Q(p_29_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[30] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[30]),
        .Q(Q[12]),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[31] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[31]),
        .Q(Q[13]),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[3] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[3]),
        .Q(Q[2]),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[4] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[4]),
        .Q(p_0_in7_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[5] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[5]),
        .Q(p_1_in5_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[6] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[6]),
        .Q(p_25_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[7] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(\cpll_cal_state[7]_i_1_n_0 ),
        .Q(p_1_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[8] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpll_cal_state[8]),
        .Q(p_0_in3_in),
        .R(cal_on_tx_reset_in_sync));
  FDRE #(
    .INIT(1'b0)) 
    \cpll_cal_state_reg[9] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(\cpll_cal_state[9]_i_1_n_0 ),
        .Q(Q[3]),
        .R(cal_on_tx_reset_in_sync));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    cpllpd_int_i_2
       (.I0(\cpll_cal_state[27]_i_2_n_0 ),
        .I1(\cpll_cal_state[23]_i_7_n_0 ),
        .I2(Q[3]),
        .I3(p_0_in3_in),
        .I4(\cpll_cal_state_reg[11]_0 ),
        .I5(\cpll_cal_state_reg_n_0_[12] ),
        .O(\cpll_cal_state_reg[9]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    cpllpd_int_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpllpd_int_reg_1),
        .Q(cpllpd_int_reg_0),
        .R(cal_on_tx_reset_in_sync));
  (* SOFT_HLUTNM = "soft_lutpair471" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    cpllreset_int_i_2
       (.I0(Q[4]),
        .I1(Q[5]),
        .I2(cpllreset_int_i_3_n_0),
        .I3(\cpll_cal_state[27]_i_2_n_0 ),
        .O(\cpll_cal_state_reg[13]_1 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    cpllreset_int_i_3
       (.I0(\cpll_cal_state_reg_n_0_[12] ),
        .I1(p_0_in0_in),
        .I2(p_0_in_0),
        .I3(p_0_in3_in),
        .I4(Q[3]),
        .I5(\cpll_cal_state[23]_i_7_n_0 ),
        .O(cpllreset_int_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    cpllreset_int_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(cpllreset_int_reg_1),
        .Q(cpllreset_int_reg_0),
        .R(cal_on_tx_reset_in_sync));
  (* SOFT_HLUTNM = "soft_lutpair457" *) 
  LUT5 #(
    .INIT(32'h00000008)) 
    \daddr[1]_i_1__0 
       (.I0(\daddr[5]_i_2_n_0 ),
        .I1(daddr0_in[3]),
        .I2(p_0_in0_in),
        .I3(p_2_in1_in),
        .I4(Q[2]),
        .O(daddr0_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair468" *) 
  LUT5 #(
    .INIT(32'h00000002)) 
    \daddr[2]_i_1__0 
       (.I0(daddr0_in[3]),
        .I1(Q[10]),
        .I2(Q[9]),
        .I3(p_0_in3_in),
        .I4(p_1_in5_in),
        .O(\daddr[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \daddr[3]_i_1__0 
       (.I0(p_0_in7_in),
        .I1(p_3_in9_in),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(p_2_in8_in),
        .I5(Q[0]),
        .O(daddr0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair457" *) 
  LUT5 #(
    .INIT(32'h2222222A)) 
    \daddr[4]_i_1__0 
       (.I0(daddr0_in[3]),
        .I1(\daddr[5]_i_2_n_0 ),
        .I2(Q[2]),
        .I3(p_2_in1_in),
        .I4(p_0_in0_in),
        .O(daddr0_in[4]));
  LUT6 #(
    .INIT(64'h000000005557FFFF)) 
    \daddr[5]_i_1__0 
       (.I0(\daddr[6]_i_2_n_0 ),
        .I1(p_0_in0_in),
        .I2(p_2_in1_in),
        .I3(Q[2]),
        .I4(\daddr[5]_i_2_n_0 ),
        .I5(Q[0]),
        .O(daddr0_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair468" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \daddr[5]_i_2 
       (.I0(p_1_in5_in),
        .I1(p_0_in3_in),
        .I2(Q[9]),
        .I3(Q[10]),
        .O(\daddr[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h5555555455555555)) 
    \daddr[6]_i_1__0 
       (.I0(Q[0]),
        .I1(p_1_in5_in),
        .I2(p_0_in3_in),
        .I3(Q[9]),
        .I4(Q[10]),
        .I5(\daddr[6]_i_2_n_0 ),
        .O(\daddr[6]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \daddr[6]_i_2 
       (.I0(p_2_in8_in),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(p_3_in9_in),
        .I4(p_0_in7_in),
        .O(\daddr[6]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFEFF)) 
    \daddr[7]_i_1__0 
       (.I0(p_0_in_0),
        .I1(p_2_in),
        .I2(p_1_in),
        .I3(daddr0_in[1]),
        .O(\daddr[7]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h5555555555555554)) 
    \daddr[7]_i_2 
       (.I0(Q[0]),
        .I1(p_0_in7_in),
        .I2(p_3_in9_in),
        .I3(Q[3]),
        .I4(Q[1]),
        .I5(p_2_in8_in),
        .O(\daddr[7]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[1] 
       (.C(drpclk_in),
        .CE(\daddr[7]_i_1__0_n_0 ),
        .D(daddr0_in[1]),
        .Q(\daddr_reg[7]_0 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[2] 
       (.C(drpclk_in),
        .CE(\daddr[7]_i_1__0_n_0 ),
        .D(\daddr[2]_i_1__0_n_0 ),
        .Q(\daddr_reg[7]_0 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[3] 
       (.C(drpclk_in),
        .CE(\daddr[7]_i_1__0_n_0 ),
        .D(daddr0_in[3]),
        .Q(\daddr_reg[7]_0 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[4] 
       (.C(drpclk_in),
        .CE(\daddr[7]_i_1__0_n_0 ),
        .D(daddr0_in[4]),
        .Q(\daddr_reg[7]_0 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[5] 
       (.C(drpclk_in),
        .CE(\daddr[7]_i_1__0_n_0 ),
        .D(daddr0_in[5]),
        .Q(\daddr_reg[7]_0 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[6] 
       (.C(drpclk_in),
        .CE(\daddr[7]_i_1__0_n_0 ),
        .D(\daddr[6]_i_1__0_n_0 ),
        .Q(\daddr_reg[7]_0 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \daddr_reg[7] 
       (.C(drpclk_in),
        .CE(\daddr[7]_i_1__0_n_0 ),
        .D(\daddr[7]_i_2_n_0 ),
        .Q(\daddr_reg[7]_0 [6]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFF40010000)) 
    \data_i[15]_i_1 
       (.I0(\cpll_cal_state_reg[0]_0 ),
        .I1(drpaddr_in[5]),
        .I2(drpaddr_in[1]),
        .I3(drpaddr_in[4]),
        .I4(\addr_i_reg[6] ),
        .I5(drpdi_in),
        .O(\cpll_cal_state_reg[0]_4 ));
  FDCE #(
    .INIT(1'b0)) 
    den_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(cal_on_tx_reset_in_sync),
        .D(den_reg_0),
        .Q(cal_on_tx_drpen_out));
  LUT5 #(
    .INIT(32'hFE0EF202)) 
    \di_msk[0]_i_1 
       (.I0(\di_msk[0]_i_2_n_0 ),
        .I1(p_0_in3_in),
        .I2(p_0_in7_in),
        .I3(\progclk_sel_store_reg_n_0_[0] ),
        .I4(\progdiv_cfg_store_reg_n_0_[0] ),
        .O(\di_msk[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF000000FFB800B8)) 
    \di_msk[0]_i_2 
       (.I0(\progdiv_cfg_store_reg_n_0_[0] ),
        .I1(p_2_in),
        .I2(\progclk_sel_store_reg_n_0_[0] ),
        .I3(p_0_in0_in),
        .I4(data2[0]),
        .I5(p_0_in_0),
        .O(\di_msk[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00FD000000FD00FD)) 
    \di_msk[10]_i_1 
       (.I0(\cpll_cal_state_reg[8]_0 ),
        .I1(p_2_in1_in),
        .I2(p_2_in),
        .I3(Q[0]),
        .I4(\di_msk[10]_i_2_n_0 ),
        .I5(\di_msk[10]_i_3_n_0 ),
        .O(di_msk[10]));
  LUT6 #(
    .INIT(64'h3030303000001000)) 
    \di_msk[10]_i_2 
       (.I0(p_0_in_0),
        .I1(p_0_in7_in),
        .I2(\progdiv_cfg_store_reg_n_0_[10] ),
        .I3(p_2_in),
        .I4(p_0_in0_in),
        .I5(p_0_in3_in),
        .O(\di_msk[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h55555555FFFFFFFD)) 
    \di_msk[10]_i_3 
       (.I0(\progclk_sel_store_reg_n_0_[10] ),
        .I1(p_0_in3_in),
        .I2(p_0_in0_in),
        .I3(p_2_in),
        .I4(p_0_in_0),
        .I5(p_0_in7_in),
        .O(\di_msk[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAAA00A2)) 
    \di_msk[11]_i_1 
       (.I0(\di_msk[11]_i_2_n_0 ),
        .I1(\di_msk[11]_i_3_n_0 ),
        .I2(p_2_in),
        .I3(p_0_in7_in),
        .I4(\progclk_sel_store_reg_n_0_[11] ),
        .I5(\di_msk[11]_i_4_n_0 ),
        .O(di_msk[11]));
  LUT6 #(
    .INIT(64'hFFFBAFAAFFFBAFAB)) 
    \di_msk[11]_i_2 
       (.I0(p_0_in7_in),
        .I1(p_0_in_0),
        .I2(p_0_in3_in),
        .I3(p_0_in0_in),
        .I4(\progdiv_cfg_store_reg_n_0_[11] ),
        .I5(p_2_in),
        .O(\di_msk[11]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair487" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \di_msk[11]_i_3 
       (.I0(p_0_in0_in),
        .I1(p_0_in3_in),
        .O(\di_msk[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAAB)) 
    \di_msk[11]_i_4 
       (.I0(Q[0]),
        .I1(p_0_in0_in),
        .I2(p_0_in7_in),
        .I3(p_0_in3_in),
        .I4(p_2_in1_in),
        .I5(p_2_in),
        .O(\di_msk[11]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF001000000000)) 
    \di_msk[12]_i_1 
       (.I0(p_2_in),
        .I1(p_2_in1_in),
        .I2(\cpll_cal_state_reg[8]_0 ),
        .I3(p_0_in0_in),
        .I4(Q[0]),
        .I5(\di_msk[15]_i_1_n_0 ),
        .O(\di_msk[12]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFE0EF202)) 
    \di_msk[12]_i_2 
       (.I0(\di_msk[12]_i_3_n_0 ),
        .I1(p_0_in3_in),
        .I2(p_0_in7_in),
        .I3(\progclk_sel_store_reg_n_0_[12] ),
        .I4(\progdiv_cfg_store_reg_n_0_[12] ),
        .O(\di_msk[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF000000FFB800B8)) 
    \di_msk[12]_i_3 
       (.I0(\progdiv_cfg_store_reg_n_0_[12] ),
        .I1(p_2_in),
        .I2(\progclk_sel_store_reg_n_0_[12] ),
        .I3(p_0_in0_in),
        .I4(data2[12]),
        .I5(p_0_in_0),
        .O(\di_msk[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h11010000FFFFFFFF)) 
    \di_msk[13]_i_1 
       (.I0(p_0_in7_in),
        .I1(p_0_in3_in),
        .I2(p_0_in0_in),
        .I3(data2[13]),
        .I4(\di_msk[13]_i_2_n_0 ),
        .I5(\di_msk[13]_i_3_n_0 ),
        .O(\di_msk[13]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEEEFE)) 
    \di_msk[13]_i_2 
       (.I0(p_0_in0_in),
        .I1(p_0_in_0),
        .I2(\progclk_sel_store_reg_n_0_[13] ),
        .I3(p_2_in),
        .I4(\progdiv_cfg_store_reg_n_0_[13] ),
        .O(\di_msk[13]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair487" *) 
  LUT4 #(
    .INIT(16'h07F7)) 
    \di_msk[13]_i_3 
       (.I0(p_0_in3_in),
        .I1(\progdiv_cfg_store_reg_n_0_[13] ),
        .I2(p_0_in7_in),
        .I3(\progclk_sel_store_reg_n_0_[13] ),
        .O(\di_msk[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA00000200)) 
    \di_msk[14]_i_1 
       (.I0(\di_msk[15]_i_1_n_0 ),
        .I1(p_2_in),
        .I2(p_2_in1_in),
        .I3(\cpll_cal_state_reg[8]_0 ),
        .I4(\cpll_cal_state_reg[11]_0 ),
        .I5(Q[0]),
        .O(\di_msk[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h11010000FFFFFFFF)) 
    \di_msk[14]_i_2 
       (.I0(p_0_in7_in),
        .I1(p_0_in3_in),
        .I2(p_0_in0_in),
        .I3(data2[14]),
        .I4(\di_msk[14]_i_3_n_0 ),
        .I5(\di_msk[14]_i_4_n_0 ),
        .O(\di_msk[14]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair467" *) 
  LUT5 #(
    .INIT(32'hFFFEEEFE)) 
    \di_msk[14]_i_3 
       (.I0(p_0_in0_in),
        .I1(p_0_in_0),
        .I2(\progclk_sel_store_reg_n_0_[14] ),
        .I3(p_2_in),
        .I4(\progdiv_cfg_store_reg_n_0_[14] ),
        .O(\di_msk[14]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h07F7)) 
    \di_msk[14]_i_4 
       (.I0(p_0_in3_in),
        .I1(\progdiv_cfg_store_reg_n_0_[14] ),
        .I2(p_0_in7_in),
        .I3(\progclk_sel_store_reg_n_0_[14] ),
        .O(\di_msk[14]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h5555555555555455)) 
    \di_msk[15]_i_1 
       (.I0(cal_on_tx_reset_in_sync),
        .I1(\cpll_cal_state_reg[25]_0 ),
        .I2(Q[10]),
        .I3(\cpll_cal_state_reg[8]_0 ),
        .I4(\cpll_cal_state_reg[11]_0 ),
        .I5(Q[0]),
        .O(\di_msk[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFA3FFA2)) 
    \di_msk[15]_i_2 
       (.I0(\progdiv_cfg_store_reg_n_0_[15] ),
        .I1(p_0_in0_in),
        .I2(p_0_in3_in),
        .I3(p_0_in7_in),
        .I4(p_0_in_0),
        .I5(\di_msk[15]_i_5_n_0 ),
        .O(di_msk[15]));
  (* SOFT_HLUTNM = "soft_lutpair466" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \di_msk[15]_i_3 
       (.I0(p_0_in3_in),
        .I1(p_0_in7_in),
        .O(\cpll_cal_state_reg[8]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair467" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \di_msk[15]_i_4 
       (.I0(p_0_in_0),
        .I1(p_0_in0_in),
        .O(\cpll_cal_state_reg[11]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair466" *) 
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \di_msk[15]_i_5 
       (.I0(Q[0]),
        .I1(p_0_in_0),
        .I2(p_2_in),
        .I3(p_0_in3_in),
        .I4(p_0_in7_in),
        .O(\di_msk[15]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h11010000FFFFFFFF)) 
    \di_msk[1]_i_1 
       (.I0(p_0_in7_in),
        .I1(p_0_in3_in),
        .I2(p_0_in0_in),
        .I3(data2[1]),
        .I4(\di_msk[1]_i_2_n_0 ),
        .I5(\di_msk[1]_i_3_n_0 ),
        .O(\di_msk[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEEEFE)) 
    \di_msk[1]_i_2 
       (.I0(p_0_in0_in),
        .I1(p_0_in_0),
        .I2(\progclk_sel_store_reg_n_0_[1] ),
        .I3(p_2_in),
        .I4(\progdiv_cfg_store_reg_n_0_[1] ),
        .O(\di_msk[1]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h07F7)) 
    \di_msk[1]_i_3 
       (.I0(p_0_in3_in),
        .I1(\progdiv_cfg_store_reg_n_0_[1] ),
        .I2(p_0_in7_in),
        .I3(\progclk_sel_store_reg_n_0_[1] ),
        .O(\di_msk[1]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFE0EF202)) 
    \di_msk[2]_i_1 
       (.I0(\di_msk[2]_i_2_n_0 ),
        .I1(p_0_in3_in),
        .I2(p_0_in7_in),
        .I3(\progclk_sel_store_reg_n_0_[2] ),
        .I4(\progdiv_cfg_store_reg_n_0_[2] ),
        .O(\di_msk[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF000000FFB800B8)) 
    \di_msk[2]_i_2 
       (.I0(\progdiv_cfg_store_reg_n_0_[2] ),
        .I1(p_2_in),
        .I2(\progclk_sel_store_reg_n_0_[2] ),
        .I3(p_0_in0_in),
        .I4(data2[2]),
        .I5(p_0_in_0),
        .O(\di_msk[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFE0EF202)) 
    \di_msk[3]_i_1 
       (.I0(\di_msk[3]_i_2_n_0 ),
        .I1(p_0_in3_in),
        .I2(p_0_in7_in),
        .I3(\progclk_sel_store_reg_n_0_[3] ),
        .I4(\progdiv_cfg_store_reg_n_0_[3] ),
        .O(\di_msk[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF000000FFB800B8)) 
    \di_msk[3]_i_2 
       (.I0(\progdiv_cfg_store_reg_n_0_[3] ),
        .I1(p_2_in),
        .I2(\progclk_sel_store_reg_n_0_[3] ),
        .I3(p_0_in0_in),
        .I4(data2[3]),
        .I5(p_0_in_0),
        .O(\di_msk[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFE0EF202)) 
    \di_msk[4]_i_1 
       (.I0(\di_msk[4]_i_2_n_0 ),
        .I1(p_0_in3_in),
        .I2(p_0_in7_in),
        .I3(\progclk_sel_store_reg_n_0_[4] ),
        .I4(\progdiv_cfg_store_reg_n_0_[4] ),
        .O(\di_msk[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF000000FFB800B8)) 
    \di_msk[4]_i_2 
       (.I0(\progdiv_cfg_store_reg_n_0_[4] ),
        .I1(p_2_in),
        .I2(\progclk_sel_store_reg_n_0_[4] ),
        .I3(p_0_in0_in),
        .I4(data2[4]),
        .I5(p_0_in_0),
        .O(\di_msk[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h11010000FFFFFFFF)) 
    \di_msk[5]_i_1 
       (.I0(p_0_in7_in),
        .I1(p_0_in3_in),
        .I2(p_0_in0_in),
        .I3(data2[5]),
        .I4(\di_msk[5]_i_2_n_0 ),
        .I5(\di_msk[5]_i_3_n_0 ),
        .O(\di_msk[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEEEFE)) 
    \di_msk[5]_i_2 
       (.I0(p_0_in0_in),
        .I1(p_0_in_0),
        .I2(\progclk_sel_store_reg_n_0_[5] ),
        .I3(p_2_in),
        .I4(\progdiv_cfg_store_reg_n_0_[5] ),
        .O(\di_msk[5]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h07F7)) 
    \di_msk[5]_i_3 
       (.I0(p_0_in3_in),
        .I1(\progdiv_cfg_store_reg_n_0_[5] ),
        .I2(p_0_in7_in),
        .I3(\progclk_sel_store_reg_n_0_[5] ),
        .O(\di_msk[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h11010000FFFFFFFF)) 
    \di_msk[6]_i_1 
       (.I0(p_0_in7_in),
        .I1(p_0_in3_in),
        .I2(p_0_in0_in),
        .I3(data2[6]),
        .I4(\di_msk[6]_i_2_n_0 ),
        .I5(\di_msk[6]_i_3_n_0 ),
        .O(\di_msk[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEEEFE)) 
    \di_msk[6]_i_2 
       (.I0(p_0_in0_in),
        .I1(p_0_in_0),
        .I2(\progclk_sel_store_reg_n_0_[6] ),
        .I3(p_2_in),
        .I4(\progdiv_cfg_store_reg_n_0_[6] ),
        .O(\di_msk[6]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h07F7)) 
    \di_msk[6]_i_3 
       (.I0(p_0_in3_in),
        .I1(\progdiv_cfg_store_reg_n_0_[6] ),
        .I2(p_0_in7_in),
        .I3(\progclk_sel_store_reg_n_0_[6] ),
        .O(\di_msk[6]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFE0EF202)) 
    \di_msk[7]_i_1 
       (.I0(\di_msk[7]_i_2_n_0 ),
        .I1(p_0_in3_in),
        .I2(p_0_in7_in),
        .I3(\progclk_sel_store_reg_n_0_[7] ),
        .I4(\progdiv_cfg_store_reg_n_0_[7] ),
        .O(\di_msk[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF000000FFB800B8)) 
    \di_msk[7]_i_2 
       (.I0(\progdiv_cfg_store_reg_n_0_[7] ),
        .I1(p_2_in),
        .I2(\progclk_sel_store_reg_n_0_[7] ),
        .I3(p_0_in0_in),
        .I4(data2[7]),
        .I5(p_0_in_0),
        .O(\di_msk[7]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFE0EF202)) 
    \di_msk[8]_i_1 
       (.I0(\di_msk[8]_i_2_n_0 ),
        .I1(p_0_in3_in),
        .I2(p_0_in7_in),
        .I3(\progclk_sel_store_reg_n_0_[8] ),
        .I4(\progdiv_cfg_store_reg_n_0_[8] ),
        .O(\di_msk[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF000000FFB800B8)) 
    \di_msk[8]_i_2 
       (.I0(\progdiv_cfg_store_reg_n_0_[8] ),
        .I1(p_2_in),
        .I2(\progclk_sel_store_reg_n_0_[8] ),
        .I3(p_0_in0_in),
        .I4(data2[8]),
        .I5(p_0_in_0),
        .O(\di_msk[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFE0EF202)) 
    \di_msk[9]_i_1 
       (.I0(\di_msk[9]_i_2_n_0 ),
        .I1(p_0_in3_in),
        .I2(p_0_in7_in),
        .I3(\progclk_sel_store_reg_n_0_[9] ),
        .I4(\progdiv_cfg_store_reg_n_0_[9] ),
        .O(\di_msk[9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF000000FFB800B8)) 
    \di_msk[9]_i_2 
       (.I0(\progdiv_cfg_store_reg_n_0_[9] ),
        .I1(p_2_in),
        .I2(\progclk_sel_store_reg_n_0_[9] ),
        .I3(p_0_in0_in),
        .I4(data2[9]),
        .I5(p_0_in_0),
        .O(\di_msk[9]_i_2_n_0 ));
  FDRE \di_msk_reg[0] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(\di_msk[0]_i_1_n_0 ),
        .Q(\di_msk_reg_n_0_[0] ),
        .R(\di_msk[12]_i_1_n_0 ));
  FDRE \di_msk_reg[10] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(di_msk[10]),
        .Q(\di_msk_reg_n_0_[10] ),
        .R(1'b0));
  FDRE \di_msk_reg[11] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(di_msk[11]),
        .Q(\di_msk_reg_n_0_[11] ),
        .R(1'b0));
  FDRE \di_msk_reg[12] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(\di_msk[12]_i_2_n_0 ),
        .Q(\di_msk_reg_n_0_[12] ),
        .R(\di_msk[12]_i_1_n_0 ));
  FDRE \di_msk_reg[13] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(\di_msk[13]_i_1_n_0 ),
        .Q(\di_msk_reg_n_0_[13] ),
        .R(\di_msk[14]_i_1_n_0 ));
  FDRE \di_msk_reg[14] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(\di_msk[14]_i_2_n_0 ),
        .Q(\di_msk_reg_n_0_[14] ),
        .R(\di_msk[14]_i_1_n_0 ));
  FDRE \di_msk_reg[15] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(di_msk[15]),
        .Q(\di_msk_reg_n_0_[15] ),
        .R(1'b0));
  FDRE \di_msk_reg[1] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(\di_msk[1]_i_1_n_0 ),
        .Q(\di_msk_reg_n_0_[1] ),
        .R(\di_msk[14]_i_1_n_0 ));
  FDRE \di_msk_reg[2] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(\di_msk[2]_i_1_n_0 ),
        .Q(\di_msk_reg_n_0_[2] ),
        .R(\di_msk[12]_i_1_n_0 ));
  FDRE \di_msk_reg[3] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(\di_msk[3]_i_1_n_0 ),
        .Q(\di_msk_reg_n_0_[3] ),
        .R(\di_msk[12]_i_1_n_0 ));
  FDRE \di_msk_reg[4] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(\di_msk[4]_i_1_n_0 ),
        .Q(\di_msk_reg_n_0_[4] ),
        .R(\di_msk[12]_i_1_n_0 ));
  FDRE \di_msk_reg[5] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(\di_msk[5]_i_1_n_0 ),
        .Q(\di_msk_reg_n_0_[5] ),
        .R(\di_msk[14]_i_1_n_0 ));
  FDRE \di_msk_reg[6] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(\di_msk[6]_i_1_n_0 ),
        .Q(\di_msk_reg_n_0_[6] ),
        .R(\di_msk[14]_i_1_n_0 ));
  FDRE \di_msk_reg[7] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(\di_msk[7]_i_1_n_0 ),
        .Q(\di_msk_reg_n_0_[7] ),
        .R(\di_msk[12]_i_1_n_0 ));
  FDRE \di_msk_reg[8] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(\di_msk[8]_i_1_n_0 ),
        .Q(\di_msk_reg_n_0_[8] ),
        .R(\di_msk[12]_i_1_n_0 ));
  FDRE \di_msk_reg[9] 
       (.C(drpclk_in),
        .CE(\di_msk[15]_i_1_n_0 ),
        .D(\di_msk[9]_i_1_n_0 ),
        .Q(\di_msk_reg_n_0_[9] ),
        .R(\di_msk[12]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[0] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[0] ),
        .Q(\di_reg[15]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[10] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[10] ),
        .Q(\di_reg[15]_0 [10]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[11] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[11] ),
        .Q(\di_reg[15]_0 [11]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[12] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[12] ),
        .Q(\di_reg[15]_0 [12]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[13] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[13] ),
        .Q(\di_reg[15]_0 [13]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[14] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[14] ),
        .Q(\di_reg[15]_0 [14]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[15] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[15] ),
        .Q(\di_reg[15]_0 [15]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[1] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[1] ),
        .Q(\di_reg[15]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[2] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[2] ),
        .Q(\di_reg[15]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[3] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[3] ),
        .Q(\di_reg[15]_0 [3]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[4] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[4] ),
        .Q(\di_reg[15]_0 [4]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[5] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[5] ),
        .Q(\di_reg[15]_0 [5]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[6] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[6] ),
        .Q(\di_reg[15]_0 [6]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[7] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[7] ),
        .Q(\di_reg[15]_0 [7]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[8] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[8] ),
        .Q(\di_reg[15]_0 [8]));
  FDCE #(
    .INIT(1'b0)) 
    \di_reg[9] 
       (.C(drpclk_in),
        .CE(\drp_state_reg[6]_0 [2]),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\di_msk_reg_n_0_[9] ),
        .Q(\di_reg[15]_0 [9]));
  LUT6 #(
    .INIT(64'h0404040404FF0404)) 
    \drp_state[0]_i_1__0 
       (.I0(rd_reg_0),
        .I1(\drp_state_reg_n_0_[0] ),
        .I2(wr),
        .I3(\drp_state[0]_i_2__0_n_0 ),
        .I4(\drp_state_reg[6]_0 [4]),
        .I5(\drp_state[0]_i_3_n_0 ),
        .O(drp_state[0]));
  LUT2 #(
    .INIT(4'hE)) 
    \drp_state[0]_i_2__0 
       (.I0(\drp_state_reg[6]_0 [2]),
        .I1(\drp_state_reg[6]_0 [3]),
        .O(\drp_state[0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair486" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \drp_state[0]_i_3 
       (.I0(\drp_state_reg_n_0_[0] ),
        .I1(\drp_state_reg_n_0_[3] ),
        .I2(\drp_state_reg[6]_0 [0]),
        .I3(\drp_state_reg[6]_0 [1]),
        .O(\drp_state[0]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair488" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \drp_state[1]_i_1 
       (.I0(rd_reg_0),
        .I1(\drp_state_reg_n_0_[0] ),
        .O(drp_state[1]));
  (* SOFT_HLUTNM = "soft_lutpair464" *) 
  LUT4 #(
    .INIT(16'h4544)) 
    \drp_state[2]_i_1__0 
       (.I0(\drp_state_reg_n_0_[0] ),
        .I1(\drp_state_reg[6]_0 [0]),
        .I2(cal_on_tx_drdy),
        .I3(\drp_state_reg[6]_0 [1]),
        .O(\drp_state[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair464" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \drp_state[3]_i_1 
       (.I0(\drp_state_reg[6]_0 [0]),
        .I1(\drp_state_reg[6]_0 [1]),
        .I2(cal_on_tx_drdy),
        .I3(\drp_state_reg_n_0_[0] ),
        .I4(rd_reg_0),
        .O(drp_state[3]));
  LUT6 #(
    .INIT(64'h4040404040404F40)) 
    \drp_state[4]_i_1 
       (.I0(rd_reg_0),
        .I1(wr),
        .I2(\drp_state_reg_n_0_[0] ),
        .I3(\drp_state_reg_n_0_[3] ),
        .I4(\drp_state_reg[6]_0 [0]),
        .I5(\drp_state_reg[6]_0 [1]),
        .O(drp_state[4]));
  LUT6 #(
    .INIT(64'h000000000000F200)) 
    \drp_state[5]_i_1 
       (.I0(\drp_state_reg[6]_0 [3]),
        .I1(cal_on_tx_drdy),
        .I2(\drp_state_reg[6]_0 [2]),
        .I3(\drp_state[5]_i_2_n_0 ),
        .I4(\drp_state_reg_n_0_[3] ),
        .I5(\drp_state_reg_n_0_[0] ),
        .O(drp_state[5]));
  (* SOFT_HLUTNM = "soft_lutpair486" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \drp_state[5]_i_2 
       (.I0(\drp_state_reg[6]_0 [0]),
        .I1(\drp_state_reg[6]_0 [1]),
        .O(\drp_state[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair488" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \drp_state[6]_i_1__0 
       (.I0(\drp_state_reg_n_0_[0] ),
        .I1(cal_on_tx_drdy),
        .I2(\drp_state[6]_i_2_n_0 ),
        .O(drp_state[6]));
  LUT6 #(
    .INIT(64'hFFFF55FFFFFF55CF)) 
    \drp_state[6]_i_2 
       (.I0(rd_reg_0),
        .I1(\drp_state_reg[6]_0 [2]),
        .I2(\drp_state_reg[6]_0 [3]),
        .I3(\drp_state_reg[6]_0 [1]),
        .I4(\drp_state_reg[6]_0 [0]),
        .I5(\drp_state_reg_n_0_[3] ),
        .O(\drp_state[6]_i_2_n_0 ));
  FDPE #(
    .INIT(1'b1)) 
    \drp_state_reg[0] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(drp_state[0]),
        .PRE(cal_on_tx_reset_in_sync),
        .Q(\drp_state_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \drp_state_reg[1] 
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(cal_on_tx_reset_in_sync),
        .D(drp_state[1]),
        .Q(\drp_state_reg[6]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \drp_state_reg[2] 
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(cal_on_tx_reset_in_sync),
        .D(\drp_state[2]_i_1__0_n_0 ),
        .Q(\drp_state_reg[6]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \drp_state_reg[3] 
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(cal_on_tx_reset_in_sync),
        .D(drp_state[3]),
        .Q(\drp_state_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \drp_state_reg[4] 
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(cal_on_tx_reset_in_sync),
        .D(drp_state[4]),
        .Q(\drp_state_reg[6]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \drp_state_reg[5] 
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(cal_on_tx_reset_in_sync),
        .D(drp_state[5]),
        .Q(\drp_state_reg[6]_0 [3]));
  FDCE #(
    .INIT(1'b0)) 
    \drp_state_reg[6] 
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(cal_on_tx_reset_in_sync),
        .D(drp_state[6]),
        .Q(\drp_state_reg[6]_0 [4]));
  FDCE #(
    .INIT(1'b0)) 
    dwe_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(cal_on_tx_reset_in_sync),
        .D(dwe_reg_0),
        .Q(cal_on_tx_drpwe_out));
  LUT5 #(
    .INIT(32'hFF20FFFF)) 
    freq_counter_rst_i_3
       (.I0(\wait_ctr[24]_i_10_n_0 ),
        .I1(freq_counter_rst_i_4_n_0),
        .I2(Q[5]),
        .I3(\cpll_cal_state_reg[5]_0 ),
        .I4(freq_counter_rst_i_5_n_0),
        .O(\cpll_cal_state_reg[14]_0 ));
  LUT6 #(
    .INIT(64'h00000000FFFFA800)) 
    freq_counter_rst_i_4
       (.I0(\wait_ctr[24]_i_14_n_0 ),
        .I1(\wait_ctr_reg_n_0_[7] ),
        .I2(\wait_ctr_reg_n_0_[6] ),
        .I3(\wait_ctr_reg_n_0_[8] ),
        .I4(\wait_ctr_reg_n_0_[9] ),
        .I5(freq_counter_rst_i_6_n_0),
        .O(freq_counter_rst_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    freq_counter_rst_i_5
       (.I0(\cpll_cal_state_reg[11]_0 ),
        .I1(\cpll_cal_state_reg_n_0_[12] ),
        .I2(Q[4]),
        .I3(p_1_in),
        .I4(p_25_in),
        .I5(\progdiv_cfg_store[15]_i_5_n_0 ),
        .O(freq_counter_rst_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair453" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    freq_counter_rst_i_6
       (.I0(\wait_ctr_reg_n_0_[12] ),
        .I1(\wait_ctr_reg_n_0_[10] ),
        .I2(\wait_ctr_reg_n_0_[11] ),
        .O(freq_counter_rst_i_6_n_0));
  FDRE #(
    .INIT(1'b1)) 
    freq_counter_rst_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(freq_counter_rst_reg_0),
        .Q(AR),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    mask_user_in_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(mask_user_in_reg_1),
        .Q(mask_user_in_reg_0),
        .R(cal_on_tx_reset_in_sync));
  FDRE \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[0] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(bit_synchronizer_txoutclksel_inst0_n_0),
        .Q(\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2]_0 [0]),
        .R(1'b0));
  FDRE \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[1] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(bit_synchronizer_txoutclksel_inst1_n_0),
        .Q(\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2]_0 [1]),
        .R(1'b0));
  FDRE \non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(bit_synchronizer_txoutclksel_inst2_n_0),
        .Q(\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2]_0 [2]),
        .R(1'b0));
  FDRE \non_pcie_txoutclksel.GTHE4_TXPROGDIVRESET_OUT_reg 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(bit_synchronizer_txprogdivreset_inst_n_0),
        .Q(GTHE4_TXPROGDIVRESET_OUT),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \progclk_sel_store[14]_i_1 
       (.I0(\progclk_sel_store[14]_i_2_n_0 ),
        .I1(p_29_in),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(cal_on_tx_reset_in_sync),
        .I5(\drp_state_reg[6]_0 [4]),
        .O(\progclk_sel_store[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAABAAAAAAAAAA)) 
    \progclk_sel_store[14]_i_2 
       (.I0(Q[2]),
        .I1(p_0_in7_in),
        .I2(p_1_in5_in),
        .I3(p_2_in8_in),
        .I4(p_11_in),
        .I5(\cpll_cal_state_reg[8]_1 ),
        .O(\progclk_sel_store[14]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[0] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [0]),
        .Q(\progclk_sel_store_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[10] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [10]),
        .Q(\progclk_sel_store_reg_n_0_[10] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[11] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [11]),
        .Q(\progclk_sel_store_reg_n_0_[11] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[12] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [12]),
        .Q(\progclk_sel_store_reg_n_0_[12] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[13] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [13]),
        .Q(\progclk_sel_store_reg_n_0_[13] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[14] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [14]),
        .Q(\progclk_sel_store_reg_n_0_[14] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[1] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [1]),
        .Q(\progclk_sel_store_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[2] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [2]),
        .Q(\progclk_sel_store_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[3] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [3]),
        .Q(\progclk_sel_store_reg_n_0_[3] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[4] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [4]),
        .Q(\progclk_sel_store_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[5] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [5]),
        .Q(\progclk_sel_store_reg_n_0_[5] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[6] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [6]),
        .Q(\progclk_sel_store_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[7] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [7]),
        .Q(\progclk_sel_store_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[8] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [8]),
        .Q(\progclk_sel_store_reg_n_0_[8] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progclk_sel_store_reg[9] 
       (.C(drpclk_in),
        .CE(\progclk_sel_store[14]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [9]),
        .Q(\progclk_sel_store_reg_n_0_[9] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \progdiv_cfg_store[15]_i_1 
       (.I0(\progdiv_cfg_store[15]_i_3_n_0 ),
        .I1(\cpll_cal_state[27]_i_2_n_0 ),
        .I2(p_1_in5_in),
        .I3(p_25_in),
        .I4(cal_on_tx_reset_in_sync),
        .I5(\drp_state_reg[6]_0 [4]),
        .O(\progdiv_cfg_store[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFD)) 
    \progdiv_cfg_store[15]_i_2 
       (.I0(\progdiv_cfg_store[15]_i_4_n_0 ),
        .I1(\progdiv_cfg_store[15]_i_5_n_0 ),
        .I2(\progdiv_cfg_store_reg[15]_0 [15]),
        .I3(p_1_in),
        .I4(p_2_in8_in),
        .I5(p_11_in),
        .O(progdiv_cfg_store));
  LUT6 #(
    .INIT(64'hAAAAAABAAAAAAAAA)) 
    \progdiv_cfg_store[15]_i_3 
       (.I0(p_1_in),
        .I1(\progdiv_cfg_store[15]_i_5_n_0 ),
        .I2(Q[9]),
        .I3(p_2_in8_in),
        .I4(p_11_in),
        .I5(\progdiv_cfg_store[15]_i_4_n_0 ),
        .O(\progdiv_cfg_store[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair461" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \progdiv_cfg_store[15]_i_4 
       (.I0(p_0_in_0),
        .I1(p_0_in0_in),
        .I2(\cpll_cal_state_reg_n_0_[12] ),
        .I3(Q[4]),
        .I4(\cpll_cal_state[20]_i_3_n_0 ),
        .O(\progdiv_cfg_store[15]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair456" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \progdiv_cfg_store[15]_i_5 
       (.I0(Q[3]),
        .I1(p_0_in3_in),
        .O(\progdiv_cfg_store[15]_i_5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[0] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [0]),
        .Q(\progdiv_cfg_store_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[10] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [10]),
        .Q(\progdiv_cfg_store_reg_n_0_[10] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[11] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [11]),
        .Q(\progdiv_cfg_store_reg_n_0_[11] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[12] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [12]),
        .Q(\progdiv_cfg_store_reg_n_0_[12] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[13] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [13]),
        .Q(\progdiv_cfg_store_reg_n_0_[13] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[14] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [14]),
        .Q(\progdiv_cfg_store_reg_n_0_[14] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[15] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(progdiv_cfg_store),
        .Q(\progdiv_cfg_store_reg_n_0_[15] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[1] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [1]),
        .Q(\progdiv_cfg_store_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[2] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [2]),
        .Q(\progdiv_cfg_store_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[3] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [3]),
        .Q(\progdiv_cfg_store_reg_n_0_[3] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[4] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [4]),
        .Q(\progdiv_cfg_store_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[5] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [5]),
        .Q(\progdiv_cfg_store_reg_n_0_[5] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[6] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [6]),
        .Q(\progdiv_cfg_store_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[7] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [7]),
        .Q(\progdiv_cfg_store_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[8] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [8]),
        .Q(\progdiv_cfg_store_reg_n_0_[8] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \progdiv_cfg_store_reg[9] 
       (.C(drpclk_in),
        .CE(\progdiv_cfg_store[15]_i_1_n_0 ),
        .D(\progdiv_cfg_store_reg[15]_0 [9]),
        .Q(\progdiv_cfg_store_reg_n_0_[9] ),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    rd_i_2
       (.I0(p_1_in5_in),
        .I1(p_1_in),
        .I2(p_2_in8_in),
        .I3(Q[1]),
        .O(\cpll_cal_state_reg[5]_2 ));
  FDRE #(
    .INIT(1'b0)) 
    rd_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(rd_reg_1),
        .Q(rd_reg_0),
        .R(cal_on_tx_reset_in_sync));
  LUT2 #(
    .INIT(4'h2)) 
    \repeat_ctr[0]_i_1 
       (.I0(p_11_in),
        .I1(\repeat_ctr_reg_n_0_[0] ),
        .O(\repeat_ctr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair489" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \repeat_ctr[1]_i_1 
       (.I0(p_11_in),
        .I1(\repeat_ctr_reg_n_0_[0] ),
        .I2(\repeat_ctr_reg_n_0_[1] ),
        .O(\repeat_ctr[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair479" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \repeat_ctr[2]_i_1 
       (.I0(p_11_in),
        .I1(\repeat_ctr_reg_n_0_[2] ),
        .I2(\repeat_ctr_reg_n_0_[1] ),
        .I3(\repeat_ctr_reg_n_0_[0] ),
        .O(\repeat_ctr[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair465" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \repeat_ctr[3]_i_2 
       (.I0(p_11_in),
        .I1(\repeat_ctr_reg_n_0_[3] ),
        .I2(\repeat_ctr_reg_n_0_[2] ),
        .I3(\repeat_ctr_reg_n_0_[0] ),
        .I4(\repeat_ctr_reg_n_0_[1] ),
        .O(\repeat_ctr[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair465" *) 
  LUT4 #(
    .INIT(16'h7FFF)) 
    \repeat_ctr[3]_i_3 
       (.I0(\repeat_ctr_reg_n_0_[3] ),
        .I1(\repeat_ctr_reg_n_0_[2] ),
        .I2(\repeat_ctr_reg_n_0_[0] ),
        .I3(\repeat_ctr_reg_n_0_[1] ),
        .O(\repeat_ctr[3]_i_3_n_0 ));
  FDRE \repeat_ctr_reg[0] 
       (.C(drpclk_in),
        .CE(U_TXOUTCLK_FREQ_COUNTER_n_0),
        .D(\repeat_ctr[0]_i_1_n_0 ),
        .Q(\repeat_ctr_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \repeat_ctr_reg[1] 
       (.C(drpclk_in),
        .CE(U_TXOUTCLK_FREQ_COUNTER_n_0),
        .D(\repeat_ctr[1]_i_1_n_0 ),
        .Q(\repeat_ctr_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \repeat_ctr_reg[2] 
       (.C(drpclk_in),
        .CE(U_TXOUTCLK_FREQ_COUNTER_n_0),
        .D(\repeat_ctr[2]_i_1_n_0 ),
        .Q(\repeat_ctr_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \repeat_ctr_reg[3] 
       (.C(drpclk_in),
        .CE(U_TXOUTCLK_FREQ_COUNTER_n_0),
        .D(\repeat_ctr[3]_i_2_n_0 ),
        .Q(\repeat_ctr_reg_n_0_[3] ),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    rst_in_meta_i_1__4
       (.I0(USER_CPLLLOCK_OUT_reg_0),
        .O(rst_in0));
  (* SOFT_HLUTNM = "soft_lutpair485" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    status_store_i_2
       (.I0(p_1_in5_in),
        .I1(Q[2]),
        .I2(p_29_in),
        .I3(p_0_in7_in),
        .O(\cpll_cal_state_reg[5]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    status_store_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(status_store_reg_1),
        .Q(status_store_reg_0),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h0E)) 
    \txoutclksel_int[2]_i_1 
       (.I0(txoutclksel_int),
        .I1(\cpll_cal_state_reg_n_0_[12] ),
        .I2(Q[0]),
        .O(\txoutclksel_int[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \txoutclksel_int_reg[2] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(\txoutclksel_int[2]_i_1_n_0 ),
        .Q(txoutclksel_int),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    txprogdivreset_int_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(txprogdivreset_int_reg_0),
        .Q(txprogdivreset_int),
        .R(cal_on_tx_reset_in_sync));
  CARRY8 wait_ctr0_carry
       (.CI(\wait_ctr_reg_n_0_[0] ),
        .CI_TOP(1'b0),
        .CO({wait_ctr0_carry_n_0,wait_ctr0_carry_n_1,wait_ctr0_carry_n_2,wait_ctr0_carry_n_3,wait_ctr0_carry_n_4,wait_ctr0_carry_n_5,wait_ctr0_carry_n_6,wait_ctr0_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({wait_ctr0_carry_n_8,wait_ctr0_carry_n_9,wait_ctr0_carry_n_10,wait_ctr0_carry_n_11,wait_ctr0_carry_n_12,wait_ctr0_carry_n_13,wait_ctr0_carry_n_14,wait_ctr0_carry_n_15}),
        .S({\wait_ctr_reg_n_0_[8] ,\wait_ctr_reg_n_0_[7] ,\wait_ctr_reg_n_0_[6] ,\wait_ctr_reg_n_0_[5] ,\wait_ctr_reg_n_0_[4] ,\wait_ctr_reg_n_0_[3] ,\wait_ctr_reg_n_0_[2] ,\wait_ctr_reg_n_0_[1] }));
  CARRY8 wait_ctr0_carry__0
       (.CI(wait_ctr0_carry_n_0),
        .CI_TOP(1'b0),
        .CO({wait_ctr0_carry__0_n_0,wait_ctr0_carry__0_n_1,wait_ctr0_carry__0_n_2,wait_ctr0_carry__0_n_3,wait_ctr0_carry__0_n_4,wait_ctr0_carry__0_n_5,wait_ctr0_carry__0_n_6,wait_ctr0_carry__0_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({wait_ctr0_carry__0_n_8,wait_ctr0_carry__0_n_9,wait_ctr0_carry__0_n_10,wait_ctr0_carry__0_n_11,wait_ctr0_carry__0_n_12,wait_ctr0_carry__0_n_13,wait_ctr0_carry__0_n_14,wait_ctr0_carry__0_n_15}),
        .S({\wait_ctr_reg_n_0_[16] ,\wait_ctr_reg_n_0_[15] ,\wait_ctr_reg_n_0_[14] ,\wait_ctr_reg_n_0_[13] ,\wait_ctr_reg_n_0_[12] ,\wait_ctr_reg_n_0_[11] ,\wait_ctr_reg_n_0_[10] ,\wait_ctr_reg_n_0_[9] }));
  CARRY8 wait_ctr0_carry__1
       (.CI(wait_ctr0_carry__0_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_wait_ctr0_carry__1_CO_UNCONNECTED[7],wait_ctr0_carry__1_n_1,wait_ctr0_carry__1_n_2,wait_ctr0_carry__1_n_3,wait_ctr0_carry__1_n_4,wait_ctr0_carry__1_n_5,wait_ctr0_carry__1_n_6,wait_ctr0_carry__1_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({wait_ctr0_carry__1_n_8,wait_ctr0_carry__1_n_9,wait_ctr0_carry__1_n_10,wait_ctr0_carry__1_n_11,wait_ctr0_carry__1_n_12,wait_ctr0_carry__1_n_13,wait_ctr0_carry__1_n_14,wait_ctr0_carry__1_n_15}),
        .S({\wait_ctr_reg_n_0_[24] ,\wait_ctr_reg_n_0_[23] ,\wait_ctr_reg_n_0_[22] ,\wait_ctr_reg_n_0_[21] ,\wait_ctr_reg_n_0_[20] ,\wait_ctr_reg_n_0_[19] ,\wait_ctr_reg_n_0_[18] ,\wait_ctr_reg_n_0_[17] }));
  (* SOFT_HLUTNM = "soft_lutpair472" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \wait_ctr[0]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(\wait_ctr_reg_n_0_[0] ),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair481" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[10]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__0_n_14),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair482" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[11]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__0_n_13),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair483" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[12]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__0_n_12),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair484" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[13]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__0_n_11),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair472" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[14]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__0_n_10),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[15]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__0_n_9),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair484" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[16]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__0_n_8),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair483" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[17]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__1_n_15),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair482" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[18]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__1_n_14),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair481" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[19]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__1_n_13),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair473" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[1]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry_n_15),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair480" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[20]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__1_n_12),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair478" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[21]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__1_n_11),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair477" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[22]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__1_n_10),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair475" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[23]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__1_n_9),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[23]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0808080008080888)) 
    \wait_ctr[24]_i_1 
       (.I0(\wait_ctr[24]_i_2_n_0 ),
        .I1(\wait_ctr[24]_i_4_n_0 ),
        .I2(\wait_ctr_reg[12]_0 ),
        .I3(Q[5]),
        .I4(\wait_ctr[24]_i_6_n_0 ),
        .I5(\wait_ctr_reg[14]_0 ),
        .O(\wait_ctr[24]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \wait_ctr[24]_i_10 
       (.I0(\cpll_cal_state[14]_i_10_n_0 ),
        .I1(\wait_ctr_reg_n_0_[17] ),
        .I2(\wait_ctr_reg_n_0_[19] ),
        .I3(\wait_ctr_reg_n_0_[22] ),
        .I4(\wait_ctr_reg_n_0_[24] ),
        .I5(\cpll_cal_state[14]_i_8_n_0 ),
        .O(\wait_ctr[24]_i_10_n_0 ));
  LUT5 #(
    .INIT(32'hEEEAAAAA)) 
    \wait_ctr[24]_i_11 
       (.I0(\wait_ctr_reg_n_0_[9] ),
        .I1(\wait_ctr_reg_n_0_[8] ),
        .I2(\wait_ctr_reg_n_0_[6] ),
        .I3(\wait_ctr_reg_n_0_[7] ),
        .I4(\wait_ctr[24]_i_14_n_0 ),
        .O(\wait_ctr[24]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair458" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \wait_ctr[24]_i_12 
       (.I0(\wait_ctr_reg_n_0_[24] ),
        .I1(\wait_ctr_reg_n_0_[22] ),
        .I2(\wait_ctr_reg_n_0_[19] ),
        .I3(\wait_ctr_reg_n_0_[17] ),
        .I4(\cpll_cal_state[14]_i_10_n_0 ),
        .O(\wait_ctr[24]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h01FF01FF01FFFFFF)) 
    \wait_ctr[24]_i_13 
       (.I0(\wait_ctr_reg_n_0_[10] ),
        .I1(\wait_ctr_reg_n_0_[11] ),
        .I2(\wait_ctr_reg_n_0_[12] ),
        .I3(\wait_ctr_reg_n_0_[13] ),
        .I4(\wait_ctr[24]_i_15_n_0 ),
        .I5(\cpll_cal_state[14]_i_5_n_0 ),
        .O(\wait_ctr[24]_i_13_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEFEFE)) 
    \wait_ctr[24]_i_14 
       (.I0(\wait_ctr_reg_n_0_[7] ),
        .I1(\wait_ctr_reg_n_0_[4] ),
        .I2(\wait_ctr_reg_n_0_[5] ),
        .I3(\wait_ctr_reg_n_0_[2] ),
        .I4(\wait_ctr_reg_n_0_[3] ),
        .O(\wait_ctr[24]_i_14_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \wait_ctr[24]_i_15 
       (.I0(\wait_ctr_reg_n_0_[3] ),
        .I1(\wait_ctr_reg_n_0_[4] ),
        .I2(\wait_ctr_reg_n_0_[6] ),
        .I3(\wait_ctr_reg_n_0_[5] ),
        .I4(\wait_ctr_reg_n_0_[7] ),
        .O(\wait_ctr[24]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h5555555555555554)) 
    \wait_ctr[24]_i_2 
       (.I0(cal_on_tx_reset_in_sync),
        .I1(\wait_ctr[24]_i_8_n_0 ),
        .I2(Q[4]),
        .I3(Q[7]),
        .I4(Q[11]),
        .I5(Q[0]),
        .O(\wait_ctr[24]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair473" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[24]_i_3 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__1_n_8),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[24]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair462" *) 
  LUT5 #(
    .INIT(32'h55555554)) 
    \wait_ctr[24]_i_4 
       (.I0(Q[4]),
        .I1(Q[7]),
        .I2(Q[6]),
        .I3(Q[5]),
        .I4(p_14_in),
        .O(\wait_ctr[24]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair453" *) 
  LUT5 #(
    .INIT(32'h2AAAAAAA)) 
    \wait_ctr[24]_i_5 
       (.I0(\wait_ctr[24]_i_10_n_0 ),
        .I1(\wait_ctr_reg_n_0_[12] ),
        .I2(\wait_ctr_reg_n_0_[10] ),
        .I3(\wait_ctr_reg_n_0_[11] ),
        .I4(\wait_ctr[24]_i_11_n_0 ),
        .O(\wait_ctr_reg[12]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair469" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \wait_ctr[24]_i_6 
       (.I0(Q[7]),
        .I1(Q[6]),
        .O(\wait_ctr[24]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h0008AAAA)) 
    \wait_ctr[24]_i_7 
       (.I0(\wait_ctr[24]_i_12_n_0 ),
        .I1(\wait_ctr[24]_i_13_n_0 ),
        .I2(\wait_ctr_reg_n_0_[14] ),
        .I3(\wait_ctr_reg_n_0_[15] ),
        .I4(\wait_ctr_reg_n_0_[16] ),
        .O(\wait_ctr_reg[14]_0 ));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFFFFFE)) 
    \wait_ctr[24]_i_8 
       (.I0(p_14_in),
        .I1(Q[8]),
        .I2(Q[5]),
        .I3(Q[6]),
        .I4(p_0_in_0),
        .I5(\drp_state_reg[6]_0 [4]),
        .O(\wait_ctr[24]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA00000002)) 
    \wait_ctr[24]_i_9 
       (.I0(\wait_ctr_reg[11]_0 ),
        .I1(p_14_in),
        .I2(Q[5]),
        .I3(Q[6]),
        .I4(Q[7]),
        .I5(Q[4]),
        .O(\wait_ctr[24]_i_9_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair474" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[2]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry_n_14),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair475" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[3]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry_n_13),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair476" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[4]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry_n_12),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair474" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[5]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry_n_11),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair476" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[6]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry_n_10),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair477" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[7]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry_n_9),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair478" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[8]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry_n_8),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair480" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \wait_ctr[9]_i_1 
       (.I0(\wait_ctr[24]_i_9_n_0 ),
        .I1(wait_ctr0_carry__0_n_15),
        .I2(Q[0]),
        .I3(p_0_in_0),
        .O(\wait_ctr[9]_i_1_n_0 ));
  FDRE \wait_ctr_reg[0] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[0]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[0] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[10] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[10]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[10] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[11] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[11]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[11] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[12] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[12]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[12] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[13] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[13]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[13] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[14] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[14]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[14] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[15] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[15]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[15] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[16] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[16]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[16] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[17] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[17]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[17] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[18] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[18]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[18] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[19] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[19]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[19] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[1] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[1]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[1] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[20] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[20]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[20] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[21] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[21]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[21] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[22] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[22]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[22] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[23] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[23]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[23] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[24] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[24]_i_3_n_0 ),
        .Q(\wait_ctr_reg_n_0_[24] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[2] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[2]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[2] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[3] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[3]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[3] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[4] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[4]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[4] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[5] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[5]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[5] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[6] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[6]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[6] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[7] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[7]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[7] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[8] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[8]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[8] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE \wait_ctr_reg[9] 
       (.C(drpclk_in),
        .CE(\wait_ctr[24]_i_2_n_0 ),
        .D(\wait_ctr[9]_i_1_n_0 ),
        .Q(\wait_ctr_reg_n_0_[9] ),
        .R(\wait_ctr[24]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    wr_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(wr_reg_0),
        .Q(wr),
        .R(cal_on_tx_reset_in_sync));
  LUT3 #(
    .INIT(8'h08)) 
    \x0e1_store[14]_i_1 
       (.I0(Q[3]),
        .I1(\drp_state_reg[6]_0 [4]),
        .I2(cal_on_tx_reset_in_sync),
        .O(x0e1_store));
  FDRE #(
    .INIT(1'b0)) 
    \x0e1_store_reg[0] 
       (.C(drpclk_in),
        .CE(x0e1_store),
        .D(\progdiv_cfg_store_reg[15]_0 [0]),
        .Q(data2[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \x0e1_store_reg[12] 
       (.C(drpclk_in),
        .CE(x0e1_store),
        .D(\progdiv_cfg_store_reg[15]_0 [12]),
        .Q(data2[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \x0e1_store_reg[13] 
       (.C(drpclk_in),
        .CE(x0e1_store),
        .D(\progdiv_cfg_store_reg[15]_0 [13]),
        .Q(data2[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \x0e1_store_reg[14] 
       (.C(drpclk_in),
        .CE(x0e1_store),
        .D(\progdiv_cfg_store_reg[15]_0 [14]),
        .Q(data2[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \x0e1_store_reg[1] 
       (.C(drpclk_in),
        .CE(x0e1_store),
        .D(\progdiv_cfg_store_reg[15]_0 [1]),
        .Q(data2[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \x0e1_store_reg[2] 
       (.C(drpclk_in),
        .CE(x0e1_store),
        .D(\progdiv_cfg_store_reg[15]_0 [2]),
        .Q(data2[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \x0e1_store_reg[3] 
       (.C(drpclk_in),
        .CE(x0e1_store),
        .D(\progdiv_cfg_store_reg[15]_0 [3]),
        .Q(data2[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \x0e1_store_reg[4] 
       (.C(drpclk_in),
        .CE(x0e1_store),
        .D(\progdiv_cfg_store_reg[15]_0 [4]),
        .Q(data2[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \x0e1_store_reg[5] 
       (.C(drpclk_in),
        .CE(x0e1_store),
        .D(\progdiv_cfg_store_reg[15]_0 [5]),
        .Q(data2[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \x0e1_store_reg[6] 
       (.C(drpclk_in),
        .CE(x0e1_store),
        .D(\progdiv_cfg_store_reg[15]_0 [6]),
        .Q(data2[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \x0e1_store_reg[7] 
       (.C(drpclk_in),
        .CE(x0e1_store),
        .D(\progdiv_cfg_store_reg[15]_0 [7]),
        .Q(data2[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \x0e1_store_reg[8] 
       (.C(drpclk_in),
        .CE(x0e1_store),
        .D(\progdiv_cfg_store_reg[15]_0 [8]),
        .Q(data2[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \x0e1_store_reg[9] 
       (.C(drpclk_in),
        .CE(x0e1_store),
        .D(\progdiv_cfg_store_reg[15]_0 [9]),
        .Q(data2[9]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_gthe4_delay_powergood" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gthe4_delay_powergood
   (out,
    \gen_powergood_delay.pwr_on_fsm_reg_0 ,
    RXRATE,
    RXPD,
    \gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ,
    CLK,
    \gen_powergood_delay.intclk_rrst_n_r_reg[0]_0 ,
    rxratemode_in,
    rxrate_in,
    rxpd_in,
    rxpmareset_in);
  output out;
  output \gen_powergood_delay.pwr_on_fsm_reg_0 ;
  output [2:0]RXRATE;
  output [1:0]RXPD;
  output \gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ;
  input CLK;
  input \gen_powergood_delay.intclk_rrst_n_r_reg[0]_0 ;
  input [0:0]rxratemode_in;
  input [2:0]rxrate_in;
  input [1:0]rxpd_in;
  input [0:0]rxpmareset_in;

  wire CLK;
  wire [1:0]RXPD;
  wire [2:0]RXRATE;
  wire \gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ;
  (* SHIFT_EXTRACT = "NO" *) (* async_reg = "true" *) wire [4:0]\gen_powergood_delay.intclk_rrst_n_r ;
  wire \gen_powergood_delay.intclk_rrst_n_r[4]_i_1_n_0 ;
  wire \gen_powergood_delay.intclk_rrst_n_r_reg[0]_0 ;
  (* RTL_KEEP = "true" *) wire \gen_powergood_delay.pwr_on_fsm ;
  wire \gen_powergood_delay.pwr_on_fsm_i_1_n_0 ;
  wire \gen_powergood_delay.pwr_on_fsm_reg_0 ;
  wire \gen_powergood_delay.wait_cnt[0]_i_1_n_0 ;
  wire \gen_powergood_delay.wait_cnt[2]_i_1_n_0 ;
  wire \gen_powergood_delay.wait_cnt[3]_i_1_n_0 ;
  wire \gen_powergood_delay.wait_cnt[3]_i_2_n_0 ;
  wire \gen_powergood_delay.wait_cnt_reg_n_0_[0] ;
  wire \gen_powergood_delay.wait_cnt_reg_n_0_[1] ;
  wire \gen_powergood_delay.wait_cnt_reg_n_0_[2] ;
  wire \gen_powergood_delay.wait_cnt_reg_n_0_[3] ;
  wire [2:1]p_2_in;
  wire [1:0]rxpd_in;
  wire [0:0]rxpmareset_in;
  wire [2:0]rxrate_in;
  wire [0:0]rxratemode_in;

  assign out = \gen_powergood_delay.pwr_on_fsm ;
  LUT1 #(
    .INIT(2'h1)) 
    \gen_powergood_delay.intclk_rrst_n_r[4]_i_1 
       (.I0(\gen_powergood_delay.pwr_on_fsm ),
        .O(\gen_powergood_delay.intclk_rrst_n_r[4]_i_1_n_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDCE \gen_powergood_delay.intclk_rrst_n_r_reg[0] 
       (.C(CLK),
        .CE(\gen_powergood_delay.intclk_rrst_n_r[4]_i_1_n_0 ),
        .CLR(\gen_powergood_delay.intclk_rrst_n_r_reg[0]_0 ),
        .D(1'b1),
        .Q(\gen_powergood_delay.intclk_rrst_n_r [0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDCE \gen_powergood_delay.intclk_rrst_n_r_reg[1] 
       (.C(CLK),
        .CE(\gen_powergood_delay.intclk_rrst_n_r[4]_i_1_n_0 ),
        .CLR(\gen_powergood_delay.intclk_rrst_n_r_reg[0]_0 ),
        .D(\gen_powergood_delay.intclk_rrst_n_r [0]),
        .Q(\gen_powergood_delay.intclk_rrst_n_r [1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDCE \gen_powergood_delay.intclk_rrst_n_r_reg[2] 
       (.C(CLK),
        .CE(\gen_powergood_delay.intclk_rrst_n_r[4]_i_1_n_0 ),
        .CLR(\gen_powergood_delay.intclk_rrst_n_r_reg[0]_0 ),
        .D(\gen_powergood_delay.intclk_rrst_n_r [1]),
        .Q(\gen_powergood_delay.intclk_rrst_n_r [2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDCE \gen_powergood_delay.intclk_rrst_n_r_reg[3] 
       (.C(CLK),
        .CE(\gen_powergood_delay.intclk_rrst_n_r[4]_i_1_n_0 ),
        .CLR(\gen_powergood_delay.intclk_rrst_n_r_reg[0]_0 ),
        .D(\gen_powergood_delay.intclk_rrst_n_r [2]),
        .Q(\gen_powergood_delay.intclk_rrst_n_r [3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHIFT_EXTRACT = "NO" *) 
  FDCE \gen_powergood_delay.intclk_rrst_n_r_reg[4] 
       (.C(CLK),
        .CE(\gen_powergood_delay.intclk_rrst_n_r[4]_i_1_n_0 ),
        .CLR(\gen_powergood_delay.intclk_rrst_n_r_reg[0]_0 ),
        .D(\gen_powergood_delay.intclk_rrst_n_r [3]),
        .Q(\gen_powergood_delay.intclk_rrst_n_r [4]));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_powergood_delay.pwr_on_fsm_i_1 
       (.I0(\gen_powergood_delay.pwr_on_fsm ),
        .I1(\gen_powergood_delay.wait_cnt_reg_n_0_[3] ),
        .O(\gen_powergood_delay.pwr_on_fsm_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gen_powergood_delay.pwr_on_fsm_reg 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\gen_powergood_delay.intclk_rrst_n_r_reg[0]_0 ),
        .D(\gen_powergood_delay.pwr_on_fsm_i_1_n_0 ),
        .Q(\gen_powergood_delay.pwr_on_fsm ));
  LUT2 #(
    .INIT(4'hB)) 
    \gen_powergood_delay.wait_cnt[0]_i_1 
       (.I0(\gen_powergood_delay.pwr_on_fsm ),
        .I1(\gen_powergood_delay.wait_cnt_reg_n_0_[0] ),
        .O(\gen_powergood_delay.wait_cnt[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair492" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gen_powergood_delay.wait_cnt[1]_i_1 
       (.I0(\gen_powergood_delay.wait_cnt_reg_n_0_[0] ),
        .I1(\gen_powergood_delay.wait_cnt_reg_n_0_[1] ),
        .O(p_2_in[1]));
  LUT2 #(
    .INIT(4'hB)) 
    \gen_powergood_delay.wait_cnt[2]_i_1 
       (.I0(\gen_powergood_delay.pwr_on_fsm ),
        .I1(\gen_powergood_delay.intclk_rrst_n_r [4]),
        .O(\gen_powergood_delay.wait_cnt[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair492" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gen_powergood_delay.wait_cnt[2]_i_2 
       (.I0(\gen_powergood_delay.wait_cnt_reg_n_0_[0] ),
        .I1(\gen_powergood_delay.wait_cnt_reg_n_0_[1] ),
        .I2(\gen_powergood_delay.wait_cnt_reg_n_0_[2] ),
        .O(p_2_in[2]));
  LUT1 #(
    .INIT(2'h1)) 
    \gen_powergood_delay.wait_cnt[3]_i_1 
       (.I0(\gen_powergood_delay.intclk_rrst_n_r [4]),
        .O(\gen_powergood_delay.wait_cnt[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF6AAA)) 
    \gen_powergood_delay.wait_cnt[3]_i_2 
       (.I0(\gen_powergood_delay.wait_cnt_reg_n_0_[3] ),
        .I1(\gen_powergood_delay.wait_cnt_reg_n_0_[2] ),
        .I2(\gen_powergood_delay.wait_cnt_reg_n_0_[0] ),
        .I3(\gen_powergood_delay.wait_cnt_reg_n_0_[1] ),
        .I4(\gen_powergood_delay.pwr_on_fsm ),
        .O(\gen_powergood_delay.wait_cnt[3]_i_2_n_0 ));
  FDRE \gen_powergood_delay.wait_cnt_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gen_powergood_delay.wait_cnt[0]_i_1_n_0 ),
        .Q(\gen_powergood_delay.wait_cnt_reg_n_0_[0] ),
        .R(\gen_powergood_delay.wait_cnt[3]_i_1_n_0 ));
  FDRE \gen_powergood_delay.wait_cnt_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_2_in[1]),
        .Q(\gen_powergood_delay.wait_cnt_reg_n_0_[1] ),
        .R(\gen_powergood_delay.wait_cnt[2]_i_1_n_0 ));
  FDRE \gen_powergood_delay.wait_cnt_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(p_2_in[2]),
        .Q(\gen_powergood_delay.wait_cnt_reg_n_0_[2] ),
        .R(\gen_powergood_delay.wait_cnt[2]_i_1_n_0 ));
  FDRE \gen_powergood_delay.wait_cnt_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\gen_powergood_delay.wait_cnt[3]_i_2_n_0 ),
        .Q(\gen_powergood_delay.wait_cnt_reg_n_0_[3] ),
        .R(\gen_powergood_delay.wait_cnt[3]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \gthe4_channel_gen.gen_gthe4_channel_inst[0].GTHE4_CHANNEL_PRIM_INST_i_2 
       (.I0(\gen_powergood_delay.pwr_on_fsm ),
        .I1(rxpmareset_in),
        .O(\gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ));
  LUT2 #(
    .INIT(4'hB)) 
    \gthe4_channel_gen.gen_gthe4_channel_inst[0].GTHE4_CHANNEL_PRIM_INST_i_3 
       (.I0(rxratemode_in),
        .I1(\gen_powergood_delay.pwr_on_fsm ),
        .O(\gen_powergood_delay.pwr_on_fsm_reg_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \gthe4_channel_gen.gen_gthe4_channel_inst[0].GTHE4_CHANNEL_PRIM_INST_i_4 
       (.I0(rxpd_in[1]),
        .I1(\gen_powergood_delay.pwr_on_fsm ),
        .O(RXPD[1]));
  LUT2 #(
    .INIT(4'hB)) 
    \gthe4_channel_gen.gen_gthe4_channel_inst[0].GTHE4_CHANNEL_PRIM_INST_i_5 
       (.I0(rxpd_in[0]),
        .I1(\gen_powergood_delay.pwr_on_fsm ),
        .O(RXPD[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \gthe4_channel_gen.gen_gthe4_channel_inst[0].GTHE4_CHANNEL_PRIM_INST_i_6 
       (.I0(\gen_powergood_delay.pwr_on_fsm ),
        .I1(rxrate_in[2]),
        .O(RXRATE[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \gthe4_channel_gen.gen_gthe4_channel_inst[0].GTHE4_CHANNEL_PRIM_INST_i_7 
       (.I0(\gen_powergood_delay.pwr_on_fsm ),
        .I1(rxrate_in[1]),
        .O(RXRATE[1]));
  LUT2 #(
    .INIT(4'hB)) 
    \gthe4_channel_gen.gen_gthe4_channel_inst[0].GTHE4_CHANNEL_PRIM_INST_i_8 
       (.I0(rxrate_in[0]),
        .I1(\gen_powergood_delay.pwr_on_fsm ),
        .O(RXRATE[0]));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_gtwiz_reset" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gtwiz_reset
   (in0,
    gtwiz_reset_tx_done_out,
    gtwiz_reset_rx_cdr_stable_out,
    gtwiz_reset_rx_done_out,
    \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int ,
    \gen_gtwizard_gthe4.gttxreset_int ,
    \gen_gtwizard_gthe4.txuserrdy_int ,
    \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int ,
    \gen_gtwizard_gthe4.rxprogdivreset_int ,
    \gen_gtwizard_gthe4.rxuserrdy_int ,
    \gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ,
    gtpowergood_out,
    gtwiz_userclk_tx_active_in,
    cplllock_out,
    gtwiz_userclk_rx_active_in,
    rxcdrlock_out,
    gtwiz_reset_clk_freerun_in,
    gtwiz_reset_all_in,
    gtwiz_reset_tx_datapath_in,
    rst_in0,
    txusrclk2_in,
    rxusrclk2_in,
    \gen_gtwizard_gthe4.gtpowergood_int ,
    \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ,
    gtwiz_reset_tx_pll_and_datapath_in,
    gtwiz_reset_rx_datapath_in,
    gtwiz_reset_rx_pll_and_datapath_in,
    \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync );
  output in0;
  output [0:0]gtwiz_reset_tx_done_out;
  output [0:0]gtwiz_reset_rx_cdr_stable_out;
  output [0:0]gtwiz_reset_rx_done_out;
  output \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int ;
  output \gen_gtwizard_gthe4.gttxreset_int ;
  output \gen_gtwizard_gthe4.txuserrdy_int ;
  output \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int ;
  output \gen_gtwizard_gthe4.rxprogdivreset_int ;
  output \gen_gtwizard_gthe4.rxuserrdy_int ;
  output \gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ;
  input [0:0]gtpowergood_out;
  input [0:0]gtwiz_userclk_tx_active_in;
  input [0:0]cplllock_out;
  input [0:0]gtwiz_userclk_rx_active_in;
  input [0:0]rxcdrlock_out;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input [0:0]gtwiz_reset_all_in;
  input [0:0]gtwiz_reset_tx_datapath_in;
  input rst_in0;
  input [0:0]txusrclk2_in;
  input [0:0]rxusrclk2_in;
  input \gen_gtwizard_gthe4.gtpowergood_int ;
  input \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ;
  input [0:0]gtwiz_reset_tx_pll_and_datapath_in;
  input [0:0]gtwiz_reset_rx_datapath_in;
  input [0:0]gtwiz_reset_rx_pll_and_datapath_in;
  input \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ;

  wire \FSM_sequential_sm_reset_all[0]_i_1_n_0 ;
  wire \FSM_sequential_sm_reset_all[1]_i_1_n_0 ;
  wire \FSM_sequential_sm_reset_all[2]_i_2_n_0 ;
  wire \FSM_sequential_sm_reset_all[2]_i_3_n_0 ;
  wire \FSM_sequential_sm_reset_all[2]_i_4_n_0 ;
  wire \FSM_sequential_sm_reset_rx[1]_i_2_n_0 ;
  wire \FSM_sequential_sm_reset_rx[2]_i_2_n_0 ;
  wire \FSM_sequential_sm_reset_rx[2]_i_4_n_0 ;
  wire \FSM_sequential_sm_reset_rx[2]_i_7_n_0 ;
  wire \FSM_sequential_sm_reset_tx[2]_i_2_n_0 ;
  wire \FSM_sequential_sm_reset_tx[2]_i_3_n_0 ;
  wire bit_synchronizer_gtpowergood_inst_n_0;
  wire bit_synchronizer_gtwiz_reset_rx_pll_and_datapath_dly_inst_n_1;
  wire bit_synchronizer_gtwiz_reset_rx_pll_and_datapath_dly_inst_n_2;
  wire bit_synchronizer_gtwiz_reset_tx_datapath_dly_inst_n_0;
  wire bit_synchronizer_gtwiz_reset_tx_pll_and_datapath_dly_inst_n_1;
  wire bit_synchronizer_gtwiz_reset_tx_pll_and_datapath_dly_inst_n_2;
  wire bit_synchronizer_gtwiz_reset_userclk_rx_active_inst_n_0;
  wire bit_synchronizer_gtwiz_reset_userclk_rx_active_inst_n_1;
  wire bit_synchronizer_gtwiz_reset_userclk_rx_active_inst_n_2;
  wire bit_synchronizer_gtwiz_reset_userclk_tx_active_inst_n_1;
  wire bit_synchronizer_gtwiz_reset_userclk_tx_active_inst_n_2;
  wire bit_synchronizer_plllock_rx_inst_n_1;
  wire bit_synchronizer_plllock_rx_inst_n_2;
  wire bit_synchronizer_plllock_tx_inst_n_1;
  wire bit_synchronizer_plllock_tx_inst_n_2;
  wire bit_synchronizer_rxcdrlock_inst_n_1;
  wire bit_synchronizer_rxcdrlock_inst_n_2;
  wire bit_synchronizer_rxcdrlock_inst_n_3;
  wire [0:0]cplllock_out;
  wire \gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int ;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int ;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ;
  wire \gen_gtwizard_gthe4.gtpowergood_int ;
  wire \gen_gtwizard_gthe4.gtrxreset_int ;
  wire \gen_gtwizard_gthe4.gttxreset_int ;
  wire \gen_gtwizard_gthe4.rxprogdivreset_int ;
  wire \gen_gtwizard_gthe4.rxuserrdy_int ;
  wire \gen_gtwizard_gthe4.txuserrdy_int ;
  wire [0:0]gtpowergood_out;
  wire gttxreset_out_i_3_n_0;
  wire [0:0]gtwiz_reset_all_in;
  wire gtwiz_reset_all_sync;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire gtwiz_reset_rx_any_sync;
  wire [0:0]gtwiz_reset_rx_cdr_stable_out;
  wire gtwiz_reset_rx_datapath_dly;
  wire [0:0]gtwiz_reset_rx_datapath_in;
  wire gtwiz_reset_rx_datapath_int_i_1_n_0;
  wire gtwiz_reset_rx_datapath_int_reg_n_0;
  wire gtwiz_reset_rx_datapath_sync;
  wire gtwiz_reset_rx_done_int_reg_n_0;
  wire [0:0]gtwiz_reset_rx_done_out;
  wire gtwiz_reset_rx_pll_and_datapath_dly;
  wire [0:0]gtwiz_reset_rx_pll_and_datapath_in;
  wire gtwiz_reset_rx_pll_and_datapath_int_i_1_n_0;
  wire gtwiz_reset_rx_pll_and_datapath_int_reg_n_0;
  wire gtwiz_reset_rx_pll_and_datapath_sync;
  wire gtwiz_reset_tx_any_sync;
  wire [0:0]gtwiz_reset_tx_datapath_in;
  wire gtwiz_reset_tx_datapath_sync;
  wire gtwiz_reset_tx_done_int_reg_n_0;
  wire [0:0]gtwiz_reset_tx_done_out;
  wire gtwiz_reset_tx_pll_and_datapath_dly;
  wire [0:0]gtwiz_reset_tx_pll_and_datapath_in;
  wire gtwiz_reset_tx_pll_and_datapath_int_i_1_n_0;
  wire gtwiz_reset_tx_pll_and_datapath_int_reg_n_0;
  wire gtwiz_reset_tx_pll_and_datapath_sync;
  wire gtwiz_reset_userclk_tx_active_sync;
  wire [0:0]gtwiz_userclk_rx_active_in;
  wire [0:0]gtwiz_userclk_tx_active_in;
  wire in0;
  wire p_0_in__1;
  wire [9:0]p_0_in__2;
  wire [9:0]p_0_in__3;
  wire [2:0]p_1_in;
  wire plllock_rx_sync;
  wire plllock_tx_sync;
  wire reset_synchronizer_gtwiz_reset_rx_any_inst_n_1;
  wire reset_synchronizer_gtwiz_reset_rx_any_inst_n_2;
  wire reset_synchronizer_gtwiz_reset_rx_any_inst_n_3;
  wire reset_synchronizer_gtwiz_reset_tx_any_inst_n_1;
  wire reset_synchronizer_gtwiz_reset_tx_any_inst_n_2;
  wire reset_synchronizer_gtwiz_reset_tx_any_inst_n_3;
  wire rst_in0;
  wire [0:0]rxcdrlock_out;
  wire [0:0]rxusrclk2_in;
  wire [2:0]sm_reset_all;
  wire sm_reset_all_timer_clr_i_1_n_0;
  wire sm_reset_all_timer_clr_i_2_n_0;
  wire sm_reset_all_timer_clr_reg_n_0;
  wire [2:0]sm_reset_all_timer_ctr;
  wire \sm_reset_all_timer_ctr0_inferred__0/i__n_0 ;
  wire \sm_reset_all_timer_ctr[0]_i_1_n_0 ;
  wire \sm_reset_all_timer_ctr[1]_i_1_n_0 ;
  wire \sm_reset_all_timer_ctr[2]_i_1_n_0 ;
  wire sm_reset_all_timer_sat;
  wire sm_reset_all_timer_sat_i_1_n_0;
  wire [2:0]sm_reset_rx;
  wire sm_reset_rx_cdr_to_clr;
  wire sm_reset_rx_cdr_to_clr_i_3_n_0;
  wire \sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ;
  wire \sm_reset_rx_cdr_to_ctr[0]_i_3_n_0 ;
  wire \sm_reset_rx_cdr_to_ctr[0]_i_4_n_0 ;
  wire \sm_reset_rx_cdr_to_ctr[0]_i_5_n_0 ;
  wire \sm_reset_rx_cdr_to_ctr[0]_i_6_n_0 ;
  wire \sm_reset_rx_cdr_to_ctr[0]_i_7_n_0 ;
  wire [25:0]sm_reset_rx_cdr_to_ctr_reg;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_0 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_1 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_10 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_11 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_12 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_13 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_14 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_15 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_2 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_3 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_4 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_5 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_6 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_7 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_8 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_9 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_0 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_1 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_10 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_11 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_12 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_13 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_14 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_15 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_2 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_3 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_4 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_5 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_6 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_7 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_8 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_9 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[24]_i_1_n_14 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[24]_i_1_n_15 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[24]_i_1_n_7 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_0 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_1 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_10 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_11 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_12 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_13 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_14 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_15 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_2 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_3 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_4 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_5 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_6 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_7 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_8 ;
  wire \sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_9 ;
  wire sm_reset_rx_cdr_to_sat;
  wire sm_reset_rx_cdr_to_sat_i_1_n_0;
  wire sm_reset_rx_cdr_to_sat_i_2_n_0;
  wire sm_reset_rx_cdr_to_sat_i_3_n_0;
  wire sm_reset_rx_cdr_to_sat_i_4_n_0;
  wire sm_reset_rx_cdr_to_sat_i_5_n_0;
  wire sm_reset_rx_cdr_to_sat_i_6_n_0;
  wire sm_reset_rx_pll_timer_clr;
  wire sm_reset_rx_pll_timer_clr_i_1_n_0;
  wire sm_reset_rx_pll_timer_clr_reg_n_0;
  wire \sm_reset_rx_pll_timer_ctr[9]_i_1_n_0 ;
  wire \sm_reset_rx_pll_timer_ctr[9]_i_3_n_0 ;
  wire \sm_reset_rx_pll_timer_ctr[9]_i_4_n_0 ;
  wire [9:0]sm_reset_rx_pll_timer_ctr_reg;
  wire sm_reset_rx_pll_timer_sat;
  wire sm_reset_rx_pll_timer_sat_i_1_n_0;
  wire sm_reset_rx_pll_timer_sat_i_2_n_0;
  wire sm_reset_rx_pll_timer_sat_i_3_n_0;
  wire sm_reset_rx_timer_clr_reg_n_0;
  wire [2:0]sm_reset_rx_timer_ctr;
  wire \sm_reset_rx_timer_ctr0_inferred__0/i__n_0 ;
  wire \sm_reset_rx_timer_ctr[0]_i_1_n_0 ;
  wire \sm_reset_rx_timer_ctr[1]_i_1_n_0 ;
  wire \sm_reset_rx_timer_ctr[2]_i_1_n_0 ;
  wire sm_reset_rx_timer_sat;
  wire sm_reset_rx_timer_sat_i_1_n_0;
  wire [2:0]sm_reset_tx;
  wire sm_reset_tx_pll_timer_clr_i_1_n_0;
  wire sm_reset_tx_pll_timer_clr_reg_n_0;
  wire \sm_reset_tx_pll_timer_ctr[9]_i_1_n_0 ;
  wire \sm_reset_tx_pll_timer_ctr[9]_i_3_n_0 ;
  wire \sm_reset_tx_pll_timer_ctr[9]_i_4_n_0 ;
  wire [9:0]sm_reset_tx_pll_timer_ctr_reg;
  wire sm_reset_tx_pll_timer_sat;
  wire sm_reset_tx_pll_timer_sat_i_1_n_0;
  wire sm_reset_tx_pll_timer_sat_i_2_n_0;
  wire sm_reset_tx_pll_timer_sat_i_3_n_0;
  wire sm_reset_tx_timer_clr_reg_n_0;
  wire [2:0]sm_reset_tx_timer_ctr;
  wire sm_reset_tx_timer_sat;
  wire sm_reset_tx_timer_sat_i_1_n_0;
  wire txuserrdy_out_i_3_n_0;
  wire [0:0]txusrclk2_in;
  wire [7:1]\NLW_sm_reset_rx_cdr_to_ctr_reg[24]_i_1_CO_UNCONNECTED ;
  wire [7:2]\NLW_sm_reset_rx_cdr_to_ctr_reg[24]_i_1_O_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h00FFF70000FFFFFF)) 
    \FSM_sequential_sm_reset_all[0]_i_1 
       (.I0(gtwiz_reset_rx_done_int_reg_n_0),
        .I1(sm_reset_all_timer_sat),
        .I2(sm_reset_all_timer_clr_reg_n_0),
        .I3(sm_reset_all[2]),
        .I4(sm_reset_all[1]),
        .I5(sm_reset_all[0]),
        .O(\FSM_sequential_sm_reset_all[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair516" *) 
  LUT3 #(
    .INIT(8'h34)) 
    \FSM_sequential_sm_reset_all[1]_i_1 
       (.I0(sm_reset_all[2]),
        .I1(sm_reset_all[1]),
        .I2(sm_reset_all[0]),
        .O(\FSM_sequential_sm_reset_all[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair516" *) 
  LUT3 #(
    .INIT(8'h4A)) 
    \FSM_sequential_sm_reset_all[2]_i_2 
       (.I0(sm_reset_all[2]),
        .I1(sm_reset_all[0]),
        .I2(sm_reset_all[1]),
        .O(\FSM_sequential_sm_reset_all[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair509" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \FSM_sequential_sm_reset_all[2]_i_3 
       (.I0(sm_reset_all_timer_sat),
        .I1(gtwiz_reset_rx_done_int_reg_n_0),
        .I2(sm_reset_all_timer_clr_reg_n_0),
        .O(\FSM_sequential_sm_reset_all[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair509" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \FSM_sequential_sm_reset_all[2]_i_4 
       (.I0(sm_reset_all_timer_clr_reg_n_0),
        .I1(sm_reset_all_timer_sat),
        .I2(gtwiz_reset_tx_done_int_reg_n_0),
        .O(\FSM_sequential_sm_reset_all[2]_i_4_n_0 ));
  (* FSM_ENCODED_STATES = "ST_RESET_ALL_BRANCH:000,ST_RESET_ALL_TX_PLL_WAIT:010,ST_RESET_ALL_RX_WAIT:101,ST_RESET_ALL_TX_PLL:001,ST_RESET_ALL_RX_PLL:100,ST_RESET_ALL_RX_DP:011,ST_RESET_ALL_INIT:111,iSTATE:110" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_sequential_sm_reset_all_reg[0] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(bit_synchronizer_gtpowergood_inst_n_0),
        .D(\FSM_sequential_sm_reset_all[0]_i_1_n_0 ),
        .Q(sm_reset_all[0]),
        .R(gtwiz_reset_all_sync));
  (* FSM_ENCODED_STATES = "ST_RESET_ALL_BRANCH:000,ST_RESET_ALL_TX_PLL_WAIT:010,ST_RESET_ALL_RX_WAIT:101,ST_RESET_ALL_TX_PLL:001,ST_RESET_ALL_RX_PLL:100,ST_RESET_ALL_RX_DP:011,ST_RESET_ALL_INIT:111,iSTATE:110" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_sequential_sm_reset_all_reg[1] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(bit_synchronizer_gtpowergood_inst_n_0),
        .D(\FSM_sequential_sm_reset_all[1]_i_1_n_0 ),
        .Q(sm_reset_all[1]),
        .R(gtwiz_reset_all_sync));
  (* FSM_ENCODED_STATES = "ST_RESET_ALL_BRANCH:000,ST_RESET_ALL_TX_PLL_WAIT:010,ST_RESET_ALL_RX_WAIT:101,ST_RESET_ALL_TX_PLL:001,ST_RESET_ALL_RX_PLL:100,ST_RESET_ALL_RX_DP:011,ST_RESET_ALL_INIT:111,iSTATE:110" *) 
  FDRE #(
    .INIT(1'b1)) 
    \FSM_sequential_sm_reset_all_reg[2] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(bit_synchronizer_gtpowergood_inst_n_0),
        .D(\FSM_sequential_sm_reset_all[2]_i_2_n_0 ),
        .Q(sm_reset_all[2]),
        .R(gtwiz_reset_all_sync));
  (* SOFT_HLUTNM = "soft_lutpair505" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \FSM_sequential_sm_reset_rx[1]_i_2 
       (.I0(sm_reset_rx_timer_sat),
        .I1(sm_reset_rx_timer_clr_reg_n_0),
        .O(\FSM_sequential_sm_reset_rx[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hDDFD8888DDDD8888)) 
    \FSM_sequential_sm_reset_rx[2]_i_2 
       (.I0(sm_reset_rx[1]),
        .I1(sm_reset_rx[0]),
        .I2(sm_reset_rx_timer_sat),
        .I3(sm_reset_rx_timer_clr_reg_n_0),
        .I4(sm_reset_rx[2]),
        .I5(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ),
        .O(\FSM_sequential_sm_reset_rx[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair497" *) 
  LUT5 #(
    .INIT(32'h00004000)) 
    \FSM_sequential_sm_reset_rx[2]_i_4 
       (.I0(sm_reset_rx[0]),
        .I1(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ),
        .I2(sm_reset_rx[1]),
        .I3(sm_reset_rx_timer_sat),
        .I4(sm_reset_rx_timer_clr_reg_n_0),
        .O(\FSM_sequential_sm_reset_rx[2]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair503" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_sequential_sm_reset_rx[2]_i_5 
       (.I0(sm_reset_rx[1]),
        .I1(sm_reset_rx[2]),
        .O(sm_reset_rx_pll_timer_clr));
  LUT2 #(
    .INIT(4'h2)) 
    \FSM_sequential_sm_reset_rx[2]_i_7 
       (.I0(sm_reset_rx_pll_timer_sat),
        .I1(sm_reset_rx_pll_timer_clr_reg_n_0),
        .O(\FSM_sequential_sm_reset_rx[2]_i_7_n_0 ));
  (* FSM_ENCODED_STATES = "ST_RESET_RX_WAIT_LOCK:011,ST_RESET_RX_WAIT_CDR:100,ST_RESET_RX_WAIT_USERRDY:101,ST_RESET_RX_WAIT_RESETDONE:110,ST_RESET_RX_DATAPATH:010,ST_RESET_RX_PLL:001,ST_RESET_RX_BRANCH:000,ST_RESET_RX_IDLE:111" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_sm_reset_rx_reg[0] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(bit_synchronizer_rxcdrlock_inst_n_2),
        .D(bit_synchronizer_gtwiz_reset_rx_pll_and_datapath_dly_inst_n_2),
        .Q(sm_reset_rx[0]),
        .R(gtwiz_reset_rx_any_sync));
  (* FSM_ENCODED_STATES = "ST_RESET_RX_WAIT_LOCK:011,ST_RESET_RX_WAIT_CDR:100,ST_RESET_RX_WAIT_USERRDY:101,ST_RESET_RX_WAIT_RESETDONE:110,ST_RESET_RX_DATAPATH:010,ST_RESET_RX_PLL:001,ST_RESET_RX_BRANCH:000,ST_RESET_RX_IDLE:111" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_sm_reset_rx_reg[1] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(bit_synchronizer_rxcdrlock_inst_n_2),
        .D(bit_synchronizer_gtwiz_reset_rx_pll_and_datapath_dly_inst_n_1),
        .Q(sm_reset_rx[1]),
        .R(gtwiz_reset_rx_any_sync));
  (* FSM_ENCODED_STATES = "ST_RESET_RX_WAIT_LOCK:011,ST_RESET_RX_WAIT_CDR:100,ST_RESET_RX_WAIT_USERRDY:101,ST_RESET_RX_WAIT_RESETDONE:110,ST_RESET_RX_DATAPATH:010,ST_RESET_RX_PLL:001,ST_RESET_RX_BRANCH:000,ST_RESET_RX_IDLE:111" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_sm_reset_rx_reg[2] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(bit_synchronizer_rxcdrlock_inst_n_2),
        .D(\FSM_sequential_sm_reset_rx[2]_i_2_n_0 ),
        .Q(sm_reset_rx[2]),
        .R(gtwiz_reset_rx_any_sync));
  (* SOFT_HLUTNM = "soft_lutpair507" *) 
  LUT3 #(
    .INIT(8'h38)) 
    \FSM_sequential_sm_reset_tx[2]_i_2 
       (.I0(sm_reset_tx[0]),
        .I1(sm_reset_tx[1]),
        .I2(sm_reset_tx[2]),
        .O(\FSM_sequential_sm_reset_tx[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair502" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_sequential_sm_reset_tx[2]_i_3 
       (.I0(sm_reset_tx[1]),
        .I1(sm_reset_tx[2]),
        .O(\FSM_sequential_sm_reset_tx[2]_i_3_n_0 ));
  (* FSM_ENCODED_STATES = "ST_RESET_TX_BRANCH:000,ST_RESET_TX_WAIT_LOCK:011,ST_RESET_TX_WAIT_USERRDY:100,ST_RESET_TX_WAIT_RESETDONE:101,ST_RESET_TX_IDLE:110,ST_RESET_TX_DATAPATH:010,ST_RESET_TX_PLL:001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_sm_reset_tx_reg[0] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(bit_synchronizer_gtwiz_reset_tx_datapath_dly_inst_n_0),
        .D(bit_synchronizer_gtwiz_reset_tx_pll_and_datapath_dly_inst_n_2),
        .Q(sm_reset_tx[0]),
        .R(gtwiz_reset_tx_any_sync));
  (* FSM_ENCODED_STATES = "ST_RESET_TX_BRANCH:000,ST_RESET_TX_WAIT_LOCK:011,ST_RESET_TX_WAIT_USERRDY:100,ST_RESET_TX_WAIT_RESETDONE:101,ST_RESET_TX_IDLE:110,ST_RESET_TX_DATAPATH:010,ST_RESET_TX_PLL:001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_sm_reset_tx_reg[1] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(bit_synchronizer_gtwiz_reset_tx_datapath_dly_inst_n_0),
        .D(bit_synchronizer_gtwiz_reset_tx_pll_and_datapath_dly_inst_n_1),
        .Q(sm_reset_tx[1]),
        .R(gtwiz_reset_tx_any_sync));
  (* FSM_ENCODED_STATES = "ST_RESET_TX_BRANCH:000,ST_RESET_TX_WAIT_LOCK:011,ST_RESET_TX_WAIT_USERRDY:100,ST_RESET_TX_WAIT_RESETDONE:101,ST_RESET_TX_IDLE:110,ST_RESET_TX_DATAPATH:010,ST_RESET_TX_PLL:001" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_sm_reset_tx_reg[2] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(bit_synchronizer_gtwiz_reset_tx_datapath_dly_inst_n_0),
        .D(\FSM_sequential_sm_reset_tx[2]_i_2_n_0 ),
        .Q(sm_reset_tx[2]),
        .R(gtwiz_reset_tx_any_sync));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_3 bit_synchronizer_gtpowergood_inst
       (.E(bit_synchronizer_gtpowergood_inst_n_0),
        .\FSM_sequential_sm_reset_all_reg[0] (\FSM_sequential_sm_reset_all[2]_i_3_n_0 ),
        .\FSM_sequential_sm_reset_all_reg[0]_0 (\FSM_sequential_sm_reset_all[2]_i_4_n_0 ),
        .Q(sm_reset_all),
        .gtpowergood_out(gtpowergood_out),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_4 bit_synchronizer_gtwiz_reset_rx_datapath_dly_inst
       (.gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_rx_datapath_dly(gtwiz_reset_rx_datapath_dly),
        .in0(gtwiz_reset_rx_datapath_sync));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_5 bit_synchronizer_gtwiz_reset_rx_pll_and_datapath_dly_inst
       (.D({bit_synchronizer_gtwiz_reset_rx_pll_and_datapath_dly_inst_n_1,bit_synchronizer_gtwiz_reset_rx_pll_and_datapath_dly_inst_n_2}),
        .\FSM_sequential_sm_reset_rx_reg[0] (\FSM_sequential_sm_reset_rx[1]_i_2_n_0 ),
        .Q(sm_reset_rx),
        .\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_rx_pll_and_datapath_dly(gtwiz_reset_rx_pll_and_datapath_dly),
        .in0(gtwiz_reset_rx_pll_and_datapath_sync));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_6 bit_synchronizer_gtwiz_reset_tx_datapath_dly_inst
       (.E(bit_synchronizer_gtwiz_reset_tx_datapath_dly_inst_n_0),
        .\FSM_sequential_sm_reset_tx_reg[0] (\FSM_sequential_sm_reset_tx[2]_i_3_n_0 ),
        .\FSM_sequential_sm_reset_tx_reg[0]_0 (bit_synchronizer_plllock_tx_inst_n_2),
        .\FSM_sequential_sm_reset_tx_reg[0]_1 (bit_synchronizer_gtwiz_reset_userclk_tx_active_inst_n_2),
        .Q(sm_reset_tx[0]),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_tx_pll_and_datapath_dly(gtwiz_reset_tx_pll_and_datapath_dly),
        .in0(gtwiz_reset_tx_datapath_sync));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_7 bit_synchronizer_gtwiz_reset_tx_pll_and_datapath_dly_inst
       (.D({bit_synchronizer_gtwiz_reset_tx_pll_and_datapath_dly_inst_n_1,bit_synchronizer_gtwiz_reset_tx_pll_and_datapath_dly_inst_n_2}),
        .Q(sm_reset_tx),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_tx_pll_and_datapath_dly(gtwiz_reset_tx_pll_and_datapath_dly),
        .in0(gtwiz_reset_tx_pll_and_datapath_sync));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_8 bit_synchronizer_gtwiz_reset_userclk_rx_active_inst
       (.\FSM_sequential_sm_reset_rx_reg[0] (bit_synchronizer_gtwiz_reset_userclk_rx_active_inst_n_0),
        .\FSM_sequential_sm_reset_rx_reg[2] (bit_synchronizer_gtwiz_reset_userclk_rx_active_inst_n_2),
        .Q(sm_reset_rx),
        .\gen_gtwizard_gthe4.rxuserrdy_int (\gen_gtwizard_gthe4.rxuserrdy_int ),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_rx_any_sync(gtwiz_reset_rx_any_sync),
        .gtwiz_userclk_rx_active_in(gtwiz_userclk_rx_active_in),
        .sm_reset_rx_timer_clr_reg(bit_synchronizer_gtwiz_reset_userclk_rx_active_inst_n_1),
        .sm_reset_rx_timer_clr_reg_0(bit_synchronizer_plllock_rx_inst_n_2),
        .sm_reset_rx_timer_clr_reg_1(sm_reset_rx_timer_clr_reg_n_0),
        .sm_reset_rx_timer_sat(sm_reset_rx_timer_sat));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_9 bit_synchronizer_gtwiz_reset_userclk_tx_active_inst
       (.\FSM_sequential_sm_reset_tx_reg[0] (txuserrdy_out_i_3_n_0),
        .\FSM_sequential_sm_reset_tx_reg[0]_0 (\FSM_sequential_sm_reset_tx[2]_i_3_n_0 ),
        .\FSM_sequential_sm_reset_tx_reg[0]_1 (sm_reset_tx_pll_timer_clr_reg_n_0),
        .\FSM_sequential_sm_reset_tx_reg[2] (bit_synchronizer_gtwiz_reset_userclk_tx_active_inst_n_1),
        .Q(sm_reset_tx),
        .\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_userclk_tx_active_sync(gtwiz_reset_userclk_tx_active_sync),
        .gtwiz_userclk_tx_active_in(gtwiz_userclk_tx_active_in),
        .i_in_out_reg_0(bit_synchronizer_gtwiz_reset_userclk_tx_active_inst_n_2),
        .plllock_tx_sync(plllock_tx_sync),
        .sm_reset_tx_pll_timer_sat(sm_reset_tx_pll_timer_sat),
        .sm_reset_tx_timer_clr_reg(sm_reset_tx_timer_clr_reg_n_0),
        .sm_reset_tx_timer_clr_reg_0(gttxreset_out_i_3_n_0));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_10 bit_synchronizer_plllock_rx_inst
       (.\FSM_sequential_sm_reset_rx_reg[1] (bit_synchronizer_plllock_rx_inst_n_2),
        .Q(sm_reset_rx),
        .cplllock_out(cplllock_out),
        .\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_rx_done_int_reg(\FSM_sequential_sm_reset_rx[1]_i_2_n_0 ),
        .gtwiz_reset_rx_done_int_reg_0(gtwiz_reset_rx_done_int_reg_n_0),
        .i_in_out_reg_0(bit_synchronizer_plllock_rx_inst_n_1),
        .plllock_rx_sync(plllock_rx_sync));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_11 bit_synchronizer_plllock_tx_inst
       (.\FSM_sequential_sm_reset_tx_reg[0] (gttxreset_out_i_3_n_0),
        .Q(sm_reset_tx),
        .cplllock_out(cplllock_out),
        .\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_tx_done_int_reg(bit_synchronizer_plllock_tx_inst_n_1),
        .gtwiz_reset_tx_done_int_reg_0(gtwiz_reset_tx_done_int_reg_n_0),
        .gtwiz_reset_tx_done_int_reg_1(sm_reset_tx_timer_clr_reg_n_0),
        .i_in_out_reg_0(bit_synchronizer_plllock_tx_inst_n_2),
        .plllock_tx_sync(plllock_tx_sync),
        .sm_reset_tx_timer_sat(sm_reset_tx_timer_sat));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_12 bit_synchronizer_rxcdrlock_inst
       (.E(bit_synchronizer_rxcdrlock_inst_n_2),
        .\FSM_sequential_sm_reset_rx[2]_i_3_0 (\FSM_sequential_sm_reset_rx[1]_i_2_n_0 ),
        .\FSM_sequential_sm_reset_rx_reg[0] (\FSM_sequential_sm_reset_rx[2]_i_4_n_0 ),
        .\FSM_sequential_sm_reset_rx_reg[0]_0 (\FSM_sequential_sm_reset_rx[2]_i_7_n_0 ),
        .\FSM_sequential_sm_reset_rx_reg[0]_1 (bit_synchronizer_gtwiz_reset_userclk_rx_active_inst_n_1),
        .\FSM_sequential_sm_reset_rx_reg[2] (bit_synchronizer_rxcdrlock_inst_n_1),
        .Q(sm_reset_rx),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_rx_cdr_stable_out(gtwiz_reset_rx_cdr_stable_out),
        .gtwiz_reset_rx_datapath_dly(gtwiz_reset_rx_datapath_dly),
        .gtwiz_reset_rx_pll_and_datapath_dly(gtwiz_reset_rx_pll_and_datapath_dly),
        .plllock_rx_sync(plllock_rx_sync),
        .rxcdrlock_out(rxcdrlock_out),
        .sm_reset_rx_cdr_to_clr(sm_reset_rx_cdr_to_clr),
        .sm_reset_rx_cdr_to_clr_reg(sm_reset_rx_cdr_to_clr_i_3_n_0),
        .sm_reset_rx_cdr_to_sat(sm_reset_rx_cdr_to_sat),
        .sm_reset_rx_cdr_to_sat_reg(bit_synchronizer_rxcdrlock_inst_n_3),
        .sm_reset_rx_pll_timer_clr(sm_reset_rx_pll_timer_clr));
  LUT3 #(
    .INIT(8'h8B)) 
    \gthe4_channel_gen.gen_gthe4_channel_inst[0].GTHE4_CHANNEL_PRIM_INST_i_1 
       (.I0(\gen_gtwizard_gthe4.gtrxreset_int ),
        .I1(gtpowergood_out),
        .I2(\gen_gtwizard_gthe4.gtpowergood_int ),
        .O(\gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ));
  FDRE #(
    .INIT(1'b1)) 
    gtrxreset_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(reset_synchronizer_gtwiz_reset_rx_any_inst_n_3),
        .Q(\gen_gtwizard_gthe4.gtrxreset_int ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair504" *) 
  LUT2 #(
    .INIT(4'h2)) 
    gttxreset_out_i_3
       (.I0(sm_reset_tx_timer_sat),
        .I1(sm_reset_tx_timer_clr_reg_n_0),
        .O(gttxreset_out_i_3_n_0));
  FDRE #(
    .INIT(1'b1)) 
    gttxreset_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(reset_synchronizer_gtwiz_reset_tx_any_inst_n_2),
        .Q(\gen_gtwizard_gthe4.gttxreset_int ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair506" *) 
  LUT4 #(
    .INIT(16'hF740)) 
    gtwiz_reset_rx_datapath_int_i_1
       (.I0(sm_reset_all[2]),
        .I1(sm_reset_all[0]),
        .I2(sm_reset_all[1]),
        .I3(gtwiz_reset_rx_datapath_int_reg_n_0),
        .O(gtwiz_reset_rx_datapath_int_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gtwiz_reset_rx_datapath_int_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(gtwiz_reset_rx_datapath_int_i_1_n_0),
        .Q(gtwiz_reset_rx_datapath_int_reg_n_0),
        .R(gtwiz_reset_all_sync));
  FDRE #(
    .INIT(1'b0)) 
    gtwiz_reset_rx_done_int_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(bit_synchronizer_plllock_rx_inst_n_1),
        .Q(gtwiz_reset_rx_done_int_reg_n_0),
        .R(gtwiz_reset_rx_any_sync));
  LUT4 #(
    .INIT(16'hF704)) 
    gtwiz_reset_rx_pll_and_datapath_int_i_1
       (.I0(sm_reset_all[0]),
        .I1(sm_reset_all[2]),
        .I2(sm_reset_all[1]),
        .I3(gtwiz_reset_rx_pll_and_datapath_int_reg_n_0),
        .O(gtwiz_reset_rx_pll_and_datapath_int_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gtwiz_reset_rx_pll_and_datapath_int_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(gtwiz_reset_rx_pll_and_datapath_int_i_1_n_0),
        .Q(gtwiz_reset_rx_pll_and_datapath_int_reg_n_0),
        .R(gtwiz_reset_all_sync));
  FDRE #(
    .INIT(1'b0)) 
    gtwiz_reset_tx_done_int_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(bit_synchronizer_plllock_tx_inst_n_1),
        .Q(gtwiz_reset_tx_done_int_reg_n_0),
        .R(gtwiz_reset_tx_any_sync));
  (* SOFT_HLUTNM = "soft_lutpair506" *) 
  LUT4 #(
    .INIT(16'hFB02)) 
    gtwiz_reset_tx_pll_and_datapath_int_i_1
       (.I0(sm_reset_all[0]),
        .I1(sm_reset_all[1]),
        .I2(sm_reset_all[2]),
        .I3(gtwiz_reset_tx_pll_and_datapath_int_reg_n_0),
        .O(gtwiz_reset_tx_pll_and_datapath_int_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gtwiz_reset_tx_pll_and_datapath_int_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(gtwiz_reset_tx_pll_and_datapath_int_i_1_n_0),
        .Q(gtwiz_reset_tx_pll_and_datapath_int_reg_n_0),
        .R(gtwiz_reset_all_sync));
  FDRE #(
    .INIT(1'b0)) 
    pllreset_rx_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(reset_synchronizer_gtwiz_reset_rx_any_inst_n_1),
        .Q(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b1)) 
    pllreset_tx_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(reset_synchronizer_gtwiz_reset_tx_any_inst_n_1),
        .Q(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int ),
        .R(1'b0));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer reset_synchronizer_gtwiz_reset_all_inst
       (.gtwiz_reset_all_in(gtwiz_reset_all_in),
        .gtwiz_reset_all_sync(gtwiz_reset_all_sync),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_13 reset_synchronizer_gtwiz_reset_rx_any_inst
       (.\FSM_sequential_sm_reset_rx_reg[1] (reset_synchronizer_gtwiz_reset_rx_any_inst_n_1),
        .\FSM_sequential_sm_reset_rx_reg[1]_0 (reset_synchronizer_gtwiz_reset_rx_any_inst_n_2),
        .\FSM_sequential_sm_reset_rx_reg[1]_1 (reset_synchronizer_gtwiz_reset_rx_any_inst_n_3),
        .Q(sm_reset_rx),
        .\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int ),
        .\gen_gtwizard_gthe4.gtrxreset_int (\gen_gtwizard_gthe4.gtrxreset_int ),
        .\gen_gtwizard_gthe4.rxprogdivreset_int (\gen_gtwizard_gthe4.rxprogdivreset_int ),
        .gtrxreset_out_reg(\FSM_sequential_sm_reset_rx[1]_i_2_n_0 ),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_rx_any_sync(gtwiz_reset_rx_any_sync),
        .gtwiz_reset_rx_datapath_in(gtwiz_reset_rx_datapath_in),
        .gtwiz_reset_rx_pll_and_datapath_in(gtwiz_reset_rx_pll_and_datapath_in),
        .plllock_rx_sync(plllock_rx_sync),
        .rst_in_out_reg_0(gtwiz_reset_rx_datapath_int_reg_n_0),
        .rst_in_out_reg_1(gtwiz_reset_rx_pll_and_datapath_int_reg_n_0),
        .rxprogdivreset_out_reg(bit_synchronizer_rxcdrlock_inst_n_3));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_14 reset_synchronizer_gtwiz_reset_rx_datapath_inst
       (.gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_rx_datapath_in(gtwiz_reset_rx_datapath_in),
        .in0(gtwiz_reset_rx_datapath_sync),
        .rst_in_out_reg_0(gtwiz_reset_rx_datapath_int_reg_n_0));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_15 reset_synchronizer_gtwiz_reset_rx_pll_and_datapath_inst
       (.gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_rx_pll_and_datapath_in(gtwiz_reset_rx_pll_and_datapath_in),
        .in0(gtwiz_reset_rx_pll_and_datapath_sync),
        .rst_in_out_reg_0(gtwiz_reset_rx_pll_and_datapath_int_reg_n_0));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_16 reset_synchronizer_gtwiz_reset_tx_any_inst
       (.\FSM_sequential_sm_reset_tx_reg[0] (reset_synchronizer_gtwiz_reset_tx_any_inst_n_3),
        .\FSM_sequential_sm_reset_tx_reg[1] (reset_synchronizer_gtwiz_reset_tx_any_inst_n_1),
        .\FSM_sequential_sm_reset_tx_reg[1]_0 (reset_synchronizer_gtwiz_reset_tx_any_inst_n_2),
        .Q(sm_reset_tx),
        .\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int ),
        .\gen_gtwizard_gthe4.gttxreset_int (\gen_gtwizard_gthe4.gttxreset_int ),
        .\gen_gtwizard_gthe4.txuserrdy_int (\gen_gtwizard_gthe4.txuserrdy_int ),
        .gttxreset_out_reg(gttxreset_out_i_3_n_0),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_tx_any_sync(gtwiz_reset_tx_any_sync),
        .gtwiz_reset_tx_datapath_in(gtwiz_reset_tx_datapath_in),
        .gtwiz_reset_tx_pll_and_datapath_in(gtwiz_reset_tx_pll_and_datapath_in),
        .gtwiz_reset_userclk_tx_active_sync(gtwiz_reset_userclk_tx_active_sync),
        .plllock_tx_sync(plllock_tx_sync),
        .rst_in_out_reg_0(gtwiz_reset_tx_pll_and_datapath_int_reg_n_0),
        .txuserrdy_out_reg(txuserrdy_out_i_3_n_0));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_17 reset_synchronizer_gtwiz_reset_tx_datapath_inst
       (.gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_tx_datapath_in(gtwiz_reset_tx_datapath_in),
        .in0(gtwiz_reset_tx_datapath_sync));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_18 reset_synchronizer_gtwiz_reset_tx_pll_and_datapath_inst
       (.gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_tx_pll_and_datapath_in(gtwiz_reset_tx_pll_and_datapath_in),
        .in0(gtwiz_reset_tx_pll_and_datapath_sync),
        .rst_in_out_reg_0(gtwiz_reset_tx_pll_and_datapath_int_reg_n_0));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_inv_synchronizer reset_synchronizer_rx_done_inst
       (.gtwiz_reset_rx_done_out(gtwiz_reset_rx_done_out),
        .rst_in_sync2_reg_0(gtwiz_reset_rx_done_int_reg_n_0),
        .rxusrclk2_in(rxusrclk2_in));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_inv_synchronizer_19 reset_synchronizer_tx_done_inst
       (.gtwiz_reset_tx_done_out(gtwiz_reset_tx_done_out),
        .rst_in_sync2_reg_0(gtwiz_reset_tx_done_int_reg_n_0),
        .txusrclk2_in(txusrclk2_in));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_20 reset_synchronizer_txprogdivreset_inst
       (.gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .in0(in0),
        .rst_in0(rst_in0));
  FDRE #(
    .INIT(1'b1)) 
    rxprogdivreset_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(reset_synchronizer_gtwiz_reset_rx_any_inst_n_2),
        .Q(\gen_gtwizard_gthe4.rxprogdivreset_int ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    rxuserrdy_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(bit_synchronizer_gtwiz_reset_userclk_rx_active_inst_n_2),
        .Q(\gen_gtwizard_gthe4.rxuserrdy_int ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEFFA200A)) 
    sm_reset_all_timer_clr_i_1
       (.I0(sm_reset_all_timer_clr_i_2_n_0),
        .I1(sm_reset_all[1]),
        .I2(sm_reset_all[2]),
        .I3(sm_reset_all[0]),
        .I4(sm_reset_all_timer_clr_reg_n_0),
        .O(sm_reset_all_timer_clr_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000B0003333BB33)) 
    sm_reset_all_timer_clr_i_2
       (.I0(gtwiz_reset_rx_done_int_reg_n_0),
        .I1(sm_reset_all[2]),
        .I2(gtwiz_reset_tx_done_int_reg_n_0),
        .I3(sm_reset_all_timer_sat),
        .I4(sm_reset_all_timer_clr_reg_n_0),
        .I5(sm_reset_all[1]),
        .O(sm_reset_all_timer_clr_i_2_n_0));
  FDSE #(
    .INIT(1'b1)) 
    sm_reset_all_timer_clr_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(sm_reset_all_timer_clr_i_1_n_0),
        .Q(sm_reset_all_timer_clr_reg_n_0),
        .S(gtwiz_reset_all_sync));
  LUT3 #(
    .INIT(8'h7F)) 
    \sm_reset_all_timer_ctr0_inferred__0/i_ 
       (.I0(sm_reset_all_timer_ctr[2]),
        .I1(sm_reset_all_timer_ctr[0]),
        .I2(sm_reset_all_timer_ctr[1]),
        .O(\sm_reset_all_timer_ctr0_inferred__0/i__n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \sm_reset_all_timer_ctr[0]_i_1 
       (.I0(sm_reset_all_timer_ctr[0]),
        .O(\sm_reset_all_timer_ctr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair513" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \sm_reset_all_timer_ctr[1]_i_1 
       (.I0(sm_reset_all_timer_ctr[0]),
        .I1(sm_reset_all_timer_ctr[1]),
        .O(\sm_reset_all_timer_ctr[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair513" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \sm_reset_all_timer_ctr[2]_i_1 
       (.I0(sm_reset_all_timer_ctr[0]),
        .I1(sm_reset_all_timer_ctr[1]),
        .I2(sm_reset_all_timer_ctr[2]),
        .O(\sm_reset_all_timer_ctr[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_all_timer_ctr_reg[0] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_all_timer_ctr0_inferred__0/i__n_0 ),
        .D(\sm_reset_all_timer_ctr[0]_i_1_n_0 ),
        .Q(sm_reset_all_timer_ctr[0]),
        .R(sm_reset_all_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_all_timer_ctr_reg[1] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_all_timer_ctr0_inferred__0/i__n_0 ),
        .D(\sm_reset_all_timer_ctr[1]_i_1_n_0 ),
        .Q(sm_reset_all_timer_ctr[1]),
        .R(sm_reset_all_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_all_timer_ctr_reg[2] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_all_timer_ctr0_inferred__0/i__n_0 ),
        .D(\sm_reset_all_timer_ctr[2]_i_1_n_0 ),
        .Q(sm_reset_all_timer_ctr[2]),
        .R(sm_reset_all_timer_clr_reg_n_0));
  LUT5 #(
    .INIT(32'h0000FF80)) 
    sm_reset_all_timer_sat_i_1
       (.I0(sm_reset_all_timer_ctr[2]),
        .I1(sm_reset_all_timer_ctr[0]),
        .I2(sm_reset_all_timer_ctr[1]),
        .I3(sm_reset_all_timer_sat),
        .I4(sm_reset_all_timer_clr_reg_n_0),
        .O(sm_reset_all_timer_sat_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    sm_reset_all_timer_sat_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(sm_reset_all_timer_sat_i_1_n_0),
        .Q(sm_reset_all_timer_sat),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair497" *) 
  LUT3 #(
    .INIT(8'h40)) 
    sm_reset_rx_cdr_to_clr_i_3
       (.I0(sm_reset_rx_timer_clr_reg_n_0),
        .I1(sm_reset_rx_timer_sat),
        .I2(sm_reset_rx[1]),
        .O(sm_reset_rx_cdr_to_clr_i_3_n_0));
  FDSE #(
    .INIT(1'b1)) 
    sm_reset_rx_cdr_to_clr_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(bit_synchronizer_rxcdrlock_inst_n_1),
        .Q(sm_reset_rx_cdr_to_clr),
        .S(gtwiz_reset_rx_any_sync));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \sm_reset_rx_cdr_to_ctr[0]_i_1 
       (.I0(sm_reset_rx_cdr_to_ctr_reg[0]),
        .I1(sm_reset_rx_cdr_to_ctr_reg[1]),
        .I2(\sm_reset_rx_cdr_to_ctr[0]_i_3_n_0 ),
        .I3(\sm_reset_rx_cdr_to_ctr[0]_i_4_n_0 ),
        .I4(\sm_reset_rx_cdr_to_ctr[0]_i_5_n_0 ),
        .I5(\sm_reset_rx_cdr_to_ctr[0]_i_6_n_0 ),
        .O(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFDFFFFFFFF)) 
    \sm_reset_rx_cdr_to_ctr[0]_i_3 
       (.I0(sm_reset_rx_cdr_to_ctr_reg[19]),
        .I1(sm_reset_rx_cdr_to_ctr_reg[18]),
        .I2(sm_reset_rx_cdr_to_ctr_reg[16]),
        .I3(sm_reset_rx_cdr_to_ctr_reg[17]),
        .I4(sm_reset_rx_cdr_to_ctr_reg[15]),
        .I5(sm_reset_rx_cdr_to_ctr_reg[14]),
        .O(\sm_reset_rx_cdr_to_ctr[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \sm_reset_rx_cdr_to_ctr[0]_i_4 
       (.I0(sm_reset_rx_cdr_to_ctr_reg[24]),
        .I1(sm_reset_rx_cdr_to_ctr_reg[25]),
        .I2(sm_reset_rx_cdr_to_ctr_reg[22]),
        .I3(sm_reset_rx_cdr_to_ctr_reg[23]),
        .I4(sm_reset_rx_cdr_to_ctr_reg[21]),
        .I5(sm_reset_rx_cdr_to_ctr_reg[20]),
        .O(\sm_reset_rx_cdr_to_ctr[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFF7FFFFFFFFFFFFF)) 
    \sm_reset_rx_cdr_to_ctr[0]_i_5 
       (.I0(sm_reset_rx_cdr_to_ctr_reg[12]),
        .I1(sm_reset_rx_cdr_to_ctr_reg[13]),
        .I2(sm_reset_rx_cdr_to_ctr_reg[10]),
        .I3(sm_reset_rx_cdr_to_ctr_reg[11]),
        .I4(sm_reset_rx_cdr_to_ctr_reg[9]),
        .I5(sm_reset_rx_cdr_to_ctr_reg[8]),
        .O(\sm_reset_rx_cdr_to_ctr[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF7FFFFFFFFFFF)) 
    \sm_reset_rx_cdr_to_ctr[0]_i_6 
       (.I0(sm_reset_rx_cdr_to_ctr_reg[6]),
        .I1(sm_reset_rx_cdr_to_ctr_reg[7]),
        .I2(sm_reset_rx_cdr_to_ctr_reg[4]),
        .I3(sm_reset_rx_cdr_to_ctr_reg[5]),
        .I4(sm_reset_rx_cdr_to_ctr_reg[2]),
        .I5(sm_reset_rx_cdr_to_ctr_reg[3]),
        .O(\sm_reset_rx_cdr_to_ctr[0]_i_6_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \sm_reset_rx_cdr_to_ctr[0]_i_7 
       (.I0(sm_reset_rx_cdr_to_ctr_reg[0]),
        .O(\sm_reset_rx_cdr_to_ctr[0]_i_7_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[0] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_15 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[0]),
        .R(sm_reset_rx_cdr_to_clr));
  CARRY8 \sm_reset_rx_cdr_to_ctr_reg[0]_i_2 
       (.CI(1'b0),
        .CI_TOP(1'b0),
        .CO({\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_0 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_1 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_2 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_3 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_4 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_5 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_6 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .O({\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_8 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_9 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_10 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_11 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_12 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_13 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_14 ,\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_15 }),
        .S({sm_reset_rx_cdr_to_ctr_reg[7:1],\sm_reset_rx_cdr_to_ctr[0]_i_7_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[10] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_13 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[10]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[11] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_12 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[11]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[12] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_11 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[12]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[13] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_10 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[13]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[14] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_9 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[14]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[15] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_8 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[15]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[16] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_15 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[16]),
        .R(sm_reset_rx_cdr_to_clr));
  CARRY8 \sm_reset_rx_cdr_to_ctr_reg[16]_i_1 
       (.CI(\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_0 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_1 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_2 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_3 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_4 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_5 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_6 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_8 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_9 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_10 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_11 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_12 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_13 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_14 ,\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_15 }),
        .S(sm_reset_rx_cdr_to_ctr_reg[23:16]));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[17] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_14 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[17]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[18] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_13 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[18]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[19] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_12 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[19]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[1] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_14 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[1]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[20] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_11 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[20]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[21] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_10 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[21]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[22] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_9 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[22]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[23] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_8 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[23]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[24] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[24]_i_1_n_15 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[24]),
        .R(sm_reset_rx_cdr_to_clr));
  CARRY8 \sm_reset_rx_cdr_to_ctr_reg[24]_i_1 
       (.CI(\sm_reset_rx_cdr_to_ctr_reg[16]_i_1_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_sm_reset_rx_cdr_to_ctr_reg[24]_i_1_CO_UNCONNECTED [7:1],\sm_reset_rx_cdr_to_ctr_reg[24]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_sm_reset_rx_cdr_to_ctr_reg[24]_i_1_O_UNCONNECTED [7:2],\sm_reset_rx_cdr_to_ctr_reg[24]_i_1_n_14 ,\sm_reset_rx_cdr_to_ctr_reg[24]_i_1_n_15 }),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,sm_reset_rx_cdr_to_ctr_reg[25:24]}));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[25] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[24]_i_1_n_14 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[25]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[2] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_13 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[2]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[3] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_12 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[3]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[4] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_11 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[4]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[5] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_10 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[5]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[6] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_9 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[6]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[7] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_8 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[7]),
        .R(sm_reset_rx_cdr_to_clr));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[8] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_15 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[8]),
        .R(sm_reset_rx_cdr_to_clr));
  CARRY8 \sm_reset_rx_cdr_to_ctr_reg[8]_i_1 
       (.CI(\sm_reset_rx_cdr_to_ctr_reg[0]_i_2_n_0 ),
        .CI_TOP(1'b0),
        .CO({\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_0 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_1 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_2 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_3 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_4 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_5 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_6 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_8 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_9 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_10 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_11 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_12 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_13 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_14 ,\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_15 }),
        .S(sm_reset_rx_cdr_to_ctr_reg[15:8]));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_cdr_to_ctr_reg[9] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_cdr_to_ctr[0]_i_1_n_0 ),
        .D(\sm_reset_rx_cdr_to_ctr_reg[8]_i_1_n_14 ),
        .Q(sm_reset_rx_cdr_to_ctr_reg[9]),
        .R(sm_reset_rx_cdr_to_clr));
  LUT3 #(
    .INIT(8'h0E)) 
    sm_reset_rx_cdr_to_sat_i_1
       (.I0(sm_reset_rx_cdr_to_sat),
        .I1(sm_reset_rx_cdr_to_sat_i_2_n_0),
        .I2(sm_reset_rx_cdr_to_clr),
        .O(sm_reset_rx_cdr_to_sat_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    sm_reset_rx_cdr_to_sat_i_2
       (.I0(sm_reset_rx_cdr_to_sat_i_3_n_0),
        .I1(sm_reset_rx_cdr_to_sat_i_4_n_0),
        .I2(sm_reset_rx_cdr_to_sat_i_5_n_0),
        .I3(sm_reset_rx_cdr_to_sat_i_6_n_0),
        .I4(sm_reset_rx_cdr_to_ctr_reg[0]),
        .I5(sm_reset_rx_cdr_to_ctr_reg[1]),
        .O(sm_reset_rx_cdr_to_sat_i_2_n_0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    sm_reset_rx_cdr_to_sat_i_3
       (.I0(sm_reset_rx_cdr_to_ctr_reg[4]),
        .I1(sm_reset_rx_cdr_to_ctr_reg[5]),
        .I2(sm_reset_rx_cdr_to_ctr_reg[3]),
        .I3(sm_reset_rx_cdr_to_ctr_reg[2]),
        .I4(sm_reset_rx_cdr_to_ctr_reg[7]),
        .I5(sm_reset_rx_cdr_to_ctr_reg[6]),
        .O(sm_reset_rx_cdr_to_sat_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    sm_reset_rx_cdr_to_sat_i_4
       (.I0(sm_reset_rx_cdr_to_ctr_reg[22]),
        .I1(sm_reset_rx_cdr_to_ctr_reg[23]),
        .I2(sm_reset_rx_cdr_to_ctr_reg[20]),
        .I3(sm_reset_rx_cdr_to_ctr_reg[21]),
        .I4(sm_reset_rx_cdr_to_ctr_reg[25]),
        .I5(sm_reset_rx_cdr_to_ctr_reg[24]),
        .O(sm_reset_rx_cdr_to_sat_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000001000000000)) 
    sm_reset_rx_cdr_to_sat_i_5
       (.I0(sm_reset_rx_cdr_to_ctr_reg[16]),
        .I1(sm_reset_rx_cdr_to_ctr_reg[17]),
        .I2(sm_reset_rx_cdr_to_ctr_reg[14]),
        .I3(sm_reset_rx_cdr_to_ctr_reg[15]),
        .I4(sm_reset_rx_cdr_to_ctr_reg[18]),
        .I5(sm_reset_rx_cdr_to_ctr_reg[19]),
        .O(sm_reset_rx_cdr_to_sat_i_5_n_0));
  LUT6 #(
    .INIT(64'h2000000000000000)) 
    sm_reset_rx_cdr_to_sat_i_6
       (.I0(sm_reset_rx_cdr_to_ctr_reg[10]),
        .I1(sm_reset_rx_cdr_to_ctr_reg[11]),
        .I2(sm_reset_rx_cdr_to_ctr_reg[8]),
        .I3(sm_reset_rx_cdr_to_ctr_reg[9]),
        .I4(sm_reset_rx_cdr_to_ctr_reg[13]),
        .I5(sm_reset_rx_cdr_to_ctr_reg[12]),
        .O(sm_reset_rx_cdr_to_sat_i_6_n_0));
  FDRE #(
    .INIT(1'b0)) 
    sm_reset_rx_cdr_to_sat_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(sm_reset_rx_cdr_to_sat_i_1_n_0),
        .Q(sm_reset_rx_cdr_to_sat),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair503" *) 
  LUT5 #(
    .INIT(32'hFFF3000B)) 
    sm_reset_rx_pll_timer_clr_i_1
       (.I0(sm_reset_rx_pll_timer_sat),
        .I1(sm_reset_rx[0]),
        .I2(sm_reset_rx[1]),
        .I3(sm_reset_rx[2]),
        .I4(sm_reset_rx_pll_timer_clr_reg_n_0),
        .O(sm_reset_rx_pll_timer_clr_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    sm_reset_rx_pll_timer_clr_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(sm_reset_rx_pll_timer_clr_i_1_n_0),
        .Q(sm_reset_rx_pll_timer_clr_reg_n_0),
        .S(gtwiz_reset_rx_any_sync));
  LUT1 #(
    .INIT(2'h1)) 
    \sm_reset_rx_pll_timer_ctr[0]_i_1 
       (.I0(sm_reset_rx_pll_timer_ctr_reg[0]),
        .O(p_0_in__3[0]));
  (* SOFT_HLUTNM = "soft_lutpair514" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \sm_reset_rx_pll_timer_ctr[1]_i_1 
       (.I0(sm_reset_rx_pll_timer_ctr_reg[0]),
        .I1(sm_reset_rx_pll_timer_ctr_reg[1]),
        .O(p_0_in__3[1]));
  (* SOFT_HLUTNM = "soft_lutpair514" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \sm_reset_rx_pll_timer_ctr[2]_i_1 
       (.I0(sm_reset_rx_pll_timer_ctr_reg[1]),
        .I1(sm_reset_rx_pll_timer_ctr_reg[0]),
        .I2(sm_reset_rx_pll_timer_ctr_reg[2]),
        .O(p_0_in__3[2]));
  (* SOFT_HLUTNM = "soft_lutpair499" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \sm_reset_rx_pll_timer_ctr[3]_i_1 
       (.I0(sm_reset_rx_pll_timer_ctr_reg[2]),
        .I1(sm_reset_rx_pll_timer_ctr_reg[0]),
        .I2(sm_reset_rx_pll_timer_ctr_reg[1]),
        .I3(sm_reset_rx_pll_timer_ctr_reg[3]),
        .O(p_0_in__3[3]));
  (* SOFT_HLUTNM = "soft_lutpair499" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \sm_reset_rx_pll_timer_ctr[4]_i_1 
       (.I0(sm_reset_rx_pll_timer_ctr_reg[3]),
        .I1(sm_reset_rx_pll_timer_ctr_reg[1]),
        .I2(sm_reset_rx_pll_timer_ctr_reg[0]),
        .I3(sm_reset_rx_pll_timer_ctr_reg[2]),
        .I4(sm_reset_rx_pll_timer_ctr_reg[4]),
        .O(p_0_in__3[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \sm_reset_rx_pll_timer_ctr[5]_i_1 
       (.I0(sm_reset_rx_pll_timer_ctr_reg[4]),
        .I1(sm_reset_rx_pll_timer_ctr_reg[2]),
        .I2(sm_reset_rx_pll_timer_ctr_reg[0]),
        .I3(sm_reset_rx_pll_timer_ctr_reg[1]),
        .I4(sm_reset_rx_pll_timer_ctr_reg[3]),
        .I5(sm_reset_rx_pll_timer_ctr_reg[5]),
        .O(p_0_in__3[5]));
  (* SOFT_HLUTNM = "soft_lutpair510" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \sm_reset_rx_pll_timer_ctr[6]_i_1 
       (.I0(\sm_reset_rx_pll_timer_ctr[9]_i_4_n_0 ),
        .I1(sm_reset_rx_pll_timer_ctr_reg[6]),
        .O(p_0_in__3[6]));
  (* SOFT_HLUTNM = "soft_lutpair510" *) 
  LUT3 #(
    .INIT(8'hD2)) 
    \sm_reset_rx_pll_timer_ctr[7]_i_1 
       (.I0(sm_reset_rx_pll_timer_ctr_reg[6]),
        .I1(\sm_reset_rx_pll_timer_ctr[9]_i_4_n_0 ),
        .I2(sm_reset_rx_pll_timer_ctr_reg[7]),
        .O(p_0_in__3[7]));
  (* SOFT_HLUTNM = "soft_lutpair501" *) 
  LUT4 #(
    .INIT(16'hDF20)) 
    \sm_reset_rx_pll_timer_ctr[8]_i_1 
       (.I0(sm_reset_rx_pll_timer_ctr_reg[7]),
        .I1(\sm_reset_rx_pll_timer_ctr[9]_i_4_n_0 ),
        .I2(sm_reset_rx_pll_timer_ctr_reg[6]),
        .I3(sm_reset_rx_pll_timer_ctr_reg[8]),
        .O(p_0_in__3[8]));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    \sm_reset_rx_pll_timer_ctr[9]_i_1 
       (.I0(sm_reset_rx_pll_timer_ctr_reg[3]),
        .I1(sm_reset_rx_pll_timer_ctr_reg[2]),
        .I2(\sm_reset_rx_pll_timer_ctr[9]_i_3_n_0 ),
        .I3(sm_reset_rx_pll_timer_ctr_reg[1]),
        .I4(sm_reset_rx_pll_timer_ctr_reg[0]),
        .O(\sm_reset_rx_pll_timer_ctr[9]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair501" *) 
  LUT5 #(
    .INIT(32'hF7FF0800)) 
    \sm_reset_rx_pll_timer_ctr[9]_i_2 
       (.I0(sm_reset_rx_pll_timer_ctr_reg[8]),
        .I1(sm_reset_rx_pll_timer_ctr_reg[6]),
        .I2(\sm_reset_rx_pll_timer_ctr[9]_i_4_n_0 ),
        .I3(sm_reset_rx_pll_timer_ctr_reg[7]),
        .I4(sm_reset_rx_pll_timer_ctr_reg[9]),
        .O(p_0_in__3[9]));
  LUT6 #(
    .INIT(64'hFFFFFFEFFFFFFFFF)) 
    \sm_reset_rx_pll_timer_ctr[9]_i_3 
       (.I0(sm_reset_rx_pll_timer_ctr_reg[8]),
        .I1(sm_reset_rx_pll_timer_ctr_reg[9]),
        .I2(sm_reset_rx_pll_timer_ctr_reg[7]),
        .I3(sm_reset_rx_pll_timer_ctr_reg[6]),
        .I4(sm_reset_rx_pll_timer_ctr_reg[5]),
        .I5(sm_reset_rx_pll_timer_ctr_reg[4]),
        .O(\sm_reset_rx_pll_timer_ctr[9]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \sm_reset_rx_pll_timer_ctr[9]_i_4 
       (.I0(sm_reset_rx_pll_timer_ctr_reg[4]),
        .I1(sm_reset_rx_pll_timer_ctr_reg[2]),
        .I2(sm_reset_rx_pll_timer_ctr_reg[0]),
        .I3(sm_reset_rx_pll_timer_ctr_reg[1]),
        .I4(sm_reset_rx_pll_timer_ctr_reg[3]),
        .I5(sm_reset_rx_pll_timer_ctr_reg[5]),
        .O(\sm_reset_rx_pll_timer_ctr[9]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_pll_timer_ctr_reg[0] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__3[0]),
        .Q(sm_reset_rx_pll_timer_ctr_reg[0]),
        .R(sm_reset_rx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_pll_timer_ctr_reg[1] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__3[1]),
        .Q(sm_reset_rx_pll_timer_ctr_reg[1]),
        .R(sm_reset_rx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_pll_timer_ctr_reg[2] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__3[2]),
        .Q(sm_reset_rx_pll_timer_ctr_reg[2]),
        .R(sm_reset_rx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_pll_timer_ctr_reg[3] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__3[3]),
        .Q(sm_reset_rx_pll_timer_ctr_reg[3]),
        .R(sm_reset_rx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_pll_timer_ctr_reg[4] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__3[4]),
        .Q(sm_reset_rx_pll_timer_ctr_reg[4]),
        .R(sm_reset_rx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_pll_timer_ctr_reg[5] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__3[5]),
        .Q(sm_reset_rx_pll_timer_ctr_reg[5]),
        .R(sm_reset_rx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_pll_timer_ctr_reg[6] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__3[6]),
        .Q(sm_reset_rx_pll_timer_ctr_reg[6]),
        .R(sm_reset_rx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_pll_timer_ctr_reg[7] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__3[7]),
        .Q(sm_reset_rx_pll_timer_ctr_reg[7]),
        .R(sm_reset_rx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_pll_timer_ctr_reg[8] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__3[8]),
        .Q(sm_reset_rx_pll_timer_ctr_reg[8]),
        .R(sm_reset_rx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_pll_timer_ctr_reg[9] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__3[9]),
        .Q(sm_reset_rx_pll_timer_ctr_reg[9]),
        .R(sm_reset_rx_pll_timer_clr_reg_n_0));
  LUT6 #(
    .INIT(64'h00000000AAAEAAAA)) 
    sm_reset_rx_pll_timer_sat_i_1
       (.I0(sm_reset_rx_pll_timer_sat),
        .I1(sm_reset_rx_pll_timer_sat_i_2_n_0),
        .I2(sm_reset_rx_pll_timer_ctr_reg[0]),
        .I3(sm_reset_rx_pll_timer_ctr_reg[1]),
        .I4(sm_reset_rx_pll_timer_sat_i_3_n_0),
        .I5(sm_reset_rx_pll_timer_clr_reg_n_0),
        .O(sm_reset_rx_pll_timer_sat_i_1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    sm_reset_rx_pll_timer_sat_i_2
       (.I0(sm_reset_rx_pll_timer_ctr_reg[3]),
        .I1(sm_reset_rx_pll_timer_ctr_reg[2]),
        .O(sm_reset_rx_pll_timer_sat_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    sm_reset_rx_pll_timer_sat_i_3
       (.I0(sm_reset_rx_pll_timer_ctr_reg[7]),
        .I1(sm_reset_rx_pll_timer_ctr_reg[6]),
        .I2(sm_reset_rx_pll_timer_ctr_reg[4]),
        .I3(sm_reset_rx_pll_timer_ctr_reg[5]),
        .I4(sm_reset_rx_pll_timer_ctr_reg[9]),
        .I5(sm_reset_rx_pll_timer_ctr_reg[8]),
        .O(sm_reset_rx_pll_timer_sat_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    sm_reset_rx_pll_timer_sat_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(sm_reset_rx_pll_timer_sat_i_1_n_0),
        .Q(sm_reset_rx_pll_timer_sat),
        .R(1'b0));
  FDSE #(
    .INIT(1'b1)) 
    sm_reset_rx_timer_clr_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(bit_synchronizer_gtwiz_reset_userclk_rx_active_inst_n_0),
        .Q(sm_reset_rx_timer_clr_reg_n_0),
        .S(gtwiz_reset_rx_any_sync));
  LUT3 #(
    .INIT(8'h7F)) 
    \sm_reset_rx_timer_ctr0_inferred__0/i_ 
       (.I0(sm_reset_rx_timer_ctr[2]),
        .I1(sm_reset_rx_timer_ctr[0]),
        .I2(sm_reset_rx_timer_ctr[1]),
        .O(\sm_reset_rx_timer_ctr0_inferred__0/i__n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \sm_reset_rx_timer_ctr[0]_i_1 
       (.I0(sm_reset_rx_timer_ctr[0]),
        .O(\sm_reset_rx_timer_ctr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair512" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \sm_reset_rx_timer_ctr[1]_i_1 
       (.I0(sm_reset_rx_timer_ctr[0]),
        .I1(sm_reset_rx_timer_ctr[1]),
        .O(\sm_reset_rx_timer_ctr[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair512" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \sm_reset_rx_timer_ctr[2]_i_1 
       (.I0(sm_reset_rx_timer_ctr[0]),
        .I1(sm_reset_rx_timer_ctr[1]),
        .I2(sm_reset_rx_timer_ctr[2]),
        .O(\sm_reset_rx_timer_ctr[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_timer_ctr_reg[0] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_timer_ctr0_inferred__0/i__n_0 ),
        .D(\sm_reset_rx_timer_ctr[0]_i_1_n_0 ),
        .Q(sm_reset_rx_timer_ctr[0]),
        .R(sm_reset_rx_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_timer_ctr_reg[1] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_timer_ctr0_inferred__0/i__n_0 ),
        .D(\sm_reset_rx_timer_ctr[1]_i_1_n_0 ),
        .Q(sm_reset_rx_timer_ctr[1]),
        .R(sm_reset_rx_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_rx_timer_ctr_reg[2] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_rx_timer_ctr0_inferred__0/i__n_0 ),
        .D(\sm_reset_rx_timer_ctr[2]_i_1_n_0 ),
        .Q(sm_reset_rx_timer_ctr[2]),
        .R(sm_reset_rx_timer_clr_reg_n_0));
  (* SOFT_HLUTNM = "soft_lutpair505" *) 
  LUT5 #(
    .INIT(32'h0000FF80)) 
    sm_reset_rx_timer_sat_i_1
       (.I0(sm_reset_rx_timer_ctr[2]),
        .I1(sm_reset_rx_timer_ctr[0]),
        .I2(sm_reset_rx_timer_ctr[1]),
        .I3(sm_reset_rx_timer_sat),
        .I4(sm_reset_rx_timer_clr_reg_n_0),
        .O(sm_reset_rx_timer_sat_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    sm_reset_rx_timer_sat_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(sm_reset_rx_timer_sat_i_1_n_0),
        .Q(sm_reset_rx_timer_sat),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair502" *) 
  LUT5 #(
    .INIT(32'hEFEF1101)) 
    sm_reset_tx_pll_timer_clr_i_1
       (.I0(sm_reset_tx[1]),
        .I1(sm_reset_tx[2]),
        .I2(sm_reset_tx[0]),
        .I3(sm_reset_tx_pll_timer_sat),
        .I4(sm_reset_tx_pll_timer_clr_reg_n_0),
        .O(sm_reset_tx_pll_timer_clr_i_1_n_0));
  FDSE #(
    .INIT(1'b1)) 
    sm_reset_tx_pll_timer_clr_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(sm_reset_tx_pll_timer_clr_i_1_n_0),
        .Q(sm_reset_tx_pll_timer_clr_reg_n_0),
        .S(gtwiz_reset_tx_any_sync));
  LUT1 #(
    .INIT(2'h1)) 
    \sm_reset_tx_pll_timer_ctr[0]_i_1 
       (.I0(sm_reset_tx_pll_timer_ctr_reg[0]),
        .O(p_0_in__2[0]));
  (* SOFT_HLUTNM = "soft_lutpair515" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \sm_reset_tx_pll_timer_ctr[1]_i_1 
       (.I0(sm_reset_tx_pll_timer_ctr_reg[0]),
        .I1(sm_reset_tx_pll_timer_ctr_reg[1]),
        .O(p_0_in__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair515" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \sm_reset_tx_pll_timer_ctr[2]_i_1 
       (.I0(sm_reset_tx_pll_timer_ctr_reg[1]),
        .I1(sm_reset_tx_pll_timer_ctr_reg[0]),
        .I2(sm_reset_tx_pll_timer_ctr_reg[2]),
        .O(p_0_in__2[2]));
  (* SOFT_HLUTNM = "soft_lutpair500" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \sm_reset_tx_pll_timer_ctr[3]_i_1 
       (.I0(sm_reset_tx_pll_timer_ctr_reg[2]),
        .I1(sm_reset_tx_pll_timer_ctr_reg[0]),
        .I2(sm_reset_tx_pll_timer_ctr_reg[1]),
        .I3(sm_reset_tx_pll_timer_ctr_reg[3]),
        .O(p_0_in__2[3]));
  (* SOFT_HLUTNM = "soft_lutpair500" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \sm_reset_tx_pll_timer_ctr[4]_i_1 
       (.I0(sm_reset_tx_pll_timer_ctr_reg[3]),
        .I1(sm_reset_tx_pll_timer_ctr_reg[1]),
        .I2(sm_reset_tx_pll_timer_ctr_reg[0]),
        .I3(sm_reset_tx_pll_timer_ctr_reg[2]),
        .I4(sm_reset_tx_pll_timer_ctr_reg[4]),
        .O(p_0_in__2[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \sm_reset_tx_pll_timer_ctr[5]_i_1 
       (.I0(sm_reset_tx_pll_timer_ctr_reg[4]),
        .I1(sm_reset_tx_pll_timer_ctr_reg[2]),
        .I2(sm_reset_tx_pll_timer_ctr_reg[0]),
        .I3(sm_reset_tx_pll_timer_ctr_reg[1]),
        .I4(sm_reset_tx_pll_timer_ctr_reg[3]),
        .I5(sm_reset_tx_pll_timer_ctr_reg[5]),
        .O(p_0_in__2[5]));
  (* SOFT_HLUTNM = "soft_lutpair508" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \sm_reset_tx_pll_timer_ctr[6]_i_1 
       (.I0(\sm_reset_tx_pll_timer_ctr[9]_i_4_n_0 ),
        .I1(sm_reset_tx_pll_timer_ctr_reg[6]),
        .O(p_0_in__2[6]));
  (* SOFT_HLUTNM = "soft_lutpair508" *) 
  LUT3 #(
    .INIT(8'hD2)) 
    \sm_reset_tx_pll_timer_ctr[7]_i_1 
       (.I0(sm_reset_tx_pll_timer_ctr_reg[6]),
        .I1(\sm_reset_tx_pll_timer_ctr[9]_i_4_n_0 ),
        .I2(sm_reset_tx_pll_timer_ctr_reg[7]),
        .O(p_0_in__2[7]));
  (* SOFT_HLUTNM = "soft_lutpair498" *) 
  LUT4 #(
    .INIT(16'hDF20)) 
    \sm_reset_tx_pll_timer_ctr[8]_i_1 
       (.I0(sm_reset_tx_pll_timer_ctr_reg[7]),
        .I1(\sm_reset_tx_pll_timer_ctr[9]_i_4_n_0 ),
        .I2(sm_reset_tx_pll_timer_ctr_reg[6]),
        .I3(sm_reset_tx_pll_timer_ctr_reg[8]),
        .O(p_0_in__2[8]));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    \sm_reset_tx_pll_timer_ctr[9]_i_1 
       (.I0(sm_reset_tx_pll_timer_ctr_reg[3]),
        .I1(sm_reset_tx_pll_timer_ctr_reg[2]),
        .I2(\sm_reset_tx_pll_timer_ctr[9]_i_3_n_0 ),
        .I3(sm_reset_tx_pll_timer_ctr_reg[1]),
        .I4(sm_reset_tx_pll_timer_ctr_reg[0]),
        .O(\sm_reset_tx_pll_timer_ctr[9]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair498" *) 
  LUT5 #(
    .INIT(32'hF7FF0800)) 
    \sm_reset_tx_pll_timer_ctr[9]_i_2 
       (.I0(sm_reset_tx_pll_timer_ctr_reg[8]),
        .I1(sm_reset_tx_pll_timer_ctr_reg[6]),
        .I2(\sm_reset_tx_pll_timer_ctr[9]_i_4_n_0 ),
        .I3(sm_reset_tx_pll_timer_ctr_reg[7]),
        .I4(sm_reset_tx_pll_timer_ctr_reg[9]),
        .O(p_0_in__2[9]));
  LUT6 #(
    .INIT(64'hFFFFFFEFFFFFFFFF)) 
    \sm_reset_tx_pll_timer_ctr[9]_i_3 
       (.I0(sm_reset_tx_pll_timer_ctr_reg[8]),
        .I1(sm_reset_tx_pll_timer_ctr_reg[9]),
        .I2(sm_reset_tx_pll_timer_ctr_reg[7]),
        .I3(sm_reset_tx_pll_timer_ctr_reg[6]),
        .I4(sm_reset_tx_pll_timer_ctr_reg[5]),
        .I5(sm_reset_tx_pll_timer_ctr_reg[4]),
        .O(\sm_reset_tx_pll_timer_ctr[9]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \sm_reset_tx_pll_timer_ctr[9]_i_4 
       (.I0(sm_reset_tx_pll_timer_ctr_reg[4]),
        .I1(sm_reset_tx_pll_timer_ctr_reg[2]),
        .I2(sm_reset_tx_pll_timer_ctr_reg[0]),
        .I3(sm_reset_tx_pll_timer_ctr_reg[1]),
        .I4(sm_reset_tx_pll_timer_ctr_reg[3]),
        .I5(sm_reset_tx_pll_timer_ctr_reg[5]),
        .O(\sm_reset_tx_pll_timer_ctr[9]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_tx_pll_timer_ctr_reg[0] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_tx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__2[0]),
        .Q(sm_reset_tx_pll_timer_ctr_reg[0]),
        .R(sm_reset_tx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_tx_pll_timer_ctr_reg[1] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_tx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__2[1]),
        .Q(sm_reset_tx_pll_timer_ctr_reg[1]),
        .R(sm_reset_tx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_tx_pll_timer_ctr_reg[2] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_tx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__2[2]),
        .Q(sm_reset_tx_pll_timer_ctr_reg[2]),
        .R(sm_reset_tx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_tx_pll_timer_ctr_reg[3] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_tx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__2[3]),
        .Q(sm_reset_tx_pll_timer_ctr_reg[3]),
        .R(sm_reset_tx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_tx_pll_timer_ctr_reg[4] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_tx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__2[4]),
        .Q(sm_reset_tx_pll_timer_ctr_reg[4]),
        .R(sm_reset_tx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_tx_pll_timer_ctr_reg[5] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_tx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__2[5]),
        .Q(sm_reset_tx_pll_timer_ctr_reg[5]),
        .R(sm_reset_tx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_tx_pll_timer_ctr_reg[6] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_tx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__2[6]),
        .Q(sm_reset_tx_pll_timer_ctr_reg[6]),
        .R(sm_reset_tx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_tx_pll_timer_ctr_reg[7] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_tx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__2[7]),
        .Q(sm_reset_tx_pll_timer_ctr_reg[7]),
        .R(sm_reset_tx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_tx_pll_timer_ctr_reg[8] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_tx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__2[8]),
        .Q(sm_reset_tx_pll_timer_ctr_reg[8]),
        .R(sm_reset_tx_pll_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_tx_pll_timer_ctr_reg[9] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\sm_reset_tx_pll_timer_ctr[9]_i_1_n_0 ),
        .D(p_0_in__2[9]),
        .Q(sm_reset_tx_pll_timer_ctr_reg[9]),
        .R(sm_reset_tx_pll_timer_clr_reg_n_0));
  LUT6 #(
    .INIT(64'h00000000AAAEAAAA)) 
    sm_reset_tx_pll_timer_sat_i_1
       (.I0(sm_reset_tx_pll_timer_sat),
        .I1(sm_reset_tx_pll_timer_sat_i_2_n_0),
        .I2(sm_reset_tx_pll_timer_ctr_reg[0]),
        .I3(sm_reset_tx_pll_timer_ctr_reg[1]),
        .I4(sm_reset_tx_pll_timer_sat_i_3_n_0),
        .I5(sm_reset_tx_pll_timer_clr_reg_n_0),
        .O(sm_reset_tx_pll_timer_sat_i_1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    sm_reset_tx_pll_timer_sat_i_2
       (.I0(sm_reset_tx_pll_timer_ctr_reg[3]),
        .I1(sm_reset_tx_pll_timer_ctr_reg[2]),
        .O(sm_reset_tx_pll_timer_sat_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    sm_reset_tx_pll_timer_sat_i_3
       (.I0(sm_reset_tx_pll_timer_ctr_reg[7]),
        .I1(sm_reset_tx_pll_timer_ctr_reg[6]),
        .I2(sm_reset_tx_pll_timer_ctr_reg[4]),
        .I3(sm_reset_tx_pll_timer_ctr_reg[5]),
        .I4(sm_reset_tx_pll_timer_ctr_reg[9]),
        .I5(sm_reset_tx_pll_timer_ctr_reg[8]),
        .O(sm_reset_tx_pll_timer_sat_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    sm_reset_tx_pll_timer_sat_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(sm_reset_tx_pll_timer_sat_i_1_n_0),
        .Q(sm_reset_tx_pll_timer_sat),
        .R(1'b0));
  FDSE #(
    .INIT(1'b1)) 
    sm_reset_tx_timer_clr_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(bit_synchronizer_gtwiz_reset_userclk_tx_active_inst_n_1),
        .Q(sm_reset_tx_timer_clr_reg_n_0),
        .S(gtwiz_reset_tx_any_sync));
  LUT3 #(
    .INIT(8'h7F)) 
    \sm_reset_tx_timer_ctr0_inferred__0/i_ 
       (.I0(sm_reset_tx_timer_ctr[2]),
        .I1(sm_reset_tx_timer_ctr[0]),
        .I2(sm_reset_tx_timer_ctr[1]),
        .O(p_0_in__1));
  LUT1 #(
    .INIT(2'h1)) 
    \sm_reset_tx_timer_ctr[0]_i_1 
       (.I0(sm_reset_tx_timer_ctr[0]),
        .O(p_1_in[0]));
  (* SOFT_HLUTNM = "soft_lutpair511" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \sm_reset_tx_timer_ctr[1]_i_1 
       (.I0(sm_reset_tx_timer_ctr[0]),
        .I1(sm_reset_tx_timer_ctr[1]),
        .O(p_1_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair511" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \sm_reset_tx_timer_ctr[2]_i_1 
       (.I0(sm_reset_tx_timer_ctr[0]),
        .I1(sm_reset_tx_timer_ctr[1]),
        .I2(sm_reset_tx_timer_ctr[2]),
        .O(p_1_in[2]));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_tx_timer_ctr_reg[0] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(p_0_in__1),
        .D(p_1_in[0]),
        .Q(sm_reset_tx_timer_ctr[0]),
        .R(sm_reset_tx_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_tx_timer_ctr_reg[1] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(p_0_in__1),
        .D(p_1_in[1]),
        .Q(sm_reset_tx_timer_ctr[1]),
        .R(sm_reset_tx_timer_clr_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \sm_reset_tx_timer_ctr_reg[2] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(p_0_in__1),
        .D(p_1_in[2]),
        .Q(sm_reset_tx_timer_ctr[2]),
        .R(sm_reset_tx_timer_clr_reg_n_0));
  (* SOFT_HLUTNM = "soft_lutpair504" *) 
  LUT5 #(
    .INIT(32'h0000FF80)) 
    sm_reset_tx_timer_sat_i_1
       (.I0(sm_reset_tx_timer_ctr[2]),
        .I1(sm_reset_tx_timer_ctr[0]),
        .I2(sm_reset_tx_timer_ctr[1]),
        .I3(sm_reset_tx_timer_sat),
        .I4(sm_reset_tx_timer_clr_reg_n_0),
        .O(sm_reset_tx_timer_sat_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    sm_reset_tx_timer_sat_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(sm_reset_tx_timer_sat_i_1_n_0),
        .Q(sm_reset_tx_timer_sat),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair507" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    txuserrdy_out_i_3
       (.I0(sm_reset_tx[1]),
        .I1(sm_reset_tx[2]),
        .I2(sm_reset_tx_timer_clr_reg_n_0),
        .I3(sm_reset_tx_timer_sat),
        .O(txuserrdy_out_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    txuserrdy_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(reset_synchronizer_gtwiz_reset_tx_any_inst_n_3),
        .Q(\gen_gtwizard_gthe4.txuserrdy_int ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_reset_inv_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_inv_synchronizer
   (gtwiz_reset_rx_done_out,
    rxusrclk2_in,
    rst_in_sync2_reg_0);
  output [0:0]gtwiz_reset_rx_done_out;
  input [0:0]rxusrclk2_in;
  input rst_in_sync2_reg_0;

  wire [0:0]gtwiz_reset_rx_done_out;
  (* async_reg = "true" *) wire rst_in_meta;
  wire rst_in_out_i_1__0_n_0;
  (* async_reg = "true" *) wire rst_in_sync1;
  (* async_reg = "true" *) wire rst_in_sync2;
  wire rst_in_sync2_reg_0;
  (* async_reg = "true" *) wire rst_in_sync3;
  wire [0:0]rxusrclk2_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    rst_in_meta_reg
       (.C(rxusrclk2_in),
        .CE(1'b1),
        .CLR(rst_in_out_i_1__0_n_0),
        .D(1'b1),
        .Q(rst_in_meta));
  LUT1 #(
    .INIT(2'h1)) 
    rst_in_out_i_1__0
       (.I0(rst_in_sync2_reg_0),
        .O(rst_in_out_i_1__0_n_0));
  FDCE #(
    .INIT(1'b0)) 
    rst_in_out_reg
       (.C(rxusrclk2_in),
        .CE(1'b1),
        .CLR(rst_in_out_i_1__0_n_0),
        .D(rst_in_sync3),
        .Q(gtwiz_reset_rx_done_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    rst_in_sync1_reg
       (.C(rxusrclk2_in),
        .CE(1'b1),
        .CLR(rst_in_out_i_1__0_n_0),
        .D(rst_in_meta),
        .Q(rst_in_sync1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    rst_in_sync2_reg
       (.C(rxusrclk2_in),
        .CE(1'b1),
        .CLR(rst_in_out_i_1__0_n_0),
        .D(rst_in_sync1),
        .Q(rst_in_sync2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    rst_in_sync3_reg
       (.C(rxusrclk2_in),
        .CE(1'b1),
        .CLR(rst_in_out_i_1__0_n_0),
        .D(rst_in_sync2),
        .Q(rst_in_sync3));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_reset_inv_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_inv_synchronizer_19
   (gtwiz_reset_tx_done_out,
    txusrclk2_in,
    rst_in_sync2_reg_0);
  output [0:0]gtwiz_reset_tx_done_out;
  input [0:0]txusrclk2_in;
  input rst_in_sync2_reg_0;

  wire [0:0]gtwiz_reset_tx_done_out;
  (* async_reg = "true" *) wire rst_in_meta;
  wire rst_in_out_i_1_n_0;
  (* async_reg = "true" *) wire rst_in_sync1;
  (* async_reg = "true" *) wire rst_in_sync2;
  wire rst_in_sync2_reg_0;
  (* async_reg = "true" *) wire rst_in_sync3;
  wire [0:0]txusrclk2_in;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    rst_in_meta_reg
       (.C(txusrclk2_in),
        .CE(1'b1),
        .CLR(rst_in_out_i_1_n_0),
        .D(1'b1),
        .Q(rst_in_meta));
  LUT1 #(
    .INIT(2'h1)) 
    rst_in_out_i_1
       (.I0(rst_in_sync2_reg_0),
        .O(rst_in_out_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    rst_in_out_reg
       (.C(txusrclk2_in),
        .CE(1'b1),
        .CLR(rst_in_out_i_1_n_0),
        .D(rst_in_sync3),
        .Q(gtwiz_reset_tx_done_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    rst_in_sync1_reg
       (.C(txusrclk2_in),
        .CE(1'b1),
        .CLR(rst_in_out_i_1_n_0),
        .D(rst_in_meta),
        .Q(rst_in_sync1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    rst_in_sync2_reg
       (.C(txusrclk2_in),
        .CE(1'b1),
        .CLR(rst_in_out_i_1_n_0),
        .D(rst_in_sync1),
        .Q(rst_in_sync2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    rst_in_sync3_reg
       (.C(txusrclk2_in),
        .CE(1'b1),
        .CLR(rst_in_out_i_1_n_0),
        .D(rst_in_sync2),
        .Q(rst_in_sync3));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_reset_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer
   (gtwiz_reset_all_sync,
    gtwiz_reset_clk_freerun_in,
    gtwiz_reset_all_in);
  output gtwiz_reset_all_sync;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input [0:0]gtwiz_reset_all_in;

  wire [0:0]gtwiz_reset_all_in;
  wire gtwiz_reset_all_sync;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  (* async_reg = "true" *) wire rst_in_meta;
  (* async_reg = "true" *) wire rst_in_sync1;
  (* async_reg = "true" *) wire rst_in_sync2;
  (* async_reg = "true" *) wire rst_in_sync3;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(1'b0),
        .PRE(gtwiz_reset_all_in),
        .Q(rst_in_meta));
  FDPE #(
    .INIT(1'b0)) 
    rst_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync3),
        .PRE(gtwiz_reset_all_in),
        .Q(gtwiz_reset_all_sync));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_meta),
        .PRE(gtwiz_reset_all_in),
        .Q(rst_in_sync1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync1),
        .PRE(gtwiz_reset_all_in),
        .Q(rst_in_sync2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync2),
        .PRE(gtwiz_reset_all_in),
        .Q(rst_in_sync3));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_reset_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_13
   (gtwiz_reset_rx_any_sync,
    \FSM_sequential_sm_reset_rx_reg[1] ,
    \FSM_sequential_sm_reset_rx_reg[1]_0 ,
    \FSM_sequential_sm_reset_rx_reg[1]_1 ,
    gtwiz_reset_clk_freerun_in,
    Q,
    \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int ,
    rxprogdivreset_out_reg,
    \gen_gtwizard_gthe4.rxprogdivreset_int ,
    plllock_rx_sync,
    gtrxreset_out_reg,
    \gen_gtwizard_gthe4.gtrxreset_int ,
    rst_in_out_reg_0,
    gtwiz_reset_rx_datapath_in,
    gtwiz_reset_rx_pll_and_datapath_in,
    rst_in_out_reg_1);
  output gtwiz_reset_rx_any_sync;
  output \FSM_sequential_sm_reset_rx_reg[1] ;
  output \FSM_sequential_sm_reset_rx_reg[1]_0 ;
  output \FSM_sequential_sm_reset_rx_reg[1]_1 ;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input [2:0]Q;
  input \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int ;
  input rxprogdivreset_out_reg;
  input \gen_gtwizard_gthe4.rxprogdivreset_int ;
  input plllock_rx_sync;
  input gtrxreset_out_reg;
  input \gen_gtwizard_gthe4.gtrxreset_int ;
  input rst_in_out_reg_0;
  input [0:0]gtwiz_reset_rx_datapath_in;
  input [0:0]gtwiz_reset_rx_pll_and_datapath_in;
  input rst_in_out_reg_1;

  wire \FSM_sequential_sm_reset_rx_reg[1] ;
  wire \FSM_sequential_sm_reset_rx_reg[1]_0 ;
  wire \FSM_sequential_sm_reset_rx_reg[1]_1 ;
  wire [2:0]Q;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int ;
  wire \gen_gtwizard_gthe4.gtrxreset_int ;
  wire \gen_gtwizard_gthe4.rxprogdivreset_int ;
  wire gtrxreset_out_i_2_n_0;
  wire gtrxreset_out_reg;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire gtwiz_reset_rx_any;
  wire gtwiz_reset_rx_any_sync;
  wire [0:0]gtwiz_reset_rx_datapath_in;
  wire [0:0]gtwiz_reset_rx_pll_and_datapath_in;
  wire plllock_rx_sync;
  (* async_reg = "true" *) wire rst_in_meta;
  wire rst_in_out_reg_0;
  wire rst_in_out_reg_1;
  (* async_reg = "true" *) wire rst_in_sync1;
  (* async_reg = "true" *) wire rst_in_sync2;
  (* async_reg = "true" *) wire rst_in_sync3;
  wire rxprogdivreset_out_reg;

  LUT6 #(
    .INIT(64'h7FFFFFFF44884488)) 
    gtrxreset_out_i_1
       (.I0(Q[1]),
        .I1(gtrxreset_out_i_2_n_0),
        .I2(plllock_rx_sync),
        .I3(Q[0]),
        .I4(gtrxreset_out_reg),
        .I5(\gen_gtwizard_gthe4.gtrxreset_int ),
        .O(\FSM_sequential_sm_reset_rx_reg[1]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair495" *) 
  LUT2 #(
    .INIT(4'h1)) 
    gtrxreset_out_i_2
       (.I0(gtwiz_reset_rx_any_sync),
        .I1(Q[2]),
        .O(gtrxreset_out_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair495" *) 
  LUT5 #(
    .INIT(32'hFDFF0100)) 
    pllreset_rx_out_i_1
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(gtwiz_reset_rx_any_sync),
        .I3(Q[0]),
        .I4(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int ),
        .O(\FSM_sequential_sm_reset_rx_reg[1] ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    rst_in_meta_i_1__1
       (.I0(rst_in_out_reg_0),
        .I1(gtwiz_reset_rx_datapath_in),
        .I2(gtwiz_reset_rx_pll_and_datapath_in),
        .I3(rst_in_out_reg_1),
        .O(gtwiz_reset_rx_any));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(1'b0),
        .PRE(gtwiz_reset_rx_any),
        .Q(rst_in_meta));
  FDPE #(
    .INIT(1'b0)) 
    rst_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync3),
        .PRE(gtwiz_reset_rx_any),
        .Q(gtwiz_reset_rx_any_sync));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_meta),
        .PRE(gtwiz_reset_rx_any),
        .Q(rst_in_sync1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync1),
        .PRE(gtwiz_reset_rx_any),
        .Q(rst_in_sync2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync2),
        .PRE(gtwiz_reset_rx_any),
        .Q(rst_in_sync3));
  LUT6 #(
    .INIT(64'hFFFBFFFF00120012)) 
    rxprogdivreset_out_i_1
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(gtwiz_reset_rx_any_sync),
        .I4(rxprogdivreset_out_reg),
        .I5(\gen_gtwizard_gthe4.rxprogdivreset_int ),
        .O(\FSM_sequential_sm_reset_rx_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_reset_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_14
   (in0,
    gtwiz_reset_clk_freerun_in,
    gtwiz_reset_rx_datapath_in,
    rst_in_out_reg_0);
  output in0;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input [0:0]gtwiz_reset_rx_datapath_in;
  input rst_in_out_reg_0;

  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire [0:0]gtwiz_reset_rx_datapath_in;
  wire in0;
  wire rst_in0_1;
  (* async_reg = "true" *) wire rst_in_meta;
  wire rst_in_out_reg_0;
  (* async_reg = "true" *) wire rst_in_sync1;
  (* async_reg = "true" *) wire rst_in_sync2;
  (* async_reg = "true" *) wire rst_in_sync3;

  LUT2 #(
    .INIT(4'hE)) 
    rst_in_meta_i_1__3
       (.I0(gtwiz_reset_rx_datapath_in),
        .I1(rst_in_out_reg_0),
        .O(rst_in0_1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst_in0_1),
        .Q(rst_in_meta));
  FDPE #(
    .INIT(1'b0)) 
    rst_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync3),
        .PRE(rst_in0_1),
        .Q(in0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_meta),
        .PRE(rst_in0_1),
        .Q(rst_in_sync1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync1),
        .PRE(rst_in0_1),
        .Q(rst_in_sync2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync2),
        .PRE(rst_in0_1),
        .Q(rst_in_sync3));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_reset_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_15
   (in0,
    gtwiz_reset_clk_freerun_in,
    rst_in_out_reg_0,
    gtwiz_reset_rx_pll_and_datapath_in);
  output in0;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input rst_in_out_reg_0;
  input [0:0]gtwiz_reset_rx_pll_and_datapath_in;

  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire [0:0]gtwiz_reset_rx_pll_and_datapath_in;
  wire in0;
  wire p_0_in;
  (* async_reg = "true" *) wire rst_in_meta;
  wire rst_in_out_reg_0;
  (* async_reg = "true" *) wire rst_in_sync1;
  (* async_reg = "true" *) wire rst_in_sync2;
  (* async_reg = "true" *) wire rst_in_sync3;

  LUT2 #(
    .INIT(4'hE)) 
    rst_in_meta_i_1__2
       (.I0(rst_in_out_reg_0),
        .I1(gtwiz_reset_rx_pll_and_datapath_in),
        .O(p_0_in));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_0_in),
        .Q(rst_in_meta));
  FDPE #(
    .INIT(1'b0)) 
    rst_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync3),
        .PRE(p_0_in),
        .Q(in0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_meta),
        .PRE(p_0_in),
        .Q(rst_in_sync1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync1),
        .PRE(p_0_in),
        .Q(rst_in_sync2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync2),
        .PRE(p_0_in),
        .Q(rst_in_sync3));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_reset_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_16
   (gtwiz_reset_tx_any_sync,
    \FSM_sequential_sm_reset_tx_reg[1] ,
    \FSM_sequential_sm_reset_tx_reg[1]_0 ,
    \FSM_sequential_sm_reset_tx_reg[0] ,
    gtwiz_reset_clk_freerun_in,
    Q,
    \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int ,
    plllock_tx_sync,
    gttxreset_out_reg,
    \gen_gtwizard_gthe4.gttxreset_int ,
    txuserrdy_out_reg,
    gtwiz_reset_userclk_tx_active_sync,
    \gen_gtwizard_gthe4.txuserrdy_int ,
    gtwiz_reset_tx_datapath_in,
    gtwiz_reset_tx_pll_and_datapath_in,
    rst_in_out_reg_0);
  output gtwiz_reset_tx_any_sync;
  output \FSM_sequential_sm_reset_tx_reg[1] ;
  output \FSM_sequential_sm_reset_tx_reg[1]_0 ;
  output \FSM_sequential_sm_reset_tx_reg[0] ;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input [2:0]Q;
  input \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int ;
  input plllock_tx_sync;
  input gttxreset_out_reg;
  input \gen_gtwizard_gthe4.gttxreset_int ;
  input txuserrdy_out_reg;
  input gtwiz_reset_userclk_tx_active_sync;
  input \gen_gtwizard_gthe4.txuserrdy_int ;
  input [0:0]gtwiz_reset_tx_datapath_in;
  input [0:0]gtwiz_reset_tx_pll_and_datapath_in;
  input rst_in_out_reg_0;

  wire \FSM_sequential_sm_reset_tx_reg[0] ;
  wire \FSM_sequential_sm_reset_tx_reg[1] ;
  wire \FSM_sequential_sm_reset_tx_reg[1]_0 ;
  wire [2:0]Q;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int ;
  wire \gen_gtwizard_gthe4.gttxreset_int ;
  wire \gen_gtwizard_gthe4.txuserrdy_int ;
  wire gttxreset_out_i_2_n_0;
  wire gttxreset_out_reg;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire gtwiz_reset_tx_any;
  wire gtwiz_reset_tx_any_sync;
  wire [0:0]gtwiz_reset_tx_datapath_in;
  wire [0:0]gtwiz_reset_tx_pll_and_datapath_in;
  wire gtwiz_reset_userclk_tx_active_sync;
  wire plllock_tx_sync;
  (* async_reg = "true" *) wire rst_in_meta;
  wire rst_in_out_reg_0;
  (* async_reg = "true" *) wire rst_in_sync1;
  (* async_reg = "true" *) wire rst_in_sync2;
  (* async_reg = "true" *) wire rst_in_sync3;
  wire txuserrdy_out_i_2_n_0;
  wire txuserrdy_out_reg;

  LUT6 #(
    .INIT(64'h7FFFFFFF44884488)) 
    gttxreset_out_i_1
       (.I0(Q[1]),
        .I1(gttxreset_out_i_2_n_0),
        .I2(plllock_tx_sync),
        .I3(Q[0]),
        .I4(gttxreset_out_reg),
        .I5(\gen_gtwizard_gthe4.gttxreset_int ),
        .O(\FSM_sequential_sm_reset_tx_reg[1]_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    gttxreset_out_i_2
       (.I0(gtwiz_reset_tx_any_sync),
        .I1(Q[2]),
        .O(gttxreset_out_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair496" *) 
  LUT5 #(
    .INIT(32'hFDFF0100)) 
    pllreset_tx_out_i_1
       (.I0(Q[1]),
        .I1(Q[2]),
        .I2(gtwiz_reset_tx_any_sync),
        .I3(Q[0]),
        .I4(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int ),
        .O(\FSM_sequential_sm_reset_tx_reg[1] ));
  LUT3 #(
    .INIT(8'hFE)) 
    rst_in_meta_i_1
       (.I0(gtwiz_reset_tx_datapath_in),
        .I1(gtwiz_reset_tx_pll_and_datapath_in),
        .I2(rst_in_out_reg_0),
        .O(gtwiz_reset_tx_any));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(1'b0),
        .PRE(gtwiz_reset_tx_any),
        .Q(rst_in_meta));
  FDPE #(
    .INIT(1'b0)) 
    rst_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync3),
        .PRE(gtwiz_reset_tx_any),
        .Q(gtwiz_reset_tx_any_sync));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_meta),
        .PRE(gtwiz_reset_tx_any),
        .Q(rst_in_sync1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync1),
        .PRE(gtwiz_reset_tx_any),
        .Q(rst_in_sync2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync2),
        .PRE(gtwiz_reset_tx_any),
        .Q(rst_in_sync3));
  LUT6 #(
    .INIT(64'hDD55DD5588008C00)) 
    txuserrdy_out_i_1
       (.I0(txuserrdy_out_i_2_n_0),
        .I1(txuserrdy_out_reg),
        .I2(Q[0]),
        .I3(gtwiz_reset_userclk_tx_active_sync),
        .I4(gtwiz_reset_tx_any_sync),
        .I5(\gen_gtwizard_gthe4.txuserrdy_int ),
        .O(\FSM_sequential_sm_reset_tx_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair496" *) 
  LUT4 #(
    .INIT(16'h0110)) 
    txuserrdy_out_i_2
       (.I0(Q[2]),
        .I1(gtwiz_reset_tx_any_sync),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(txuserrdy_out_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_reset_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_17
   (in0,
    gtwiz_reset_clk_freerun_in,
    gtwiz_reset_tx_datapath_in);
  output in0;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input [0:0]gtwiz_reset_tx_datapath_in;

  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire [0:0]gtwiz_reset_tx_datapath_in;
  wire in0;
  (* async_reg = "true" *) wire rst_in_meta;
  (* async_reg = "true" *) wire rst_in_sync1;
  (* async_reg = "true" *) wire rst_in_sync2;
  (* async_reg = "true" *) wire rst_in_sync3;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(1'b0),
        .PRE(gtwiz_reset_tx_datapath_in),
        .Q(rst_in_meta));
  FDPE #(
    .INIT(1'b0)) 
    rst_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync3),
        .PRE(gtwiz_reset_tx_datapath_in),
        .Q(in0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_meta),
        .PRE(gtwiz_reset_tx_datapath_in),
        .Q(rst_in_sync1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync1),
        .PRE(gtwiz_reset_tx_datapath_in),
        .Q(rst_in_sync2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync2),
        .PRE(gtwiz_reset_tx_datapath_in),
        .Q(rst_in_sync3));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_reset_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_18
   (in0,
    gtwiz_reset_clk_freerun_in,
    rst_in_out_reg_0,
    gtwiz_reset_tx_pll_and_datapath_in);
  output in0;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input rst_in_out_reg_0;
  input [0:0]gtwiz_reset_tx_pll_and_datapath_in;

  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire [0:0]gtwiz_reset_tx_pll_and_datapath_in;
  wire in0;
  wire p_1_in_0;
  (* async_reg = "true" *) wire rst_in_meta;
  wire rst_in_out_reg_0;
  (* async_reg = "true" *) wire rst_in_sync1;
  (* async_reg = "true" *) wire rst_in_sync2;
  (* async_reg = "true" *) wire rst_in_sync3;

  LUT2 #(
    .INIT(4'hE)) 
    rst_in_meta_i_1__0
       (.I0(rst_in_out_reg_0),
        .I1(gtwiz_reset_tx_pll_and_datapath_in),
        .O(p_1_in_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_1_in_0),
        .Q(rst_in_meta));
  FDPE #(
    .INIT(1'b0)) 
    rst_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync3),
        .PRE(p_1_in_0),
        .Q(in0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_meta),
        .PRE(p_1_in_0),
        .Q(rst_in_sync1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync1),
        .PRE(p_1_in_0),
        .Q(rst_in_sync2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync2),
        .PRE(p_1_in_0),
        .Q(rst_in_sync3));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_reset_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_20
   (in0,
    gtwiz_reset_clk_freerun_in,
    rst_in0);
  output in0;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input rst_in0;

  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire in0;
  wire rst_in0;
  (* async_reg = "true" *) wire rst_in_meta;
  (* async_reg = "true" *) wire rst_in_sync1;
  (* async_reg = "true" *) wire rst_in_sync2;
  (* async_reg = "true" *) wire rst_in_sync3;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_meta_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(1'b0),
        .PRE(rst_in0),
        .Q(rst_in_meta));
  FDPE #(
    .INIT(1'b0)) 
    rst_in_out_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync3),
        .PRE(rst_in0),
        .Q(in0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync1_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_meta),
        .PRE(rst_in0),
        .Q(rst_in_sync1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync2_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync1),
        .PRE(rst_in0),
        .Q(rst_in_sync2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync3_reg
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(rst_in_sync2),
        .PRE(rst_in0),
        .Q(rst_in_sync3));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_reset_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_22
   (drpclk_in);
  input [0:0]drpclk_in;

  wire [0:0]drpclk_in;
  (* async_reg = "true" *) wire rst_in_meta;
  (* async_reg = "true" *) wire rst_in_sync1;
  (* async_reg = "true" *) wire rst_in_sync2;
  (* async_reg = "true" *) wire rst_in_sync3;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_meta_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(1'b0),
        .PRE(1'b1),
        .Q(rst_in_meta));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync1_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(rst_in_meta),
        .PRE(1'b1),
        .Q(rst_in_sync1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync2_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(rst_in_sync1),
        .PRE(1'b1),
        .Q(rst_in_sync2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync3_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(rst_in_sync2),
        .PRE(1'b1),
        .Q(rst_in_sync3));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_reset_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_23
   (cal_on_tx_reset_in_sync,
    rst_in_out_reg_0,
    drpclk_in,
    RESET_IN,
    status_store_reg);
  output cal_on_tx_reset_in_sync;
  output rst_in_out_reg_0;
  input [0:0]drpclk_in;
  input RESET_IN;
  input [0:0]status_store_reg;

  wire RESET_IN;
  wire cal_on_tx_reset_in_sync;
  wire [0:0]drpclk_in;
  (* async_reg = "true" *) wire rst_in_meta;
  wire rst_in_out_reg_0;
  (* async_reg = "true" *) wire rst_in_sync1;
  (* async_reg = "true" *) wire rst_in_sync2;
  (* async_reg = "true" *) wire rst_in_sync3;
  wire [0:0]status_store_reg;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_meta_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_IN),
        .Q(rst_in_meta));
  FDPE #(
    .INIT(1'b0)) 
    rst_in_out_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(rst_in_sync3),
        .PRE(RESET_IN),
        .Q(cal_on_tx_reset_in_sync));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync1_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(rst_in_meta),
        .PRE(RESET_IN),
        .Q(rst_in_sync1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync2_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(rst_in_sync1),
        .PRE(RESET_IN),
        .Q(rst_in_sync2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync3_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(rst_in_sync2),
        .PRE(RESET_IN),
        .Q(rst_in_sync3));
  LUT2 #(
    .INIT(4'hB)) 
    status_store_i_3
       (.I0(cal_on_tx_reset_in_sync),
        .I1(status_store_reg),
        .O(rst_in_out_reg_0));
endmodule

(* ORIG_REF_NAME = "gtwizard_ultrascale_v1_7_6_reset_synchronizer" *) 
module quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_reset_synchronizer_30
   (rst_in_out,
    txoutclkmon,
    out);
  output rst_in_out;
  input txoutclkmon;
  input out;

  wire out;
  (* async_reg = "true" *) wire rst_in_meta;
  wire rst_in_out;
  (* async_reg = "true" *) wire rst_in_sync1;
  (* async_reg = "true" *) wire rst_in_sync2;
  (* async_reg = "true" *) wire rst_in_sync3;
  wire txoutclkmon;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_meta_reg
       (.C(txoutclkmon),
        .CE(1'b1),
        .D(1'b0),
        .PRE(out),
        .Q(rst_in_meta));
  FDPE #(
    .INIT(1'b0)) 
    rst_in_out_reg
       (.C(txoutclkmon),
        .CE(1'b1),
        .D(rst_in_sync3),
        .PRE(out),
        .Q(rst_in_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync1_reg
       (.C(txoutclkmon),
        .CE(1'b1),
        .D(rst_in_meta),
        .PRE(out),
        .Q(rst_in_sync1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync2_reg
       (.C(txoutclkmon),
        .CE(1'b1),
        .D(rst_in_sync1),
        .PRE(out),
        .Q(rst_in_sync2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    rst_in_sync3_reg
       (.C(txoutclkmon),
        .CE(1'b1),
        .D(rst_in_sync2),
        .PRE(out),
        .Q(rst_in_sync3));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_block
   (reset,
    gtrefclk,
    txp,
    txn,
    rxp,
    rxn,
    txoutclk,
    rxoutclk,
    resetdone,
    userclk,
    userclk2,
    rxuserclk,
    rxuserclk2,
    independent_clock_bufg,
    pma_reset,
    mmcm_locked,
    sgmii_clk_en_ch0,
    gmii_txd_ch0,
    gmii_tx_en_ch0,
    gmii_tx_er_ch0,
    gmii_rxd_ch0,
    gmii_rx_dv_ch0,
    gmii_rx_er_ch0,
    mdc_ch0,
    mdio_i_ch0,
    mdio_o_ch0,
    mdio_t_ch0,
    phyad_ch0,
    an_interrupt_ch0,
    link_timer_value_ch0,
    speed_is_10_100_ch0,
    speed_is_100_ch0,
    status_vector_ch0,
    sgmii_clk_en_ch1,
    gmii_txd_ch1,
    gmii_tx_en_ch1,
    gmii_tx_er_ch1,
    gmii_rxd_ch1,
    gmii_rx_dv_ch1,
    gmii_rx_er_ch1,
    mdc_ch1,
    mdio_i_ch1,
    mdio_o_ch1,
    mdio_t_ch1,
    phyad_ch1,
    an_interrupt_ch1,
    link_timer_value_ch1,
    speed_is_10_100_ch1,
    speed_is_100_ch1,
    status_vector_ch1,
    sgmii_clk_en_ch2,
    gmii_txd_ch2,
    gmii_tx_en_ch2,
    gmii_tx_er_ch2,
    gmii_rxd_ch2,
    gmii_rx_dv_ch2,
    gmii_rx_er_ch2,
    mdc_ch2,
    mdio_i_ch2,
    mdio_o_ch2,
    mdio_t_ch2,
    phyad_ch2,
    an_interrupt_ch2,
    link_timer_value_ch2,
    speed_is_10_100_ch2,
    speed_is_100_ch2,
    status_vector_ch2,
    sgmii_clk_en_ch3,
    gmii_txd_ch3,
    gmii_tx_en_ch3,
    gmii_tx_er_ch3,
    gmii_rxd_ch3,
    gmii_rx_dv_ch3,
    gmii_rx_er_ch3,
    mdc_ch3,
    mdio_i_ch3,
    mdio_o_ch3,
    mdio_t_ch3,
    phyad_ch3,
    an_interrupt_ch3,
    link_timer_value_ch3,
    speed_is_10_100_ch3,
    speed_is_100_ch3,
    status_vector_ch3,
    independent_clock_bufgdiv4,
    gt0_powergood_out,
    signal_detect);
  input reset;
  input gtrefclk;
  output txp;
  output txn;
  input rxp;
  input rxn;
  output txoutclk;
  output rxoutclk;
  output resetdone;
  input userclk;
  input userclk2;
  input rxuserclk;
  input rxuserclk2;
  input independent_clock_bufg;
  input pma_reset;
  input mmcm_locked;
  output sgmii_clk_en_ch0;
  input [7:0]gmii_txd_ch0;
  input gmii_tx_en_ch0;
  input gmii_tx_er_ch0;
  output [7:0]gmii_rxd_ch0;
  output gmii_rx_dv_ch0;
  output gmii_rx_er_ch0;
  input mdc_ch0;
  input mdio_i_ch0;
  output mdio_o_ch0;
  output mdio_t_ch0;
  input [4:0]phyad_ch0;
  output an_interrupt_ch0;
  input [8:0]link_timer_value_ch0;
  input speed_is_10_100_ch0;
  input speed_is_100_ch0;
  output [15:0]status_vector_ch0;
  output sgmii_clk_en_ch1;
  input [7:0]gmii_txd_ch1;
  input gmii_tx_en_ch1;
  input gmii_tx_er_ch1;
  output [7:0]gmii_rxd_ch1;
  output gmii_rx_dv_ch1;
  output gmii_rx_er_ch1;
  input mdc_ch1;
  input mdio_i_ch1;
  output mdio_o_ch1;
  output mdio_t_ch1;
  input [4:0]phyad_ch1;
  output an_interrupt_ch1;
  input [8:0]link_timer_value_ch1;
  input speed_is_10_100_ch1;
  input speed_is_100_ch1;
  output [15:0]status_vector_ch1;
  output sgmii_clk_en_ch2;
  input [7:0]gmii_txd_ch2;
  input gmii_tx_en_ch2;
  input gmii_tx_er_ch2;
  output [7:0]gmii_rxd_ch2;
  output gmii_rx_dv_ch2;
  output gmii_rx_er_ch2;
  input mdc_ch2;
  input mdio_i_ch2;
  output mdio_o_ch2;
  output mdio_t_ch2;
  input [4:0]phyad_ch2;
  output an_interrupt_ch2;
  input [8:0]link_timer_value_ch2;
  input speed_is_10_100_ch2;
  input speed_is_100_ch2;
  output [15:0]status_vector_ch2;
  output sgmii_clk_en_ch3;
  input [7:0]gmii_txd_ch3;
  input gmii_tx_en_ch3;
  input gmii_tx_er_ch3;
  output [7:0]gmii_rxd_ch3;
  output gmii_rx_dv_ch3;
  output gmii_rx_er_ch3;
  input mdc_ch3;
  input mdio_i_ch3;
  output mdio_o_ch3;
  output mdio_t_ch3;
  input [4:0]phyad_ch3;
  output an_interrupt_ch3;
  input [8:0]link_timer_value_ch3;
  input speed_is_10_100_ch3;
  input speed_is_100_ch3;
  output [15:0]status_vector_ch3;
  input independent_clock_bufgdiv4;
  output gt0_powergood_out;
  input signal_detect;

  wire \<const0> ;
  wire an_interrupt_ch0;
  wire an_interrupt_ch1;
  wire an_interrupt_ch2;
  wire an_interrupt_ch3;
  wire enablealign;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_ch0_int;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_ch1_int;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_ch2_int;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_dv_ch3_int;
  wire gmii_rx_dv_out;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_ch0_int;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_ch1_int;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_ch2_int;
  wire gmii_rx_er_ch3;
  wire gmii_rx_er_ch3_int;
  wire gmii_rx_er_out;
  wire [7:0]gmii_rxd_ch0;
  wire [7:0]gmii_rxd_ch0_int;
  wire [7:0]gmii_rxd_ch1;
  wire [7:0]gmii_rxd_ch1_int;
  wire [7:0]gmii_rxd_ch2;
  wire [7:0]gmii_rxd_ch2_int;
  wire [7:0]gmii_rxd_ch3;
  wire [7:0]gmii_rxd_ch3_int;
  wire [7:0]gmii_rxd_out;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch0_int;
  wire gmii_tx_en_ch0_int1;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch1_int;
  wire gmii_tx_en_ch1_int1;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch2_int;
  wire gmii_tx_en_ch2_int1;
  wire gmii_tx_en_ch3;
  wire gmii_tx_en_ch3_int;
  wire gmii_tx_en_ch3_int1;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch0_int;
  wire gmii_tx_er_ch0_int1;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch1_int;
  wire gmii_tx_er_ch1_int1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch2_int;
  wire gmii_tx_er_ch2_int1;
  wire gmii_tx_er_ch3;
  wire gmii_tx_er_ch3_int;
  wire gmii_tx_er_ch3_int1;
  wire [7:0]gmii_txd_ch0;
  wire [7:0]gmii_txd_ch0_int;
  wire [7:0]gmii_txd_ch0_int1;
  wire [7:0]gmii_txd_ch1;
  wire [7:0]gmii_txd_ch1_int;
  wire [7:0]gmii_txd_ch1_int1;
  wire [7:0]gmii_txd_ch2;
  wire [7:0]gmii_txd_ch2_int;
  wire [7:0]gmii_txd_ch2_int1;
  wire [7:0]gmii_txd_ch3;
  wire [7:0]gmii_txd_ch3_int;
  wire [7:0]gmii_txd_ch3_int1;
  wire gt0_powergood_out;
  wire gt0_resetdone_out_sig;
  wire gt0_rxresetdone_out_sig;
  wire gt0_rxresetdone_out_sync;
  wire gt0_txresetdone_out_sig;
  wire gtrefclk;
  wire independent_clock_bufgdiv4;
  wire [8:0]link_timer_value_ch0;
  wire [8:0]link_timer_value_ch1;
  wire [8:0]link_timer_value_ch2;
  wire [8:0]link_timer_value_ch3;
  wire mdc_ch0;
  wire mdc_ch1;
  wire mdc_ch2;
  wire mdc_ch3;
  wire mdio_i_ch0;
  wire mdio_i_ch1;
  wire mdio_i_ch2;
  wire mdio_i_ch3;
  wire mdio_o_ch0;
  wire mdio_o_ch1;
  wire mdio_o_ch2;
  wire mdio_o_ch3;
  wire mdio_t_ch0;
  wire mdio_t_ch1;
  wire mdio_t_ch2;
  wire mdio_t_ch3;
  wire mgt_rx_reset;
  wire mgt_tx_reset;
  wire [4:0]phyad_ch0;
  wire [4:0]phyad_ch1;
  wire [4:0]phyad_ch2;
  wire [4:0]phyad_ch3;
  wire plllock;
  wire pma_reset;
  wire powerdown;
  wire qsgmii_logic_rx_n_16;
  wire qsgmii_logic_rx_n_17;
  wire qsgmii_logic_rx_n_18;
  wire qsgmii_logic_rx_n_19;
  wire qsgmii_logic_rx_n_2;
  wire qsgmii_logic_rx_n_20;
  wire qsgmii_logic_rx_n_21;
  wire qsgmii_logic_rx_n_22;
  wire qsgmii_logic_rx_n_23;
  wire qsgmii_logic_rx_n_24;
  wire qsgmii_logic_rx_n_25;
  wire qsgmii_logic_rx_n_26;
  wire qsgmii_logic_rx_n_27;
  wire qsgmii_logic_rx_n_28;
  wire qsgmii_logic_rx_n_29;
  wire qsgmii_logic_rx_n_3;
  wire qsgmii_logic_rx_n_30;
  wire qsgmii_logic_rx_n_31;
  wire qsgmii_logic_rx_n_32;
  wire qsgmii_logic_rx_n_33;
  wire qsgmii_logic_rx_n_34;
  wire qsgmii_logic_rx_n_35;
  wire qsgmii_logic_rx_n_36;
  wire qsgmii_logic_rx_n_37;
  wire qsgmii_logic_rx_n_38;
  wire qsgmii_logic_rx_n_39;
  wire qsgmii_logic_rx_n_4;
  wire qsgmii_logic_rx_n_5;
  wire qsgmii_logic_rx_n_6;
  wire qsgmii_logic_rx_n_7;
  wire reset;
  wire resetdone;
  wire [3:0]rxchariscomma;
  wire [3:0]rxcharisk;
  wire [31:0]rxdata;
  wire [3:0]rxdisperr;
  wire rxn;
  wire [3:0]rxnotintable;
  wire rxoutclk;
  wire rxp;
  wire rxuserclk;
  wire rxuserclk2;
  wire sgmii_clk_en_ch0;
  wire sgmii_clk_en_ch0_int;
  wire sgmii_clk_en_ch1;
  wire sgmii_clk_en_ch1_int;
  wire sgmii_clk_en_ch2;
  wire sgmii_clk_en_ch2_int;
  wire sgmii_clk_en_ch3;
  wire sgmii_clk_en_ch3_int;
  wire signal_detect;
  wire speed_is_100_ch0;
  wire speed_is_100_ch1;
  wire speed_is_100_ch2;
  wire speed_is_100_ch3;
  wire speed_is_10_100_ch0;
  wire speed_is_10_100_ch1;
  wire speed_is_10_100_ch2;
  wire speed_is_10_100_ch3;
  wire [13:0]\^status_vector_ch0 ;
  wire [13:0]\^status_vector_ch1 ;
  wire [13:0]\^status_vector_ch2 ;
  wire [13:0]\^status_vector_ch3 ;
  wire txbuferr;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire txn;
  wire txoutclk;
  wire txp;
  wire userclk;
  wire userclk2;
  wire NLW_quadsgmii_0_TEST_core_gmii_isolate_ch0_UNCONNECTED;
  wire NLW_quadsgmii_0_TEST_core_gmii_isolate_ch1_UNCONNECTED;
  wire NLW_quadsgmii_0_TEST_core_gmii_isolate_ch2_UNCONNECTED;
  wire NLW_quadsgmii_0_TEST_core_gmii_isolate_ch3_UNCONNECTED;
  wire NLW_quadsgmii_0_TEST_core_gt_channel_valid_ch0_UNCONNECTED;
  wire NLW_quadsgmii_0_TEST_core_gt_channel_valid_ch1_UNCONNECTED;
  wire NLW_quadsgmii_0_TEST_core_gt_channel_valid_ch2_UNCONNECTED;
  wire NLW_quadsgmii_0_TEST_core_gt_channel_valid_ch3_UNCONNECTED;
  wire [15:8]NLW_quadsgmii_0_TEST_core_status_vector_ch0_UNCONNECTED;
  wire [15:8]NLW_quadsgmii_0_TEST_core_status_vector_ch1_UNCONNECTED;
  wire [15:8]NLW_quadsgmii_0_TEST_core_status_vector_ch2_UNCONNECTED;
  wire [15:8]NLW_quadsgmii_0_TEST_core_status_vector_ch3_UNCONNECTED;
  wire [3:0]NLW_quadsgmii_0_TEST_core_txchardispmode_UNCONNECTED;
  wire [3:0]NLW_quadsgmii_0_TEST_core_txchardispval_UNCONNECTED;

  assign status_vector_ch0[15] = \<const0> ;
  assign status_vector_ch0[14] = \<const0> ;
  assign status_vector_ch0[13:9] = \^status_vector_ch0 [13:9];
  assign status_vector_ch0[8] = \<const0> ;
  assign status_vector_ch0[7:0] = \^status_vector_ch0 [7:0];
  assign status_vector_ch1[15] = \<const0> ;
  assign status_vector_ch1[14] = \<const0> ;
  assign status_vector_ch1[13:9] = \^status_vector_ch1 [13:9];
  assign status_vector_ch1[8] = \<const0> ;
  assign status_vector_ch1[7:0] = \^status_vector_ch1 [7:0];
  assign status_vector_ch2[15] = \<const0> ;
  assign status_vector_ch2[14] = \<const0> ;
  assign status_vector_ch2[13:9] = \^status_vector_ch2 [13:9];
  assign status_vector_ch2[8] = \<const0> ;
  assign status_vector_ch2[7:0] = \^status_vector_ch2 [7:0];
  assign status_vector_ch3[15] = \<const0> ;
  assign status_vector_ch3[14] = \<const0> ;
  assign status_vector_ch3[13:9] = \^status_vector_ch3 [13:9];
  assign status_vector_ch3[8] = \<const0> ;
  assign status_vector_ch3[7:0] = \^status_vector_ch3 [7:0];
  GND GND
       (.G(\<const0> ));
  FDRE gmii_rx_dv_ch0_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rx_dv_out),
        .Q(gmii_rx_dv_ch0),
        .R(1'b0));
  FDRE gmii_rx_dv_ch1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_2),
        .Q(gmii_rx_dv_ch1),
        .R(1'b0));
  FDRE gmii_rx_dv_ch2_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_4),
        .Q(gmii_rx_dv_ch2),
        .R(1'b0));
  FDRE gmii_rx_dv_ch3_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_6),
        .Q(gmii_rx_dv_ch3),
        .R(1'b0));
  FDRE gmii_rx_er_ch0_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rx_er_out),
        .Q(gmii_rx_er_ch0),
        .R(1'b0));
  FDRE gmii_rx_er_ch1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_3),
        .Q(gmii_rx_er_ch1),
        .R(1'b0));
  FDRE gmii_rx_er_ch2_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_5),
        .Q(gmii_rx_er_ch2),
        .R(1'b0));
  FDRE gmii_rx_er_ch3_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_7),
        .Q(gmii_rx_er_ch3),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[0]),
        .Q(gmii_rxd_ch0[0]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[1]),
        .Q(gmii_rxd_ch0[1]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[2]),
        .Q(gmii_rxd_ch0[2]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[3]),
        .Q(gmii_rxd_ch0[3]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[4]),
        .Q(gmii_rxd_ch0[4]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[5]),
        .Q(gmii_rxd_ch0[5]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[6]),
        .Q(gmii_rxd_ch0[6]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[7]),
        .Q(gmii_rxd_ch0[7]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_23),
        .Q(gmii_rxd_ch1[0]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_22),
        .Q(gmii_rxd_ch1[1]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_21),
        .Q(gmii_rxd_ch1[2]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_20),
        .Q(gmii_rxd_ch1[3]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_19),
        .Q(gmii_rxd_ch1[4]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_18),
        .Q(gmii_rxd_ch1[5]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_17),
        .Q(gmii_rxd_ch1[6]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_16),
        .Q(gmii_rxd_ch1[7]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_31),
        .Q(gmii_rxd_ch2[0]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_30),
        .Q(gmii_rxd_ch2[1]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_29),
        .Q(gmii_rxd_ch2[2]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_28),
        .Q(gmii_rxd_ch2[3]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_27),
        .Q(gmii_rxd_ch2[4]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_26),
        .Q(gmii_rxd_ch2[5]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_25),
        .Q(gmii_rxd_ch2[6]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_24),
        .Q(gmii_rxd_ch2[7]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_39),
        .Q(gmii_rxd_ch3[0]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_38),
        .Q(gmii_rxd_ch3[1]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_37),
        .Q(gmii_rxd_ch3[2]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_36),
        .Q(gmii_rxd_ch3[3]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_35),
        .Q(gmii_rxd_ch3[4]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_34),
        .Q(gmii_rxd_ch3[5]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_33),
        .Q(gmii_rxd_ch3[6]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_32),
        .Q(gmii_rxd_ch3[7]),
        .R(1'b0));
  FDRE gmii_tx_en_ch0_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_en_ch0),
        .Q(gmii_tx_en_ch0_int1),
        .R(1'b0));
  FDRE gmii_tx_en_ch1_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_en_ch1),
        .Q(gmii_tx_en_ch1_int1),
        .R(1'b0));
  FDRE gmii_tx_en_ch2_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_en_ch2),
        .Q(gmii_tx_en_ch2_int1),
        .R(1'b0));
  FDRE gmii_tx_en_ch3_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_en_ch3),
        .Q(gmii_tx_en_ch3_int1),
        .R(1'b0));
  FDRE gmii_tx_er_ch0_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_er_ch0),
        .Q(gmii_tx_er_ch0_int1),
        .R(1'b0));
  FDRE gmii_tx_er_ch1_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_er_ch1),
        .Q(gmii_tx_er_ch1_int1),
        .R(1'b0));
  FDRE gmii_tx_er_ch2_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_er_ch2),
        .Q(gmii_tx_er_ch2_int1),
        .R(1'b0));
  FDRE gmii_tx_er_ch3_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_er_ch3),
        .Q(gmii_tx_er_ch3_int1),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[0]),
        .Q(gmii_txd_ch0_int1[0]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[1]),
        .Q(gmii_txd_ch0_int1[1]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[2]),
        .Q(gmii_txd_ch0_int1[2]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[3]),
        .Q(gmii_txd_ch0_int1[3]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[4]),
        .Q(gmii_txd_ch0_int1[4]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[5]),
        .Q(gmii_txd_ch0_int1[5]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[6]),
        .Q(gmii_txd_ch0_int1[6]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[7]),
        .Q(gmii_txd_ch0_int1[7]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[0]),
        .Q(gmii_txd_ch1_int1[0]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[1]),
        .Q(gmii_txd_ch1_int1[1]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[2]),
        .Q(gmii_txd_ch1_int1[2]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[3]),
        .Q(gmii_txd_ch1_int1[3]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[4]),
        .Q(gmii_txd_ch1_int1[4]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[5]),
        .Q(gmii_txd_ch1_int1[5]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[6]),
        .Q(gmii_txd_ch1_int1[6]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[7]),
        .Q(gmii_txd_ch1_int1[7]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[0]),
        .Q(gmii_txd_ch2_int1[0]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[1]),
        .Q(gmii_txd_ch2_int1[1]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[2]),
        .Q(gmii_txd_ch2_int1[2]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[3]),
        .Q(gmii_txd_ch2_int1[3]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[4]),
        .Q(gmii_txd_ch2_int1[4]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[5]),
        .Q(gmii_txd_ch2_int1[5]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[6]),
        .Q(gmii_txd_ch2_int1[6]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[7]),
        .Q(gmii_txd_ch2_int1[7]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[0]),
        .Q(gmii_txd_ch3_int1[0]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[1]),
        .Q(gmii_txd_ch3_int1[1]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[2]),
        .Q(gmii_txd_ch3_int1[2]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[3]),
        .Q(gmii_txd_ch3_int1[3]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[4]),
        .Q(gmii_txd_ch3_int1[4]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[5]),
        .Q(gmii_txd_ch3_int1[5]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[6]),
        .Q(gmii_txd_ch3_int1[6]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[7]),
        .Q(gmii_txd_ch3_int1[7]),
        .R(1'b0));
  quadsgmii_0_TEST_quadsgmii_0_TEST_qsgmii_adapt qsgmii_logic_rx
       (.D(gmii_rxd_ch0_int),
        .Q(gmii_rxd_out),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0_int),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1_int),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2_int),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3_int),
        .gmii_rx_dv_out(gmii_rx_dv_out),
        .gmii_rx_dv_out_reg(qsgmii_logic_rx_n_2),
        .gmii_rx_dv_out_reg_0(qsgmii_logic_rx_n_4),
        .gmii_rx_dv_out_reg_1(qsgmii_logic_rx_n_6),
        .gmii_rx_er_ch0(gmii_rx_er_ch0_int),
        .gmii_rx_er_ch1(gmii_rx_er_ch1_int),
        .gmii_rx_er_ch2(gmii_rx_er_ch2_int),
        .gmii_rx_er_ch3(gmii_rx_er_ch3_int),
        .gmii_rx_er_out(gmii_rx_er_out),
        .gmii_rx_er_out_reg(qsgmii_logic_rx_n_3),
        .gmii_rx_er_out_reg_0(qsgmii_logic_rx_n_5),
        .gmii_rx_er_out_reg_1(qsgmii_logic_rx_n_7),
        .\gmii_rxd_out_reg[7] ({qsgmii_logic_rx_n_16,qsgmii_logic_rx_n_17,qsgmii_logic_rx_n_18,qsgmii_logic_rx_n_19,qsgmii_logic_rx_n_20,qsgmii_logic_rx_n_21,qsgmii_logic_rx_n_22,qsgmii_logic_rx_n_23}),
        .\gmii_rxd_out_reg[7]_0 ({qsgmii_logic_rx_n_24,qsgmii_logic_rx_n_25,qsgmii_logic_rx_n_26,qsgmii_logic_rx_n_27,qsgmii_logic_rx_n_28,qsgmii_logic_rx_n_29,qsgmii_logic_rx_n_30,qsgmii_logic_rx_n_31}),
        .\gmii_rxd_out_reg[7]_1 ({qsgmii_logic_rx_n_32,qsgmii_logic_rx_n_33,qsgmii_logic_rx_n_34,qsgmii_logic_rx_n_35,qsgmii_logic_rx_n_36,qsgmii_logic_rx_n_37,qsgmii_logic_rx_n_38,qsgmii_logic_rx_n_39}),
        .reset(reset),
        .\rxd_reg1_reg[7] (gmii_rxd_ch1_int),
        .\rxd_reg1_reg[7]_0 (gmii_rxd_ch2_int),
        .\rxd_reg1_reg[7]_1 (gmii_rxd_ch3_int),
        .speed_is_100_ch0(speed_is_100_ch0),
        .speed_is_100_ch1(speed_is_100_ch1),
        .speed_is_100_ch2(speed_is_100_ch2),
        .speed_is_100_ch3(speed_is_100_ch3),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_qsgmii_adapt_0 qsgmii_logic_tx
       (.E(sgmii_clk_en_ch0_int),
        .Q(gmii_txd_ch0_int),
        .gmii_tx_en_ch0(gmii_tx_en_ch0_int),
        .gmii_tx_en_ch0_int1(gmii_tx_en_ch0_int1),
        .gmii_tx_en_ch1(gmii_tx_en_ch1_int),
        .gmii_tx_en_ch1_int1(gmii_tx_en_ch1_int1),
        .gmii_tx_en_ch2(gmii_tx_en_ch2_int),
        .gmii_tx_en_ch2_int1(gmii_tx_en_ch2_int1),
        .gmii_tx_en_ch3(gmii_tx_en_ch3_int),
        .gmii_tx_en_ch3_int1(gmii_tx_en_ch3_int1),
        .gmii_tx_er_ch0(gmii_tx_er_ch0_int),
        .gmii_tx_er_ch0_int1(gmii_tx_er_ch0_int1),
        .gmii_tx_er_ch1(gmii_tx_er_ch1_int),
        .gmii_tx_er_ch1_int1(gmii_tx_er_ch1_int1),
        .gmii_tx_er_ch2(gmii_tx_er_ch2_int),
        .gmii_tx_er_ch2_int1(gmii_tx_er_ch2_int1),
        .gmii_tx_er_ch3(gmii_tx_er_ch3_int),
        .gmii_tx_er_ch3_int1(gmii_tx_er_ch3_int1),
        .\gmii_txd_out_reg[7] (gmii_txd_ch1_int),
        .\gmii_txd_out_reg[7]_0 (gmii_txd_ch2_int),
        .\gmii_txd_out_reg[7]_1 (gmii_txd_ch3_int),
        .\gmii_txd_out_reg[7]_2 (gmii_txd_ch0_int1),
        .\gmii_txd_out_reg[7]_3 (gmii_txd_ch1_int1),
        .\gmii_txd_out_reg[7]_4 (gmii_txd_ch2_int1),
        .\gmii_txd_out_reg[7]_5 (gmii_txd_ch3_int1),
        .reset(reset),
        .sgmii_clk_en_reg(sgmii_clk_en_ch1_int),
        .sgmii_clk_en_reg_0(sgmii_clk_en_ch2_int),
        .sgmii_clk_en_reg_1(sgmii_clk_en_ch3_int),
        .speed_is_100_ch0(speed_is_100_ch0),
        .speed_is_100_ch1(speed_is_100_ch1),
        .speed_is_100_ch2(speed_is_100_ch2),
        .speed_is_100_ch3(speed_is_100_ch3),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .userclk2(userclk2));
  (* C_FAMILY = "zynquplus" *) 
  (* C_HAS_AN = "TRUE" *) 
  (* C_HAS_MDIO = "TRUE" *) 
  (* C_QSGMII_PHY_MODE = "FALSE" *) 
  (* C_RX_GMII_CLK = "TXOUTCLK" *) 
  (* c_component_name = "quadsgmii_0_TEST" *) 
  (* c_elaboration_transient_dir = "BlankString" *) 
  (* c_gmii_or_mii_mode = "TRUE" *) 
  quadsgmii_0_TEST_quadsgmii_v3_4_6 quadsgmii_0_TEST_core
       (.an_adv_config_val_ch0(1'b0),
        .an_adv_config_val_ch1(1'b0),
        .an_adv_config_val_ch2(1'b0),
        .an_adv_config_val_ch3(1'b0),
        .an_adv_config_vector_ch0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .an_adv_config_vector_ch1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .an_adv_config_vector_ch2({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .an_adv_config_vector_ch3({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b1}),
        .an_interrupt_ch0(an_interrupt_ch0),
        .an_interrupt_ch1(an_interrupt_ch1),
        .an_interrupt_ch2(an_interrupt_ch2),
        .an_interrupt_ch3(an_interrupt_ch3),
        .an_restart_config_ch0(1'b0),
        .an_restart_config_ch1(1'b0),
        .an_restart_config_ch2(1'b0),
        .an_restart_config_ch3(1'b0),
        .configuration_valid_ch0(1'b0),
        .configuration_valid_ch1(1'b0),
        .configuration_valid_ch2(1'b0),
        .configuration_valid_ch3(1'b0),
        .configuration_vector_ch0({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .configuration_vector_ch1({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .configuration_vector_ch2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .configuration_vector_ch3({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dcm_locked(plllock),
        .enablealign(enablealign),
        .gmii_isolate_ch0(NLW_quadsgmii_0_TEST_core_gmii_isolate_ch0_UNCONNECTED),
        .gmii_isolate_ch1(NLW_quadsgmii_0_TEST_core_gmii_isolate_ch1_UNCONNECTED),
        .gmii_isolate_ch2(NLW_quadsgmii_0_TEST_core_gmii_isolate_ch2_UNCONNECTED),
        .gmii_isolate_ch3(NLW_quadsgmii_0_TEST_core_gmii_isolate_ch3_UNCONNECTED),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0_int),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1_int),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2_int),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3_int),
        .gmii_rx_er_ch0(gmii_rx_er_ch0_int),
        .gmii_rx_er_ch1(gmii_rx_er_ch1_int),
        .gmii_rx_er_ch2(gmii_rx_er_ch2_int),
        .gmii_rx_er_ch3(gmii_rx_er_ch3_int),
        .gmii_rxd_ch0(gmii_rxd_ch0_int),
        .gmii_rxd_ch1(gmii_rxd_ch1_int),
        .gmii_rxd_ch2(gmii_rxd_ch2_int),
        .gmii_rxd_ch3(gmii_rxd_ch3_int),
        .gmii_tx_en_ch0(gmii_tx_en_ch0_int),
        .gmii_tx_en_ch1(gmii_tx_en_ch1_int),
        .gmii_tx_en_ch2(gmii_tx_en_ch2_int),
        .gmii_tx_en_ch3(gmii_tx_en_ch3_int),
        .gmii_tx_er_ch0(gmii_tx_er_ch0_int),
        .gmii_tx_er_ch1(gmii_tx_er_ch1_int),
        .gmii_tx_er_ch2(gmii_tx_er_ch2_int),
        .gmii_tx_er_ch3(gmii_tx_er_ch3_int),
        .gmii_txd_ch0(gmii_txd_ch0_int),
        .gmii_txd_ch1(gmii_txd_ch1_int),
        .gmii_txd_ch2(gmii_txd_ch2_int),
        .gmii_txd_ch3(gmii_txd_ch3_int),
        .gt_channel_valid_ch0(NLW_quadsgmii_0_TEST_core_gt_channel_valid_ch0_UNCONNECTED),
        .gt_channel_valid_ch1(NLW_quadsgmii_0_TEST_core_gt_channel_valid_ch1_UNCONNECTED),
        .gt_channel_valid_ch2(NLW_quadsgmii_0_TEST_core_gt_channel_valid_ch2_UNCONNECTED),
        .gt_channel_valid_ch3(NLW_quadsgmii_0_TEST_core_gt_channel_valid_ch3_UNCONNECTED),
        .link_timer_value_ch0(link_timer_value_ch0),
        .link_timer_value_ch1(link_timer_value_ch1),
        .link_timer_value_ch2(link_timer_value_ch2),
        .link_timer_value_ch3(link_timer_value_ch3),
        .mdc_ch0(mdc_ch0),
        .mdc_ch1(mdc_ch1),
        .mdc_ch2(mdc_ch2),
        .mdc_ch3(mdc_ch3),
        .mdio_in_ch0(mdio_i_ch0),
        .mdio_in_ch1(mdio_i_ch1),
        .mdio_in_ch2(mdio_i_ch2),
        .mdio_in_ch3(mdio_i_ch3),
        .mdio_out_ch0(mdio_o_ch0),
        .mdio_out_ch1(mdio_o_ch1),
        .mdio_out_ch2(mdio_o_ch2),
        .mdio_out_ch3(mdio_o_ch3),
        .mdio_tri_ch0(mdio_t_ch0),
        .mdio_tri_ch1(mdio_t_ch1),
        .mdio_tri_ch2(mdio_t_ch2),
        .mdio_tri_ch3(mdio_t_ch3),
        .mgt_rx_reset(mgt_rx_reset),
        .mgt_tx_reset(mgt_tx_reset),
        .phyad_ch0(phyad_ch0),
        .phyad_ch1(phyad_ch1),
        .phyad_ch2(phyad_ch2),
        .phyad_ch3(phyad_ch3),
        .powerdown(powerdown),
        .reset(reset),
        .reset_done(gt0_resetdone_out_sig),
        .rxchariscomma(rxchariscomma),
        .rxcharisk(rxcharisk),
        .rxclkcorcnt({1'b0,1'b0,1'b0}),
        .rxdata(rxdata),
        .rxdisperr(rxdisperr),
        .rxnotintable(rxnotintable),
        .rxrecclk(rxuserclk2),
        .rxrundisp({1'b0,1'b0,1'b0,1'b0}),
        .signal_detect(signal_detect),
        .status_vector_ch0({NLW_quadsgmii_0_TEST_core_status_vector_ch0_UNCONNECTED[15:14],\^status_vector_ch0 }),
        .status_vector_ch1({NLW_quadsgmii_0_TEST_core_status_vector_ch1_UNCONNECTED[15:14],\^status_vector_ch1 }),
        .status_vector_ch2({NLW_quadsgmii_0_TEST_core_status_vector_ch2_UNCONNECTED[15:14],\^status_vector_ch2 }),
        .status_vector_ch3({NLW_quadsgmii_0_TEST_core_status_vector_ch3_UNCONNECTED[15:14],\^status_vector_ch3 }),
        .txbuferr(txbuferr),
        .txchardispmode(NLW_quadsgmii_0_TEST_core_txchardispmode_UNCONNECTED[3:0]),
        .txchardispval(NLW_quadsgmii_0_TEST_core_txchardispval_UNCONNECTED[3:0]),
        .txcharisk(txcharisk),
        .txdata(txdata),
        .userclk(userclk2),
        .userclk2(1'b0));
  FDRE sgmii_clk_en_ch0_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_ch0_int),
        .Q(sgmii_clk_en_ch0),
        .R(1'b0));
  FDRE sgmii_clk_en_ch1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_ch1_int),
        .Q(sgmii_clk_en_ch1),
        .R(1'b0));
  FDRE sgmii_clk_en_ch2_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_ch2_int),
        .Q(sgmii_clk_en_ch2),
        .R(1'b0));
  FDRE sgmii_clk_en_ch3_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_ch3_int),
        .Q(sgmii_clk_en_ch3),
        .R(1'b0));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block sync_rxresetdone_i
       (.data_in(gt0_rxresetdone_out_sig),
        .data_out(gt0_rxresetdone_out_sync),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_1 sync_txresetdone_i
       (.data_in(gt0_txresetdone_out_sig),
        .data_out(gt0_rxresetdone_out_sync),
        .reset_done(gt0_resetdone_out_sig),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_transceiver transceiver_inst
       (.cplllock_out(plllock),
        .enablealign(enablealign),
        .gt0_powergood_out(gt0_powergood_out),
        .gtrefclk(gtrefclk),
        .gtwiz_userdata_rx_out(rxdata),
        .independent_clock_bufgdiv4(independent_clock_bufgdiv4),
        .mgt_rx_reset(mgt_rx_reset),
        .mgt_tx_reset(mgt_tx_reset),
        .pma_reset(pma_reset),
        .powerdown(powerdown),
        .resetdone(resetdone),
        .rxctrl0_out(rxcharisk),
        .rxctrl1_out(rxdisperr),
        .rxctrl2_out(rxchariscomma),
        .rxctrl3_out(rxnotintable),
        .rxn(rxn),
        .rxoutclk(rxoutclk),
        .rxp(rxp),
        .rxresetdone_out(gt0_rxresetdone_out_sig),
        .rxuserclk(rxuserclk),
        .rxuserclk2(rxuserclk2),
        .txbuferr(txbuferr),
        .txcharisk(txcharisk),
        .txdata(txdata),
        .txn(txn),
        .txoutclk(txoutclk),
        .txp(txp),
        .txresetdone_out(gt0_txresetdone_out_sig),
        .userclk(userclk),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clk_gen" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen
   (E,
    data_out,
    sgmii_clk_en_reg_0,
    reset_out,
    userclk2);
  output [0:0]E;
  input data_out;
  input sgmii_clk_en_reg_0;
  input reset_out;
  input userclk2;

  wire [0:0]E;
  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire reset_out;
  wire sgmii_clk_en_n_0;
  wire sgmii_clk_en_reg_0;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk1_25_reg_reg(clk_div1_25_n_1),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(sgmii_clk_en_reg_0),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(E),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clk_gen" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_37
   (E,
    data_out,
    sgmii_clk_en_reg_0,
    reset_out,
    userclk2);
  output [0:0]E;
  input data_out;
  input sgmii_clk_en_reg_0;
  input reset_out;
  input userclk2;

  wire [0:0]E;
  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire reset_out;
  wire sgmii_clk_en_n_0;
  wire sgmii_clk_en_reg_0;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_41 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk1_25_reg_reg(clk_div1_25_n_1),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_42 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(sgmii_clk_en_reg_0),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(E),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clk_gen" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_43
   (E,
    data_out,
    sgmii_clk_en_reg_0,
    reset_out,
    userclk2);
  output [0:0]E;
  input data_out;
  input sgmii_clk_en_reg_0;
  input reset_out;
  input userclk2;

  wire [0:0]E;
  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire reset_out;
  wire sgmii_clk_en_n_0;
  wire sgmii_clk_en_reg_0;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_47 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk1_25_reg_reg(clk_div1_25_n_1),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_48 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(sgmii_clk_en_reg_0),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(E),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clk_gen" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_49
   (E,
    data_out,
    sgmii_clk_en_reg_0,
    reset_out,
    userclk2);
  output [0:0]E;
  input data_out;
  input sgmii_clk_en_reg_0;
  input reset_out;
  input userclk2;

  wire [0:0]E;
  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire reset_out;
  wire sgmii_clk_en_n_0;
  wire sgmii_clk_en_reg_0;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_53 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk1_25_reg_reg(clk_div1_25_n_1),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_54 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(sgmii_clk_en_reg_0),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(E),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clk_gen" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_60
   (sgmii_clk_en_reg_0,
    data_out,
    sgmii_clk_en_reg_1,
    reset_out,
    userclk2);
  output sgmii_clk_en_reg_0;
  input data_out;
  input sgmii_clk_en_reg_1;
  input reset_out;
  input userclk2;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire reset_out;
  wire sgmii_clk_en_n_0;
  wire sgmii_clk_en_reg_0;
  wire sgmii_clk_en_reg_1;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_63 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk1_25_reg_reg(clk_div1_25_n_1),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_64 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(sgmii_clk_en_reg_1),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(sgmii_clk_en_reg_0),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clk_gen" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_65
   (sgmii_clk_en_reg_0,
    data_out,
    sgmii_clk_en_reg_1,
    reset_out,
    userclk2);
  output sgmii_clk_en_reg_0;
  input data_out;
  input sgmii_clk_en_reg_1;
  input reset_out;
  input userclk2;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire reset_out;
  wire sgmii_clk_en_n_0;
  wire sgmii_clk_en_reg_0;
  wire sgmii_clk_en_reg_1;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_69 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk1_25_reg_reg(clk_div1_25_n_1),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_70 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(sgmii_clk_en_reg_1),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(sgmii_clk_en_reg_0),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clk_gen" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_71
   (sgmii_clk_en_reg_0,
    data_out,
    sgmii_clk_en_reg_1,
    reset_out,
    userclk2);
  output sgmii_clk_en_reg_0;
  input data_out;
  input sgmii_clk_en_reg_1;
  input reset_out;
  input userclk2;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire reset_out;
  wire sgmii_clk_en_n_0;
  wire sgmii_clk_en_reg_0;
  wire sgmii_clk_en_reg_1;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_75 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk1_25_reg_reg(clk_div1_25_n_1),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_76 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(sgmii_clk_en_reg_1),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(sgmii_clk_en_reg_0),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clk_gen" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_77
   (sgmii_clk_en_reg_0,
    data_out,
    sgmii_clk_en_reg_1,
    reset_out,
    userclk2);
  output sgmii_clk_en_reg_0;
  input data_out;
  input sgmii_clk_en_reg_1;
  input reset_out;
  input userclk2;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire reset_out;
  wire sgmii_clk_en_n_0;
  wire sgmii_clk_en_reg_0;
  wire sgmii_clk_en_reg_1;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_81 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk1_25_reg_reg(clk_div1_25_n_1),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_82 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(sgmii_clk_en_reg_1),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(sgmii_clk_en_reg_0),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clock_div" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__2_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__2_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__2_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__2_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair429" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__2 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair429" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__2_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair430" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__2
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__2_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__2
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__2_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__2_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair430" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__2
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__2_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__2
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__2_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__2_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clock_div" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_42
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__1_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__1_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__1_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__1_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair427" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair427" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__1_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair428" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__1
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__1
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__1_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__1_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair428" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__1
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__1_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__1
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__1_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__1_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clock_div" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_48
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__0_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__0_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__0_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__0_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair425" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__0 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair425" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__0_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair426" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__0
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__0_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__0
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__0_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__0_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair426" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__0
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__0_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__0
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__0_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__0_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clock_div" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_54
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair423" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair423" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair424" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair424" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clock_div" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_64
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__6_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__6_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__6_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__6_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair416" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__6 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair416" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__6_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair417" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__6
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__6_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__6
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__6_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__6_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair417" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__6
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__6_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__6
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__6_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__6_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clock_div" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_70
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__5_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__5_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__5_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__5_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair409" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__5 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair409" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__5_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair410" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__5
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__5_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__5
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__5_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__5_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair410" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__5
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__5_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__5
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__5_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__5_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clock_div" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_76
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__4_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__4_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__4_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__4_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair402" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__4 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair402" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__4_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair403" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__4
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__4_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__4
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__4_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__4_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair403" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__4
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__4_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__4
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__4_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__4_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_clock_div" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_clock_div_82
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__3_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__3_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__3_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__3_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair395" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__3 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair395" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__3_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair396" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__3
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__3_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__3
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__3_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__3_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair396" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__3
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__3_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__3
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__3_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__3_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* CHECK_LICENSE_TYPE = "quadsgmii_0_TEST_gt,quadsgmii_0_TEST_gt_gtwizard_top,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "quadsgmii_0_TEST_gt" *) 
(* X_CORE_INFO = "quadsgmii_0_TEST_gt_gtwizard_top,Vivado 2019.1" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_gt
   (gtwiz_userclk_tx_reset_in,
    gtwiz_userclk_tx_active_in,
    gtwiz_userclk_rx_active_in,
    gtwiz_reset_clk_freerun_in,
    gtwiz_reset_all_in,
    gtwiz_reset_tx_pll_and_datapath_in,
    gtwiz_reset_tx_datapath_in,
    gtwiz_reset_rx_pll_and_datapath_in,
    gtwiz_reset_rx_datapath_in,
    gtwiz_reset_rx_cdr_stable_out,
    gtwiz_reset_tx_done_out,
    gtwiz_reset_rx_done_out,
    gtwiz_userdata_tx_in,
    gtwiz_userdata_rx_out,
    drpaddr_in,
    drpclk_in,
    drpdi_in,
    drpen_in,
    drpwe_in,
    eyescanreset_in,
    eyescantrigger_in,
    gthrxn_in,
    gthrxp_in,
    gtrefclk0_in,
    loopback_in,
    pcsrsvdin_in,
    rx8b10ben_in,
    rxbufreset_in,
    rxcdrhold_in,
    rxcommadeten_in,
    rxdfeagcovrden_in,
    rxdfelpmreset_in,
    rxlpmen_in,
    rxmcommaalignen_in,
    rxmonitorsel_in,
    rxpcommaalignen_in,
    rxpcsreset_in,
    rxpd_in,
    rxpmareset_in,
    rxpolarity_in,
    rxprbscntreset_in,
    rxprbssel_in,
    rxrate_in,
    rxusrclk_in,
    rxusrclk2_in,
    tx8b10ben_in,
    txctrl0_in,
    txctrl1_in,
    txctrl2_in,
    txdiffctrl_in,
    txelecidle_in,
    txinhibit_in,
    txoutclksel_in,
    txpcsreset_in,
    txpd_in,
    txpmareset_in,
    txpolarity_in,
    txpostcursor_in,
    txprbsforceerr_in,
    txprbssel_in,
    txprecursor_in,
    txusrclk_in,
    txusrclk2_in,
    cplllock_out,
    dmonitorout_out,
    drpdo_out,
    drprdy_out,
    eyescandataerror_out,
    gthtxn_out,
    gthtxp_out,
    gtpowergood_out,
    rxbufstatus_out,
    rxbyteisaligned_out,
    rxbyterealign_out,
    rxcommadet_out,
    rxctrl0_out,
    rxctrl1_out,
    rxctrl2_out,
    rxctrl3_out,
    rxmonitorout_out,
    rxoutclk_out,
    rxpmaresetdone_out,
    rxprbserr_out,
    rxratedone_out,
    rxresetdone_out,
    txbufstatus_out,
    txoutclk_out,
    txpmaresetdone_out,
    txresetdone_out);
  input [0:0]gtwiz_userclk_tx_reset_in;
  input [0:0]gtwiz_userclk_tx_active_in;
  input [0:0]gtwiz_userclk_rx_active_in;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input [0:0]gtwiz_reset_all_in;
  input [0:0]gtwiz_reset_tx_pll_and_datapath_in;
  input [0:0]gtwiz_reset_tx_datapath_in;
  input [0:0]gtwiz_reset_rx_pll_and_datapath_in;
  input [0:0]gtwiz_reset_rx_datapath_in;
  output [0:0]gtwiz_reset_rx_cdr_stable_out;
  output [0:0]gtwiz_reset_tx_done_out;
  output [0:0]gtwiz_reset_rx_done_out;
  input [31:0]gtwiz_userdata_tx_in;
  output [31:0]gtwiz_userdata_rx_out;
  input [9:0]drpaddr_in;
  input [0:0]drpclk_in;
  input [15:0]drpdi_in;
  input [0:0]drpen_in;
  input [0:0]drpwe_in;
  input [0:0]eyescanreset_in;
  input [0:0]eyescantrigger_in;
  input [0:0]gthrxn_in;
  input [0:0]gthrxp_in;
  input [0:0]gtrefclk0_in;
  input [2:0]loopback_in;
  input [15:0]pcsrsvdin_in;
  input [0:0]rx8b10ben_in;
  input [0:0]rxbufreset_in;
  input [0:0]rxcdrhold_in;
  input [0:0]rxcommadeten_in;
  input [0:0]rxdfeagcovrden_in;
  input [0:0]rxdfelpmreset_in;
  input [0:0]rxlpmen_in;
  input [0:0]rxmcommaalignen_in;
  input [1:0]rxmonitorsel_in;
  input [0:0]rxpcommaalignen_in;
  input [0:0]rxpcsreset_in;
  input [1:0]rxpd_in;
  input [0:0]rxpmareset_in;
  input [0:0]rxpolarity_in;
  input [0:0]rxprbscntreset_in;
  input [3:0]rxprbssel_in;
  input [2:0]rxrate_in;
  input [0:0]rxusrclk_in;
  input [0:0]rxusrclk2_in;
  input [0:0]tx8b10ben_in;
  input [15:0]txctrl0_in;
  input [15:0]txctrl1_in;
  input [7:0]txctrl2_in;
  input [4:0]txdiffctrl_in;
  input [0:0]txelecidle_in;
  input [0:0]txinhibit_in;
  input [2:0]txoutclksel_in;
  input [0:0]txpcsreset_in;
  input [1:0]txpd_in;
  input [0:0]txpmareset_in;
  input [0:0]txpolarity_in;
  input [4:0]txpostcursor_in;
  input [0:0]txprbsforceerr_in;
  input [3:0]txprbssel_in;
  input [4:0]txprecursor_in;
  input [0:0]txusrclk_in;
  input [0:0]txusrclk2_in;
  output [0:0]cplllock_out;
  output [15:0]dmonitorout_out;
  output [15:0]drpdo_out;
  output [0:0]drprdy_out;
  output [0:0]eyescandataerror_out;
  output [0:0]gthtxn_out;
  output [0:0]gthtxp_out;
  output [0:0]gtpowergood_out;
  output [2:0]rxbufstatus_out;
  output [0:0]rxbyteisaligned_out;
  output [0:0]rxbyterealign_out;
  output [0:0]rxcommadet_out;
  output [15:0]rxctrl0_out;
  output [15:0]rxctrl1_out;
  output [7:0]rxctrl2_out;
  output [7:0]rxctrl3_out;
  output [7:0]rxmonitorout_out;
  output [0:0]rxoutclk_out;
  output [0:0]rxpmaresetdone_out;
  output [0:0]rxprbserr_out;
  output [0:0]rxratedone_out;
  output [0:0]rxresetdone_out;
  output [1:0]txbufstatus_out;
  output [0:0]txoutclk_out;
  output [0:0]txpmaresetdone_out;
  output [0:0]txresetdone_out;

  wire [0:0]cplllock_out;
  wire [15:0]dmonitorout_out;
  wire [9:0]drpaddr_in;
  wire [0:0]drpclk_in;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire [0:0]drpen_in;
  wire [0:0]drprdy_out;
  wire [0:0]drpwe_in;
  wire [0:0]eyescandataerror_out;
  wire [0:0]eyescanreset_in;
  wire [0:0]eyescantrigger_in;
  wire [0:0]gthrxn_in;
  wire [0:0]gthrxp_in;
  wire [0:0]gthtxn_out;
  wire [0:0]gthtxp_out;
  wire [0:0]gtpowergood_out;
  wire [0:0]gtrefclk0_in;
  wire [0:0]gtwiz_reset_all_in;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire [0:0]gtwiz_reset_rx_cdr_stable_out;
  wire [0:0]gtwiz_reset_rx_datapath_in;
  wire [0:0]gtwiz_reset_rx_done_out;
  wire [0:0]gtwiz_reset_rx_pll_and_datapath_in;
  wire [0:0]gtwiz_reset_tx_datapath_in;
  wire [0:0]gtwiz_reset_tx_done_out;
  wire [0:0]gtwiz_reset_tx_pll_and_datapath_in;
  wire [0:0]gtwiz_userclk_rx_active_in;
  wire [0:0]gtwiz_userclk_tx_active_in;
  wire [0:0]gtwiz_userclk_tx_reset_in;
  wire [31:0]gtwiz_userdata_rx_out;
  wire [31:0]gtwiz_userdata_tx_in;
  wire [2:0]loopback_in;
  wire [15:0]pcsrsvdin_in;
  wire [0:0]rx8b10ben_in;
  wire [0:0]rxbufreset_in;
  wire [2:0]rxbufstatus_out;
  wire [0:0]rxbyteisaligned_out;
  wire [0:0]rxbyterealign_out;
  wire [0:0]rxcdrhold_in;
  wire [0:0]rxcommadet_out;
  wire [0:0]rxcommadeten_in;
  wire [15:0]rxctrl0_out;
  wire [15:0]rxctrl1_out;
  wire [7:0]rxctrl2_out;
  wire [7:0]rxctrl3_out;
  wire [0:0]rxdfeagcovrden_in;
  wire [0:0]rxdfelpmreset_in;
  wire [0:0]rxlpmen_in;
  wire [0:0]rxmcommaalignen_in;
  wire [7:0]rxmonitorout_out;
  wire [1:0]rxmonitorsel_in;
  wire [0:0]rxoutclk_out;
  wire [0:0]rxpcommaalignen_in;
  wire [0:0]rxpcsreset_in;
  wire [1:0]rxpd_in;
  wire [0:0]rxpmareset_in;
  wire [0:0]rxpmaresetdone_out;
  wire [0:0]rxpolarity_in;
  wire [0:0]rxprbscntreset_in;
  wire [0:0]rxprbserr_out;
  wire [3:0]rxprbssel_in;
  wire [2:0]rxrate_in;
  wire [0:0]rxratedone_out;
  wire [0:0]rxresetdone_out;
  wire [0:0]rxusrclk2_in;
  wire [0:0]rxusrclk_in;
  wire [0:0]tx8b10ben_in;
  wire [1:0]txbufstatus_out;
  wire [15:0]txctrl0_in;
  wire [15:0]txctrl1_in;
  wire [7:0]txctrl2_in;
  wire [4:0]txdiffctrl_in;
  wire [0:0]txelecidle_in;
  wire [0:0]txinhibit_in;
  wire [0:0]txoutclk_out;
  wire [2:0]txoutclksel_in;
  wire [0:0]txpcsreset_in;
  wire [1:0]txpd_in;
  wire [0:0]txpmareset_in;
  wire [0:0]txpmaresetdone_out;
  wire [0:0]txpolarity_in;
  wire [4:0]txpostcursor_in;
  wire [0:0]txprbsforceerr_in;
  wire [3:0]txprbssel_in;
  wire [4:0]txprecursor_in;
  wire [0:0]txresetdone_out;
  wire [0:0]txusrclk2_in;
  wire [0:0]txusrclk_in;
  wire [0:0]NLW_inst_bufgtce_out_UNCONNECTED;
  wire [2:0]NLW_inst_bufgtcemask_out_UNCONNECTED;
  wire [8:0]NLW_inst_bufgtdiv_out_UNCONNECTED;
  wire [0:0]NLW_inst_bufgtreset_out_UNCONNECTED;
  wire [2:0]NLW_inst_bufgtrstmask_out_UNCONNECTED;
  wire [0:0]NLW_inst_cpllfbclklost_out_UNCONNECTED;
  wire [0:0]NLW_inst_cpllrefclklost_out_UNCONNECTED;
  wire [0:0]NLW_inst_dmonitoroutclk_out_UNCONNECTED;
  wire [15:0]NLW_inst_drpdo_common_out_UNCONNECTED;
  wire [0:0]NLW_inst_drprdy_common_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtrefclkmonitor_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_buffbypass_rx_done_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_buffbypass_rx_error_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_buffbypass_tx_done_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_buffbypass_tx_error_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_reset_qpll0reset_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_reset_qpll1reset_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_userclk_rx_active_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_userclk_rx_srcclk_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_userclk_rx_usrclk2_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_userclk_rx_usrclk_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_userclk_tx_active_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_userclk_tx_srcclk_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_userclk_tx_usrclk2_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtwiz_userclk_tx_usrclk_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtytxn_out_UNCONNECTED;
  wire [0:0]NLW_inst_gtytxp_out_UNCONNECTED;
  wire [0:0]NLW_inst_pcierategen3_out_UNCONNECTED;
  wire [0:0]NLW_inst_pcierateidle_out_UNCONNECTED;
  wire [1:0]NLW_inst_pcierateqpllpd_out_UNCONNECTED;
  wire [1:0]NLW_inst_pcierateqpllreset_out_UNCONNECTED;
  wire [0:0]NLW_inst_pciesynctxsyncdone_out_UNCONNECTED;
  wire [0:0]NLW_inst_pcieusergen3rdy_out_UNCONNECTED;
  wire [0:0]NLW_inst_pcieuserphystatusrst_out_UNCONNECTED;
  wire [0:0]NLW_inst_pcieuserratestart_out_UNCONNECTED;
  wire [15:0]NLW_inst_pcsrsvdout_out_UNCONNECTED;
  wire [0:0]NLW_inst_phystatus_out_UNCONNECTED;
  wire [15:0]NLW_inst_pinrsrvdas_out_UNCONNECTED;
  wire [7:0]NLW_inst_pmarsvdout0_out_UNCONNECTED;
  wire [7:0]NLW_inst_pmarsvdout1_out_UNCONNECTED;
  wire [0:0]NLW_inst_powerpresent_out_UNCONNECTED;
  wire [0:0]NLW_inst_qpll0fbclklost_out_UNCONNECTED;
  wire [0:0]NLW_inst_qpll0lock_out_UNCONNECTED;
  wire [0:0]NLW_inst_qpll0outclk_out_UNCONNECTED;
  wire [0:0]NLW_inst_qpll0outrefclk_out_UNCONNECTED;
  wire [0:0]NLW_inst_qpll0refclklost_out_UNCONNECTED;
  wire [0:0]NLW_inst_qpll1fbclklost_out_UNCONNECTED;
  wire [0:0]NLW_inst_qpll1lock_out_UNCONNECTED;
  wire [0:0]NLW_inst_qpll1outclk_out_UNCONNECTED;
  wire [0:0]NLW_inst_qpll1outrefclk_out_UNCONNECTED;
  wire [0:0]NLW_inst_qpll1refclklost_out_UNCONNECTED;
  wire [7:0]NLW_inst_qplldmonitor0_out_UNCONNECTED;
  wire [7:0]NLW_inst_qplldmonitor1_out_UNCONNECTED;
  wire [0:0]NLW_inst_refclkoutmonitor0_out_UNCONNECTED;
  wire [0:0]NLW_inst_refclkoutmonitor1_out_UNCONNECTED;
  wire [0:0]NLW_inst_resetexception_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxcdrlock_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxcdrphdone_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxchanbondseq_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxchanisaligned_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxchanrealign_out_UNCONNECTED;
  wire [4:0]NLW_inst_rxchbondo_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxckcaldone_out_UNCONNECTED;
  wire [1:0]NLW_inst_rxclkcorcnt_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxcominitdet_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxcomsasdet_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxcomwakedet_out_UNCONNECTED;
  wire [127:0]NLW_inst_rxdata_out_UNCONNECTED;
  wire [7:0]NLW_inst_rxdataextendrsvd_out_UNCONNECTED;
  wire [1:0]NLW_inst_rxdatavalid_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxdlysresetdone_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxelecidle_out_UNCONNECTED;
  wire [5:0]NLW_inst_rxheader_out_UNCONNECTED;
  wire [1:0]NLW_inst_rxheadervalid_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxlfpstresetdet_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxlfpsu2lpexitdet_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxlfpsu3wakedet_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxosintdone_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxosintstarted_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxosintstrobedone_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxosintstrobestarted_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxoutclkfabric_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxoutclkpcs_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxphaligndone_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxphalignerr_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxprbslocked_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxprgdivresetdone_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxqpisenn_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxqpisenp_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxrecclk0_sel_out_UNCONNECTED;
  wire [1:0]NLW_inst_rxrecclk0sel_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxrecclk1_sel_out_UNCONNECTED;
  wire [1:0]NLW_inst_rxrecclk1sel_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxrecclkout_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxsliderdy_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxslipdone_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxslipoutclkrdy_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxslippmardy_out_UNCONNECTED;
  wire [1:0]NLW_inst_rxstartofseq_out_UNCONNECTED;
  wire [2:0]NLW_inst_rxstatus_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxsyncdone_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxsyncout_out_UNCONNECTED;
  wire [0:0]NLW_inst_rxvalid_out_UNCONNECTED;
  wire [3:0]NLW_inst_sdm0finalout_out_UNCONNECTED;
  wire [14:0]NLW_inst_sdm0testdata_out_UNCONNECTED;
  wire [3:0]NLW_inst_sdm1finalout_out_UNCONNECTED;
  wire [14:0]NLW_inst_sdm1testdata_out_UNCONNECTED;
  wire [9:0]NLW_inst_tcongpo_out_UNCONNECTED;
  wire [0:0]NLW_inst_tconrsvdout0_out_UNCONNECTED;
  wire [0:0]NLW_inst_txcomfinish_out_UNCONNECTED;
  wire [0:0]NLW_inst_txdccdone_out_UNCONNECTED;
  wire [0:0]NLW_inst_txdlysresetdone_out_UNCONNECTED;
  wire [0:0]NLW_inst_txoutclkfabric_out_UNCONNECTED;
  wire [0:0]NLW_inst_txoutclkpcs_out_UNCONNECTED;
  wire [0:0]NLW_inst_txphaligndone_out_UNCONNECTED;
  wire [0:0]NLW_inst_txphinitdone_out_UNCONNECTED;
  wire [0:0]NLW_inst_txprgdivresetdone_out_UNCONNECTED;
  wire [0:0]NLW_inst_txqpisenn_out_UNCONNECTED;
  wire [0:0]NLW_inst_txqpisenp_out_UNCONNECTED;
  wire [0:0]NLW_inst_txratedone_out_UNCONNECTED;
  wire [0:0]NLW_inst_txsyncdone_out_UNCONNECTED;
  wire [0:0]NLW_inst_txsyncout_out_UNCONNECTED;
  wire [0:0]NLW_inst_ubdaddr_out_UNCONNECTED;
  wire [0:0]NLW_inst_ubden_out_UNCONNECTED;
  wire [0:0]NLW_inst_ubdi_out_UNCONNECTED;
  wire [0:0]NLW_inst_ubdwe_out_UNCONNECTED;
  wire [0:0]NLW_inst_ubmdmtdo_out_UNCONNECTED;
  wire [0:0]NLW_inst_ubrsvdout_out_UNCONNECTED;
  wire [0:0]NLW_inst_ubtxuart_out_UNCONNECTED;

  (* C_CHANNEL_ENABLE = "192'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001" *) 
  (* C_COMMON_SCALING_FACTOR = "1" *) 
  (* C_CPLL_VCO_FREQUENCY = "2500.000000" *) 
  (* C_ENABLE_COMMON_USRCLK = "0" *) 
  (* C_FORCE_COMMONS = "0" *) 
  (* C_FREERUN_FREQUENCY = "75.000000" *) 
  (* C_GT_REV = "57" *) 
  (* C_GT_TYPE = "2" *) 
  (* C_INCLUDE_CPLL_CAL = "2" *) 
  (* C_LOCATE_COMMON = "0" *) 
  (* C_LOCATE_IN_SYSTEM_IBERT_CORE = "2" *) 
  (* C_LOCATE_RESET_CONTROLLER = "0" *) 
  (* C_LOCATE_RX_BUFFER_BYPASS_CONTROLLER = "0" *) 
  (* C_LOCATE_RX_USER_CLOCKING = "1" *) 
  (* C_LOCATE_TX_BUFFER_BYPASS_CONTROLLER = "0" *) 
  (* C_LOCATE_TX_USER_CLOCKING = "1" *) 
  (* C_LOCATE_USER_DATA_WIDTH_SIZING = "0" *) 
  (* C_PCIE_CORECLK_FREQ = "250" *) 
  (* C_PCIE_ENABLE = "0" *) 
  (* C_RESET_CONTROLLER_INSTANCE_CTRL = "0" *) 
  (* C_RESET_SEQUENCE_INTERVAL = "0" *) 
  (* C_RX_BUFFBYPASS_MODE = "0" *) 
  (* C_RX_BUFFER_BYPASS_INSTANCE_CTRL = "0" *) 
  (* C_RX_BUFFER_MODE = "1" *) 
  (* C_RX_CB_DISP = "8'b00000000" *) 
  (* C_RX_CB_K = "8'b00000000" *) 
  (* C_RX_CB_LEN_SEQ = "1" *) 
  (* C_RX_CB_MAX_LEVEL = "1" *) 
  (* C_RX_CB_NUM_SEQ = "0" *) 
  (* C_RX_CB_VAL = "80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_RX_CC_DISP = "8'b00000000" *) 
  (* C_RX_CC_ENABLE = "0" *) 
  (* C_RX_CC_K = "8'b00000000" *) 
  (* C_RX_CC_LEN_SEQ = "1" *) 
  (* C_RX_CC_NUM_SEQ = "0" *) 
  (* C_RX_CC_PERIODICITY = "5000" *) 
  (* C_RX_CC_VAL = "80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_RX_COMMA_M_ENABLE = "1" *) 
  (* C_RX_COMMA_M_VAL = "10'b1010000011" *) 
  (* C_RX_COMMA_P_ENABLE = "1" *) 
  (* C_RX_COMMA_P_VAL = "10'b0101111100" *) 
  (* C_RX_DATA_DECODING = "1" *) 
  (* C_RX_ENABLE = "1" *) 
  (* C_RX_INT_DATA_WIDTH = "40" *) 
  (* C_RX_LINE_RATE = "5.000000" *) 
  (* C_RX_MASTER_CHANNEL_IDX = "0" *) 
  (* C_RX_OUTCLK_BUFG_GT_DIV = "1" *) 
  (* C_RX_OUTCLK_FREQUENCY = "125.000000" *) 
  (* C_RX_OUTCLK_SOURCE = "1" *) 
  (* C_RX_PLL_TYPE = "2" *) 
  (* C_RX_RECCLK_OUTPUT = "192'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_RX_REFCLK_FREQUENCY = "125.000000" *) 
  (* C_RX_SLIDE_MODE = "0" *) 
  (* C_RX_USER_CLOCKING_CONTENTS = "0" *) 
  (* C_RX_USER_CLOCKING_INSTANCE_CTRL = "0" *) 
  (* C_RX_USER_CLOCKING_RATIO_FSRC_FUSRCLK = "1" *) 
  (* C_RX_USER_CLOCKING_RATIO_FUSRCLK_FUSRCLK2 = "1" *) 
  (* C_RX_USER_CLOCKING_SOURCE = "0" *) 
  (* C_RX_USER_DATA_WIDTH = "32" *) 
  (* C_RX_USRCLK2_FREQUENCY = "125.000000" *) 
  (* C_RX_USRCLK_FREQUENCY = "125.000000" *) 
  (* C_SECONDARY_QPLL_ENABLE = "0" *) 
  (* C_SECONDARY_QPLL_REFCLK_FREQUENCY = "257.812500" *) 
  (* C_SIM_CPLL_CAL_BYPASS = "1" *) 
  (* C_TOTAL_NUM_CHANNELS = "1" *) 
  (* C_TOTAL_NUM_COMMONS = "0" *) 
  (* C_TOTAL_NUM_COMMONS_EXAMPLE = "0" *) 
  (* C_TXPROGDIV_FREQ_ENABLE = "0" *) 
  (* C_TXPROGDIV_FREQ_SOURCE = "2" *) 
  (* C_TXPROGDIV_FREQ_VAL = "125.000000" *) 
  (* C_TX_BUFFBYPASS_MODE = "0" *) 
  (* C_TX_BUFFER_BYPASS_INSTANCE_CTRL = "0" *) 
  (* C_TX_BUFFER_MODE = "1" *) 
  (* C_TX_DATA_ENCODING = "1" *) 
  (* C_TX_ENABLE = "1" *) 
  (* C_TX_INT_DATA_WIDTH = "40" *) 
  (* C_TX_LINE_RATE = "5.000000" *) 
  (* C_TX_MASTER_CHANNEL_IDX = "0" *) 
  (* C_TX_OUTCLK_BUFG_GT_DIV = "1" *) 
  (* C_TX_OUTCLK_FREQUENCY = "125.000000" *) 
  (* C_TX_OUTCLK_SOURCE = "1" *) 
  (* C_TX_PLL_TYPE = "2" *) 
  (* C_TX_REFCLK_FREQUENCY = "125.000000" *) 
  (* C_TX_USER_CLOCKING_CONTENTS = "0" *) 
  (* C_TX_USER_CLOCKING_INSTANCE_CTRL = "0" *) 
  (* C_TX_USER_CLOCKING_RATIO_FSRC_FUSRCLK = "1" *) 
  (* C_TX_USER_CLOCKING_RATIO_FUSRCLK_FUSRCLK2 = "1" *) 
  (* C_TX_USER_CLOCKING_SOURCE = "0" *) 
  (* C_TX_USER_DATA_WIDTH = "32" *) 
  (* C_TX_USRCLK2_FREQUENCY = "125.000000" *) 
  (* C_TX_USRCLK_FREQUENCY = "125.000000" *) 
  (* C_USER_GTPOWERGOOD_DELAY_EN = "1" *) 
  quadsgmii_0_TEST_quadsgmii_0_TEST_gt_gtwizard_top inst
       (.bgbypassb_in(1'b1),
        .bgmonitorenb_in(1'b1),
        .bgpdb_in(1'b1),
        .bgrcalovrd_in({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .bgrcalovrdenb_in(1'b1),
        .bufgtce_out(NLW_inst_bufgtce_out_UNCONNECTED[0]),
        .bufgtcemask_out(NLW_inst_bufgtcemask_out_UNCONNECTED[2:0]),
        .bufgtdiv_out(NLW_inst_bufgtdiv_out_UNCONNECTED[8:0]),
        .bufgtreset_out(NLW_inst_bufgtreset_out_UNCONNECTED[0]),
        .bufgtrstmask_out(NLW_inst_bufgtrstmask_out_UNCONNECTED[2:0]),
        .cdrstepdir_in(1'b0),
        .cdrstepsq_in(1'b0),
        .cdrstepsx_in(1'b0),
        .cfgreset_in(1'b0),
        .clkrsvd0_in(1'b0),
        .clkrsvd1_in(1'b0),
        .cpllfbclklost_out(NLW_inst_cpllfbclklost_out_UNCONNECTED[0]),
        .cpllfreqlock_in(1'b0),
        .cplllock_out(cplllock_out),
        .cplllockdetclk_in(1'b0),
        .cplllocken_in(1'b1),
        .cpllpd_in(1'b0),
        .cpllrefclklost_out(NLW_inst_cpllrefclklost_out_UNCONNECTED[0]),
        .cpllrefclksel_in({1'b0,1'b0,1'b1}),
        .cpllreset_in(1'b0),
        .dmonfiforeset_in(1'b0),
        .dmonitorclk_in(1'b0),
        .dmonitorout_out(dmonitorout_out),
        .dmonitoroutclk_out(NLW_inst_dmonitoroutclk_out_UNCONNECTED[0]),
        .drpaddr_common_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .drpaddr_in(drpaddr_in),
        .drpclk_common_in(1'b0),
        .drpclk_in(drpclk_in),
        .drpdi_common_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .drpdi_in(drpdi_in),
        .drpdo_common_out(NLW_inst_drpdo_common_out_UNCONNECTED[15:0]),
        .drpdo_out(drpdo_out),
        .drpen_common_in(1'b0),
        .drpen_in(drpen_in),
        .drprdy_common_out(NLW_inst_drprdy_common_out_UNCONNECTED[0]),
        .drprdy_out(drprdy_out),
        .drprst_in(1'b0),
        .drpwe_common_in(1'b0),
        .drpwe_in(drpwe_in),
        .elpcaldvorwren_in(1'b0),
        .elpcalpaorwren_in(1'b0),
        .evoddphicaldone_in(1'b0),
        .evoddphicalstart_in(1'b0),
        .evoddphidrden_in(1'b0),
        .evoddphidwren_in(1'b0),
        .evoddphixrden_in(1'b0),
        .evoddphixwren_in(1'b0),
        .eyescandataerror_out(eyescandataerror_out),
        .eyescanmode_in(1'b0),
        .eyescanreset_in(eyescanreset_in),
        .eyescantrigger_in(eyescantrigger_in),
        .freqos_in(1'b0),
        .gtgrefclk0_in(1'b0),
        .gtgrefclk1_in(1'b0),
        .gtgrefclk_in(1'b0),
        .gthrxn_in(gthrxn_in),
        .gthrxp_in(gthrxp_in),
        .gthtxn_out(gthtxn_out),
        .gthtxp_out(gthtxp_out),
        .gtnorthrefclk00_in(1'b0),
        .gtnorthrefclk01_in(1'b0),
        .gtnorthrefclk0_in(1'b0),
        .gtnorthrefclk10_in(1'b0),
        .gtnorthrefclk11_in(1'b0),
        .gtnorthrefclk1_in(1'b0),
        .gtpowergood_out(gtpowergood_out),
        .gtrefclk00_in(1'b0),
        .gtrefclk01_in(1'b0),
        .gtrefclk0_in(gtrefclk0_in),
        .gtrefclk10_in(1'b0),
        .gtrefclk11_in(1'b0),
        .gtrefclk1_in(1'b0),
        .gtrefclkmonitor_out(NLW_inst_gtrefclkmonitor_out_UNCONNECTED[0]),
        .gtresetsel_in(1'b0),
        .gtrsvd_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .gtrxreset_in(1'b0),
        .gtrxresetsel_in(1'b0),
        .gtsouthrefclk00_in(1'b0),
        .gtsouthrefclk01_in(1'b0),
        .gtsouthrefclk0_in(1'b0),
        .gtsouthrefclk10_in(1'b0),
        .gtsouthrefclk11_in(1'b0),
        .gtsouthrefclk1_in(1'b0),
        .gttxreset_in(1'b0),
        .gttxresetsel_in(1'b0),
        .gtwiz_buffbypass_rx_done_out(NLW_inst_gtwiz_buffbypass_rx_done_out_UNCONNECTED[0]),
        .gtwiz_buffbypass_rx_error_out(NLW_inst_gtwiz_buffbypass_rx_error_out_UNCONNECTED[0]),
        .gtwiz_buffbypass_rx_reset_in(1'b0),
        .gtwiz_buffbypass_rx_start_user_in(1'b0),
        .gtwiz_buffbypass_tx_done_out(NLW_inst_gtwiz_buffbypass_tx_done_out_UNCONNECTED[0]),
        .gtwiz_buffbypass_tx_error_out(NLW_inst_gtwiz_buffbypass_tx_error_out_UNCONNECTED[0]),
        .gtwiz_buffbypass_tx_reset_in(1'b0),
        .gtwiz_buffbypass_tx_start_user_in(1'b0),
        .gtwiz_gthe3_cpll_cal_bufg_ce_in(1'b0),
        .gtwiz_gthe3_cpll_cal_cnt_tol_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .gtwiz_gthe3_cpll_cal_txoutclk_period_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .gtwiz_gthe4_cpll_cal_bufg_ce_in(1'b0),
        .gtwiz_gthe4_cpll_cal_cnt_tol_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .gtwiz_gthe4_cpll_cal_txoutclk_period_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .gtwiz_gtye4_cpll_cal_bufg_ce_in(1'b0),
        .gtwiz_gtye4_cpll_cal_cnt_tol_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .gtwiz_gtye4_cpll_cal_txoutclk_period_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .gtwiz_reset_all_in(gtwiz_reset_all_in),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_qpll0lock_in(1'b0),
        .gtwiz_reset_qpll0reset_out(NLW_inst_gtwiz_reset_qpll0reset_out_UNCONNECTED[0]),
        .gtwiz_reset_qpll1lock_in(1'b0),
        .gtwiz_reset_qpll1reset_out(NLW_inst_gtwiz_reset_qpll1reset_out_UNCONNECTED[0]),
        .gtwiz_reset_rx_cdr_stable_out(gtwiz_reset_rx_cdr_stable_out),
        .gtwiz_reset_rx_datapath_in(gtwiz_reset_rx_datapath_in),
        .gtwiz_reset_rx_done_in(1'b0),
        .gtwiz_reset_rx_done_out(gtwiz_reset_rx_done_out),
        .gtwiz_reset_rx_pll_and_datapath_in(gtwiz_reset_rx_pll_and_datapath_in),
        .gtwiz_reset_tx_datapath_in(gtwiz_reset_tx_datapath_in),
        .gtwiz_reset_tx_done_in(1'b0),
        .gtwiz_reset_tx_done_out(gtwiz_reset_tx_done_out),
        .gtwiz_reset_tx_pll_and_datapath_in(gtwiz_reset_tx_pll_and_datapath_in),
        .gtwiz_userclk_rx_active_in(gtwiz_userclk_rx_active_in),
        .gtwiz_userclk_rx_active_out(NLW_inst_gtwiz_userclk_rx_active_out_UNCONNECTED[0]),
        .gtwiz_userclk_rx_reset_in(1'b0),
        .gtwiz_userclk_rx_srcclk_out(NLW_inst_gtwiz_userclk_rx_srcclk_out_UNCONNECTED[0]),
        .gtwiz_userclk_rx_usrclk2_out(NLW_inst_gtwiz_userclk_rx_usrclk2_out_UNCONNECTED[0]),
        .gtwiz_userclk_rx_usrclk_out(NLW_inst_gtwiz_userclk_rx_usrclk_out_UNCONNECTED[0]),
        .gtwiz_userclk_tx_active_in(gtwiz_userclk_tx_active_in),
        .gtwiz_userclk_tx_active_out(NLW_inst_gtwiz_userclk_tx_active_out_UNCONNECTED[0]),
        .gtwiz_userclk_tx_reset_in(gtwiz_userclk_tx_reset_in),
        .gtwiz_userclk_tx_srcclk_out(NLW_inst_gtwiz_userclk_tx_srcclk_out_UNCONNECTED[0]),
        .gtwiz_userclk_tx_usrclk2_out(NLW_inst_gtwiz_userclk_tx_usrclk2_out_UNCONNECTED[0]),
        .gtwiz_userclk_tx_usrclk_out(NLW_inst_gtwiz_userclk_tx_usrclk_out_UNCONNECTED[0]),
        .gtwiz_userdata_rx_out(gtwiz_userdata_rx_out),
        .gtwiz_userdata_tx_in(gtwiz_userdata_tx_in),
        .gtyrxn_in(1'b0),
        .gtyrxp_in(1'b0),
        .gtytxn_out(NLW_inst_gtytxn_out_UNCONNECTED[0]),
        .gtytxp_out(NLW_inst_gtytxp_out_UNCONNECTED[0]),
        .incpctrl_in(1'b0),
        .loopback_in(loopback_in),
        .looprsvd_in(1'b0),
        .lpbkrxtxseren_in(1'b0),
        .lpbktxrxseren_in(1'b0),
        .pcieeqrxeqadaptdone_in(1'b0),
        .pcierategen3_out(NLW_inst_pcierategen3_out_UNCONNECTED[0]),
        .pcierateidle_out(NLW_inst_pcierateidle_out_UNCONNECTED[0]),
        .pcierateqpll0_in({1'b0,1'b0,1'b0}),
        .pcierateqpll1_in({1'b0,1'b0,1'b0}),
        .pcierateqpllpd_out(NLW_inst_pcierateqpllpd_out_UNCONNECTED[1:0]),
        .pcierateqpllreset_out(NLW_inst_pcierateqpllreset_out_UNCONNECTED[1:0]),
        .pcierstidle_in(1'b0),
        .pciersttxsyncstart_in(1'b0),
        .pciesynctxsyncdone_out(NLW_inst_pciesynctxsyncdone_out_UNCONNECTED[0]),
        .pcieusergen3rdy_out(NLW_inst_pcieusergen3rdy_out_UNCONNECTED[0]),
        .pcieuserphystatusrst_out(NLW_inst_pcieuserphystatusrst_out_UNCONNECTED[0]),
        .pcieuserratedone_in(1'b0),
        .pcieuserratestart_out(NLW_inst_pcieuserratestart_out_UNCONNECTED[0]),
        .pcsrsvdin2_in(1'b0),
        .pcsrsvdin_in(pcsrsvdin_in),
        .pcsrsvdout_out(NLW_inst_pcsrsvdout_out_UNCONNECTED[15:0]),
        .phystatus_out(NLW_inst_phystatus_out_UNCONNECTED[0]),
        .pinrsrvdas_out(NLW_inst_pinrsrvdas_out_UNCONNECTED[15:0]),
        .pmarsvd0_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pmarsvd1_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .pmarsvdin_in(1'b0),
        .pmarsvdout0_out(NLW_inst_pmarsvdout0_out_UNCONNECTED[7:0]),
        .pmarsvdout1_out(NLW_inst_pmarsvdout1_out_UNCONNECTED[7:0]),
        .powerpresent_out(NLW_inst_powerpresent_out_UNCONNECTED[0]),
        .qpll0clk_in(1'b0),
        .qpll0clkrsvd0_in(1'b0),
        .qpll0clkrsvd1_in(1'b0),
        .qpll0fbclklost_out(NLW_inst_qpll0fbclklost_out_UNCONNECTED[0]),
        .qpll0fbdiv_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .qpll0freqlock_in(1'b0),
        .qpll0lock_out(NLW_inst_qpll0lock_out_UNCONNECTED[0]),
        .qpll0lockdetclk_in(1'b0),
        .qpll0locken_in(1'b0),
        .qpll0outclk_out(NLW_inst_qpll0outclk_out_UNCONNECTED[0]),
        .qpll0outrefclk_out(NLW_inst_qpll0outrefclk_out_UNCONNECTED[0]),
        .qpll0pd_in(1'b1),
        .qpll0refclk_in(1'b0),
        .qpll0refclklost_out(NLW_inst_qpll0refclklost_out_UNCONNECTED[0]),
        .qpll0refclksel_in({1'b0,1'b0,1'b1}),
        .qpll0reset_in(1'b1),
        .qpll1clk_in(1'b0),
        .qpll1clkrsvd0_in(1'b0),
        .qpll1clkrsvd1_in(1'b0),
        .qpll1fbclklost_out(NLW_inst_qpll1fbclklost_out_UNCONNECTED[0]),
        .qpll1fbdiv_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .qpll1freqlock_in(1'b0),
        .qpll1lock_out(NLW_inst_qpll1lock_out_UNCONNECTED[0]),
        .qpll1lockdetclk_in(1'b0),
        .qpll1locken_in(1'b0),
        .qpll1outclk_out(NLW_inst_qpll1outclk_out_UNCONNECTED[0]),
        .qpll1outrefclk_out(NLW_inst_qpll1outrefclk_out_UNCONNECTED[0]),
        .qpll1pd_in(1'b1),
        .qpll1refclk_in(1'b0),
        .qpll1refclklost_out(NLW_inst_qpll1refclklost_out_UNCONNECTED[0]),
        .qpll1refclksel_in({1'b0,1'b0,1'b1}),
        .qpll1reset_in(1'b1),
        .qplldmonitor0_out(NLW_inst_qplldmonitor0_out_UNCONNECTED[7:0]),
        .qplldmonitor1_out(NLW_inst_qplldmonitor1_out_UNCONNECTED[7:0]),
        .qpllrsvd1_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .qpllrsvd2_in({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .qpllrsvd3_in({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .qpllrsvd4_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rcalenb_in(1'b1),
        .refclkoutmonitor0_out(NLW_inst_refclkoutmonitor0_out_UNCONNECTED[0]),
        .refclkoutmonitor1_out(NLW_inst_refclkoutmonitor1_out_UNCONNECTED[0]),
        .resetexception_out(NLW_inst_resetexception_out_UNCONNECTED[0]),
        .resetovrd_in(1'b0),
        .rstclkentx_in(1'b0),
        .rx8b10ben_in(rx8b10ben_in),
        .rxafecfoken_in(1'b1),
        .rxbufreset_in(rxbufreset_in),
        .rxbufstatus_out(rxbufstatus_out),
        .rxbyteisaligned_out(rxbyteisaligned_out),
        .rxbyterealign_out(rxbyterealign_out),
        .rxcdrfreqreset_in(1'b0),
        .rxcdrhold_in(rxcdrhold_in),
        .rxcdrlock_out(NLW_inst_rxcdrlock_out_UNCONNECTED[0]),
        .rxcdrovrden_in(1'b0),
        .rxcdrphdone_out(NLW_inst_rxcdrphdone_out_UNCONNECTED[0]),
        .rxcdrreset_in(1'b0),
        .rxcdrresetrsv_in(1'b0),
        .rxchanbondseq_out(NLW_inst_rxchanbondseq_out_UNCONNECTED[0]),
        .rxchanisaligned_out(NLW_inst_rxchanisaligned_out_UNCONNECTED[0]),
        .rxchanrealign_out(NLW_inst_rxchanrealign_out_UNCONNECTED[0]),
        .rxchbonden_in(1'b0),
        .rxchbondi_in({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rxchbondlevel_in({1'b0,1'b0,1'b0}),
        .rxchbondmaster_in(1'b0),
        .rxchbondo_out(NLW_inst_rxchbondo_out_UNCONNECTED[4:0]),
        .rxchbondslave_in(1'b0),
        .rxckcaldone_out(NLW_inst_rxckcaldone_out_UNCONNECTED[0]),
        .rxckcalreset_in(1'b0),
        .rxckcalstart_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rxclkcorcnt_out(NLW_inst_rxclkcorcnt_out_UNCONNECTED[1:0]),
        .rxcominitdet_out(NLW_inst_rxcominitdet_out_UNCONNECTED[0]),
        .rxcommadet_out(rxcommadet_out),
        .rxcommadeten_in(rxcommadeten_in),
        .rxcomsasdet_out(NLW_inst_rxcomsasdet_out_UNCONNECTED[0]),
        .rxcomwakedet_out(NLW_inst_rxcomwakedet_out_UNCONNECTED[0]),
        .rxctrl0_out(rxctrl0_out),
        .rxctrl1_out(rxctrl1_out),
        .rxctrl2_out(rxctrl2_out),
        .rxctrl3_out(rxctrl3_out),
        .rxdata_out(NLW_inst_rxdata_out_UNCONNECTED[127:0]),
        .rxdataextendrsvd_out(NLW_inst_rxdataextendrsvd_out_UNCONNECTED[7:0]),
        .rxdatavalid_out(NLW_inst_rxdatavalid_out_UNCONNECTED[1:0]),
        .rxdccforcestart_in(1'b0),
        .rxdfeagcctrl_in({1'b0,1'b1}),
        .rxdfeagchold_in(1'b0),
        .rxdfeagcovrden_in(rxdfeagcovrden_in),
        .rxdfecfokfcnum_in({1'b1,1'b1,1'b0,1'b1}),
        .rxdfecfokfen_in(1'b0),
        .rxdfecfokfpulse_in(1'b0),
        .rxdfecfokhold_in(1'b0),
        .rxdfecfokovren_in(1'b0),
        .rxdfekhhold_in(1'b0),
        .rxdfekhovrden_in(1'b0),
        .rxdfelfhold_in(1'b0),
        .rxdfelfovrden_in(1'b0),
        .rxdfelpmreset_in(rxdfelpmreset_in),
        .rxdfetap10hold_in(1'b0),
        .rxdfetap10ovrden_in(1'b0),
        .rxdfetap11hold_in(1'b0),
        .rxdfetap11ovrden_in(1'b0),
        .rxdfetap12hold_in(1'b0),
        .rxdfetap12ovrden_in(1'b0),
        .rxdfetap13hold_in(1'b0),
        .rxdfetap13ovrden_in(1'b0),
        .rxdfetap14hold_in(1'b0),
        .rxdfetap14ovrden_in(1'b0),
        .rxdfetap15hold_in(1'b0),
        .rxdfetap15ovrden_in(1'b0),
        .rxdfetap2hold_in(1'b0),
        .rxdfetap2ovrden_in(1'b0),
        .rxdfetap3hold_in(1'b0),
        .rxdfetap3ovrden_in(1'b0),
        .rxdfetap4hold_in(1'b0),
        .rxdfetap4ovrden_in(1'b0),
        .rxdfetap5hold_in(1'b0),
        .rxdfetap5ovrden_in(1'b0),
        .rxdfetap6hold_in(1'b0),
        .rxdfetap6ovrden_in(1'b0),
        .rxdfetap7hold_in(1'b0),
        .rxdfetap7ovrden_in(1'b0),
        .rxdfetap8hold_in(1'b0),
        .rxdfetap8ovrden_in(1'b0),
        .rxdfetap9hold_in(1'b0),
        .rxdfetap9ovrden_in(1'b0),
        .rxdfeuthold_in(1'b0),
        .rxdfeutovrden_in(1'b0),
        .rxdfevphold_in(1'b0),
        .rxdfevpovrden_in(1'b0),
        .rxdfevsen_in(1'b0),
        .rxdfexyden_in(1'b1),
        .rxdlybypass_in(1'b1),
        .rxdlyen_in(1'b0),
        .rxdlyovrden_in(1'b0),
        .rxdlysreset_in(1'b0),
        .rxdlysresetdone_out(NLW_inst_rxdlysresetdone_out_UNCONNECTED[0]),
        .rxelecidle_out(NLW_inst_rxelecidle_out_UNCONNECTED[0]),
        .rxelecidlemode_in({1'b1,1'b1}),
        .rxeqtraining_in(1'b0),
        .rxgearboxslip_in(1'b0),
        .rxheader_out(NLW_inst_rxheader_out_UNCONNECTED[5:0]),
        .rxheadervalid_out(NLW_inst_rxheadervalid_out_UNCONNECTED[1:0]),
        .rxlatclk_in(1'b0),
        .rxlfpstresetdet_out(NLW_inst_rxlfpstresetdet_out_UNCONNECTED[0]),
        .rxlfpsu2lpexitdet_out(NLW_inst_rxlfpsu2lpexitdet_out_UNCONNECTED[0]),
        .rxlfpsu3wakedet_out(NLW_inst_rxlfpsu3wakedet_out_UNCONNECTED[0]),
        .rxlpmen_in(rxlpmen_in),
        .rxlpmgchold_in(1'b0),
        .rxlpmgcovrden_in(1'b0),
        .rxlpmhfhold_in(1'b0),
        .rxlpmhfovrden_in(1'b0),
        .rxlpmlfhold_in(1'b0),
        .rxlpmlfklovrden_in(1'b0),
        .rxlpmoshold_in(1'b0),
        .rxlpmosovrden_in(1'b0),
        .rxmcommaalignen_in(rxmcommaalignen_in),
        .rxmonitorout_out(rxmonitorout_out),
        .rxmonitorsel_in(rxmonitorsel_in),
        .rxoobreset_in(1'b0),
        .rxoscalreset_in(1'b0),
        .rxoshold_in(1'b0),
        .rxosintcfg_in(1'b0),
        .rxosintdone_out(NLW_inst_rxosintdone_out_UNCONNECTED[0]),
        .rxosinten_in(1'b0),
        .rxosinthold_in(1'b0),
        .rxosintovrden_in(1'b0),
        .rxosintstarted_out(NLW_inst_rxosintstarted_out_UNCONNECTED[0]),
        .rxosintstrobe_in(1'b0),
        .rxosintstrobedone_out(NLW_inst_rxosintstrobedone_out_UNCONNECTED[0]),
        .rxosintstrobestarted_out(NLW_inst_rxosintstrobestarted_out_UNCONNECTED[0]),
        .rxosinttestovrden_in(1'b0),
        .rxosovrden_in(1'b0),
        .rxoutclk_out(rxoutclk_out),
        .rxoutclkfabric_out(NLW_inst_rxoutclkfabric_out_UNCONNECTED[0]),
        .rxoutclkpcs_out(NLW_inst_rxoutclkpcs_out_UNCONNECTED[0]),
        .rxoutclksel_in({1'b0,1'b1,1'b0}),
        .rxpcommaalignen_in(rxpcommaalignen_in),
        .rxpcsreset_in(rxpcsreset_in),
        .rxpd_in(rxpd_in),
        .rxphalign_in(1'b0),
        .rxphaligndone_out(NLW_inst_rxphaligndone_out_UNCONNECTED[0]),
        .rxphalignen_in(1'b0),
        .rxphalignerr_out(NLW_inst_rxphalignerr_out_UNCONNECTED[0]),
        .rxphdlypd_in(1'b1),
        .rxphdlyreset_in(1'b0),
        .rxphovrden_in(1'b0),
        .rxpllclksel_in({1'b0,1'b0}),
        .rxpmareset_in(rxpmareset_in),
        .rxpmaresetdone_out(rxpmaresetdone_out),
        .rxpolarity_in(rxpolarity_in),
        .rxprbscntreset_in(rxprbscntreset_in),
        .rxprbserr_out(rxprbserr_out),
        .rxprbslocked_out(NLW_inst_rxprbslocked_out_UNCONNECTED[0]),
        .rxprbssel_in(rxprbssel_in),
        .rxprgdivresetdone_out(NLW_inst_rxprgdivresetdone_out_UNCONNECTED[0]),
        .rxprogdivreset_in(1'b0),
        .rxqpien_in(1'b0),
        .rxqpisenn_out(NLW_inst_rxqpisenn_out_UNCONNECTED[0]),
        .rxqpisenp_out(NLW_inst_rxqpisenp_out_UNCONNECTED[0]),
        .rxrate_in(rxrate_in),
        .rxratedone_out(rxratedone_out),
        .rxratemode_in(1'b0),
        .rxrecclk0_sel_out(NLW_inst_rxrecclk0_sel_out_UNCONNECTED[0]),
        .rxrecclk0sel_out(NLW_inst_rxrecclk0sel_out_UNCONNECTED[1:0]),
        .rxrecclk1_sel_out(NLW_inst_rxrecclk1_sel_out_UNCONNECTED[0]),
        .rxrecclk1sel_out(NLW_inst_rxrecclk1sel_out_UNCONNECTED[1:0]),
        .rxrecclkout_out(NLW_inst_rxrecclkout_out_UNCONNECTED[0]),
        .rxresetdone_out(rxresetdone_out),
        .rxslide_in(1'b0),
        .rxsliderdy_out(NLW_inst_rxsliderdy_out_UNCONNECTED[0]),
        .rxslipdone_out(NLW_inst_rxslipdone_out_UNCONNECTED[0]),
        .rxslipoutclk_in(1'b0),
        .rxslipoutclkrdy_out(NLW_inst_rxslipoutclkrdy_out_UNCONNECTED[0]),
        .rxslippma_in(1'b0),
        .rxslippmardy_out(NLW_inst_rxslippmardy_out_UNCONNECTED[0]),
        .rxstartofseq_out(NLW_inst_rxstartofseq_out_UNCONNECTED[1:0]),
        .rxstatus_out(NLW_inst_rxstatus_out_UNCONNECTED[2:0]),
        .rxsyncallin_in(1'b0),
        .rxsyncdone_out(NLW_inst_rxsyncdone_out_UNCONNECTED[0]),
        .rxsyncin_in(1'b0),
        .rxsyncmode_in(1'b0),
        .rxsyncout_out(NLW_inst_rxsyncout_out_UNCONNECTED[0]),
        .rxsysclksel_in({1'b0,1'b0}),
        .rxtermination_in(1'b0),
        .rxuserrdy_in(1'b1),
        .rxusrclk2_in(rxusrclk2_in),
        .rxusrclk_in(rxusrclk_in),
        .rxvalid_out(NLW_inst_rxvalid_out_UNCONNECTED[0]),
        .sdm0data_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .sdm0finalout_out(NLW_inst_sdm0finalout_out_UNCONNECTED[3:0]),
        .sdm0reset_in(1'b0),
        .sdm0testdata_out(NLW_inst_sdm0testdata_out_UNCONNECTED[14:0]),
        .sdm0toggle_in(1'b0),
        .sdm0width_in({1'b0,1'b0}),
        .sdm1data_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .sdm1finalout_out(NLW_inst_sdm1finalout_out_UNCONNECTED[3:0]),
        .sdm1reset_in(1'b0),
        .sdm1testdata_out(NLW_inst_sdm1testdata_out_UNCONNECTED[14:0]),
        .sdm1toggle_in(1'b0),
        .sdm1width_in({1'b0,1'b0}),
        .sigvalidclk_in(1'b0),
        .tcongpi_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .tcongpo_out(NLW_inst_tcongpo_out_UNCONNECTED[9:0]),
        .tconpowerup_in(1'b0),
        .tconreset_in({1'b0,1'b0}),
        .tconrsvdin1_in({1'b0,1'b0}),
        .tconrsvdout0_out(NLW_inst_tconrsvdout0_out_UNCONNECTED[0]),
        .tstin_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .tx8b10bbypass_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .tx8b10ben_in(tx8b10ben_in),
        .txbufdiffctrl_in(1'b0),
        .txbufstatus_out(txbufstatus_out),
        .txcomfinish_out(NLW_inst_txcomfinish_out_UNCONNECTED[0]),
        .txcominit_in(1'b0),
        .txcomsas_in(1'b0),
        .txcomwake_in(1'b0),
        .txctrl0_in(txctrl0_in),
        .txctrl1_in(txctrl1_in),
        .txctrl2_in(txctrl2_in),
        .txdata_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .txdataextendrsvd_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .txdccdone_out(NLW_inst_txdccdone_out_UNCONNECTED[0]),
        .txdccforcestart_in(1'b0),
        .txdccreset_in(1'b0),
        .txdeemph_in({1'b0,1'b0}),
        .txdetectrx_in(1'b0),
        .txdiffctrl_in(txdiffctrl_in),
        .txdiffpd_in(1'b0),
        .txdlybypass_in(1'b1),
        .txdlyen_in(1'b0),
        .txdlyhold_in(1'b0),
        .txdlyovrden_in(1'b0),
        .txdlysreset_in(1'b0),
        .txdlysresetdone_out(NLW_inst_txdlysresetdone_out_UNCONNECTED[0]),
        .txdlyupdown_in(1'b0),
        .txelecidle_in(txelecidle_in),
        .txelforcestart_in(1'b0),
        .txheader_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .txinhibit_in(txinhibit_in),
        .txlatclk_in(1'b0),
        .txlfpstreset_in(1'b0),
        .txlfpsu2lpexit_in(1'b0),
        .txlfpsu3wake_in(1'b0),
        .txmaincursor_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .txmargin_in({1'b0,1'b0,1'b0}),
        .txmuxdcdexhold_in(1'b0),
        .txmuxdcdorwren_in(1'b0),
        .txoneszeros_in(1'b0),
        .txoutclk_out(txoutclk_out),
        .txoutclkfabric_out(NLW_inst_txoutclkfabric_out_UNCONNECTED[0]),
        .txoutclkpcs_out(NLW_inst_txoutclkpcs_out_UNCONNECTED[0]),
        .txoutclksel_in(txoutclksel_in),
        .txpcsreset_in(txpcsreset_in),
        .txpd_in(txpd_in),
        .txpdelecidlemode_in(1'b0),
        .txphalign_in(1'b0),
        .txphaligndone_out(NLW_inst_txphaligndone_out_UNCONNECTED[0]),
        .txphalignen_in(1'b0),
        .txphdlypd_in(1'b1),
        .txphdlyreset_in(1'b0),
        .txphdlytstclk_in(1'b0),
        .txphinit_in(1'b0),
        .txphinitdone_out(NLW_inst_txphinitdone_out_UNCONNECTED[0]),
        .txphovrden_in(1'b0),
        .txpippmen_in(1'b0),
        .txpippmovrden_in(1'b0),
        .txpippmpd_in(1'b0),
        .txpippmsel_in(1'b0),
        .txpippmstepsize_in({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .txpisopd_in(1'b0),
        .txpllclksel_in({1'b0,1'b0}),
        .txpmareset_in(txpmareset_in),
        .txpmaresetdone_out(txpmaresetdone_out),
        .txpolarity_in(txpolarity_in),
        .txpostcursor_in(txpostcursor_in),
        .txpostcursorinv_in(1'b0),
        .txprbsforceerr_in(txprbsforceerr_in),
        .txprbssel_in(txprbssel_in),
        .txprecursor_in(txprecursor_in),
        .txprecursorinv_in(1'b0),
        .txprgdivresetdone_out(NLW_inst_txprgdivresetdone_out_UNCONNECTED[0]),
        .txprogdivreset_in(1'b0),
        .txqpibiasen_in(1'b0),
        .txqpisenn_out(NLW_inst_txqpisenn_out_UNCONNECTED[0]),
        .txqpisenp_out(NLW_inst_txqpisenp_out_UNCONNECTED[0]),
        .txqpistrongpdown_in(1'b0),
        .txqpiweakpup_in(1'b0),
        .txrate_in({1'b0,1'b0,1'b0}),
        .txratedone_out(NLW_inst_txratedone_out_UNCONNECTED[0]),
        .txratemode_in(1'b0),
        .txresetdone_out(txresetdone_out),
        .txsequence_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .txswing_in(1'b0),
        .txsyncallin_in(1'b0),
        .txsyncdone_out(NLW_inst_txsyncdone_out_UNCONNECTED[0]),
        .txsyncin_in(1'b0),
        .txsyncmode_in(1'b0),
        .txsyncout_out(NLW_inst_txsyncout_out_UNCONNECTED[0]),
        .txsysclksel_in({1'b0,1'b0}),
        .txuserrdy_in(1'b1),
        .txusrclk2_in(txusrclk2_in),
        .txusrclk_in(txusrclk_in),
        .ubcfgstreamen_in(1'b0),
        .ubdaddr_out(NLW_inst_ubdaddr_out_UNCONNECTED[0]),
        .ubden_out(NLW_inst_ubden_out_UNCONNECTED[0]),
        .ubdi_out(NLW_inst_ubdi_out_UNCONNECTED[0]),
        .ubdo_in(1'b0),
        .ubdrdy_in(1'b0),
        .ubdwe_out(NLW_inst_ubdwe_out_UNCONNECTED[0]),
        .ubenable_in(1'b0),
        .ubgpi_in(1'b0),
        .ubintr_in(1'b0),
        .ubiolmbrst_in(1'b0),
        .ubmbrst_in(1'b0),
        .ubmdmcapture_in(1'b0),
        .ubmdmdbgrst_in(1'b0),
        .ubmdmdbgupdate_in(1'b0),
        .ubmdmregen_in(1'b0),
        .ubmdmshift_in(1'b0),
        .ubmdmsysrst_in(1'b0),
        .ubmdmtck_in(1'b0),
        .ubmdmtdi_in(1'b0),
        .ubmdmtdo_out(NLW_inst_ubmdmtdo_out_UNCONNECTED[0]),
        .ubrsvdout_out(NLW_inst_ubrsvdout_out_UNCONNECTED[0]),
        .ubtxuart_out(NLW_inst_ubtxuart_out_UNCONNECTED[0]));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_gt_gthe4_channel_wrapper" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_gt_gthe4_channel_wrapper
   (bufgtce_out,
    bufgtreset_out,
    cpllfbclklost_out,
    GTHE4_CPLLLOCK_IN,
    cpllrefclklost_out,
    dmonitoroutclk_out,
    \gen_gtwizard_gthe4.drprdy_int ,
    eyescandataerror_out,
    gthtxn_out,
    gthtxp_out,
    \gen_gtwizard_gthe4.gtpowergood_int ,
    gtrefclkmonitor_out,
    pcierategen3_out,
    pcierateidle_out,
    pciesynctxsyncdone_out,
    pcieusergen3rdy_out,
    pcieuserphystatusrst_out,
    pcieuserratestart_out,
    phystatus_out,
    powerpresent_out,
    resetexception_out,
    rxbyteisaligned_out,
    rxbyterealign_out,
    rxcdrlock_out,
    rxcdrphdone_out,
    rxchanbondseq_out,
    rxchanisaligned_out,
    rxchanrealign_out,
    rxckcaldone_out,
    rxcominitdet_out,
    rxcommadet_out,
    rxcomsasdet_out,
    rxcomwakedet_out,
    rxdlysresetdone_out,
    rxelecidle_out,
    rxlfpstresetdet_out,
    rxlfpsu2lpexitdet_out,
    rxlfpsu3wakedet_out,
    rxosintdone_out,
    rxosintstarted_out,
    rxosintstrobedone_out,
    rxosintstrobestarted_out,
    rxoutclk_out,
    rxoutclkfabric_out,
    rxoutclkpcs_out,
    rxphaligndone_out,
    rxphalignerr_out,
    rxpmaresetdone_out,
    rxprbserr_out,
    rxprbslocked_out,
    rxprgdivresetdone_out,
    rxqpisenn_out,
    rxqpisenp_out,
    rxratedone_out,
    rxrecclkout_out,
    rxresetdone_out,
    rxsliderdy_out,
    rxslipdone_out,
    rxslipoutclkrdy_out,
    rxslippmardy_out,
    rxsyncdone_out,
    rxsyncout_out,
    rxvalid_out,
    txcomfinish_out,
    txdccdone_out,
    txdlysresetdone_out,
    txoutclk_out,
    txoutclkfabric_out,
    txoutclkpcs_out,
    txphaligndone_out,
    txphinitdone_out,
    txpmaresetdone_out,
    GTHE4_TXPRGDIVRESETDONE_IN,
    txqpisenn_out,
    txqpisenp_out,
    txratedone_out,
    txresetdone_out,
    txsyncdone_out,
    txsyncout_out,
    rxdata_out,
    dmonitorout_out,
    D,
    pcsrsvdout_out,
    pinrsrvdas_out,
    rxctrl0_out,
    rxctrl1_out,
    pcierateqpllpd_out,
    pcierateqpllreset_out,
    rxclkcorcnt_out,
    rxdatavalid_out,
    rxheadervalid_out,
    rxstartofseq_out,
    txbufstatus_out,
    bufgtcemask_out,
    bufgtrstmask_out,
    rxbufstatus_out,
    rxstatus_out,
    rxchbondo_out,
    rxheader_out,
    rxctrl2_out,
    rxctrl3_out,
    rxdataextendrsvd_out,
    rxmonitorout_out,
    bufgtdiv_out,
    cpllpd_int_reg,
    cdrstepdir_in,
    cdrstepsq_in,
    cdrstepsx_in,
    cfgreset_in,
    clkrsvd0_in,
    clkrsvd1_in,
    cpllfreqlock_in,
    cplllockdetclk_in,
    cplllocken_in,
    i_in_meta_reg,
    i_in_meta_reg_0,
    dmonfiforeset_in,
    dmonitorclk_in,
    drpclk_in,
    GTHE4_CHANNEL_DRPEN_OUT,
    drprst_in,
    GTHE4_CHANNEL_DRPWE_OUT,
    eyescanreset_in,
    eyescantrigger_in,
    freqos_in,
    gtgrefclk_in,
    gthrxn_in,
    gthrxp_in,
    gtnorthrefclk0_in,
    gtnorthrefclk1_in,
    gtrefclk0_in,
    gtrefclk1_in,
    \gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ,
    gtrxresetsel_in,
    gtsouthrefclk0_in,
    gtsouthrefclk1_in,
    \gen_gtwizard_gthe4.gttxreset_int ,
    gttxresetsel_in,
    incpctrl_in,
    pcieeqrxeqadaptdone_in,
    pcierstidle_in,
    pciersttxsyncstart_in,
    pcieuserratedone_in,
    qpll0clk_in,
    qpll0freqlock_in,
    qpll0refclk_in,
    qpll1clk_in,
    qpll1freqlock_in,
    qpll1refclk_in,
    resetovrd_in,
    rx8b10ben_in,
    rxafecfoken_in,
    rxbufreset_in,
    rxcdrfreqreset_in,
    rxcdrhold_in,
    rxcdrovrden_in,
    rxcdrreset_in,
    rxchbonden_in,
    rxchbondmaster_in,
    rxchbondslave_in,
    rxckcalreset_in,
    rxcommadeten_in,
    rxdfeagchold_in,
    rxdfeagcovrden_in,
    rxdfecfokfen_in,
    rxdfecfokfpulse_in,
    rxdfecfokhold_in,
    rxdfecfokovren_in,
    rxdfekhhold_in,
    rxdfekhovrden_in,
    rxdfelfhold_in,
    rxdfelfovrden_in,
    rxdfelpmreset_in,
    rxdfetap10hold_in,
    rxdfetap10ovrden_in,
    rxdfetap11hold_in,
    rxdfetap11ovrden_in,
    rxdfetap12hold_in,
    rxdfetap12ovrden_in,
    rxdfetap13hold_in,
    rxdfetap13ovrden_in,
    rxdfetap14hold_in,
    rxdfetap14ovrden_in,
    rxdfetap15hold_in,
    rxdfetap15ovrden_in,
    rxdfetap2hold_in,
    rxdfetap2ovrden_in,
    rxdfetap3hold_in,
    rxdfetap3ovrden_in,
    rxdfetap4hold_in,
    rxdfetap4ovrden_in,
    rxdfetap5hold_in,
    rxdfetap5ovrden_in,
    rxdfetap6hold_in,
    rxdfetap6ovrden_in,
    rxdfetap7hold_in,
    rxdfetap7ovrden_in,
    rxdfetap8hold_in,
    rxdfetap8ovrden_in,
    rxdfetap9hold_in,
    rxdfetap9ovrden_in,
    rxdfeuthold_in,
    rxdfeutovrden_in,
    rxdfevphold_in,
    rxdfevpovrden_in,
    rxdfexyden_in,
    rxdlybypass_in,
    rxdlyen_in,
    rxdlyovrden_in,
    rxdlysreset_in,
    rxeqtraining_in,
    rxgearboxslip_in,
    rxlatclk_in,
    rxlpmen_in,
    rxlpmgchold_in,
    rxlpmgcovrden_in,
    rxlpmhfhold_in,
    rxlpmhfovrden_in,
    rxlpmlfhold_in,
    rxlpmlfklovrden_in,
    rxlpmoshold_in,
    rxlpmosovrden_in,
    rxmcommaalignen_in,
    rxoobreset_in,
    rxoscalreset_in,
    rxoshold_in,
    rxosovrden_in,
    rxpcommaalignen_in,
    rxpcsreset_in,
    rxphalign_in,
    rxphalignen_in,
    rxphdlypd_in,
    rxphdlyreset_in,
    rxphovrden_in,
    \gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ,
    rxpolarity_in,
    rxprbscntreset_in,
    \gen_gtwizard_gthe4.rxprogdivreset_int ,
    rxqpien_in,
    i_in_meta_reg_1,
    rxslide_in,
    rxslipoutclk_in,
    rxslippma_in,
    rxsyncallin_in,
    rxsyncin_in,
    rxsyncmode_in,
    rxtermination_in,
    \gen_gtwizard_gthe4.rxuserrdy_int ,
    rxusrclk_in,
    rxusrclk2_in,
    sigvalidclk_in,
    tx8b10ben_in,
    txcominit_in,
    txcomsas_in,
    txcomwake_in,
    txdccforcestart_in,
    txdccreset_in,
    txdetectrx_in,
    txdlybypass_in,
    txdlyen_in,
    txdlyhold_in,
    txdlyovrden_in,
    txdlysreset_in,
    txdlyupdown_in,
    txelecidle_in,
    txinhibit_in,
    txlatclk_in,
    txlfpstreset_in,
    txlfpsu2lpexit_in,
    txlfpsu3wake_in,
    txmuxdcdexhold_in,
    txmuxdcdorwren_in,
    txoneszeros_in,
    txpcsreset_in,
    txpdelecidlemode_in,
    txphalign_in,
    txphalignen_in,
    txphdlypd_in,
    txphdlyreset_in,
    txphdlytstclk_in,
    txphinit_in,
    txphovrden_in,
    txpippmen_in,
    txpippmovrden_in,
    txpippmpd_in,
    txpippmsel_in,
    txpisopd_in,
    txpmareset_in,
    txpolarity_in,
    txprbsforceerr_in,
    GTHE4_TXPROGDIVRESET_OUT,
    txqpibiasen_in,
    txqpiweakpup_in,
    txratemode_in,
    txswing_in,
    txsyncallin_in,
    txsyncin_in,
    txsyncmode_in,
    \gen_gtwizard_gthe4.txuserrdy_int ,
    txusrclk_in,
    txusrclk2_in,
    gtwiz_userdata_tx_in,
    Q,
    gtrsvd_in,
    pcsrsvdin_in,
    txctrl0_in,
    txctrl1_in,
    tstin_in,
    rxdfeagcctrl_in,
    rxelecidlemode_in,
    rxmonitorsel_in,
    RXPD,
    rxpllclksel_in,
    rxsysclksel_in,
    txdeemph_in,
    txpd_in,
    txpllclksel_in,
    txsysclksel_in,
    cpllrefclksel_in,
    loopback_in,
    rxchbondlevel_in,
    rxoutclksel_in,
    RXRATE,
    txmargin_in,
    i_in_meta_reg_2,
    txrate_in,
    rxdfecfokfcnum_in,
    rxprbssel_in,
    txprbssel_in,
    rxchbondi_in,
    txdiffctrl_in,
    txpippmstepsize_in,
    txpostcursor_in,
    txprecursor_in,
    txheader_in,
    rxckcalstart_in,
    txmaincursor_in,
    txsequence_in,
    tx8b10bbypass_in,
    txctrl2_in,
    txdataextendrsvd_in,
    i_in_meta_reg_3,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]bufgtce_out;
  output [0:0]bufgtreset_out;
  output [0:0]cpllfbclklost_out;
  output GTHE4_CPLLLOCK_IN;
  output [0:0]cpllrefclklost_out;
  output [0:0]dmonitoroutclk_out;
  output \gen_gtwizard_gthe4.drprdy_int ;
  output [0:0]eyescandataerror_out;
  output [0:0]gthtxn_out;
  output [0:0]gthtxp_out;
  output \gen_gtwizard_gthe4.gtpowergood_int ;
  output [0:0]gtrefclkmonitor_out;
  output [0:0]pcierategen3_out;
  output [0:0]pcierateidle_out;
  output [0:0]pciesynctxsyncdone_out;
  output [0:0]pcieusergen3rdy_out;
  output [0:0]pcieuserphystatusrst_out;
  output [0:0]pcieuserratestart_out;
  output [0:0]phystatus_out;
  output [0:0]powerpresent_out;
  output [0:0]resetexception_out;
  output [0:0]rxbyteisaligned_out;
  output [0:0]rxbyterealign_out;
  output [0:0]rxcdrlock_out;
  output [0:0]rxcdrphdone_out;
  output [0:0]rxchanbondseq_out;
  output [0:0]rxchanisaligned_out;
  output [0:0]rxchanrealign_out;
  output [0:0]rxckcaldone_out;
  output [0:0]rxcominitdet_out;
  output [0:0]rxcommadet_out;
  output [0:0]rxcomsasdet_out;
  output [0:0]rxcomwakedet_out;
  output [0:0]rxdlysresetdone_out;
  output [0:0]rxelecidle_out;
  output [0:0]rxlfpstresetdet_out;
  output [0:0]rxlfpsu2lpexitdet_out;
  output [0:0]rxlfpsu3wakedet_out;
  output [0:0]rxosintdone_out;
  output [0:0]rxosintstarted_out;
  output [0:0]rxosintstrobedone_out;
  output [0:0]rxosintstrobestarted_out;
  output [0:0]rxoutclk_out;
  output [0:0]rxoutclkfabric_out;
  output [0:0]rxoutclkpcs_out;
  output [0:0]rxphaligndone_out;
  output [0:0]rxphalignerr_out;
  output [0:0]rxpmaresetdone_out;
  output [0:0]rxprbserr_out;
  output [0:0]rxprbslocked_out;
  output [0:0]rxprgdivresetdone_out;
  output [0:0]rxqpisenn_out;
  output [0:0]rxqpisenp_out;
  output [0:0]rxratedone_out;
  output [0:0]rxrecclkout_out;
  output [0:0]rxresetdone_out;
  output [0:0]rxsliderdy_out;
  output [0:0]rxslipdone_out;
  output [0:0]rxslipoutclkrdy_out;
  output [0:0]rxslippmardy_out;
  output [0:0]rxsyncdone_out;
  output [0:0]rxsyncout_out;
  output [0:0]rxvalid_out;
  output [0:0]txcomfinish_out;
  output [0:0]txdccdone_out;
  output [0:0]txdlysresetdone_out;
  output [0:0]txoutclk_out;
  output [0:0]txoutclkfabric_out;
  output [0:0]txoutclkpcs_out;
  output [0:0]txphaligndone_out;
  output [0:0]txphinitdone_out;
  output [0:0]txpmaresetdone_out;
  output GTHE4_TXPRGDIVRESETDONE_IN;
  output [0:0]txqpisenn_out;
  output [0:0]txqpisenp_out;
  output [0:0]txratedone_out;
  output [0:0]txresetdone_out;
  output [0:0]txsyncdone_out;
  output [0:0]txsyncout_out;
  output [127:0]rxdata_out;
  output [15:0]dmonitorout_out;
  output [15:0]D;
  output [15:0]pcsrsvdout_out;
  output [15:0]pinrsrvdas_out;
  output [15:0]rxctrl0_out;
  output [15:0]rxctrl1_out;
  output [1:0]pcierateqpllpd_out;
  output [1:0]pcierateqpllreset_out;
  output [1:0]rxclkcorcnt_out;
  output [1:0]rxdatavalid_out;
  output [1:0]rxheadervalid_out;
  output [1:0]rxstartofseq_out;
  output [1:0]txbufstatus_out;
  output [2:0]bufgtcemask_out;
  output [2:0]bufgtrstmask_out;
  output [2:0]rxbufstatus_out;
  output [2:0]rxstatus_out;
  output [4:0]rxchbondo_out;
  output [5:0]rxheader_out;
  output [7:0]rxctrl2_out;
  output [7:0]rxctrl3_out;
  output [7:0]rxdataextendrsvd_out;
  output [7:0]rxmonitorout_out;
  output [8:0]bufgtdiv_out;
  output cpllpd_int_reg;
  input [0:0]cdrstepdir_in;
  input [0:0]cdrstepsq_in;
  input [0:0]cdrstepsx_in;
  input [0:0]cfgreset_in;
  input [0:0]clkrsvd0_in;
  input [0:0]clkrsvd1_in;
  input [0:0]cpllfreqlock_in;
  input [0:0]cplllockdetclk_in;
  input [0:0]cplllocken_in;
  input i_in_meta_reg;
  input i_in_meta_reg_0;
  input [0:0]dmonfiforeset_in;
  input [0:0]dmonitorclk_in;
  input [0:0]drpclk_in;
  input GTHE4_CHANNEL_DRPEN_OUT;
  input [0:0]drprst_in;
  input GTHE4_CHANNEL_DRPWE_OUT;
  input [0:0]eyescanreset_in;
  input [0:0]eyescantrigger_in;
  input [0:0]freqos_in;
  input [0:0]gtgrefclk_in;
  input [0:0]gthrxn_in;
  input [0:0]gthrxp_in;
  input [0:0]gtnorthrefclk0_in;
  input [0:0]gtnorthrefclk1_in;
  input [0:0]gtrefclk0_in;
  input [0:0]gtrefclk1_in;
  input \gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ;
  input [0:0]gtrxresetsel_in;
  input [0:0]gtsouthrefclk0_in;
  input [0:0]gtsouthrefclk1_in;
  input \gen_gtwizard_gthe4.gttxreset_int ;
  input [0:0]gttxresetsel_in;
  input [0:0]incpctrl_in;
  input [0:0]pcieeqrxeqadaptdone_in;
  input [0:0]pcierstidle_in;
  input [0:0]pciersttxsyncstart_in;
  input [0:0]pcieuserratedone_in;
  input [0:0]qpll0clk_in;
  input [0:0]qpll0freqlock_in;
  input [0:0]qpll0refclk_in;
  input [0:0]qpll1clk_in;
  input [0:0]qpll1freqlock_in;
  input [0:0]qpll1refclk_in;
  input [0:0]resetovrd_in;
  input [0:0]rx8b10ben_in;
  input [0:0]rxafecfoken_in;
  input [0:0]rxbufreset_in;
  input [0:0]rxcdrfreqreset_in;
  input [0:0]rxcdrhold_in;
  input [0:0]rxcdrovrden_in;
  input [0:0]rxcdrreset_in;
  input [0:0]rxchbonden_in;
  input [0:0]rxchbondmaster_in;
  input [0:0]rxchbondslave_in;
  input [0:0]rxckcalreset_in;
  input [0:0]rxcommadeten_in;
  input [0:0]rxdfeagchold_in;
  input [0:0]rxdfeagcovrden_in;
  input [0:0]rxdfecfokfen_in;
  input [0:0]rxdfecfokfpulse_in;
  input [0:0]rxdfecfokhold_in;
  input [0:0]rxdfecfokovren_in;
  input [0:0]rxdfekhhold_in;
  input [0:0]rxdfekhovrden_in;
  input [0:0]rxdfelfhold_in;
  input [0:0]rxdfelfovrden_in;
  input [0:0]rxdfelpmreset_in;
  input [0:0]rxdfetap10hold_in;
  input [0:0]rxdfetap10ovrden_in;
  input [0:0]rxdfetap11hold_in;
  input [0:0]rxdfetap11ovrden_in;
  input [0:0]rxdfetap12hold_in;
  input [0:0]rxdfetap12ovrden_in;
  input [0:0]rxdfetap13hold_in;
  input [0:0]rxdfetap13ovrden_in;
  input [0:0]rxdfetap14hold_in;
  input [0:0]rxdfetap14ovrden_in;
  input [0:0]rxdfetap15hold_in;
  input [0:0]rxdfetap15ovrden_in;
  input [0:0]rxdfetap2hold_in;
  input [0:0]rxdfetap2ovrden_in;
  input [0:0]rxdfetap3hold_in;
  input [0:0]rxdfetap3ovrden_in;
  input [0:0]rxdfetap4hold_in;
  input [0:0]rxdfetap4ovrden_in;
  input [0:0]rxdfetap5hold_in;
  input [0:0]rxdfetap5ovrden_in;
  input [0:0]rxdfetap6hold_in;
  input [0:0]rxdfetap6ovrden_in;
  input [0:0]rxdfetap7hold_in;
  input [0:0]rxdfetap7ovrden_in;
  input [0:0]rxdfetap8hold_in;
  input [0:0]rxdfetap8ovrden_in;
  input [0:0]rxdfetap9hold_in;
  input [0:0]rxdfetap9ovrden_in;
  input [0:0]rxdfeuthold_in;
  input [0:0]rxdfeutovrden_in;
  input [0:0]rxdfevphold_in;
  input [0:0]rxdfevpovrden_in;
  input [0:0]rxdfexyden_in;
  input [0:0]rxdlybypass_in;
  input [0:0]rxdlyen_in;
  input [0:0]rxdlyovrden_in;
  input [0:0]rxdlysreset_in;
  input [0:0]rxeqtraining_in;
  input [0:0]rxgearboxslip_in;
  input [0:0]rxlatclk_in;
  input [0:0]rxlpmen_in;
  input [0:0]rxlpmgchold_in;
  input [0:0]rxlpmgcovrden_in;
  input [0:0]rxlpmhfhold_in;
  input [0:0]rxlpmhfovrden_in;
  input [0:0]rxlpmlfhold_in;
  input [0:0]rxlpmlfklovrden_in;
  input [0:0]rxlpmoshold_in;
  input [0:0]rxlpmosovrden_in;
  input [0:0]rxmcommaalignen_in;
  input [0:0]rxoobreset_in;
  input [0:0]rxoscalreset_in;
  input [0:0]rxoshold_in;
  input [0:0]rxosovrden_in;
  input [0:0]rxpcommaalignen_in;
  input [0:0]rxpcsreset_in;
  input [0:0]rxphalign_in;
  input [0:0]rxphalignen_in;
  input [0:0]rxphdlypd_in;
  input [0:0]rxphdlyreset_in;
  input [0:0]rxphovrden_in;
  input \gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ;
  input [0:0]rxpolarity_in;
  input [0:0]rxprbscntreset_in;
  input \gen_gtwizard_gthe4.rxprogdivreset_int ;
  input [0:0]rxqpien_in;
  input i_in_meta_reg_1;
  input [0:0]rxslide_in;
  input [0:0]rxslipoutclk_in;
  input [0:0]rxslippma_in;
  input [0:0]rxsyncallin_in;
  input [0:0]rxsyncin_in;
  input [0:0]rxsyncmode_in;
  input [0:0]rxtermination_in;
  input \gen_gtwizard_gthe4.rxuserrdy_int ;
  input [0:0]rxusrclk_in;
  input [0:0]rxusrclk2_in;
  input [0:0]sigvalidclk_in;
  input [0:0]tx8b10ben_in;
  input [0:0]txcominit_in;
  input [0:0]txcomsas_in;
  input [0:0]txcomwake_in;
  input [0:0]txdccforcestart_in;
  input [0:0]txdccreset_in;
  input [0:0]txdetectrx_in;
  input [0:0]txdlybypass_in;
  input [0:0]txdlyen_in;
  input [0:0]txdlyhold_in;
  input [0:0]txdlyovrden_in;
  input [0:0]txdlysreset_in;
  input [0:0]txdlyupdown_in;
  input [0:0]txelecidle_in;
  input [0:0]txinhibit_in;
  input [0:0]txlatclk_in;
  input [0:0]txlfpstreset_in;
  input [0:0]txlfpsu2lpexit_in;
  input [0:0]txlfpsu3wake_in;
  input [0:0]txmuxdcdexhold_in;
  input [0:0]txmuxdcdorwren_in;
  input [0:0]txoneszeros_in;
  input [0:0]txpcsreset_in;
  input [0:0]txpdelecidlemode_in;
  input [0:0]txphalign_in;
  input [0:0]txphalignen_in;
  input [0:0]txphdlypd_in;
  input [0:0]txphdlyreset_in;
  input [0:0]txphdlytstclk_in;
  input [0:0]txphinit_in;
  input [0:0]txphovrden_in;
  input [0:0]txpippmen_in;
  input [0:0]txpippmovrden_in;
  input [0:0]txpippmpd_in;
  input [0:0]txpippmsel_in;
  input [0:0]txpisopd_in;
  input [0:0]txpmareset_in;
  input [0:0]txpolarity_in;
  input [0:0]txprbsforceerr_in;
  input GTHE4_TXPROGDIVRESET_OUT;
  input [0:0]txqpibiasen_in;
  input [0:0]txqpiweakpup_in;
  input [0:0]txratemode_in;
  input [0:0]txswing_in;
  input [0:0]txsyncallin_in;
  input [0:0]txsyncin_in;
  input [0:0]txsyncmode_in;
  input \gen_gtwizard_gthe4.txuserrdy_int ;
  input [0:0]txusrclk_in;
  input [0:0]txusrclk2_in;
  input [31:0]gtwiz_userdata_tx_in;
  input [15:0]Q;
  input [15:0]gtrsvd_in;
  input [15:0]pcsrsvdin_in;
  input [15:0]txctrl0_in;
  input [15:0]txctrl1_in;
  input [19:0]tstin_in;
  input [1:0]rxdfeagcctrl_in;
  input [1:0]rxelecidlemode_in;
  input [1:0]rxmonitorsel_in;
  input [1:0]RXPD;
  input [1:0]rxpllclksel_in;
  input [1:0]rxsysclksel_in;
  input [1:0]txdeemph_in;
  input [1:0]txpd_in;
  input [1:0]txpllclksel_in;
  input [1:0]txsysclksel_in;
  input [2:0]cpllrefclksel_in;
  input [2:0]loopback_in;
  input [2:0]rxchbondlevel_in;
  input [2:0]rxoutclksel_in;
  input [2:0]RXRATE;
  input [2:0]txmargin_in;
  input [2:0]i_in_meta_reg_2;
  input [2:0]txrate_in;
  input [3:0]rxdfecfokfcnum_in;
  input [3:0]rxprbssel_in;
  input [3:0]txprbssel_in;
  input [4:0]rxchbondi_in;
  input [4:0]txdiffctrl_in;
  input [4:0]txpippmstepsize_in;
  input [4:0]txpostcursor_in;
  input [4:0]txprecursor_in;
  input [5:0]txheader_in;
  input [6:0]rxckcalstart_in;
  input [6:0]txmaincursor_in;
  input [6:0]txsequence_in;
  input [7:0]tx8b10bbypass_in;
  input [7:0]txctrl2_in;
  input [7:0]txdataextendrsvd_in;
  input [9:0]i_in_meta_reg_3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [15:0]D;
  wire GTHE4_CHANNEL_DRPEN_OUT;
  wire GTHE4_CHANNEL_DRPWE_OUT;
  wire GTHE4_CPLLLOCK_IN;
  wire GTHE4_TXPRGDIVRESETDONE_IN;
  wire GTHE4_TXPROGDIVRESET_OUT;
  wire [15:0]Q;
  wire [1:0]RXPD;
  wire [2:0]RXRATE;
  wire [0:0]bufgtce_out;
  wire [2:0]bufgtcemask_out;
  wire [8:0]bufgtdiv_out;
  wire [0:0]bufgtreset_out;
  wire [2:0]bufgtrstmask_out;
  wire [0:0]cdrstepdir_in;
  wire [0:0]cdrstepsq_in;
  wire [0:0]cdrstepsx_in;
  wire [0:0]cfgreset_in;
  wire [0:0]clkrsvd0_in;
  wire [0:0]clkrsvd1_in;
  wire [0:0]cpllfbclklost_out;
  wire [0:0]cpllfreqlock_in;
  wire [0:0]cplllockdetclk_in;
  wire [0:0]cplllocken_in;
  wire cpllpd_int_reg;
  wire [0:0]cpllrefclklost_out;
  wire [2:0]cpllrefclksel_in;
  wire [0:0]dmonfiforeset_in;
  wire [0:0]dmonitorclk_in;
  wire [15:0]dmonitorout_out;
  wire [0:0]dmonitoroutclk_out;
  wire [0:0]drpclk_in;
  wire [0:0]drprst_in;
  wire [0:0]eyescandataerror_out;
  wire [0:0]eyescanreset_in;
  wire [0:0]eyescantrigger_in;
  wire [0:0]freqos_in;
  wire \gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ;
  wire \gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ;
  wire \gen_gtwizard_gthe4.drprdy_int ;
  wire \gen_gtwizard_gthe4.gtpowergood_int ;
  wire \gen_gtwizard_gthe4.gttxreset_int ;
  wire \gen_gtwizard_gthe4.rxprogdivreset_int ;
  wire \gen_gtwizard_gthe4.rxuserrdy_int ;
  wire \gen_gtwizard_gthe4.txuserrdy_int ;
  wire [0:0]gtgrefclk_in;
  wire [0:0]gthrxn_in;
  wire [0:0]gthrxp_in;
  wire [0:0]gthtxn_out;
  wire [0:0]gthtxp_out;
  wire [0:0]gtnorthrefclk0_in;
  wire [0:0]gtnorthrefclk1_in;
  wire [0:0]gtrefclk0_in;
  wire [0:0]gtrefclk1_in;
  wire [0:0]gtrefclkmonitor_out;
  wire [15:0]gtrsvd_in;
  wire [0:0]gtrxresetsel_in;
  wire [0:0]gtsouthrefclk0_in;
  wire [0:0]gtsouthrefclk1_in;
  wire [0:0]gttxresetsel_in;
  wire [31:0]gtwiz_userdata_tx_in;
  wire i_in_meta_reg;
  wire i_in_meta_reg_0;
  wire i_in_meta_reg_1;
  wire [2:0]i_in_meta_reg_2;
  wire [9:0]i_in_meta_reg_3;
  wire [0:0]incpctrl_in;
  wire [2:0]loopback_in;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire [0:0]pcieeqrxeqadaptdone_in;
  wire [0:0]pcierategen3_out;
  wire [0:0]pcierateidle_out;
  wire [1:0]pcierateqpllpd_out;
  wire [1:0]pcierateqpllreset_out;
  wire [0:0]pcierstidle_in;
  wire [0:0]pciersttxsyncstart_in;
  wire [0:0]pciesynctxsyncdone_out;
  wire [0:0]pcieusergen3rdy_out;
  wire [0:0]pcieuserphystatusrst_out;
  wire [0:0]pcieuserratedone_in;
  wire [0:0]pcieuserratestart_out;
  wire [15:0]pcsrsvdin_in;
  wire [15:0]pcsrsvdout_out;
  wire [0:0]phystatus_out;
  wire [15:0]pinrsrvdas_out;
  wire [0:0]powerpresent_out;
  wire [0:0]qpll0clk_in;
  wire [0:0]qpll0freqlock_in;
  wire [0:0]qpll0refclk_in;
  wire [0:0]qpll1clk_in;
  wire [0:0]qpll1freqlock_in;
  wire [0:0]qpll1refclk_in;
  wire [0:0]resetexception_out;
  wire [0:0]resetovrd_in;
  wire [0:0]rx8b10ben_in;
  wire [0:0]rxafecfoken_in;
  wire [0:0]rxbufreset_in;
  wire [2:0]rxbufstatus_out;
  wire [0:0]rxbyteisaligned_out;
  wire [0:0]rxbyterealign_out;
  wire [0:0]rxcdrfreqreset_in;
  wire [0:0]rxcdrhold_in;
  wire [0:0]rxcdrlock_out;
  wire [0:0]rxcdrovrden_in;
  wire [0:0]rxcdrphdone_out;
  wire [0:0]rxcdrreset_in;
  wire [0:0]rxchanbondseq_out;
  wire [0:0]rxchanisaligned_out;
  wire [0:0]rxchanrealign_out;
  wire [0:0]rxchbonden_in;
  wire [4:0]rxchbondi_in;
  wire [2:0]rxchbondlevel_in;
  wire [0:0]rxchbondmaster_in;
  wire [4:0]rxchbondo_out;
  wire [0:0]rxchbondslave_in;
  wire [0:0]rxckcaldone_out;
  wire [0:0]rxckcalreset_in;
  wire [6:0]rxckcalstart_in;
  wire [1:0]rxclkcorcnt_out;
  wire [0:0]rxcominitdet_out;
  wire [0:0]rxcommadet_out;
  wire [0:0]rxcommadeten_in;
  wire [0:0]rxcomsasdet_out;
  wire [0:0]rxcomwakedet_out;
  wire [15:0]rxctrl0_out;
  wire [15:0]rxctrl1_out;
  wire [7:0]rxctrl2_out;
  wire [7:0]rxctrl3_out;
  wire [127:0]rxdata_out;
  wire [7:0]rxdataextendrsvd_out;
  wire [1:0]rxdatavalid_out;
  wire [1:0]rxdfeagcctrl_in;
  wire [0:0]rxdfeagchold_in;
  wire [0:0]rxdfeagcovrden_in;
  wire [3:0]rxdfecfokfcnum_in;
  wire [0:0]rxdfecfokfen_in;
  wire [0:0]rxdfecfokfpulse_in;
  wire [0:0]rxdfecfokhold_in;
  wire [0:0]rxdfecfokovren_in;
  wire [0:0]rxdfekhhold_in;
  wire [0:0]rxdfekhovrden_in;
  wire [0:0]rxdfelfhold_in;
  wire [0:0]rxdfelfovrden_in;
  wire [0:0]rxdfelpmreset_in;
  wire [0:0]rxdfetap10hold_in;
  wire [0:0]rxdfetap10ovrden_in;
  wire [0:0]rxdfetap11hold_in;
  wire [0:0]rxdfetap11ovrden_in;
  wire [0:0]rxdfetap12hold_in;
  wire [0:0]rxdfetap12ovrden_in;
  wire [0:0]rxdfetap13hold_in;
  wire [0:0]rxdfetap13ovrden_in;
  wire [0:0]rxdfetap14hold_in;
  wire [0:0]rxdfetap14ovrden_in;
  wire [0:0]rxdfetap15hold_in;
  wire [0:0]rxdfetap15ovrden_in;
  wire [0:0]rxdfetap2hold_in;
  wire [0:0]rxdfetap2ovrden_in;
  wire [0:0]rxdfetap3hold_in;
  wire [0:0]rxdfetap3ovrden_in;
  wire [0:0]rxdfetap4hold_in;
  wire [0:0]rxdfetap4ovrden_in;
  wire [0:0]rxdfetap5hold_in;
  wire [0:0]rxdfetap5ovrden_in;
  wire [0:0]rxdfetap6hold_in;
  wire [0:0]rxdfetap6ovrden_in;
  wire [0:0]rxdfetap7hold_in;
  wire [0:0]rxdfetap7ovrden_in;
  wire [0:0]rxdfetap8hold_in;
  wire [0:0]rxdfetap8ovrden_in;
  wire [0:0]rxdfetap9hold_in;
  wire [0:0]rxdfetap9ovrden_in;
  wire [0:0]rxdfeuthold_in;
  wire [0:0]rxdfeutovrden_in;
  wire [0:0]rxdfevphold_in;
  wire [0:0]rxdfevpovrden_in;
  wire [0:0]rxdfexyden_in;
  wire [0:0]rxdlybypass_in;
  wire [0:0]rxdlyen_in;
  wire [0:0]rxdlyovrden_in;
  wire [0:0]rxdlysreset_in;
  wire [0:0]rxdlysresetdone_out;
  wire [0:0]rxelecidle_out;
  wire [1:0]rxelecidlemode_in;
  wire [0:0]rxeqtraining_in;
  wire [0:0]rxgearboxslip_in;
  wire [5:0]rxheader_out;
  wire [1:0]rxheadervalid_out;
  wire [0:0]rxlatclk_in;
  wire [0:0]rxlfpstresetdet_out;
  wire [0:0]rxlfpsu2lpexitdet_out;
  wire [0:0]rxlfpsu3wakedet_out;
  wire [0:0]rxlpmen_in;
  wire [0:0]rxlpmgchold_in;
  wire [0:0]rxlpmgcovrden_in;
  wire [0:0]rxlpmhfhold_in;
  wire [0:0]rxlpmhfovrden_in;
  wire [0:0]rxlpmlfhold_in;
  wire [0:0]rxlpmlfklovrden_in;
  wire [0:0]rxlpmoshold_in;
  wire [0:0]rxlpmosovrden_in;
  wire [0:0]rxmcommaalignen_in;
  wire [7:0]rxmonitorout_out;
  wire [1:0]rxmonitorsel_in;
  wire [0:0]rxoobreset_in;
  wire [0:0]rxoscalreset_in;
  wire [0:0]rxoshold_in;
  wire [0:0]rxosintdone_out;
  wire [0:0]rxosintstarted_out;
  wire [0:0]rxosintstrobedone_out;
  wire [0:0]rxosintstrobestarted_out;
  wire [0:0]rxosovrden_in;
  wire [0:0]rxoutclk_out;
  wire [0:0]rxoutclkfabric_out;
  wire [0:0]rxoutclkpcs_out;
  wire [2:0]rxoutclksel_in;
  wire [0:0]rxpcommaalignen_in;
  wire [0:0]rxpcsreset_in;
  wire [0:0]rxphalign_in;
  wire [0:0]rxphaligndone_out;
  wire [0:0]rxphalignen_in;
  wire [0:0]rxphalignerr_out;
  wire [0:0]rxphdlypd_in;
  wire [0:0]rxphdlyreset_in;
  wire [0:0]rxphovrden_in;
  wire [1:0]rxpllclksel_in;
  wire [0:0]rxpmaresetdone_out;
  wire [0:0]rxpolarity_in;
  wire [0:0]rxprbscntreset_in;
  wire [0:0]rxprbserr_out;
  wire [0:0]rxprbslocked_out;
  wire [3:0]rxprbssel_in;
  wire [0:0]rxprgdivresetdone_out;
  wire [0:0]rxqpien_in;
  wire [0:0]rxqpisenn_out;
  wire [0:0]rxqpisenp_out;
  wire [0:0]rxratedone_out;
  wire [0:0]rxrecclkout_out;
  wire [0:0]rxresetdone_out;
  wire [0:0]rxslide_in;
  wire [0:0]rxsliderdy_out;
  wire [0:0]rxslipdone_out;
  wire [0:0]rxslipoutclk_in;
  wire [0:0]rxslipoutclkrdy_out;
  wire [0:0]rxslippma_in;
  wire [0:0]rxslippmardy_out;
  wire [1:0]rxstartofseq_out;
  wire [2:0]rxstatus_out;
  wire [0:0]rxsyncallin_in;
  wire [0:0]rxsyncdone_out;
  wire [0:0]rxsyncin_in;
  wire [0:0]rxsyncmode_in;
  wire [0:0]rxsyncout_out;
  wire [1:0]rxsysclksel_in;
  wire [0:0]rxtermination_in;
  wire [0:0]rxusrclk2_in;
  wire [0:0]rxusrclk_in;
  wire [0:0]rxvalid_out;
  wire [0:0]sigvalidclk_in;
  wire [19:0]tstin_in;
  wire [7:0]tx8b10bbypass_in;
  wire [0:0]tx8b10ben_in;
  wire [1:0]txbufstatus_out;
  wire [0:0]txcomfinish_out;
  wire [0:0]txcominit_in;
  wire [0:0]txcomsas_in;
  wire [0:0]txcomwake_in;
  wire [15:0]txctrl0_in;
  wire [15:0]txctrl1_in;
  wire [7:0]txctrl2_in;
  wire [7:0]txdataextendrsvd_in;
  wire [0:0]txdccdone_out;
  wire [0:0]txdccforcestart_in;
  wire [0:0]txdccreset_in;
  wire [1:0]txdeemph_in;
  wire [0:0]txdetectrx_in;
  wire [4:0]txdiffctrl_in;
  wire [0:0]txdlybypass_in;
  wire [0:0]txdlyen_in;
  wire [0:0]txdlyhold_in;
  wire [0:0]txdlyovrden_in;
  wire [0:0]txdlysreset_in;
  wire [0:0]txdlysresetdone_out;
  wire [0:0]txdlyupdown_in;
  wire [0:0]txelecidle_in;
  wire [5:0]txheader_in;
  wire [0:0]txinhibit_in;
  wire [0:0]txlatclk_in;
  wire [0:0]txlfpstreset_in;
  wire [0:0]txlfpsu2lpexit_in;
  wire [0:0]txlfpsu3wake_in;
  wire [6:0]txmaincursor_in;
  wire [2:0]txmargin_in;
  wire [0:0]txmuxdcdexhold_in;
  wire [0:0]txmuxdcdorwren_in;
  wire [0:0]txoneszeros_in;
  wire [0:0]txoutclk_out;
  wire [0:0]txoutclkfabric_out;
  wire [0:0]txoutclkpcs_out;
  wire [0:0]txpcsreset_in;
  wire [1:0]txpd_in;
  wire [0:0]txpdelecidlemode_in;
  wire [0:0]txphalign_in;
  wire [0:0]txphaligndone_out;
  wire [0:0]txphalignen_in;
  wire [0:0]txphdlypd_in;
  wire [0:0]txphdlyreset_in;
  wire [0:0]txphdlytstclk_in;
  wire [0:0]txphinit_in;
  wire [0:0]txphinitdone_out;
  wire [0:0]txphovrden_in;
  wire [0:0]txpippmen_in;
  wire [0:0]txpippmovrden_in;
  wire [0:0]txpippmpd_in;
  wire [0:0]txpippmsel_in;
  wire [4:0]txpippmstepsize_in;
  wire [0:0]txpisopd_in;
  wire [1:0]txpllclksel_in;
  wire [0:0]txpmareset_in;
  wire [0:0]txpmaresetdone_out;
  wire [0:0]txpolarity_in;
  wire [4:0]txpostcursor_in;
  wire [0:0]txprbsforceerr_in;
  wire [3:0]txprbssel_in;
  wire [4:0]txprecursor_in;
  wire [0:0]txqpibiasen_in;
  wire [0:0]txqpisenn_out;
  wire [0:0]txqpisenp_out;
  wire [0:0]txqpiweakpup_in;
  wire [2:0]txrate_in;
  wire [0:0]txratedone_out;
  wire [0:0]txratemode_in;
  wire [0:0]txresetdone_out;
  wire [6:0]txsequence_in;
  wire [0:0]txswing_in;
  wire [0:0]txsyncallin_in;
  wire [0:0]txsyncdone_out;
  wire [0:0]txsyncin_in;
  wire [0:0]txsyncmode_in;
  wire [0:0]txsyncout_out;
  wire [1:0]txsysclksel_in;
  wire [0:0]txusrclk2_in;
  wire [0:0]txusrclk_in;

  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gthe4_channel channel_inst
       (.D(D),
        .GTHE4_CHANNEL_DRPEN_OUT(GTHE4_CHANNEL_DRPEN_OUT),
        .GTHE4_CHANNEL_DRPWE_OUT(GTHE4_CHANNEL_DRPWE_OUT),
        .GTHE4_CPLLLOCK_IN(GTHE4_CPLLLOCK_IN),
        .GTHE4_TXPRGDIVRESETDONE_IN(GTHE4_TXPRGDIVRESETDONE_IN),
        .GTHE4_TXPROGDIVRESET_OUT(GTHE4_TXPROGDIVRESET_OUT),
        .Q(Q),
        .RXPD(RXPD),
        .RXRATE(RXRATE),
        .bufgtce_out(bufgtce_out),
        .bufgtcemask_out(bufgtcemask_out),
        .bufgtdiv_out(bufgtdiv_out),
        .bufgtreset_out(bufgtreset_out),
        .bufgtrstmask_out(bufgtrstmask_out),
        .cdrstepdir_in(cdrstepdir_in),
        .cdrstepsq_in(cdrstepsq_in),
        .cdrstepsx_in(cdrstepsx_in),
        .cfgreset_in(cfgreset_in),
        .clkrsvd0_in(clkrsvd0_in),
        .clkrsvd1_in(clkrsvd1_in),
        .cpllfbclklost_out(cpllfbclklost_out),
        .cpllfreqlock_in(cpllfreqlock_in),
        .cplllockdetclk_in(cplllockdetclk_in),
        .cplllocken_in(cplllocken_in),
        .cpllpd_int_reg(cpllpd_int_reg),
        .cpllrefclklost_out(cpllrefclklost_out),
        .cpllrefclksel_in(cpllrefclksel_in),
        .dmonfiforeset_in(dmonfiforeset_in),
        .dmonitorclk_in(dmonitorclk_in),
        .dmonitorout_out(dmonitorout_out),
        .dmonitoroutclk_out(dmonitoroutclk_out),
        .drpclk_in(drpclk_in),
        .drprst_in(drprst_in),
        .eyescandataerror_out(eyescandataerror_out),
        .eyescanreset_in(eyescanreset_in),
        .eyescantrigger_in(eyescantrigger_in),
        .freqos_in(freqos_in),
        .\gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int (\gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ),
        .\gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int (\gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ),
        .\gen_gtwizard_gthe4.drprdy_int (\gen_gtwizard_gthe4.drprdy_int ),
        .\gen_gtwizard_gthe4.gtpowergood_int (\gen_gtwizard_gthe4.gtpowergood_int ),
        .\gen_gtwizard_gthe4.gttxreset_int (\gen_gtwizard_gthe4.gttxreset_int ),
        .\gen_gtwizard_gthe4.rxprogdivreset_int (\gen_gtwizard_gthe4.rxprogdivreset_int ),
        .\gen_gtwizard_gthe4.rxuserrdy_int (\gen_gtwizard_gthe4.rxuserrdy_int ),
        .\gen_gtwizard_gthe4.txuserrdy_int (\gen_gtwizard_gthe4.txuserrdy_int ),
        .gtgrefclk_in(gtgrefclk_in),
        .gthrxn_in(gthrxn_in),
        .gthrxp_in(gthrxp_in),
        .gthtxn_out(gthtxn_out),
        .gthtxp_out(gthtxp_out),
        .gtnorthrefclk0_in(gtnorthrefclk0_in),
        .gtnorthrefclk1_in(gtnorthrefclk1_in),
        .gtrefclk0_in(gtrefclk0_in),
        .gtrefclk1_in(gtrefclk1_in),
        .gtrefclkmonitor_out(gtrefclkmonitor_out),
        .gtrsvd_in(gtrsvd_in),
        .gtrxresetsel_in(gtrxresetsel_in),
        .gtsouthrefclk0_in(gtsouthrefclk0_in),
        .gtsouthrefclk1_in(gtsouthrefclk1_in),
        .gttxresetsel_in(gttxresetsel_in),
        .gtwiz_userdata_tx_in(gtwiz_userdata_tx_in),
        .i_in_meta_reg(i_in_meta_reg),
        .i_in_meta_reg_0(i_in_meta_reg_0),
        .i_in_meta_reg_1(i_in_meta_reg_1),
        .i_in_meta_reg_2(i_in_meta_reg_2),
        .i_in_meta_reg_3(i_in_meta_reg_3),
        .incpctrl_in(incpctrl_in),
        .loopback_in(loopback_in),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .pcieeqrxeqadaptdone_in(pcieeqrxeqadaptdone_in),
        .pcierategen3_out(pcierategen3_out),
        .pcierateidle_out(pcierateidle_out),
        .pcierateqpllpd_out(pcierateqpllpd_out),
        .pcierateqpllreset_out(pcierateqpllreset_out),
        .pcierstidle_in(pcierstidle_in),
        .pciersttxsyncstart_in(pciersttxsyncstart_in),
        .pciesynctxsyncdone_out(pciesynctxsyncdone_out),
        .pcieusergen3rdy_out(pcieusergen3rdy_out),
        .pcieuserphystatusrst_out(pcieuserphystatusrst_out),
        .pcieuserratedone_in(pcieuserratedone_in),
        .pcieuserratestart_out(pcieuserratestart_out),
        .pcsrsvdin_in(pcsrsvdin_in),
        .pcsrsvdout_out(pcsrsvdout_out),
        .phystatus_out(phystatus_out),
        .pinrsrvdas_out(pinrsrvdas_out),
        .powerpresent_out(powerpresent_out),
        .qpll0clk_in(qpll0clk_in),
        .qpll0freqlock_in(qpll0freqlock_in),
        .qpll0refclk_in(qpll0refclk_in),
        .qpll1clk_in(qpll1clk_in),
        .qpll1freqlock_in(qpll1freqlock_in),
        .qpll1refclk_in(qpll1refclk_in),
        .resetexception_out(resetexception_out),
        .resetovrd_in(resetovrd_in),
        .rx8b10ben_in(rx8b10ben_in),
        .rxafecfoken_in(rxafecfoken_in),
        .rxbufreset_in(rxbufreset_in),
        .rxbufstatus_out(rxbufstatus_out),
        .rxbyteisaligned_out(rxbyteisaligned_out),
        .rxbyterealign_out(rxbyterealign_out),
        .rxcdrfreqreset_in(rxcdrfreqreset_in),
        .rxcdrhold_in(rxcdrhold_in),
        .rxcdrlock_out(rxcdrlock_out),
        .rxcdrovrden_in(rxcdrovrden_in),
        .rxcdrphdone_out(rxcdrphdone_out),
        .rxcdrreset_in(rxcdrreset_in),
        .rxchanbondseq_out(rxchanbondseq_out),
        .rxchanisaligned_out(rxchanisaligned_out),
        .rxchanrealign_out(rxchanrealign_out),
        .rxchbonden_in(rxchbonden_in),
        .rxchbondi_in(rxchbondi_in),
        .rxchbondlevel_in(rxchbondlevel_in),
        .rxchbondmaster_in(rxchbondmaster_in),
        .rxchbondo_out(rxchbondo_out),
        .rxchbondslave_in(rxchbondslave_in),
        .rxckcaldone_out(rxckcaldone_out),
        .rxckcalreset_in(rxckcalreset_in),
        .rxckcalstart_in(rxckcalstart_in),
        .rxclkcorcnt_out(rxclkcorcnt_out),
        .rxcominitdet_out(rxcominitdet_out),
        .rxcommadet_out(rxcommadet_out),
        .rxcommadeten_in(rxcommadeten_in),
        .rxcomsasdet_out(rxcomsasdet_out),
        .rxcomwakedet_out(rxcomwakedet_out),
        .rxctrl0_out(rxctrl0_out),
        .rxctrl1_out(rxctrl1_out),
        .rxctrl2_out(rxctrl2_out),
        .rxctrl3_out(rxctrl3_out),
        .rxdata_out(rxdata_out),
        .rxdataextendrsvd_out(rxdataextendrsvd_out),
        .rxdatavalid_out(rxdatavalid_out),
        .rxdfeagcctrl_in(rxdfeagcctrl_in),
        .rxdfeagchold_in(rxdfeagchold_in),
        .rxdfeagcovrden_in(rxdfeagcovrden_in),
        .rxdfecfokfcnum_in(rxdfecfokfcnum_in),
        .rxdfecfokfen_in(rxdfecfokfen_in),
        .rxdfecfokfpulse_in(rxdfecfokfpulse_in),
        .rxdfecfokhold_in(rxdfecfokhold_in),
        .rxdfecfokovren_in(rxdfecfokovren_in),
        .rxdfekhhold_in(rxdfekhhold_in),
        .rxdfekhovrden_in(rxdfekhovrden_in),
        .rxdfelfhold_in(rxdfelfhold_in),
        .rxdfelfovrden_in(rxdfelfovrden_in),
        .rxdfelpmreset_in(rxdfelpmreset_in),
        .rxdfetap10hold_in(rxdfetap10hold_in),
        .rxdfetap10ovrden_in(rxdfetap10ovrden_in),
        .rxdfetap11hold_in(rxdfetap11hold_in),
        .rxdfetap11ovrden_in(rxdfetap11ovrden_in),
        .rxdfetap12hold_in(rxdfetap12hold_in),
        .rxdfetap12ovrden_in(rxdfetap12ovrden_in),
        .rxdfetap13hold_in(rxdfetap13hold_in),
        .rxdfetap13ovrden_in(rxdfetap13ovrden_in),
        .rxdfetap14hold_in(rxdfetap14hold_in),
        .rxdfetap14ovrden_in(rxdfetap14ovrden_in),
        .rxdfetap15hold_in(rxdfetap15hold_in),
        .rxdfetap15ovrden_in(rxdfetap15ovrden_in),
        .rxdfetap2hold_in(rxdfetap2hold_in),
        .rxdfetap2ovrden_in(rxdfetap2ovrden_in),
        .rxdfetap3hold_in(rxdfetap3hold_in),
        .rxdfetap3ovrden_in(rxdfetap3ovrden_in),
        .rxdfetap4hold_in(rxdfetap4hold_in),
        .rxdfetap4ovrden_in(rxdfetap4ovrden_in),
        .rxdfetap5hold_in(rxdfetap5hold_in),
        .rxdfetap5ovrden_in(rxdfetap5ovrden_in),
        .rxdfetap6hold_in(rxdfetap6hold_in),
        .rxdfetap6ovrden_in(rxdfetap6ovrden_in),
        .rxdfetap7hold_in(rxdfetap7hold_in),
        .rxdfetap7ovrden_in(rxdfetap7ovrden_in),
        .rxdfetap8hold_in(rxdfetap8hold_in),
        .rxdfetap8ovrden_in(rxdfetap8ovrden_in),
        .rxdfetap9hold_in(rxdfetap9hold_in),
        .rxdfetap9ovrden_in(rxdfetap9ovrden_in),
        .rxdfeuthold_in(rxdfeuthold_in),
        .rxdfeutovrden_in(rxdfeutovrden_in),
        .rxdfevphold_in(rxdfevphold_in),
        .rxdfevpovrden_in(rxdfevpovrden_in),
        .rxdfexyden_in(rxdfexyden_in),
        .rxdlybypass_in(rxdlybypass_in),
        .rxdlyen_in(rxdlyen_in),
        .rxdlyovrden_in(rxdlyovrden_in),
        .rxdlysreset_in(rxdlysreset_in),
        .rxdlysresetdone_out(rxdlysresetdone_out),
        .rxelecidle_out(rxelecidle_out),
        .rxelecidlemode_in(rxelecidlemode_in),
        .rxeqtraining_in(rxeqtraining_in),
        .rxgearboxslip_in(rxgearboxslip_in),
        .rxheader_out(rxheader_out),
        .rxheadervalid_out(rxheadervalid_out),
        .rxlatclk_in(rxlatclk_in),
        .rxlfpstresetdet_out(rxlfpstresetdet_out),
        .rxlfpsu2lpexitdet_out(rxlfpsu2lpexitdet_out),
        .rxlfpsu3wakedet_out(rxlfpsu3wakedet_out),
        .rxlpmen_in(rxlpmen_in),
        .rxlpmgchold_in(rxlpmgchold_in),
        .rxlpmgcovrden_in(rxlpmgcovrden_in),
        .rxlpmhfhold_in(rxlpmhfhold_in),
        .rxlpmhfovrden_in(rxlpmhfovrden_in),
        .rxlpmlfhold_in(rxlpmlfhold_in),
        .rxlpmlfklovrden_in(rxlpmlfklovrden_in),
        .rxlpmoshold_in(rxlpmoshold_in),
        .rxlpmosovrden_in(rxlpmosovrden_in),
        .rxmcommaalignen_in(rxmcommaalignen_in),
        .rxmonitorout_out(rxmonitorout_out),
        .rxmonitorsel_in(rxmonitorsel_in),
        .rxoobreset_in(rxoobreset_in),
        .rxoscalreset_in(rxoscalreset_in),
        .rxoshold_in(rxoshold_in),
        .rxosintdone_out(rxosintdone_out),
        .rxosintstarted_out(rxosintstarted_out),
        .rxosintstrobedone_out(rxosintstrobedone_out),
        .rxosintstrobestarted_out(rxosintstrobestarted_out),
        .rxosovrden_in(rxosovrden_in),
        .rxoutclk_out(rxoutclk_out),
        .rxoutclkfabric_out(rxoutclkfabric_out),
        .rxoutclkpcs_out(rxoutclkpcs_out),
        .rxoutclksel_in(rxoutclksel_in),
        .rxpcommaalignen_in(rxpcommaalignen_in),
        .rxpcsreset_in(rxpcsreset_in),
        .rxphalign_in(rxphalign_in),
        .rxphaligndone_out(rxphaligndone_out),
        .rxphalignen_in(rxphalignen_in),
        .rxphalignerr_out(rxphalignerr_out),
        .rxphdlypd_in(rxphdlypd_in),
        .rxphdlyreset_in(rxphdlyreset_in),
        .rxphovrden_in(rxphovrden_in),
        .rxpllclksel_in(rxpllclksel_in),
        .rxpmaresetdone_out(rxpmaresetdone_out),
        .rxpolarity_in(rxpolarity_in),
        .rxprbscntreset_in(rxprbscntreset_in),
        .rxprbserr_out(rxprbserr_out),
        .rxprbslocked_out(rxprbslocked_out),
        .rxprbssel_in(rxprbssel_in),
        .rxprgdivresetdone_out(rxprgdivresetdone_out),
        .rxqpien_in(rxqpien_in),
        .rxqpisenn_out(rxqpisenn_out),
        .rxqpisenp_out(rxqpisenp_out),
        .rxratedone_out(rxratedone_out),
        .rxrecclkout_out(rxrecclkout_out),
        .rxresetdone_out(rxresetdone_out),
        .rxslide_in(rxslide_in),
        .rxsliderdy_out(rxsliderdy_out),
        .rxslipdone_out(rxslipdone_out),
        .rxslipoutclk_in(rxslipoutclk_in),
        .rxslipoutclkrdy_out(rxslipoutclkrdy_out),
        .rxslippma_in(rxslippma_in),
        .rxslippmardy_out(rxslippmardy_out),
        .rxstartofseq_out(rxstartofseq_out),
        .rxstatus_out(rxstatus_out),
        .rxsyncallin_in(rxsyncallin_in),
        .rxsyncdone_out(rxsyncdone_out),
        .rxsyncin_in(rxsyncin_in),
        .rxsyncmode_in(rxsyncmode_in),
        .rxsyncout_out(rxsyncout_out),
        .rxsysclksel_in(rxsysclksel_in),
        .rxtermination_in(rxtermination_in),
        .rxusrclk2_in(rxusrclk2_in),
        .rxusrclk_in(rxusrclk_in),
        .rxvalid_out(rxvalid_out),
        .sigvalidclk_in(sigvalidclk_in),
        .tstin_in(tstin_in),
        .tx8b10bbypass_in(tx8b10bbypass_in),
        .tx8b10ben_in(tx8b10ben_in),
        .txbufstatus_out(txbufstatus_out),
        .txcomfinish_out(txcomfinish_out),
        .txcominit_in(txcominit_in),
        .txcomsas_in(txcomsas_in),
        .txcomwake_in(txcomwake_in),
        .txctrl0_in(txctrl0_in),
        .txctrl1_in(txctrl1_in),
        .txctrl2_in(txctrl2_in),
        .txdataextendrsvd_in(txdataextendrsvd_in),
        .txdccdone_out(txdccdone_out),
        .txdccforcestart_in(txdccforcestart_in),
        .txdccreset_in(txdccreset_in),
        .txdeemph_in(txdeemph_in),
        .txdetectrx_in(txdetectrx_in),
        .txdiffctrl_in(txdiffctrl_in),
        .txdlybypass_in(txdlybypass_in),
        .txdlyen_in(txdlyen_in),
        .txdlyhold_in(txdlyhold_in),
        .txdlyovrden_in(txdlyovrden_in),
        .txdlysreset_in(txdlysreset_in),
        .txdlysresetdone_out(txdlysresetdone_out),
        .txdlyupdown_in(txdlyupdown_in),
        .txelecidle_in(txelecidle_in),
        .txheader_in(txheader_in),
        .txinhibit_in(txinhibit_in),
        .txlatclk_in(txlatclk_in),
        .txlfpstreset_in(txlfpstreset_in),
        .txlfpsu2lpexit_in(txlfpsu2lpexit_in),
        .txlfpsu3wake_in(txlfpsu3wake_in),
        .txmaincursor_in(txmaincursor_in),
        .txmargin_in(txmargin_in),
        .txmuxdcdexhold_in(txmuxdcdexhold_in),
        .txmuxdcdorwren_in(txmuxdcdorwren_in),
        .txoneszeros_in(txoneszeros_in),
        .txoutclk_out(txoutclk_out),
        .txoutclkfabric_out(txoutclkfabric_out),
        .txoutclkpcs_out(txoutclkpcs_out),
        .txpcsreset_in(txpcsreset_in),
        .txpd_in(txpd_in),
        .txpdelecidlemode_in(txpdelecidlemode_in),
        .txphalign_in(txphalign_in),
        .txphaligndone_out(txphaligndone_out),
        .txphalignen_in(txphalignen_in),
        .txphdlypd_in(txphdlypd_in),
        .txphdlyreset_in(txphdlyreset_in),
        .txphdlytstclk_in(txphdlytstclk_in),
        .txphinit_in(txphinit_in),
        .txphinitdone_out(txphinitdone_out),
        .txphovrden_in(txphovrden_in),
        .txpippmen_in(txpippmen_in),
        .txpippmovrden_in(txpippmovrden_in),
        .txpippmpd_in(txpippmpd_in),
        .txpippmsel_in(txpippmsel_in),
        .txpippmstepsize_in(txpippmstepsize_in),
        .txpisopd_in(txpisopd_in),
        .txpllclksel_in(txpllclksel_in),
        .txpmareset_in(txpmareset_in),
        .txpmaresetdone_out(txpmaresetdone_out),
        .txpolarity_in(txpolarity_in),
        .txpostcursor_in(txpostcursor_in),
        .txprbsforceerr_in(txprbsforceerr_in),
        .txprbssel_in(txprbssel_in),
        .txprecursor_in(txprecursor_in),
        .txqpibiasen_in(txqpibiasen_in),
        .txqpisenn_out(txqpisenn_out),
        .txqpisenp_out(txqpisenp_out),
        .txqpiweakpup_in(txqpiweakpup_in),
        .txrate_in(txrate_in),
        .txratedone_out(txratedone_out),
        .txratemode_in(txratemode_in),
        .txresetdone_out(txresetdone_out),
        .txsequence_in(txsequence_in),
        .txswing_in(txswing_in),
        .txsyncallin_in(txsyncallin_in),
        .txsyncdone_out(txsyncdone_out),
        .txsyncin_in(txsyncin_in),
        .txsyncmode_in(txsyncmode_in),
        .txsyncout_out(txsyncout_out),
        .txsysclksel_in(txsysclksel_in),
        .txusrclk2_in(txusrclk2_in),
        .txusrclk_in(txusrclk_in));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_gt_gtwizard_gthe4" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_gt_gtwizard_gthe4
   (gtpowergood_out,
    cplllock_out,
    rxcdrlock_out,
    bufgtce_out,
    bufgtreset_out,
    cpllfbclklost_out,
    cpllrefclklost_out,
    dmonitoroutclk_out,
    eyescandataerror_out,
    gthtxn_out,
    gthtxp_out,
    gtrefclkmonitor_out,
    pcierategen3_out,
    pcierateidle_out,
    pciesynctxsyncdone_out,
    pcieusergen3rdy_out,
    pcieuserphystatusrst_out,
    pcieuserratestart_out,
    phystatus_out,
    powerpresent_out,
    resetexception_out,
    rxbyteisaligned_out,
    rxbyterealign_out,
    rxcdrphdone_out,
    rxchanbondseq_out,
    rxchanisaligned_out,
    rxchanrealign_out,
    rxckcaldone_out,
    rxcominitdet_out,
    rxcommadet_out,
    rxcomsasdet_out,
    rxcomwakedet_out,
    rxdlysresetdone_out,
    rxelecidle_out,
    rxlfpstresetdet_out,
    rxlfpsu2lpexitdet_out,
    rxlfpsu3wakedet_out,
    rxosintdone_out,
    rxosintstarted_out,
    rxosintstrobedone_out,
    rxosintstrobestarted_out,
    rxoutclk_out,
    rxoutclkfabric_out,
    rxoutclkpcs_out,
    rxphaligndone_out,
    rxphalignerr_out,
    rxpmaresetdone_out,
    rxprbserr_out,
    rxprbslocked_out,
    rxprgdivresetdone_out,
    rxqpisenn_out,
    rxqpisenp_out,
    rxratedone_out,
    rxrecclkout_out,
    rxresetdone_out,
    rxsliderdy_out,
    rxslipdone_out,
    rxslipoutclkrdy_out,
    rxslippmardy_out,
    rxsyncdone_out,
    rxsyncout_out,
    rxvalid_out,
    txcomfinish_out,
    txdccdone_out,
    txdlysresetdone_out,
    txoutclk_out,
    txoutclkfabric_out,
    txoutclkpcs_out,
    txphaligndone_out,
    txphinitdone_out,
    txpmaresetdone_out,
    txqpisenn_out,
    txqpisenp_out,
    txratedone_out,
    txresetdone_out,
    txsyncdone_out,
    txsyncout_out,
    rxdata_out,
    dmonitorout_out,
    pcsrsvdout_out,
    pinrsrvdas_out,
    rxctrl0_out,
    rxctrl1_out,
    pcierateqpllpd_out,
    pcierateqpllreset_out,
    rxclkcorcnt_out,
    rxdatavalid_out,
    rxheadervalid_out,
    rxstartofseq_out,
    txbufstatus_out,
    bufgtcemask_out,
    bufgtrstmask_out,
    rxbufstatus_out,
    rxstatus_out,
    rxchbondo_out,
    rxheader_out,
    rxctrl2_out,
    rxctrl3_out,
    rxdataextendrsvd_out,
    rxmonitorout_out,
    bufgtdiv_out,
    drpdo_out,
    drprdy_out,
    txprgdivresetdone_out,
    gtwiz_reset_tx_done_out,
    gtwiz_reset_rx_cdr_stable_out,
    gtwiz_reset_rx_done_out,
    drpaddr_in,
    drpwe_in,
    rxratemode_in,
    rxrate_in,
    rxpd_in,
    drpdi_in,
    gtwiz_userclk_tx_active_in,
    gtwiz_userclk_rx_active_in,
    gtwiz_reset_clk_freerun_in,
    cdrstepdir_in,
    cdrstepsq_in,
    cdrstepsx_in,
    cfgreset_in,
    clkrsvd0_in,
    clkrsvd1_in,
    cpllfreqlock_in,
    cplllockdetclk_in,
    cplllocken_in,
    dmonfiforeset_in,
    dmonitorclk_in,
    drpclk_in,
    drprst_in,
    eyescanreset_in,
    eyescantrigger_in,
    freqos_in,
    gtgrefclk_in,
    gthrxn_in,
    gthrxp_in,
    gtnorthrefclk0_in,
    gtnorthrefclk1_in,
    gtrefclk0_in,
    gtrefclk1_in,
    gtrxresetsel_in,
    gtsouthrefclk0_in,
    gtsouthrefclk1_in,
    gttxresetsel_in,
    incpctrl_in,
    pcieeqrxeqadaptdone_in,
    pcierstidle_in,
    pciersttxsyncstart_in,
    pcieuserratedone_in,
    qpll0clk_in,
    qpll0freqlock_in,
    qpll0refclk_in,
    qpll1clk_in,
    qpll1freqlock_in,
    qpll1refclk_in,
    resetovrd_in,
    rx8b10ben_in,
    rxafecfoken_in,
    rxbufreset_in,
    rxcdrfreqreset_in,
    rxcdrhold_in,
    rxcdrovrden_in,
    rxcdrreset_in,
    rxchbonden_in,
    rxchbondmaster_in,
    rxchbondslave_in,
    rxckcalreset_in,
    rxcommadeten_in,
    rxdfeagchold_in,
    rxdfeagcovrden_in,
    rxdfecfokfen_in,
    rxdfecfokfpulse_in,
    rxdfecfokhold_in,
    rxdfecfokovren_in,
    rxdfekhhold_in,
    rxdfekhovrden_in,
    rxdfelfhold_in,
    rxdfelfovrden_in,
    rxdfelpmreset_in,
    rxdfetap10hold_in,
    rxdfetap10ovrden_in,
    rxdfetap11hold_in,
    rxdfetap11ovrden_in,
    rxdfetap12hold_in,
    rxdfetap12ovrden_in,
    rxdfetap13hold_in,
    rxdfetap13ovrden_in,
    rxdfetap14hold_in,
    rxdfetap14ovrden_in,
    rxdfetap15hold_in,
    rxdfetap15ovrden_in,
    rxdfetap2hold_in,
    rxdfetap2ovrden_in,
    rxdfetap3hold_in,
    rxdfetap3ovrden_in,
    rxdfetap4hold_in,
    rxdfetap4ovrden_in,
    rxdfetap5hold_in,
    rxdfetap5ovrden_in,
    rxdfetap6hold_in,
    rxdfetap6ovrden_in,
    rxdfetap7hold_in,
    rxdfetap7ovrden_in,
    rxdfetap8hold_in,
    rxdfetap8ovrden_in,
    rxdfetap9hold_in,
    rxdfetap9ovrden_in,
    rxdfeuthold_in,
    rxdfeutovrden_in,
    rxdfevphold_in,
    rxdfevpovrden_in,
    rxdfexyden_in,
    rxdlybypass_in,
    rxdlyen_in,
    rxdlyovrden_in,
    rxdlysreset_in,
    rxeqtraining_in,
    rxgearboxslip_in,
    rxlatclk_in,
    rxlpmen_in,
    rxlpmgchold_in,
    rxlpmgcovrden_in,
    rxlpmhfhold_in,
    rxlpmhfovrden_in,
    rxlpmlfhold_in,
    rxlpmlfklovrden_in,
    rxlpmoshold_in,
    rxlpmosovrden_in,
    rxmcommaalignen_in,
    rxoobreset_in,
    rxoscalreset_in,
    rxoshold_in,
    rxosovrden_in,
    rxpcommaalignen_in,
    rxpcsreset_in,
    rxphalign_in,
    rxphalignen_in,
    rxphdlypd_in,
    rxphdlyreset_in,
    rxphovrden_in,
    rxpolarity_in,
    rxprbscntreset_in,
    rxqpien_in,
    rxslide_in,
    rxslipoutclk_in,
    rxslippma_in,
    rxsyncallin_in,
    rxsyncin_in,
    rxsyncmode_in,
    rxtermination_in,
    rxusrclk_in,
    rxusrclk2_in,
    sigvalidclk_in,
    tx8b10ben_in,
    txcominit_in,
    txcomsas_in,
    txcomwake_in,
    txdccforcestart_in,
    txdccreset_in,
    txdetectrx_in,
    txdlybypass_in,
    txdlyen_in,
    txdlyhold_in,
    txdlyovrden_in,
    txdlysreset_in,
    txdlyupdown_in,
    txelecidle_in,
    txinhibit_in,
    txlatclk_in,
    txlfpstreset_in,
    txlfpsu2lpexit_in,
    txlfpsu3wake_in,
    txmuxdcdexhold_in,
    txmuxdcdorwren_in,
    txoneszeros_in,
    txpcsreset_in,
    txpdelecidlemode_in,
    txphalign_in,
    txphalignen_in,
    txphdlypd_in,
    txphdlyreset_in,
    txphdlytstclk_in,
    txphinit_in,
    txphovrden_in,
    txpippmen_in,
    txpippmovrden_in,
    txpippmpd_in,
    txpippmsel_in,
    txpisopd_in,
    txpmareset_in,
    txpolarity_in,
    txprbsforceerr_in,
    txqpibiasen_in,
    txqpiweakpup_in,
    txratemode_in,
    txswing_in,
    txsyncallin_in,
    txsyncin_in,
    txsyncmode_in,
    txusrclk_in,
    txusrclk2_in,
    gtwiz_userdata_tx_in,
    gtrsvd_in,
    pcsrsvdin_in,
    txctrl0_in,
    txctrl1_in,
    tstin_in,
    rxdfeagcctrl_in,
    rxelecidlemode_in,
    rxmonitorsel_in,
    rxpllclksel_in,
    rxsysclksel_in,
    txdeemph_in,
    txpd_in,
    txpllclksel_in,
    txsysclksel_in,
    cpllrefclksel_in,
    loopback_in,
    rxchbondlevel_in,
    rxoutclksel_in,
    txmargin_in,
    txrate_in,
    rxdfecfokfcnum_in,
    rxprbssel_in,
    txprbssel_in,
    rxchbondi_in,
    txdiffctrl_in,
    txpippmstepsize_in,
    txpostcursor_in,
    txprecursor_in,
    txheader_in,
    rxckcalstart_in,
    txmaincursor_in,
    txsequence_in,
    tx8b10bbypass_in,
    txctrl2_in,
    txdataextendrsvd_in,
    txoutclksel_in,
    gtwiz_userclk_tx_reset_in,
    drpen_in,
    cpllreset_in,
    gtwiz_reset_all_in,
    gtwiz_reset_tx_datapath_in,
    gtwiz_reset_tx_pll_and_datapath_in,
    gtwiz_reset_rx_datapath_in,
    gtwiz_reset_rx_pll_and_datapath_in,
    rxpmareset_in);
  output [0:0]gtpowergood_out;
  output [0:0]cplllock_out;
  output [0:0]rxcdrlock_out;
  output [0:0]bufgtce_out;
  output [0:0]bufgtreset_out;
  output [0:0]cpllfbclklost_out;
  output [0:0]cpllrefclklost_out;
  output [0:0]dmonitoroutclk_out;
  output [0:0]eyescandataerror_out;
  output [0:0]gthtxn_out;
  output [0:0]gthtxp_out;
  output [0:0]gtrefclkmonitor_out;
  output [0:0]pcierategen3_out;
  output [0:0]pcierateidle_out;
  output [0:0]pciesynctxsyncdone_out;
  output [0:0]pcieusergen3rdy_out;
  output [0:0]pcieuserphystatusrst_out;
  output [0:0]pcieuserratestart_out;
  output [0:0]phystatus_out;
  output [0:0]powerpresent_out;
  output [0:0]resetexception_out;
  output [0:0]rxbyteisaligned_out;
  output [0:0]rxbyterealign_out;
  output [0:0]rxcdrphdone_out;
  output [0:0]rxchanbondseq_out;
  output [0:0]rxchanisaligned_out;
  output [0:0]rxchanrealign_out;
  output [0:0]rxckcaldone_out;
  output [0:0]rxcominitdet_out;
  output [0:0]rxcommadet_out;
  output [0:0]rxcomsasdet_out;
  output [0:0]rxcomwakedet_out;
  output [0:0]rxdlysresetdone_out;
  output [0:0]rxelecidle_out;
  output [0:0]rxlfpstresetdet_out;
  output [0:0]rxlfpsu2lpexitdet_out;
  output [0:0]rxlfpsu3wakedet_out;
  output [0:0]rxosintdone_out;
  output [0:0]rxosintstarted_out;
  output [0:0]rxosintstrobedone_out;
  output [0:0]rxosintstrobestarted_out;
  output [0:0]rxoutclk_out;
  output [0:0]rxoutclkfabric_out;
  output [0:0]rxoutclkpcs_out;
  output [0:0]rxphaligndone_out;
  output [0:0]rxphalignerr_out;
  output [0:0]rxpmaresetdone_out;
  output [0:0]rxprbserr_out;
  output [0:0]rxprbslocked_out;
  output [0:0]rxprgdivresetdone_out;
  output [0:0]rxqpisenn_out;
  output [0:0]rxqpisenp_out;
  output [0:0]rxratedone_out;
  output [0:0]rxrecclkout_out;
  output [0:0]rxresetdone_out;
  output [0:0]rxsliderdy_out;
  output [0:0]rxslipdone_out;
  output [0:0]rxslipoutclkrdy_out;
  output [0:0]rxslippmardy_out;
  output [0:0]rxsyncdone_out;
  output [0:0]rxsyncout_out;
  output [0:0]rxvalid_out;
  output [0:0]txcomfinish_out;
  output [0:0]txdccdone_out;
  output [0:0]txdlysresetdone_out;
  output [0:0]txoutclk_out;
  output [0:0]txoutclkfabric_out;
  output [0:0]txoutclkpcs_out;
  output [0:0]txphaligndone_out;
  output [0:0]txphinitdone_out;
  output [0:0]txpmaresetdone_out;
  output [0:0]txqpisenn_out;
  output [0:0]txqpisenp_out;
  output [0:0]txratedone_out;
  output [0:0]txresetdone_out;
  output [0:0]txsyncdone_out;
  output [0:0]txsyncout_out;
  output [127:0]rxdata_out;
  output [15:0]dmonitorout_out;
  output [15:0]pcsrsvdout_out;
  output [15:0]pinrsrvdas_out;
  output [15:0]rxctrl0_out;
  output [15:0]rxctrl1_out;
  output [1:0]pcierateqpllpd_out;
  output [1:0]pcierateqpllreset_out;
  output [1:0]rxclkcorcnt_out;
  output [1:0]rxdatavalid_out;
  output [1:0]rxheadervalid_out;
  output [1:0]rxstartofseq_out;
  output [1:0]txbufstatus_out;
  output [2:0]bufgtcemask_out;
  output [2:0]bufgtrstmask_out;
  output [2:0]rxbufstatus_out;
  output [2:0]rxstatus_out;
  output [4:0]rxchbondo_out;
  output [5:0]rxheader_out;
  output [7:0]rxctrl2_out;
  output [7:0]rxctrl3_out;
  output [7:0]rxdataextendrsvd_out;
  output [7:0]rxmonitorout_out;
  output [8:0]bufgtdiv_out;
  output [15:0]drpdo_out;
  output [0:0]drprdy_out;
  output [0:0]txprgdivresetdone_out;
  output [0:0]gtwiz_reset_tx_done_out;
  output [0:0]gtwiz_reset_rx_cdr_stable_out;
  output [0:0]gtwiz_reset_rx_done_out;
  input [9:0]drpaddr_in;
  input [0:0]drpwe_in;
  input [0:0]rxratemode_in;
  input [2:0]rxrate_in;
  input [1:0]rxpd_in;
  input [15:0]drpdi_in;
  input [0:0]gtwiz_userclk_tx_active_in;
  input [0:0]gtwiz_userclk_rx_active_in;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input [0:0]cdrstepdir_in;
  input [0:0]cdrstepsq_in;
  input [0:0]cdrstepsx_in;
  input [0:0]cfgreset_in;
  input [0:0]clkrsvd0_in;
  input [0:0]clkrsvd1_in;
  input [0:0]cpllfreqlock_in;
  input [0:0]cplllockdetclk_in;
  input [0:0]cplllocken_in;
  input [0:0]dmonfiforeset_in;
  input [0:0]dmonitorclk_in;
  input [0:0]drpclk_in;
  input [0:0]drprst_in;
  input [0:0]eyescanreset_in;
  input [0:0]eyescantrigger_in;
  input [0:0]freqos_in;
  input [0:0]gtgrefclk_in;
  input [0:0]gthrxn_in;
  input [0:0]gthrxp_in;
  input [0:0]gtnorthrefclk0_in;
  input [0:0]gtnorthrefclk1_in;
  input [0:0]gtrefclk0_in;
  input [0:0]gtrefclk1_in;
  input [0:0]gtrxresetsel_in;
  input [0:0]gtsouthrefclk0_in;
  input [0:0]gtsouthrefclk1_in;
  input [0:0]gttxresetsel_in;
  input [0:0]incpctrl_in;
  input [0:0]pcieeqrxeqadaptdone_in;
  input [0:0]pcierstidle_in;
  input [0:0]pciersttxsyncstart_in;
  input [0:0]pcieuserratedone_in;
  input [0:0]qpll0clk_in;
  input [0:0]qpll0freqlock_in;
  input [0:0]qpll0refclk_in;
  input [0:0]qpll1clk_in;
  input [0:0]qpll1freqlock_in;
  input [0:0]qpll1refclk_in;
  input [0:0]resetovrd_in;
  input [0:0]rx8b10ben_in;
  input [0:0]rxafecfoken_in;
  input [0:0]rxbufreset_in;
  input [0:0]rxcdrfreqreset_in;
  input [0:0]rxcdrhold_in;
  input [0:0]rxcdrovrden_in;
  input [0:0]rxcdrreset_in;
  input [0:0]rxchbonden_in;
  input [0:0]rxchbondmaster_in;
  input [0:0]rxchbondslave_in;
  input [0:0]rxckcalreset_in;
  input [0:0]rxcommadeten_in;
  input [0:0]rxdfeagchold_in;
  input [0:0]rxdfeagcovrden_in;
  input [0:0]rxdfecfokfen_in;
  input [0:0]rxdfecfokfpulse_in;
  input [0:0]rxdfecfokhold_in;
  input [0:0]rxdfecfokovren_in;
  input [0:0]rxdfekhhold_in;
  input [0:0]rxdfekhovrden_in;
  input [0:0]rxdfelfhold_in;
  input [0:0]rxdfelfovrden_in;
  input [0:0]rxdfelpmreset_in;
  input [0:0]rxdfetap10hold_in;
  input [0:0]rxdfetap10ovrden_in;
  input [0:0]rxdfetap11hold_in;
  input [0:0]rxdfetap11ovrden_in;
  input [0:0]rxdfetap12hold_in;
  input [0:0]rxdfetap12ovrden_in;
  input [0:0]rxdfetap13hold_in;
  input [0:0]rxdfetap13ovrden_in;
  input [0:0]rxdfetap14hold_in;
  input [0:0]rxdfetap14ovrden_in;
  input [0:0]rxdfetap15hold_in;
  input [0:0]rxdfetap15ovrden_in;
  input [0:0]rxdfetap2hold_in;
  input [0:0]rxdfetap2ovrden_in;
  input [0:0]rxdfetap3hold_in;
  input [0:0]rxdfetap3ovrden_in;
  input [0:0]rxdfetap4hold_in;
  input [0:0]rxdfetap4ovrden_in;
  input [0:0]rxdfetap5hold_in;
  input [0:0]rxdfetap5ovrden_in;
  input [0:0]rxdfetap6hold_in;
  input [0:0]rxdfetap6ovrden_in;
  input [0:0]rxdfetap7hold_in;
  input [0:0]rxdfetap7ovrden_in;
  input [0:0]rxdfetap8hold_in;
  input [0:0]rxdfetap8ovrden_in;
  input [0:0]rxdfetap9hold_in;
  input [0:0]rxdfetap9ovrden_in;
  input [0:0]rxdfeuthold_in;
  input [0:0]rxdfeutovrden_in;
  input [0:0]rxdfevphold_in;
  input [0:0]rxdfevpovrden_in;
  input [0:0]rxdfexyden_in;
  input [0:0]rxdlybypass_in;
  input [0:0]rxdlyen_in;
  input [0:0]rxdlyovrden_in;
  input [0:0]rxdlysreset_in;
  input [0:0]rxeqtraining_in;
  input [0:0]rxgearboxslip_in;
  input [0:0]rxlatclk_in;
  input [0:0]rxlpmen_in;
  input [0:0]rxlpmgchold_in;
  input [0:0]rxlpmgcovrden_in;
  input [0:0]rxlpmhfhold_in;
  input [0:0]rxlpmhfovrden_in;
  input [0:0]rxlpmlfhold_in;
  input [0:0]rxlpmlfklovrden_in;
  input [0:0]rxlpmoshold_in;
  input [0:0]rxlpmosovrden_in;
  input [0:0]rxmcommaalignen_in;
  input [0:0]rxoobreset_in;
  input [0:0]rxoscalreset_in;
  input [0:0]rxoshold_in;
  input [0:0]rxosovrden_in;
  input [0:0]rxpcommaalignen_in;
  input [0:0]rxpcsreset_in;
  input [0:0]rxphalign_in;
  input [0:0]rxphalignen_in;
  input [0:0]rxphdlypd_in;
  input [0:0]rxphdlyreset_in;
  input [0:0]rxphovrden_in;
  input [0:0]rxpolarity_in;
  input [0:0]rxprbscntreset_in;
  input [0:0]rxqpien_in;
  input [0:0]rxslide_in;
  input [0:0]rxslipoutclk_in;
  input [0:0]rxslippma_in;
  input [0:0]rxsyncallin_in;
  input [0:0]rxsyncin_in;
  input [0:0]rxsyncmode_in;
  input [0:0]rxtermination_in;
  input [0:0]rxusrclk_in;
  input [0:0]rxusrclk2_in;
  input [0:0]sigvalidclk_in;
  input [0:0]tx8b10ben_in;
  input [0:0]txcominit_in;
  input [0:0]txcomsas_in;
  input [0:0]txcomwake_in;
  input [0:0]txdccforcestart_in;
  input [0:0]txdccreset_in;
  input [0:0]txdetectrx_in;
  input [0:0]txdlybypass_in;
  input [0:0]txdlyen_in;
  input [0:0]txdlyhold_in;
  input [0:0]txdlyovrden_in;
  input [0:0]txdlysreset_in;
  input [0:0]txdlyupdown_in;
  input [0:0]txelecidle_in;
  input [0:0]txinhibit_in;
  input [0:0]txlatclk_in;
  input [0:0]txlfpstreset_in;
  input [0:0]txlfpsu2lpexit_in;
  input [0:0]txlfpsu3wake_in;
  input [0:0]txmuxdcdexhold_in;
  input [0:0]txmuxdcdorwren_in;
  input [0:0]txoneszeros_in;
  input [0:0]txpcsreset_in;
  input [0:0]txpdelecidlemode_in;
  input [0:0]txphalign_in;
  input [0:0]txphalignen_in;
  input [0:0]txphdlypd_in;
  input [0:0]txphdlyreset_in;
  input [0:0]txphdlytstclk_in;
  input [0:0]txphinit_in;
  input [0:0]txphovrden_in;
  input [0:0]txpippmen_in;
  input [0:0]txpippmovrden_in;
  input [0:0]txpippmpd_in;
  input [0:0]txpippmsel_in;
  input [0:0]txpisopd_in;
  input [0:0]txpmareset_in;
  input [0:0]txpolarity_in;
  input [0:0]txprbsforceerr_in;
  input [0:0]txqpibiasen_in;
  input [0:0]txqpiweakpup_in;
  input [0:0]txratemode_in;
  input [0:0]txswing_in;
  input [0:0]txsyncallin_in;
  input [0:0]txsyncin_in;
  input [0:0]txsyncmode_in;
  input [0:0]txusrclk_in;
  input [0:0]txusrclk2_in;
  input [31:0]gtwiz_userdata_tx_in;
  input [15:0]gtrsvd_in;
  input [15:0]pcsrsvdin_in;
  input [15:0]txctrl0_in;
  input [15:0]txctrl1_in;
  input [19:0]tstin_in;
  input [1:0]rxdfeagcctrl_in;
  input [1:0]rxelecidlemode_in;
  input [1:0]rxmonitorsel_in;
  input [1:0]rxpllclksel_in;
  input [1:0]rxsysclksel_in;
  input [1:0]txdeemph_in;
  input [1:0]txpd_in;
  input [1:0]txpllclksel_in;
  input [1:0]txsysclksel_in;
  input [2:0]cpllrefclksel_in;
  input [2:0]loopback_in;
  input [2:0]rxchbondlevel_in;
  input [2:0]rxoutclksel_in;
  input [2:0]txmargin_in;
  input [2:0]txrate_in;
  input [3:0]rxdfecfokfcnum_in;
  input [3:0]rxprbssel_in;
  input [3:0]txprbssel_in;
  input [4:0]rxchbondi_in;
  input [4:0]txdiffctrl_in;
  input [4:0]txpippmstepsize_in;
  input [4:0]txpostcursor_in;
  input [4:0]txprecursor_in;
  input [5:0]txheader_in;
  input [6:0]rxckcalstart_in;
  input [6:0]txmaincursor_in;
  input [6:0]txsequence_in;
  input [7:0]tx8b10bbypass_in;
  input [7:0]txctrl2_in;
  input [7:0]txdataextendrsvd_in;
  input [2:0]txoutclksel_in;
  input [0:0]gtwiz_userclk_tx_reset_in;
  input [0:0]drpen_in;
  input [0:0]cpllreset_in;
  input [0:0]gtwiz_reset_all_in;
  input [0:0]gtwiz_reset_tx_datapath_in;
  input [0:0]gtwiz_reset_tx_pll_and_datapath_in;
  input [0:0]gtwiz_reset_rx_datapath_in;
  input [0:0]gtwiz_reset_rx_pll_and_datapath_in;
  input [0:0]rxpmareset_in;

  wire USER_TXPRGDIVRESETDONE_OUT_i_1_n_0;
  wire [0:0]bufgtce_out;
  wire [2:0]bufgtcemask_out;
  wire [8:0]bufgtdiv_out;
  wire [0:0]bufgtreset_out;
  wire [2:0]bufgtrstmask_out;
  wire cal_fail_store_i_1_n_0;
  wire [15:15]cal_on_tx_dout;
  wire cal_on_tx_drpen_out;
  wire cal_on_tx_drpwe_out;
  wire [0:0]cdrstepdir_in;
  wire [0:0]cdrstepsq_in;
  wire [0:0]cdrstepsx_in;
  wire [0:0]cfgreset_in;
  wire [0:0]clkrsvd0_in;
  wire [0:0]clkrsvd1_in;
  wire [0:0]cpllfbclklost_out;
  wire [0:0]cpllfreqlock_in;
  wire [0:0]cplllock_out;
  wire [0:0]cplllockdetclk_in;
  wire [0:0]cplllocken_in;
  wire cpllpd_int_i_1_n_0;
  wire [0:0]cpllrefclklost_out;
  wire [2:0]cpllrefclksel_in;
  wire [0:0]cpllreset_in;
  wire cpllreset_int_i_1_n_0;
  wire den_i_1_n_0;
  wire [0:0]dmonfiforeset_in;
  wire [0:0]dmonitorclk_in;
  wire [15:0]dmonitorout_out;
  wire [0:0]dmonitoroutclk_out;
  wire done_i_1_n_0;
  wire [9:0]drpaddr_in;
  wire [0:0]drpclk_in;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire [0:0]drpen_in;
  wire [0:0]drprdy_out;
  wire [0:0]drprst_in;
  wire [0:0]drpwe_in;
  wire dwe_i_1_n_0;
  wire [0:0]eyescandataerror_out;
  wire [0:0]eyescanreset_in;
  wire [0:0]eyescantrigger_in;
  wire freq_counter_rst_i_1_n_0;
  wire [0:0]freqos_in;
  wire \gen_gtwizard_gthe4.cplllock_ch_int ;
  wire \gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ;
  wire \gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ;
  wire [15:0]\gen_gtwizard_gthe4.drpdo_int ;
  wire \gen_gtwizard_gthe4.drprdy_int ;
  wire \gen_gtwizard_gthe4.gen_channel_container[0].gen_enabled_channel.gthe4_channel_wrapper_inst_n_381 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.cpll_cal_reset_int__0 ;
  wire [9:0]\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.drpaddr_cpll_cal_int ;
  wire [15:0]\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.drpdi_cpll_cal_int ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.drpen_cpll_cal_int ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.drpwe_cpll_cal_int ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_1 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_100 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_101 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_102 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_103 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_104 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_105 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_106 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_107 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_108 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_17 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_18 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_19 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_20 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_31 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_33 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_34 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_35 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_36 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_37 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_38 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_39 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_40 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_41 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_42 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_5 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_6 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_64 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_65 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_7 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_8 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_9 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_93 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_94 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_95 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_96 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_97 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_98 ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_99 ;
  wire [2:0]\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.txoutclksel_cpll_cal_int ;
  wire \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.txprogdivreset_cpll_cal_int ;
  wire \gen_gtwizard_gthe4.gen_pwrgood_delay_inst[0].delay_powergood_inst_n_1 ;
  wire \gen_gtwizard_gthe4.gen_pwrgood_delay_inst[0].delay_powergood_inst_n_4 ;
  wire \gen_gtwizard_gthe4.gen_pwrgood_delay_inst[0].delay_powergood_inst_n_5 ;
  wire \gen_gtwizard_gthe4.gen_pwrgood_delay_inst[0].delay_powergood_inst_n_6 ;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int ;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int ;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ;
  wire \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ;
  wire \gen_gtwizard_gthe4.gtpowergood_int ;
  wire \gen_gtwizard_gthe4.gttxreset_int ;
  wire \gen_gtwizard_gthe4.rxprogdivreset_int ;
  wire [2:1]\gen_gtwizard_gthe4.rxrate_ch_int ;
  wire \gen_gtwizard_gthe4.rxuserrdy_int ;
  wire \gen_gtwizard_gthe4.txprgdivresetdone_int ;
  wire \gen_gtwizard_gthe4.txprogdivreset_int ;
  wire \gen_gtwizard_gthe4.txuserrdy_int ;
  wire [0:0]gtgrefclk_in;
  wire [0:0]gthrxn_in;
  wire [0:0]gthrxp_in;
  wire [0:0]gthtxn_out;
  wire [0:0]gthtxp_out;
  wire [0:0]gtnorthrefclk0_in;
  wire [0:0]gtnorthrefclk1_in;
  wire [0:0]gtpowergood_out;
  wire [0:0]gtrefclk0_in;
  wire [0:0]gtrefclk1_in;
  wire [0:0]gtrefclkmonitor_out;
  wire [15:0]gtrsvd_in;
  wire [0:0]gtrxresetsel_in;
  wire [0:0]gtsouthrefclk0_in;
  wire [0:0]gtsouthrefclk1_in;
  wire [0:0]gttxresetsel_in;
  wire [0:0]gtwiz_reset_all_in;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire [0:0]gtwiz_reset_rx_cdr_stable_out;
  wire [0:0]gtwiz_reset_rx_datapath_in;
  wire [0:0]gtwiz_reset_rx_done_out;
  wire [0:0]gtwiz_reset_rx_pll_and_datapath_in;
  wire [0:0]gtwiz_reset_tx_datapath_in;
  wire [0:0]gtwiz_reset_tx_done_out;
  wire [0:0]gtwiz_reset_tx_pll_and_datapath_in;
  wire [0:0]gtwiz_userclk_rx_active_in;
  wire [0:0]gtwiz_userclk_tx_active_in;
  wire [0:0]gtwiz_userclk_tx_reset_in;
  wire [31:0]gtwiz_userdata_tx_in;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/drp_done ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/i_in_out ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_13_in ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_15_in ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_16_in ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_17_in ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_18_in ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_1_in10_in ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_1_in2_in ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_2_in4_in ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_3_in ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_4_in ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/rd ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/txprogdivreset_int ;
  wire \gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/wr ;
  wire [0:0]incpctrl_in;
  wire [2:0]loopback_in;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire mask_user_in_i_1_n_0;
  wire [0:0]pcieeqrxeqadaptdone_in;
  wire [0:0]pcierategen3_out;
  wire [0:0]pcierateidle_out;
  wire [1:0]pcierateqpllpd_out;
  wire [1:0]pcierateqpllreset_out;
  wire [0:0]pcierstidle_in;
  wire [0:0]pciersttxsyncstart_in;
  wire [0:0]pciesynctxsyncdone_out;
  wire [0:0]pcieusergen3rdy_out;
  wire [0:0]pcieuserphystatusrst_out;
  wire [0:0]pcieuserratedone_in;
  wire [0:0]pcieuserratestart_out;
  wire [15:0]pcsrsvdin_in;
  wire [15:0]pcsrsvdout_out;
  wire [0:0]phystatus_out;
  wire [15:0]pinrsrvdas_out;
  wire [0:0]powerpresent_out;
  wire [0:0]qpll0clk_in;
  wire [0:0]qpll0freqlock_in;
  wire [0:0]qpll0refclk_in;
  wire [0:0]qpll1clk_in;
  wire [0:0]qpll1freqlock_in;
  wire [0:0]qpll1refclk_in;
  wire rd_i_1__0_n_0;
  wire [0:0]resetexception_out;
  wire [0:0]resetovrd_in;
  wire rst_in0;
  wire [0:0]rx8b10ben_in;
  wire [0:0]rxafecfoken_in;
  wire [0:0]rxbufreset_in;
  wire [2:0]rxbufstatus_out;
  wire [0:0]rxbyteisaligned_out;
  wire [0:0]rxbyterealign_out;
  wire [0:0]rxcdrfreqreset_in;
  wire [0:0]rxcdrhold_in;
  wire [0:0]rxcdrlock_out;
  wire [0:0]rxcdrovrden_in;
  wire [0:0]rxcdrphdone_out;
  wire [0:0]rxcdrreset_in;
  wire [0:0]rxchanbondseq_out;
  wire [0:0]rxchanisaligned_out;
  wire [0:0]rxchanrealign_out;
  wire [0:0]rxchbonden_in;
  wire [4:0]rxchbondi_in;
  wire [2:0]rxchbondlevel_in;
  wire [0:0]rxchbondmaster_in;
  wire [4:0]rxchbondo_out;
  wire [0:0]rxchbondslave_in;
  wire [0:0]rxckcaldone_out;
  wire [0:0]rxckcalreset_in;
  wire [6:0]rxckcalstart_in;
  wire [1:0]rxclkcorcnt_out;
  wire [0:0]rxcominitdet_out;
  wire [0:0]rxcommadet_out;
  wire [0:0]rxcommadeten_in;
  wire [0:0]rxcomsasdet_out;
  wire [0:0]rxcomwakedet_out;
  wire [15:0]rxctrl0_out;
  wire [15:0]rxctrl1_out;
  wire [7:0]rxctrl2_out;
  wire [7:0]rxctrl3_out;
  wire [127:0]rxdata_out;
  wire [7:0]rxdataextendrsvd_out;
  wire [1:0]rxdatavalid_out;
  wire [1:0]rxdfeagcctrl_in;
  wire [0:0]rxdfeagchold_in;
  wire [0:0]rxdfeagcovrden_in;
  wire [3:0]rxdfecfokfcnum_in;
  wire [0:0]rxdfecfokfen_in;
  wire [0:0]rxdfecfokfpulse_in;
  wire [0:0]rxdfecfokhold_in;
  wire [0:0]rxdfecfokovren_in;
  wire [0:0]rxdfekhhold_in;
  wire [0:0]rxdfekhovrden_in;
  wire [0:0]rxdfelfhold_in;
  wire [0:0]rxdfelfovrden_in;
  wire [0:0]rxdfelpmreset_in;
  wire [0:0]rxdfetap10hold_in;
  wire [0:0]rxdfetap10ovrden_in;
  wire [0:0]rxdfetap11hold_in;
  wire [0:0]rxdfetap11ovrden_in;
  wire [0:0]rxdfetap12hold_in;
  wire [0:0]rxdfetap12ovrden_in;
  wire [0:0]rxdfetap13hold_in;
  wire [0:0]rxdfetap13ovrden_in;
  wire [0:0]rxdfetap14hold_in;
  wire [0:0]rxdfetap14ovrden_in;
  wire [0:0]rxdfetap15hold_in;
  wire [0:0]rxdfetap15ovrden_in;
  wire [0:0]rxdfetap2hold_in;
  wire [0:0]rxdfetap2ovrden_in;
  wire [0:0]rxdfetap3hold_in;
  wire [0:0]rxdfetap3ovrden_in;
  wire [0:0]rxdfetap4hold_in;
  wire [0:0]rxdfetap4ovrden_in;
  wire [0:0]rxdfetap5hold_in;
  wire [0:0]rxdfetap5ovrden_in;
  wire [0:0]rxdfetap6hold_in;
  wire [0:0]rxdfetap6ovrden_in;
  wire [0:0]rxdfetap7hold_in;
  wire [0:0]rxdfetap7ovrden_in;
  wire [0:0]rxdfetap8hold_in;
  wire [0:0]rxdfetap8ovrden_in;
  wire [0:0]rxdfetap9hold_in;
  wire [0:0]rxdfetap9ovrden_in;
  wire [0:0]rxdfeuthold_in;
  wire [0:0]rxdfeutovrden_in;
  wire [0:0]rxdfevphold_in;
  wire [0:0]rxdfevpovrden_in;
  wire [0:0]rxdfexyden_in;
  wire [0:0]rxdlybypass_in;
  wire [0:0]rxdlyen_in;
  wire [0:0]rxdlyovrden_in;
  wire [0:0]rxdlysreset_in;
  wire [0:0]rxdlysresetdone_out;
  wire [0:0]rxelecidle_out;
  wire [1:0]rxelecidlemode_in;
  wire [0:0]rxeqtraining_in;
  wire [0:0]rxgearboxslip_in;
  wire [5:0]rxheader_out;
  wire [1:0]rxheadervalid_out;
  wire [0:0]rxlatclk_in;
  wire [0:0]rxlfpstresetdet_out;
  wire [0:0]rxlfpsu2lpexitdet_out;
  wire [0:0]rxlfpsu3wakedet_out;
  wire [0:0]rxlpmen_in;
  wire [0:0]rxlpmgchold_in;
  wire [0:0]rxlpmgcovrden_in;
  wire [0:0]rxlpmhfhold_in;
  wire [0:0]rxlpmhfovrden_in;
  wire [0:0]rxlpmlfhold_in;
  wire [0:0]rxlpmlfklovrden_in;
  wire [0:0]rxlpmoshold_in;
  wire [0:0]rxlpmosovrden_in;
  wire [0:0]rxmcommaalignen_in;
  wire [7:0]rxmonitorout_out;
  wire [1:0]rxmonitorsel_in;
  wire [0:0]rxoobreset_in;
  wire [0:0]rxoscalreset_in;
  wire [0:0]rxoshold_in;
  wire [0:0]rxosintdone_out;
  wire [0:0]rxosintstarted_out;
  wire [0:0]rxosintstrobedone_out;
  wire [0:0]rxosintstrobestarted_out;
  wire [0:0]rxosovrden_in;
  wire [0:0]rxoutclk_out;
  wire [0:0]rxoutclkfabric_out;
  wire [0:0]rxoutclkpcs_out;
  wire [2:0]rxoutclksel_in;
  wire [0:0]rxpcommaalignen_in;
  wire [0:0]rxpcsreset_in;
  wire [1:0]rxpd_in;
  wire [0:0]rxphalign_in;
  wire [0:0]rxphaligndone_out;
  wire [0:0]rxphalignen_in;
  wire [0:0]rxphalignerr_out;
  wire [0:0]rxphdlypd_in;
  wire [0:0]rxphdlyreset_in;
  wire [0:0]rxphovrden_in;
  wire [1:0]rxpllclksel_in;
  wire [0:0]rxpmareset_in;
  wire [0:0]rxpmaresetdone_out;
  wire [0:0]rxpolarity_in;
  wire [0:0]rxprbscntreset_in;
  wire [0:0]rxprbserr_out;
  wire [0:0]rxprbslocked_out;
  wire [3:0]rxprbssel_in;
  wire [0:0]rxprgdivresetdone_out;
  wire [0:0]rxqpien_in;
  wire [0:0]rxqpisenn_out;
  wire [0:0]rxqpisenp_out;
  wire [2:0]rxrate_in;
  wire [0:0]rxratedone_out;
  wire [0:0]rxratemode_in;
  wire [0:0]rxrecclkout_out;
  wire [0:0]rxresetdone_out;
  wire [0:0]rxslide_in;
  wire [0:0]rxsliderdy_out;
  wire [0:0]rxslipdone_out;
  wire [0:0]rxslipoutclk_in;
  wire [0:0]rxslipoutclkrdy_out;
  wire [0:0]rxslippma_in;
  wire [0:0]rxslippmardy_out;
  wire [1:0]rxstartofseq_out;
  wire [2:0]rxstatus_out;
  wire [0:0]rxsyncallin_in;
  wire [0:0]rxsyncdone_out;
  wire [0:0]rxsyncin_in;
  wire [0:0]rxsyncmode_in;
  wire [0:0]rxsyncout_out;
  wire [1:0]rxsysclksel_in;
  wire [0:0]rxtermination_in;
  wire [0:0]rxusrclk2_in;
  wire [0:0]rxusrclk_in;
  wire [0:0]rxvalid_out;
  wire [0:0]sigvalidclk_in;
  wire status_store_i_1_n_0;
  wire [19:0]tstin_in;
  wire [7:0]tx8b10bbypass_in;
  wire [0:0]tx8b10ben_in;
  wire [1:0]txbufstatus_out;
  wire [0:0]txcomfinish_out;
  wire [0:0]txcominit_in;
  wire [0:0]txcomsas_in;
  wire [0:0]txcomwake_in;
  wire [15:0]txctrl0_in;
  wire [15:0]txctrl1_in;
  wire [7:0]txctrl2_in;
  wire [7:0]txdataextendrsvd_in;
  wire [0:0]txdccdone_out;
  wire [0:0]txdccforcestart_in;
  wire [0:0]txdccreset_in;
  wire [1:0]txdeemph_in;
  wire [0:0]txdetectrx_in;
  wire [4:0]txdiffctrl_in;
  wire [0:0]txdlybypass_in;
  wire [0:0]txdlyen_in;
  wire [0:0]txdlyhold_in;
  wire [0:0]txdlyovrden_in;
  wire [0:0]txdlysreset_in;
  wire [0:0]txdlysresetdone_out;
  wire [0:0]txdlyupdown_in;
  wire [0:0]txelecidle_in;
  wire [5:0]txheader_in;
  wire [0:0]txinhibit_in;
  wire [0:0]txlatclk_in;
  wire [0:0]txlfpstreset_in;
  wire [0:0]txlfpsu2lpexit_in;
  wire [0:0]txlfpsu3wake_in;
  wire [6:0]txmaincursor_in;
  wire [2:0]txmargin_in;
  wire [0:0]txmuxdcdexhold_in;
  wire [0:0]txmuxdcdorwren_in;
  wire [0:0]txoneszeros_in;
  wire [0:0]txoutclk_out;
  wire [0:0]txoutclkfabric_out;
  wire [0:0]txoutclkpcs_out;
  wire [2:0]txoutclksel_in;
  wire [0:0]txpcsreset_in;
  wire [1:0]txpd_in;
  wire [0:0]txpdelecidlemode_in;
  wire [0:0]txphalign_in;
  wire [0:0]txphaligndone_out;
  wire [0:0]txphalignen_in;
  wire [0:0]txphdlypd_in;
  wire [0:0]txphdlyreset_in;
  wire [0:0]txphdlytstclk_in;
  wire [0:0]txphinit_in;
  wire [0:0]txphinitdone_out;
  wire [0:0]txphovrden_in;
  wire [0:0]txpippmen_in;
  wire [0:0]txpippmovrden_in;
  wire [0:0]txpippmpd_in;
  wire [0:0]txpippmsel_in;
  wire [4:0]txpippmstepsize_in;
  wire [0:0]txpisopd_in;
  wire [1:0]txpllclksel_in;
  wire [0:0]txpmareset_in;
  wire [0:0]txpmaresetdone_out;
  wire [0:0]txpolarity_in;
  wire [4:0]txpostcursor_in;
  wire [0:0]txprbsforceerr_in;
  wire [3:0]txprbssel_in;
  wire [4:0]txprecursor_in;
  wire [0:0]txprgdivresetdone_out;
  wire txprogdivreset_int_i_1_n_0;
  wire [0:0]txqpibiasen_in;
  wire [0:0]txqpisenn_out;
  wire [0:0]txqpisenp_out;
  wire [0:0]txqpiweakpup_in;
  wire [2:0]txrate_in;
  wire [0:0]txratedone_out;
  wire [0:0]txratemode_in;
  wire [0:0]txresetdone_out;
  wire [6:0]txsequence_in;
  wire [0:0]txswing_in;
  wire [0:0]txsyncallin_in;
  wire [0:0]txsyncdone_out;
  wire [0:0]txsyncin_in;
  wire [0:0]txsyncmode_in;
  wire [0:0]txsyncout_out;
  wire [1:0]txsysclksel_in;
  wire [0:0]txusrclk2_in;
  wire [0:0]txusrclk_in;
  wire wr_i_1__0_n_0;

  LUT2 #(
    .INIT(4'h2)) 
    USER_TXPRGDIVRESETDONE_OUT_i_1
       (.I0(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/i_in_out ),
        .I1(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_7 ),
        .O(USER_TXPRGDIVRESETDONE_OUT_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFABFF0000A800)) 
    cal_fail_store_i_1
       (.I0(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_39 ),
        .I1(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_104 ),
        .I2(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_103 ),
        .I3(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_101 ),
        .I4(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_97 ),
        .I5(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_6 ),
        .O(cal_fail_store_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFD000000F0)) 
    cpllpd_int_i_1
       (.I0(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_17_in ),
        .I1(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_37 ),
        .I2(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_18_in ),
        .I3(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_99 ),
        .I4(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_94 ),
        .I5(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_8 ),
        .O(cpllpd_int_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFBFB000000AA)) 
    cpllreset_int_i_1
       (.I0(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_16_in ),
        .I1(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_15_in ),
        .I2(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_37 ),
        .I3(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_38 ),
        .I4(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_98 ),
        .I5(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_9 ),
        .O(cpllreset_int_i_1_n_0));
  LUT5 #(
    .INIT(32'hFFCDFFCC)) 
    den_i_1
       (.I0(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_33 ),
        .I1(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_34 ),
        .I2(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_35 ),
        .I3(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_36 ),
        .I4(cal_on_tx_drpen_out),
        .O(den_i_1_n_0));
  LUT6 #(
    .INIT(64'h010101FF01010100)) 
    done_i_1
       (.I0(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_65 ),
        .I1(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_64 ),
        .I2(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_108 ),
        .I3(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_105 ),
        .I4(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_106 ),
        .I5(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_17 ),
        .O(done_i_1_n_0));
  LUT3 #(
    .INIT(8'hBA)) 
    dwe_i_1
       (.I0(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_34 ),
        .I1(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_33 ),
        .I2(cal_on_tx_drpwe_out),
        .O(dwe_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFDD22220300)) 
    freq_counter_rst_i_1
       (.I0(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_102 ),
        .I1(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_96 ),
        .I2(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_38 ),
        .I3(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_16_in ),
        .I4(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_17_in ),
        .I5(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_1 ),
        .O(freq_counter_rst_i_1_n_0));
  quadsgmii_0_TEST_quadsgmii_0_TEST_gt_gthe4_channel_wrapper \gen_gtwizard_gthe4.gen_channel_container[0].gen_enabled_channel.gthe4_channel_wrapper_inst 
       (.D(\gen_gtwizard_gthe4.drpdo_int ),
        .GTHE4_CHANNEL_DRPEN_OUT(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.drpen_cpll_cal_int ),
        .GTHE4_CHANNEL_DRPWE_OUT(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.drpwe_cpll_cal_int ),
        .GTHE4_CPLLLOCK_IN(\gen_gtwizard_gthe4.cplllock_ch_int ),
        .GTHE4_TXPRGDIVRESETDONE_IN(\gen_gtwizard_gthe4.txprgdivresetdone_int ),
        .GTHE4_TXPROGDIVRESET_OUT(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.txprogdivreset_cpll_cal_int ),
        .Q(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.drpdi_cpll_cal_int ),
        .RXPD({\gen_gtwizard_gthe4.gen_pwrgood_delay_inst[0].delay_powergood_inst_n_5 ,\gen_gtwizard_gthe4.gen_pwrgood_delay_inst[0].delay_powergood_inst_n_6 }),
        .RXRATE({\gen_gtwizard_gthe4.rxrate_ch_int ,\gen_gtwizard_gthe4.gen_pwrgood_delay_inst[0].delay_powergood_inst_n_4 }),
        .bufgtce_out(bufgtce_out),
        .bufgtcemask_out(bufgtcemask_out),
        .bufgtdiv_out(bufgtdiv_out),
        .bufgtreset_out(bufgtreset_out),
        .bufgtrstmask_out(bufgtrstmask_out),
        .cdrstepdir_in(cdrstepdir_in),
        .cdrstepsq_in(cdrstepsq_in),
        .cdrstepsx_in(cdrstepsx_in),
        .cfgreset_in(cfgreset_in),
        .clkrsvd0_in(clkrsvd0_in),
        .clkrsvd1_in(clkrsvd1_in),
        .cpllfbclklost_out(cpllfbclklost_out),
        .cpllfreqlock_in(cpllfreqlock_in),
        .cplllockdetclk_in(cplllockdetclk_in),
        .cplllocken_in(cplllocken_in),
        .cpllpd_int_reg(\gen_gtwizard_gthe4.gen_channel_container[0].gen_enabled_channel.gthe4_channel_wrapper_inst_n_381 ),
        .cpllrefclklost_out(cpllrefclklost_out),
        .cpllrefclksel_in(cpllrefclksel_in),
        .dmonfiforeset_in(dmonfiforeset_in),
        .dmonitorclk_in(dmonitorclk_in),
        .dmonitorout_out(dmonitorout_out),
        .dmonitoroutclk_out(dmonitoroutclk_out),
        .drpclk_in(drpclk_in),
        .drprst_in(drprst_in),
        .eyescandataerror_out(eyescandataerror_out),
        .eyescanreset_in(eyescanreset_in),
        .eyescantrigger_in(eyescantrigger_in),
        .freqos_in(freqos_in),
        .\gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int (\gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ),
        .\gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int (\gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ),
        .\gen_gtwizard_gthe4.drprdy_int (\gen_gtwizard_gthe4.drprdy_int ),
        .\gen_gtwizard_gthe4.gtpowergood_int (\gen_gtwizard_gthe4.gtpowergood_int ),
        .\gen_gtwizard_gthe4.gttxreset_int (\gen_gtwizard_gthe4.gttxreset_int ),
        .\gen_gtwizard_gthe4.rxprogdivreset_int (\gen_gtwizard_gthe4.rxprogdivreset_int ),
        .\gen_gtwizard_gthe4.rxuserrdy_int (\gen_gtwizard_gthe4.rxuserrdy_int ),
        .\gen_gtwizard_gthe4.txuserrdy_int (\gen_gtwizard_gthe4.txuserrdy_int ),
        .gtgrefclk_in(gtgrefclk_in),
        .gthrxn_in(gthrxn_in),
        .gthrxp_in(gthrxp_in),
        .gthtxn_out(gthtxn_out),
        .gthtxp_out(gthtxp_out),
        .gtnorthrefclk0_in(gtnorthrefclk0_in),
        .gtnorthrefclk1_in(gtnorthrefclk1_in),
        .gtrefclk0_in(gtrefclk0_in),
        .gtrefclk1_in(gtrefclk1_in),
        .gtrefclkmonitor_out(gtrefclkmonitor_out),
        .gtrsvd_in(gtrsvd_in),
        .gtrxresetsel_in(gtrxresetsel_in),
        .gtsouthrefclk0_in(gtsouthrefclk0_in),
        .gtsouthrefclk1_in(gtsouthrefclk1_in),
        .gttxresetsel_in(gttxresetsel_in),
        .gtwiz_userdata_tx_in(gtwiz_userdata_tx_in),
        .i_in_meta_reg(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_8 ),
        .i_in_meta_reg_0(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_9 ),
        .i_in_meta_reg_1(\gen_gtwizard_gthe4.gen_pwrgood_delay_inst[0].delay_powergood_inst_n_1 ),
        .i_in_meta_reg_2(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.txoutclksel_cpll_cal_int ),
        .i_in_meta_reg_3(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.drpaddr_cpll_cal_int ),
        .incpctrl_in(incpctrl_in),
        .loopback_in(loopback_in),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .pcieeqrxeqadaptdone_in(pcieeqrxeqadaptdone_in),
        .pcierategen3_out(pcierategen3_out),
        .pcierateidle_out(pcierateidle_out),
        .pcierateqpllpd_out(pcierateqpllpd_out),
        .pcierateqpllreset_out(pcierateqpllreset_out),
        .pcierstidle_in(pcierstidle_in),
        .pciersttxsyncstart_in(pciersttxsyncstart_in),
        .pciesynctxsyncdone_out(pciesynctxsyncdone_out),
        .pcieusergen3rdy_out(pcieusergen3rdy_out),
        .pcieuserphystatusrst_out(pcieuserphystatusrst_out),
        .pcieuserratedone_in(pcieuserratedone_in),
        .pcieuserratestart_out(pcieuserratestart_out),
        .pcsrsvdin_in(pcsrsvdin_in),
        .pcsrsvdout_out(pcsrsvdout_out),
        .phystatus_out(phystatus_out),
        .pinrsrvdas_out(pinrsrvdas_out),
        .powerpresent_out(powerpresent_out),
        .qpll0clk_in(qpll0clk_in),
        .qpll0freqlock_in(qpll0freqlock_in),
        .qpll0refclk_in(qpll0refclk_in),
        .qpll1clk_in(qpll1clk_in),
        .qpll1freqlock_in(qpll1freqlock_in),
        .qpll1refclk_in(qpll1refclk_in),
        .resetexception_out(resetexception_out),
        .resetovrd_in(resetovrd_in),
        .rx8b10ben_in(rx8b10ben_in),
        .rxafecfoken_in(rxafecfoken_in),
        .rxbufreset_in(rxbufreset_in),
        .rxbufstatus_out(rxbufstatus_out),
        .rxbyteisaligned_out(rxbyteisaligned_out),
        .rxbyterealign_out(rxbyterealign_out),
        .rxcdrfreqreset_in(rxcdrfreqreset_in),
        .rxcdrhold_in(rxcdrhold_in),
        .rxcdrlock_out(rxcdrlock_out),
        .rxcdrovrden_in(rxcdrovrden_in),
        .rxcdrphdone_out(rxcdrphdone_out),
        .rxcdrreset_in(rxcdrreset_in),
        .rxchanbondseq_out(rxchanbondseq_out),
        .rxchanisaligned_out(rxchanisaligned_out),
        .rxchanrealign_out(rxchanrealign_out),
        .rxchbonden_in(rxchbonden_in),
        .rxchbondi_in(rxchbondi_in),
        .rxchbondlevel_in(rxchbondlevel_in),
        .rxchbondmaster_in(rxchbondmaster_in),
        .rxchbondo_out(rxchbondo_out),
        .rxchbondslave_in(rxchbondslave_in),
        .rxckcaldone_out(rxckcaldone_out),
        .rxckcalreset_in(rxckcalreset_in),
        .rxckcalstart_in(rxckcalstart_in),
        .rxclkcorcnt_out(rxclkcorcnt_out),
        .rxcominitdet_out(rxcominitdet_out),
        .rxcommadet_out(rxcommadet_out),
        .rxcommadeten_in(rxcommadeten_in),
        .rxcomsasdet_out(rxcomsasdet_out),
        .rxcomwakedet_out(rxcomwakedet_out),
        .rxctrl0_out(rxctrl0_out),
        .rxctrl1_out(rxctrl1_out),
        .rxctrl2_out(rxctrl2_out),
        .rxctrl3_out(rxctrl3_out),
        .rxdata_out(rxdata_out),
        .rxdataextendrsvd_out(rxdataextendrsvd_out),
        .rxdatavalid_out(rxdatavalid_out),
        .rxdfeagcctrl_in(rxdfeagcctrl_in),
        .rxdfeagchold_in(rxdfeagchold_in),
        .rxdfeagcovrden_in(rxdfeagcovrden_in),
        .rxdfecfokfcnum_in(rxdfecfokfcnum_in),
        .rxdfecfokfen_in(rxdfecfokfen_in),
        .rxdfecfokfpulse_in(rxdfecfokfpulse_in),
        .rxdfecfokhold_in(rxdfecfokhold_in),
        .rxdfecfokovren_in(rxdfecfokovren_in),
        .rxdfekhhold_in(rxdfekhhold_in),
        .rxdfekhovrden_in(rxdfekhovrden_in),
        .rxdfelfhold_in(rxdfelfhold_in),
        .rxdfelfovrden_in(rxdfelfovrden_in),
        .rxdfelpmreset_in(rxdfelpmreset_in),
        .rxdfetap10hold_in(rxdfetap10hold_in),
        .rxdfetap10ovrden_in(rxdfetap10ovrden_in),
        .rxdfetap11hold_in(rxdfetap11hold_in),
        .rxdfetap11ovrden_in(rxdfetap11ovrden_in),
        .rxdfetap12hold_in(rxdfetap12hold_in),
        .rxdfetap12ovrden_in(rxdfetap12ovrden_in),
        .rxdfetap13hold_in(rxdfetap13hold_in),
        .rxdfetap13ovrden_in(rxdfetap13ovrden_in),
        .rxdfetap14hold_in(rxdfetap14hold_in),
        .rxdfetap14ovrden_in(rxdfetap14ovrden_in),
        .rxdfetap15hold_in(rxdfetap15hold_in),
        .rxdfetap15ovrden_in(rxdfetap15ovrden_in),
        .rxdfetap2hold_in(rxdfetap2hold_in),
        .rxdfetap2ovrden_in(rxdfetap2ovrden_in),
        .rxdfetap3hold_in(rxdfetap3hold_in),
        .rxdfetap3ovrden_in(rxdfetap3ovrden_in),
        .rxdfetap4hold_in(rxdfetap4hold_in),
        .rxdfetap4ovrden_in(rxdfetap4ovrden_in),
        .rxdfetap5hold_in(rxdfetap5hold_in),
        .rxdfetap5ovrden_in(rxdfetap5ovrden_in),
        .rxdfetap6hold_in(rxdfetap6hold_in),
        .rxdfetap6ovrden_in(rxdfetap6ovrden_in),
        .rxdfetap7hold_in(rxdfetap7hold_in),
        .rxdfetap7ovrden_in(rxdfetap7ovrden_in),
        .rxdfetap8hold_in(rxdfetap8hold_in),
        .rxdfetap8ovrden_in(rxdfetap8ovrden_in),
        .rxdfetap9hold_in(rxdfetap9hold_in),
        .rxdfetap9ovrden_in(rxdfetap9ovrden_in),
        .rxdfeuthold_in(rxdfeuthold_in),
        .rxdfeutovrden_in(rxdfeutovrden_in),
        .rxdfevphold_in(rxdfevphold_in),
        .rxdfevpovrden_in(rxdfevpovrden_in),
        .rxdfexyden_in(rxdfexyden_in),
        .rxdlybypass_in(rxdlybypass_in),
        .rxdlyen_in(rxdlyen_in),
        .rxdlyovrden_in(rxdlyovrden_in),
        .rxdlysreset_in(rxdlysreset_in),
        .rxdlysresetdone_out(rxdlysresetdone_out),
        .rxelecidle_out(rxelecidle_out),
        .rxelecidlemode_in(rxelecidlemode_in),
        .rxeqtraining_in(rxeqtraining_in),
        .rxgearboxslip_in(rxgearboxslip_in),
        .rxheader_out(rxheader_out),
        .rxheadervalid_out(rxheadervalid_out),
        .rxlatclk_in(rxlatclk_in),
        .rxlfpstresetdet_out(rxlfpstresetdet_out),
        .rxlfpsu2lpexitdet_out(rxlfpsu2lpexitdet_out),
        .rxlfpsu3wakedet_out(rxlfpsu3wakedet_out),
        .rxlpmen_in(rxlpmen_in),
        .rxlpmgchold_in(rxlpmgchold_in),
        .rxlpmgcovrden_in(rxlpmgcovrden_in),
        .rxlpmhfhold_in(rxlpmhfhold_in),
        .rxlpmhfovrden_in(rxlpmhfovrden_in),
        .rxlpmlfhold_in(rxlpmlfhold_in),
        .rxlpmlfklovrden_in(rxlpmlfklovrden_in),
        .rxlpmoshold_in(rxlpmoshold_in),
        .rxlpmosovrden_in(rxlpmosovrden_in),
        .rxmcommaalignen_in(rxmcommaalignen_in),
        .rxmonitorout_out(rxmonitorout_out),
        .rxmonitorsel_in(rxmonitorsel_in),
        .rxoobreset_in(rxoobreset_in),
        .rxoscalreset_in(rxoscalreset_in),
        .rxoshold_in(rxoshold_in),
        .rxosintdone_out(rxosintdone_out),
        .rxosintstarted_out(rxosintstarted_out),
        .rxosintstrobedone_out(rxosintstrobedone_out),
        .rxosintstrobestarted_out(rxosintstrobestarted_out),
        .rxosovrden_in(rxosovrden_in),
        .rxoutclk_out(rxoutclk_out),
        .rxoutclkfabric_out(rxoutclkfabric_out),
        .rxoutclkpcs_out(rxoutclkpcs_out),
        .rxoutclksel_in(rxoutclksel_in),
        .rxpcommaalignen_in(rxpcommaalignen_in),
        .rxpcsreset_in(rxpcsreset_in),
        .rxphalign_in(rxphalign_in),
        .rxphaligndone_out(rxphaligndone_out),
        .rxphalignen_in(rxphalignen_in),
        .rxphalignerr_out(rxphalignerr_out),
        .rxphdlypd_in(rxphdlypd_in),
        .rxphdlyreset_in(rxphdlyreset_in),
        .rxphovrden_in(rxphovrden_in),
        .rxpllclksel_in(rxpllclksel_in),
        .rxpmaresetdone_out(rxpmaresetdone_out),
        .rxpolarity_in(rxpolarity_in),
        .rxprbscntreset_in(rxprbscntreset_in),
        .rxprbserr_out(rxprbserr_out),
        .rxprbslocked_out(rxprbslocked_out),
        .rxprbssel_in(rxprbssel_in),
        .rxprgdivresetdone_out(rxprgdivresetdone_out),
        .rxqpien_in(rxqpien_in),
        .rxqpisenn_out(rxqpisenn_out),
        .rxqpisenp_out(rxqpisenp_out),
        .rxratedone_out(rxratedone_out),
        .rxrecclkout_out(rxrecclkout_out),
        .rxresetdone_out(rxresetdone_out),
        .rxslide_in(rxslide_in),
        .rxsliderdy_out(rxsliderdy_out),
        .rxslipdone_out(rxslipdone_out),
        .rxslipoutclk_in(rxslipoutclk_in),
        .rxslipoutclkrdy_out(rxslipoutclkrdy_out),
        .rxslippma_in(rxslippma_in),
        .rxslippmardy_out(rxslippmardy_out),
        .rxstartofseq_out(rxstartofseq_out),
        .rxstatus_out(rxstatus_out),
        .rxsyncallin_in(rxsyncallin_in),
        .rxsyncdone_out(rxsyncdone_out),
        .rxsyncin_in(rxsyncin_in),
        .rxsyncmode_in(rxsyncmode_in),
        .rxsyncout_out(rxsyncout_out),
        .rxsysclksel_in(rxsysclksel_in),
        .rxtermination_in(rxtermination_in),
        .rxusrclk2_in(rxusrclk2_in),
        .rxusrclk_in(rxusrclk_in),
        .rxvalid_out(rxvalid_out),
        .sigvalidclk_in(sigvalidclk_in),
        .tstin_in(tstin_in),
        .tx8b10bbypass_in(tx8b10bbypass_in),
        .tx8b10ben_in(tx8b10ben_in),
        .txbufstatus_out(txbufstatus_out),
        .txcomfinish_out(txcomfinish_out),
        .txcominit_in(txcominit_in),
        .txcomsas_in(txcomsas_in),
        .txcomwake_in(txcomwake_in),
        .txctrl0_in(txctrl0_in),
        .txctrl1_in(txctrl1_in),
        .txctrl2_in(txctrl2_in),
        .txdataextendrsvd_in(txdataextendrsvd_in),
        .txdccdone_out(txdccdone_out),
        .txdccforcestart_in(txdccforcestart_in),
        .txdccreset_in(txdccreset_in),
        .txdeemph_in(txdeemph_in),
        .txdetectrx_in(txdetectrx_in),
        .txdiffctrl_in(txdiffctrl_in),
        .txdlybypass_in(txdlybypass_in),
        .txdlyen_in(txdlyen_in),
        .txdlyhold_in(txdlyhold_in),
        .txdlyovrden_in(txdlyovrden_in),
        .txdlysreset_in(txdlysreset_in),
        .txdlysresetdone_out(txdlysresetdone_out),
        .txdlyupdown_in(txdlyupdown_in),
        .txelecidle_in(txelecidle_in),
        .txheader_in(txheader_in),
        .txinhibit_in(txinhibit_in),
        .txlatclk_in(txlatclk_in),
        .txlfpstreset_in(txlfpstreset_in),
        .txlfpsu2lpexit_in(txlfpsu2lpexit_in),
        .txlfpsu3wake_in(txlfpsu3wake_in),
        .txmaincursor_in(txmaincursor_in),
        .txmargin_in(txmargin_in),
        .txmuxdcdexhold_in(txmuxdcdexhold_in),
        .txmuxdcdorwren_in(txmuxdcdorwren_in),
        .txoneszeros_in(txoneszeros_in),
        .txoutclk_out(txoutclk_out),
        .txoutclkfabric_out(txoutclkfabric_out),
        .txoutclkpcs_out(txoutclkpcs_out),
        .txpcsreset_in(txpcsreset_in),
        .txpd_in(txpd_in),
        .txpdelecidlemode_in(txpdelecidlemode_in),
        .txphalign_in(txphalign_in),
        .txphaligndone_out(txphaligndone_out),
        .txphalignen_in(txphalignen_in),
        .txphdlypd_in(txphdlypd_in),
        .txphdlyreset_in(txphdlyreset_in),
        .txphdlytstclk_in(txphdlytstclk_in),
        .txphinit_in(txphinit_in),
        .txphinitdone_out(txphinitdone_out),
        .txphovrden_in(txphovrden_in),
        .txpippmen_in(txpippmen_in),
        .txpippmovrden_in(txpippmovrden_in),
        .txpippmpd_in(txpippmpd_in),
        .txpippmsel_in(txpippmsel_in),
        .txpippmstepsize_in(txpippmstepsize_in),
        .txpisopd_in(txpisopd_in),
        .txpllclksel_in(txpllclksel_in),
        .txpmareset_in(txpmareset_in),
        .txpmaresetdone_out(txpmaresetdone_out),
        .txpolarity_in(txpolarity_in),
        .txpostcursor_in(txpostcursor_in),
        .txprbsforceerr_in(txprbsforceerr_in),
        .txprbssel_in(txprbssel_in),
        .txprecursor_in(txprecursor_in),
        .txqpibiasen_in(txqpibiasen_in),
        .txqpisenn_out(txqpisenn_out),
        .txqpisenp_out(txqpisenp_out),
        .txqpiweakpup_in(txqpiweakpup_in),
        .txrate_in(txrate_in),
        .txratedone_out(txratedone_out),
        .txratemode_in(txratemode_in),
        .txresetdone_out(txresetdone_out),
        .txsequence_in(txsequence_in),
        .txswing_in(txswing_in),
        .txsyncallin_in(txsyncallin_in),
        .txsyncdone_out(txsyncdone_out),
        .txsyncin_in(txsyncin_in),
        .txsyncmode_in(txsyncmode_in),
        .txsyncout_out(txsyncout_out),
        .txsysclksel_in(txsysclksel_in),
        .txusrclk2_in(txusrclk2_in),
        .txusrclk_in(txusrclk_in));
  LUT3 #(
    .INIT(8'hFE)) 
    \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.cpll_cal_reset_int 
       (.I0(cpllreset_in),
        .I1(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int ),
        .I2(\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int ),
        .O(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.cpll_cal_reset_int__0 ));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal \gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst 
       (.D(\gen_gtwizard_gthe4.drpdo_int ),
        .\DADDR_O_reg[9] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.drpaddr_cpll_cal_int ),
        .\DI_O_reg[15] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.drpdi_cpll_cal_int ),
        .\DO_USR_O_reg[47] ({cal_on_tx_dout,drpdo_out}),
        .GTHE4_CHANNEL_DRPEN_OUT(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.drpen_cpll_cal_int ),
        .GTHE4_CHANNEL_DRPWE_OUT(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.drpwe_cpll_cal_int ),
        .GTHE4_CPLLLOCK_IN(\gen_gtwizard_gthe4.cplllock_ch_int ),
        .GTHE4_TXPRGDIVRESETDONE_IN(\gen_gtwizard_gthe4.txprgdivresetdone_int ),
        .GTHE4_TXPROGDIVRESET_OUT(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.txprogdivreset_cpll_cal_int ),
        .Q({\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_18 ,\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_19 ,\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_20 ,\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_3_in ,\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_2_in4_in ,\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_13_in ,\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_15_in ,\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_16_in ,\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_17_in ,\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_18_in ,\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_4_in ,\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_1_in2_in ,\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_1_in10_in ,\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_31 }),
        .RESET_IN(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.cpll_cal_reset_int__0 ),
        .USER_CPLLLOCK_OUT_reg(cplllock_out),
        .USER_TXPRGDIVRESETDONE_OUT_reg(USER_TXPRGDIVRESETDONE_OUT_i_1_n_0),
        .cal_fail_store_reg(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_6 ),
        .cal_fail_store_reg_0(cal_fail_store_i_1_n_0),
        .cal_on_tx_drpen_out(cal_on_tx_drpen_out),
        .cal_on_tx_drpwe_out(cal_on_tx_drpwe_out),
        .\cpll_cal_state_reg[11] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_40 ),
        .\cpll_cal_state_reg[13] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_94 ),
        .\cpll_cal_state_reg[13]_0 (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_98 ),
        .\cpll_cal_state_reg[14] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_96 ),
        .\cpll_cal_state_reg[14]_0 (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_102 ),
        .\cpll_cal_state_reg[22] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_104 ),
        .\cpll_cal_state_reg[25] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_42 ),
        .\cpll_cal_state_reg[27] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_39 ),
        .\cpll_cal_state_reg[5] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_97 ),
        .\cpll_cal_state_reg[5]_0 (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_100 ),
        .\cpll_cal_state_reg[5]_1 (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_107 ),
        .\cpll_cal_state_reg[8] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_41 ),
        .\cpll_cal_state_reg[8]_0 (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_101 ),
        .\cpll_cal_state_reg[9] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_99 ),
        .cpllpd_int_reg(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_8 ),
        .cpllpd_int_reg_0(cpllpd_int_i_1_n_0),
        .cpllreset_int_reg(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_9 ),
        .cpllreset_int_reg_0(cpllreset_int_i_1_n_0),
        .den_reg(den_i_1_n_0),
        .done_reg(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_17 ),
        .done_reg_0(done_i_1_n_0),
        .\drp_state_reg[0] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_106 ),
        .\drp_state_reg[4] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_108 ),
        .\drp_state_reg[5] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_105 ),
        .\drp_state_reg[6] ({\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/drp_done ,\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_33 ,\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_34 ,\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_35 ,\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_36 }),
        .\drp_state_reg[6]_0 ({\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_64 ,\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_65 }),
        .drpaddr_in(drpaddr_in),
        .drpclk_in(drpclk_in),
        .drpdi_in(drpdi_in),
        .drpen_in(drpen_in),
        .drprdy_out(drprdy_out),
        .drprst_in(drprst_in),
        .drpwe_in(drpwe_in),
        .dwe_reg(dwe_i_1_n_0),
        .freq_counter_rst_reg(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_1 ),
        .freq_counter_rst_reg_0(freq_counter_rst_i_1_n_0),
        .\gen_gtwizard_gthe4.drprdy_int (\gen_gtwizard_gthe4.drprdy_int ),
        .gtwiz_userclk_tx_reset_in(gtwiz_userclk_tx_reset_in),
        .i_in_out(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/i_in_out ),
        .in0(\gen_gtwizard_gthe4.txprogdivreset_int ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .mask_user_in_reg(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_7 ),
        .mask_user_in_reg_0(mask_user_in_i_1_n_0),
        .\non_pcie_txoutclksel.GTHE4_TXOUTCLKSEL_OUT_reg[2] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.txoutclksel_cpll_cal_int ),
        .rd(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/rd ),
        .rd_reg(rd_i_1__0_n_0),
        .\repeat_ctr_reg[3] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_103 ),
        .rst_in0(rst_in0),
        .rst_in_out_reg(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_93 ),
        .status_store_reg(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_5 ),
        .status_store_reg_0(status_store_i_1_n_0),
        .txoutclk_out(txoutclk_out),
        .txoutclksel_in(txoutclksel_in),
        .txprgdivresetdone_out(txprgdivresetdone_out),
        .txprogdivreset_int(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/txprogdivreset_int ),
        .txprogdivreset_int_reg(txprogdivreset_int_i_1_n_0),
        .\wait_ctr_reg[11] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_95 ),
        .\wait_ctr_reg[12] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_37 ),
        .\wait_ctr_reg[14] (\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_38 ),
        .wr(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/wr ),
        .wr_reg(wr_i_1__0_n_0));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gthe4_delay_powergood \gen_gtwizard_gthe4.gen_pwrgood_delay_inst[0].delay_powergood_inst 
       (.CLK(rxoutclkpcs_out),
        .RXPD({\gen_gtwizard_gthe4.gen_pwrgood_delay_inst[0].delay_powergood_inst_n_5 ,\gen_gtwizard_gthe4.gen_pwrgood_delay_inst[0].delay_powergood_inst_n_6 }),
        .RXRATE({\gen_gtwizard_gthe4.rxrate_ch_int ,\gen_gtwizard_gthe4.gen_pwrgood_delay_inst[0].delay_powergood_inst_n_4 }),
        .\gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int (\gen_gtwizard_gthe4.delay_pwrgood_rxpmareset_int ),
        .\gen_powergood_delay.intclk_rrst_n_r_reg[0]_0 (\gen_gtwizard_gthe4.gen_channel_container[0].gen_enabled_channel.gthe4_channel_wrapper_inst_n_381 ),
        .\gen_powergood_delay.pwr_on_fsm_reg_0 (\gen_gtwizard_gthe4.gen_pwrgood_delay_inst[0].delay_powergood_inst_n_1 ),
        .out(gtpowergood_out),
        .rxpd_in(rxpd_in),
        .rxpmareset_in(rxpmareset_in),
        .rxrate_in(rxrate_in),
        .rxratemode_in(rxratemode_in));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gen_ch_xrd[0].bit_synchronizer_rxresetdone_inst 
       (.\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .rxresetdone_out(rxresetdone_out));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_bit_synchronizer_2 \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gen_ch_xrd[0].bit_synchronizer_txresetdone_inst 
       (.\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .txresetdone_out(txresetdone_out));
  quadsgmii_0_TEST_gtwizard_ultrascale_v1_7_6_gtwiz_reset \gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_inst 
       (.cplllock_out(cplllock_out),
        .\gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int (\gen_gtwizard_gthe4.delay_pwrgood_gtrxreset_int ),
        .\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_rx_int ),
        .\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.gtwiz_reset_pllreset_tx_int ),
        .\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.rxresetdone_sync ),
        .\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync (\gen_gtwizard_gthe4.gen_reset_controller_internal.gen_single_instance.txresetdone_sync ),
        .\gen_gtwizard_gthe4.gtpowergood_int (\gen_gtwizard_gthe4.gtpowergood_int ),
        .\gen_gtwizard_gthe4.gttxreset_int (\gen_gtwizard_gthe4.gttxreset_int ),
        .\gen_gtwizard_gthe4.rxprogdivreset_int (\gen_gtwizard_gthe4.rxprogdivreset_int ),
        .\gen_gtwizard_gthe4.rxuserrdy_int (\gen_gtwizard_gthe4.rxuserrdy_int ),
        .\gen_gtwizard_gthe4.txuserrdy_int (\gen_gtwizard_gthe4.txuserrdy_int ),
        .gtpowergood_out(gtpowergood_out),
        .gtwiz_reset_all_in(gtwiz_reset_all_in),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_rx_cdr_stable_out(gtwiz_reset_rx_cdr_stable_out),
        .gtwiz_reset_rx_datapath_in(gtwiz_reset_rx_datapath_in),
        .gtwiz_reset_rx_done_out(gtwiz_reset_rx_done_out),
        .gtwiz_reset_rx_pll_and_datapath_in(gtwiz_reset_rx_pll_and_datapath_in),
        .gtwiz_reset_tx_datapath_in(gtwiz_reset_tx_datapath_in),
        .gtwiz_reset_tx_done_out(gtwiz_reset_tx_done_out),
        .gtwiz_reset_tx_pll_and_datapath_in(gtwiz_reset_tx_pll_and_datapath_in),
        .gtwiz_userclk_rx_active_in(gtwiz_userclk_rx_active_in),
        .gtwiz_userclk_tx_active_in(gtwiz_userclk_tx_active_in),
        .in0(\gen_gtwizard_gthe4.txprogdivreset_int ),
        .rst_in0(rst_in0),
        .rxcdrlock_out(rxcdrlock_out),
        .rxusrclk2_in(rxusrclk2_in),
        .txusrclk2_in(txusrclk2_in));
  LUT5 #(
    .INIT(32'hFFF1FFF0)) 
    mask_user_in_i_1
       (.I0(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_19 ),
        .I1(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_18 ),
        .I2(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_31 ),
        .I3(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_1_in10_in ),
        .I4(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_7 ),
        .O(mask_user_in_i_1_n_0));
  LUT6 #(
    .INIT(64'h5555555755555554)) 
    rd_i_1__0
       (.I0(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/drp_done ),
        .I1(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_4_in ),
        .I2(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_1_in2_in ),
        .I3(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_2_in4_in ),
        .I4(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_107 ),
        .I5(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/rd ),
        .O(rd_i_1__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFAB000000A8)) 
    status_store_i_1
       (.I0(cal_on_tx_dout),
        .I1(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_100 ),
        .I2(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_1_in10_in ),
        .I3(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_93 ),
        .I4(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_31 ),
        .I5(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_5 ),
        .O(status_store_i_1_n_0));
  LUT4 #(
    .INIT(16'h5754)) 
    txprogdivreset_int_i_1
       (.I0(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_95 ),
        .I1(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_20 ),
        .I2(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_13_in ),
        .I3(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/txprogdivreset_int ),
        .O(txprogdivreset_int_i_1_n_0));
  LUT6 #(
    .INIT(64'h5555575555555455)) 
    wr_i_1__0
       (.I0(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/drp_done ),
        .I1(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_42 ),
        .I2(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/p_3_in ),
        .I3(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_41 ),
        .I4(\gen_gtwizard_gthe4.gen_cpll_cal_gthe4.gen_cpll_cal_inst[0].gen_inst_cpll_cal.gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_inst_n_40 ),
        .I5(\gtwizard_ultrascale_v1_7_6_gthe4_cpll_cal_tx_i/wr ),
        .O(wr_i_1__0_n_0));
endmodule

(* C_CHANNEL_ENABLE = "192'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001" *) (* C_COMMON_SCALING_FACTOR = "1" *) (* C_CPLL_VCO_FREQUENCY = "2500.000000" *) 
(* C_ENABLE_COMMON_USRCLK = "0" *) (* C_FORCE_COMMONS = "0" *) (* C_FREERUN_FREQUENCY = "75.000000" *) 
(* C_GT_REV = "57" *) (* C_GT_TYPE = "2" *) (* C_INCLUDE_CPLL_CAL = "2" *) 
(* C_LOCATE_COMMON = "0" *) (* C_LOCATE_IN_SYSTEM_IBERT_CORE = "2" *) (* C_LOCATE_RESET_CONTROLLER = "0" *) 
(* C_LOCATE_RX_BUFFER_BYPASS_CONTROLLER = "0" *) (* C_LOCATE_RX_USER_CLOCKING = "1" *) (* C_LOCATE_TX_BUFFER_BYPASS_CONTROLLER = "0" *) 
(* C_LOCATE_TX_USER_CLOCKING = "1" *) (* C_LOCATE_USER_DATA_WIDTH_SIZING = "0" *) (* C_PCIE_CORECLK_FREQ = "250" *) 
(* C_PCIE_ENABLE = "0" *) (* C_RESET_CONTROLLER_INSTANCE_CTRL = "0" *) (* C_RESET_SEQUENCE_INTERVAL = "0" *) 
(* C_RX_BUFFBYPASS_MODE = "0" *) (* C_RX_BUFFER_BYPASS_INSTANCE_CTRL = "0" *) (* C_RX_BUFFER_MODE = "1" *) 
(* C_RX_CB_DISP = "8'b00000000" *) (* C_RX_CB_K = "8'b00000000" *) (* C_RX_CB_LEN_SEQ = "1" *) 
(* C_RX_CB_MAX_LEVEL = "1" *) (* C_RX_CB_NUM_SEQ = "0" *) (* C_RX_CB_VAL = "80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_RX_CC_DISP = "8'b00000000" *) (* C_RX_CC_ENABLE = "0" *) (* C_RX_CC_K = "8'b00000000" *) 
(* C_RX_CC_LEN_SEQ = "1" *) (* C_RX_CC_NUM_SEQ = "0" *) (* C_RX_CC_PERIODICITY = "5000" *) 
(* C_RX_CC_VAL = "80'b00000000000000000000000000000000000000000000000000000000000000000000000000000000" *) (* C_RX_COMMA_M_ENABLE = "1" *) (* C_RX_COMMA_M_VAL = "10'b1010000011" *) 
(* C_RX_COMMA_P_ENABLE = "1" *) (* C_RX_COMMA_P_VAL = "10'b0101111100" *) (* C_RX_DATA_DECODING = "1" *) 
(* C_RX_ENABLE = "1" *) (* C_RX_INT_DATA_WIDTH = "40" *) (* C_RX_LINE_RATE = "5.000000" *) 
(* C_RX_MASTER_CHANNEL_IDX = "0" *) (* C_RX_OUTCLK_BUFG_GT_DIV = "1" *) (* C_RX_OUTCLK_FREQUENCY = "125.000000" *) 
(* C_RX_OUTCLK_SOURCE = "1" *) (* C_RX_PLL_TYPE = "2" *) (* C_RX_RECCLK_OUTPUT = "192'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_RX_REFCLK_FREQUENCY = "125.000000" *) (* C_RX_SLIDE_MODE = "0" *) (* C_RX_USER_CLOCKING_CONTENTS = "0" *) 
(* C_RX_USER_CLOCKING_INSTANCE_CTRL = "0" *) (* C_RX_USER_CLOCKING_RATIO_FSRC_FUSRCLK = "1" *) (* C_RX_USER_CLOCKING_RATIO_FUSRCLK_FUSRCLK2 = "1" *) 
(* C_RX_USER_CLOCKING_SOURCE = "0" *) (* C_RX_USER_DATA_WIDTH = "32" *) (* C_RX_USRCLK2_FREQUENCY = "125.000000" *) 
(* C_RX_USRCLK_FREQUENCY = "125.000000" *) (* C_SECONDARY_QPLL_ENABLE = "0" *) (* C_SECONDARY_QPLL_REFCLK_FREQUENCY = "257.812500" *) 
(* C_SIM_CPLL_CAL_BYPASS = "1" *) (* C_TOTAL_NUM_CHANNELS = "1" *) (* C_TOTAL_NUM_COMMONS = "0" *) 
(* C_TOTAL_NUM_COMMONS_EXAMPLE = "0" *) (* C_TXPROGDIV_FREQ_ENABLE = "0" *) (* C_TXPROGDIV_FREQ_SOURCE = "2" *) 
(* C_TXPROGDIV_FREQ_VAL = "125.000000" *) (* C_TX_BUFFBYPASS_MODE = "0" *) (* C_TX_BUFFER_BYPASS_INSTANCE_CTRL = "0" *) 
(* C_TX_BUFFER_MODE = "1" *) (* C_TX_DATA_ENCODING = "1" *) (* C_TX_ENABLE = "1" *) 
(* C_TX_INT_DATA_WIDTH = "40" *) (* C_TX_LINE_RATE = "5.000000" *) (* C_TX_MASTER_CHANNEL_IDX = "0" *) 
(* C_TX_OUTCLK_BUFG_GT_DIV = "1" *) (* C_TX_OUTCLK_FREQUENCY = "125.000000" *) (* C_TX_OUTCLK_SOURCE = "1" *) 
(* C_TX_PLL_TYPE = "2" *) (* C_TX_REFCLK_FREQUENCY = "125.000000" *) (* C_TX_USER_CLOCKING_CONTENTS = "0" *) 
(* C_TX_USER_CLOCKING_INSTANCE_CTRL = "0" *) (* C_TX_USER_CLOCKING_RATIO_FSRC_FUSRCLK = "1" *) (* C_TX_USER_CLOCKING_RATIO_FUSRCLK_FUSRCLK2 = "1" *) 
(* C_TX_USER_CLOCKING_SOURCE = "0" *) (* C_TX_USER_DATA_WIDTH = "32" *) (* C_TX_USRCLK2_FREQUENCY = "125.000000" *) 
(* C_TX_USRCLK_FREQUENCY = "125.000000" *) (* C_USER_GTPOWERGOOD_DELAY_EN = "1" *) (* ORIG_REF_NAME = "quadsgmii_0_TEST_gt_gtwizard_top" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_gt_gtwizard_top
   (gtwiz_userclk_tx_reset_in,
    gtwiz_userclk_tx_active_in,
    gtwiz_userclk_tx_srcclk_out,
    gtwiz_userclk_tx_usrclk_out,
    gtwiz_userclk_tx_usrclk2_out,
    gtwiz_userclk_tx_active_out,
    gtwiz_userclk_rx_reset_in,
    gtwiz_userclk_rx_active_in,
    gtwiz_userclk_rx_srcclk_out,
    gtwiz_userclk_rx_usrclk_out,
    gtwiz_userclk_rx_usrclk2_out,
    gtwiz_userclk_rx_active_out,
    gtwiz_buffbypass_tx_reset_in,
    gtwiz_buffbypass_tx_start_user_in,
    gtwiz_buffbypass_tx_done_out,
    gtwiz_buffbypass_tx_error_out,
    gtwiz_buffbypass_rx_reset_in,
    gtwiz_buffbypass_rx_start_user_in,
    gtwiz_buffbypass_rx_done_out,
    gtwiz_buffbypass_rx_error_out,
    gtwiz_reset_clk_freerun_in,
    gtwiz_reset_all_in,
    gtwiz_reset_tx_pll_and_datapath_in,
    gtwiz_reset_tx_datapath_in,
    gtwiz_reset_rx_pll_and_datapath_in,
    gtwiz_reset_rx_datapath_in,
    gtwiz_reset_tx_done_in,
    gtwiz_reset_rx_done_in,
    gtwiz_reset_qpll0lock_in,
    gtwiz_reset_qpll1lock_in,
    gtwiz_reset_rx_cdr_stable_out,
    gtwiz_reset_tx_done_out,
    gtwiz_reset_rx_done_out,
    gtwiz_reset_qpll0reset_out,
    gtwiz_reset_qpll1reset_out,
    gtwiz_gthe3_cpll_cal_txoutclk_period_in,
    gtwiz_gthe3_cpll_cal_cnt_tol_in,
    gtwiz_gthe3_cpll_cal_bufg_ce_in,
    gtwiz_gthe4_cpll_cal_txoutclk_period_in,
    gtwiz_gthe4_cpll_cal_cnt_tol_in,
    gtwiz_gthe4_cpll_cal_bufg_ce_in,
    gtwiz_gtye4_cpll_cal_txoutclk_period_in,
    gtwiz_gtye4_cpll_cal_cnt_tol_in,
    gtwiz_gtye4_cpll_cal_bufg_ce_in,
    gtwiz_userdata_tx_in,
    gtwiz_userdata_rx_out,
    bgbypassb_in,
    bgmonitorenb_in,
    bgpdb_in,
    bgrcalovrd_in,
    bgrcalovrdenb_in,
    drpaddr_common_in,
    drpclk_common_in,
    drpdi_common_in,
    drpen_common_in,
    drpwe_common_in,
    gtgrefclk0_in,
    gtgrefclk1_in,
    gtnorthrefclk00_in,
    gtnorthrefclk01_in,
    gtnorthrefclk10_in,
    gtnorthrefclk11_in,
    gtrefclk00_in,
    gtrefclk01_in,
    gtrefclk10_in,
    gtrefclk11_in,
    gtsouthrefclk00_in,
    gtsouthrefclk01_in,
    gtsouthrefclk10_in,
    gtsouthrefclk11_in,
    pcierateqpll0_in,
    pcierateqpll1_in,
    pmarsvd0_in,
    pmarsvd1_in,
    qpll0clkrsvd0_in,
    qpll0clkrsvd1_in,
    qpll0fbdiv_in,
    qpll0lockdetclk_in,
    qpll0locken_in,
    qpll0pd_in,
    qpll0refclksel_in,
    qpll0reset_in,
    qpll1clkrsvd0_in,
    qpll1clkrsvd1_in,
    qpll1fbdiv_in,
    qpll1lockdetclk_in,
    qpll1locken_in,
    qpll1pd_in,
    qpll1refclksel_in,
    qpll1reset_in,
    qpllrsvd1_in,
    qpllrsvd2_in,
    qpllrsvd3_in,
    qpllrsvd4_in,
    rcalenb_in,
    sdm0data_in,
    sdm0reset_in,
    sdm0toggle_in,
    sdm0width_in,
    sdm1data_in,
    sdm1reset_in,
    sdm1toggle_in,
    sdm1width_in,
    tcongpi_in,
    tconpowerup_in,
    tconreset_in,
    tconrsvdin1_in,
    ubcfgstreamen_in,
    ubdo_in,
    ubdrdy_in,
    ubenable_in,
    ubgpi_in,
    ubintr_in,
    ubiolmbrst_in,
    ubmbrst_in,
    ubmdmcapture_in,
    ubmdmdbgrst_in,
    ubmdmdbgupdate_in,
    ubmdmregen_in,
    ubmdmshift_in,
    ubmdmsysrst_in,
    ubmdmtck_in,
    ubmdmtdi_in,
    drpdo_common_out,
    drprdy_common_out,
    pmarsvdout0_out,
    pmarsvdout1_out,
    qpll0fbclklost_out,
    qpll0lock_out,
    qpll0outclk_out,
    qpll0outrefclk_out,
    qpll0refclklost_out,
    qpll1fbclklost_out,
    qpll1lock_out,
    qpll1outclk_out,
    qpll1outrefclk_out,
    qpll1refclklost_out,
    qplldmonitor0_out,
    qplldmonitor1_out,
    refclkoutmonitor0_out,
    refclkoutmonitor1_out,
    rxrecclk0_sel_out,
    rxrecclk1_sel_out,
    rxrecclk0sel_out,
    rxrecclk1sel_out,
    sdm0finalout_out,
    sdm0testdata_out,
    sdm1finalout_out,
    sdm1testdata_out,
    tcongpo_out,
    tconrsvdout0_out,
    ubdaddr_out,
    ubden_out,
    ubdi_out,
    ubdwe_out,
    ubmdmtdo_out,
    ubrsvdout_out,
    ubtxuart_out,
    cdrstepdir_in,
    cdrstepsq_in,
    cdrstepsx_in,
    cfgreset_in,
    clkrsvd0_in,
    clkrsvd1_in,
    cpllfreqlock_in,
    cplllockdetclk_in,
    cplllocken_in,
    cpllpd_in,
    cpllrefclksel_in,
    cpllreset_in,
    dmonfiforeset_in,
    dmonitorclk_in,
    drpaddr_in,
    drpclk_in,
    drpdi_in,
    drpen_in,
    drprst_in,
    drpwe_in,
    elpcaldvorwren_in,
    elpcalpaorwren_in,
    evoddphicaldone_in,
    evoddphicalstart_in,
    evoddphidrden_in,
    evoddphidwren_in,
    evoddphixrden_in,
    evoddphixwren_in,
    eyescanmode_in,
    eyescanreset_in,
    eyescantrigger_in,
    freqos_in,
    gtgrefclk_in,
    gthrxn_in,
    gthrxp_in,
    gtnorthrefclk0_in,
    gtnorthrefclk1_in,
    gtrefclk0_in,
    gtrefclk1_in,
    gtresetsel_in,
    gtrsvd_in,
    gtrxreset_in,
    gtrxresetsel_in,
    gtsouthrefclk0_in,
    gtsouthrefclk1_in,
    gttxreset_in,
    gttxresetsel_in,
    incpctrl_in,
    gtyrxn_in,
    gtyrxp_in,
    loopback_in,
    looprsvd_in,
    lpbkrxtxseren_in,
    lpbktxrxseren_in,
    pcieeqrxeqadaptdone_in,
    pcierstidle_in,
    pciersttxsyncstart_in,
    pcieuserratedone_in,
    pcsrsvdin_in,
    pcsrsvdin2_in,
    pmarsvdin_in,
    qpll0clk_in,
    qpll0freqlock_in,
    qpll0refclk_in,
    qpll1clk_in,
    qpll1freqlock_in,
    qpll1refclk_in,
    resetovrd_in,
    rstclkentx_in,
    rx8b10ben_in,
    rxafecfoken_in,
    rxbufreset_in,
    rxcdrfreqreset_in,
    rxcdrhold_in,
    rxcdrovrden_in,
    rxcdrreset_in,
    rxcdrresetrsv_in,
    rxchbonden_in,
    rxchbondi_in,
    rxchbondlevel_in,
    rxchbondmaster_in,
    rxchbondslave_in,
    rxckcalreset_in,
    rxckcalstart_in,
    rxcommadeten_in,
    rxdfeagcctrl_in,
    rxdccforcestart_in,
    rxdfeagchold_in,
    rxdfeagcovrden_in,
    rxdfecfokfcnum_in,
    rxdfecfokfen_in,
    rxdfecfokfpulse_in,
    rxdfecfokhold_in,
    rxdfecfokovren_in,
    rxdfekhhold_in,
    rxdfekhovrden_in,
    rxdfelfhold_in,
    rxdfelfovrden_in,
    rxdfelpmreset_in,
    rxdfetap10hold_in,
    rxdfetap10ovrden_in,
    rxdfetap11hold_in,
    rxdfetap11ovrden_in,
    rxdfetap12hold_in,
    rxdfetap12ovrden_in,
    rxdfetap13hold_in,
    rxdfetap13ovrden_in,
    rxdfetap14hold_in,
    rxdfetap14ovrden_in,
    rxdfetap15hold_in,
    rxdfetap15ovrden_in,
    rxdfetap2hold_in,
    rxdfetap2ovrden_in,
    rxdfetap3hold_in,
    rxdfetap3ovrden_in,
    rxdfetap4hold_in,
    rxdfetap4ovrden_in,
    rxdfetap5hold_in,
    rxdfetap5ovrden_in,
    rxdfetap6hold_in,
    rxdfetap6ovrden_in,
    rxdfetap7hold_in,
    rxdfetap7ovrden_in,
    rxdfetap8hold_in,
    rxdfetap8ovrden_in,
    rxdfetap9hold_in,
    rxdfetap9ovrden_in,
    rxdfeuthold_in,
    rxdfeutovrden_in,
    rxdfevphold_in,
    rxdfevpovrden_in,
    rxdfevsen_in,
    rxdfexyden_in,
    rxdlybypass_in,
    rxdlyen_in,
    rxdlyovrden_in,
    rxdlysreset_in,
    rxelecidlemode_in,
    rxeqtraining_in,
    rxgearboxslip_in,
    rxlatclk_in,
    rxlpmen_in,
    rxlpmgchold_in,
    rxlpmgcovrden_in,
    rxlpmhfhold_in,
    rxlpmhfovrden_in,
    rxlpmlfhold_in,
    rxlpmlfklovrden_in,
    rxlpmoshold_in,
    rxlpmosovrden_in,
    rxmcommaalignen_in,
    rxmonitorsel_in,
    rxoobreset_in,
    rxoscalreset_in,
    rxoshold_in,
    rxosintcfg_in,
    rxosinten_in,
    rxosinthold_in,
    rxosintovrden_in,
    rxosintstrobe_in,
    rxosinttestovrden_in,
    rxosovrden_in,
    rxoutclksel_in,
    rxpcommaalignen_in,
    rxpcsreset_in,
    rxpd_in,
    rxphalign_in,
    rxphalignen_in,
    rxphdlypd_in,
    rxphdlyreset_in,
    rxphovrden_in,
    rxpllclksel_in,
    rxpmareset_in,
    rxpolarity_in,
    rxprbscntreset_in,
    rxprbssel_in,
    rxprogdivreset_in,
    rxqpien_in,
    rxrate_in,
    rxratemode_in,
    rxslide_in,
    rxslipoutclk_in,
    rxslippma_in,
    rxsyncallin_in,
    rxsyncin_in,
    rxsyncmode_in,
    rxsysclksel_in,
    rxtermination_in,
    rxuserrdy_in,
    rxusrclk_in,
    rxusrclk2_in,
    sigvalidclk_in,
    tstin_in,
    tx8b10bbypass_in,
    tx8b10ben_in,
    txbufdiffctrl_in,
    txcominit_in,
    txcomsas_in,
    txcomwake_in,
    txctrl0_in,
    txctrl1_in,
    txctrl2_in,
    txdata_in,
    txdataextendrsvd_in,
    txdccforcestart_in,
    txdccreset_in,
    txdeemph_in,
    txdetectrx_in,
    txdiffctrl_in,
    txdiffpd_in,
    txdlybypass_in,
    txdlyen_in,
    txdlyhold_in,
    txdlyovrden_in,
    txdlysreset_in,
    txdlyupdown_in,
    txelecidle_in,
    txelforcestart_in,
    txheader_in,
    txinhibit_in,
    txlatclk_in,
    txlfpstreset_in,
    txlfpsu2lpexit_in,
    txlfpsu3wake_in,
    txmaincursor_in,
    txmargin_in,
    txmuxdcdexhold_in,
    txmuxdcdorwren_in,
    txoneszeros_in,
    txoutclksel_in,
    txpcsreset_in,
    txpd_in,
    txpdelecidlemode_in,
    txphalign_in,
    txphalignen_in,
    txphdlypd_in,
    txphdlyreset_in,
    txphdlytstclk_in,
    txphinit_in,
    txphovrden_in,
    txpippmen_in,
    txpippmovrden_in,
    txpippmpd_in,
    txpippmsel_in,
    txpippmstepsize_in,
    txpisopd_in,
    txpllclksel_in,
    txpmareset_in,
    txpolarity_in,
    txpostcursor_in,
    txpostcursorinv_in,
    txprbsforceerr_in,
    txprbssel_in,
    txprecursor_in,
    txprecursorinv_in,
    txprogdivreset_in,
    txqpibiasen_in,
    txqpistrongpdown_in,
    txqpiweakpup_in,
    txrate_in,
    txratemode_in,
    txsequence_in,
    txswing_in,
    txsyncallin_in,
    txsyncin_in,
    txsyncmode_in,
    txsysclksel_in,
    txuserrdy_in,
    txusrclk_in,
    txusrclk2_in,
    bufgtce_out,
    bufgtcemask_out,
    bufgtdiv_out,
    bufgtreset_out,
    bufgtrstmask_out,
    cpllfbclklost_out,
    cplllock_out,
    cpllrefclklost_out,
    dmonitorout_out,
    dmonitoroutclk_out,
    drpdo_out,
    drprdy_out,
    eyescandataerror_out,
    gthtxn_out,
    gthtxp_out,
    gtpowergood_out,
    gtrefclkmonitor_out,
    gtytxn_out,
    gtytxp_out,
    pcierategen3_out,
    pcierateidle_out,
    pcierateqpllpd_out,
    pcierateqpllreset_out,
    pciesynctxsyncdone_out,
    pcieusergen3rdy_out,
    pcieuserphystatusrst_out,
    pcieuserratestart_out,
    pcsrsvdout_out,
    phystatus_out,
    pinrsrvdas_out,
    powerpresent_out,
    resetexception_out,
    rxbufstatus_out,
    rxbyteisaligned_out,
    rxbyterealign_out,
    rxcdrlock_out,
    rxcdrphdone_out,
    rxchanbondseq_out,
    rxchanisaligned_out,
    rxchanrealign_out,
    rxchbondo_out,
    rxckcaldone_out,
    rxclkcorcnt_out,
    rxcominitdet_out,
    rxcommadet_out,
    rxcomsasdet_out,
    rxcomwakedet_out,
    rxctrl0_out,
    rxctrl1_out,
    rxctrl2_out,
    rxctrl3_out,
    rxdata_out,
    rxdataextendrsvd_out,
    rxdatavalid_out,
    rxdlysresetdone_out,
    rxelecidle_out,
    rxheader_out,
    rxheadervalid_out,
    rxlfpstresetdet_out,
    rxlfpsu2lpexitdet_out,
    rxlfpsu3wakedet_out,
    rxmonitorout_out,
    rxosintdone_out,
    rxosintstarted_out,
    rxosintstrobedone_out,
    rxosintstrobestarted_out,
    rxoutclk_out,
    rxoutclkfabric_out,
    rxoutclkpcs_out,
    rxphaligndone_out,
    rxphalignerr_out,
    rxpmaresetdone_out,
    rxprbserr_out,
    rxprbslocked_out,
    rxprgdivresetdone_out,
    rxqpisenn_out,
    rxqpisenp_out,
    rxratedone_out,
    rxrecclkout_out,
    rxresetdone_out,
    rxsliderdy_out,
    rxslipdone_out,
    rxslipoutclkrdy_out,
    rxslippmardy_out,
    rxstartofseq_out,
    rxstatus_out,
    rxsyncdone_out,
    rxsyncout_out,
    rxvalid_out,
    txbufstatus_out,
    txcomfinish_out,
    txdccdone_out,
    txdlysresetdone_out,
    txoutclk_out,
    txoutclkfabric_out,
    txoutclkpcs_out,
    txphaligndone_out,
    txphinitdone_out,
    txpmaresetdone_out,
    txprgdivresetdone_out,
    txqpisenn_out,
    txqpisenp_out,
    txratedone_out,
    txresetdone_out,
    txsyncdone_out,
    txsyncout_out);
  input [0:0]gtwiz_userclk_tx_reset_in;
  input [0:0]gtwiz_userclk_tx_active_in;
  output [0:0]gtwiz_userclk_tx_srcclk_out;
  output [0:0]gtwiz_userclk_tx_usrclk_out;
  output [0:0]gtwiz_userclk_tx_usrclk2_out;
  output [0:0]gtwiz_userclk_tx_active_out;
  input [0:0]gtwiz_userclk_rx_reset_in;
  input [0:0]gtwiz_userclk_rx_active_in;
  output [0:0]gtwiz_userclk_rx_srcclk_out;
  output [0:0]gtwiz_userclk_rx_usrclk_out;
  output [0:0]gtwiz_userclk_rx_usrclk2_out;
  output [0:0]gtwiz_userclk_rx_active_out;
  input [0:0]gtwiz_buffbypass_tx_reset_in;
  input [0:0]gtwiz_buffbypass_tx_start_user_in;
  output [0:0]gtwiz_buffbypass_tx_done_out;
  output [0:0]gtwiz_buffbypass_tx_error_out;
  input [0:0]gtwiz_buffbypass_rx_reset_in;
  input [0:0]gtwiz_buffbypass_rx_start_user_in;
  output [0:0]gtwiz_buffbypass_rx_done_out;
  output [0:0]gtwiz_buffbypass_rx_error_out;
  input [0:0]gtwiz_reset_clk_freerun_in;
  input [0:0]gtwiz_reset_all_in;
  input [0:0]gtwiz_reset_tx_pll_and_datapath_in;
  input [0:0]gtwiz_reset_tx_datapath_in;
  input [0:0]gtwiz_reset_rx_pll_and_datapath_in;
  input [0:0]gtwiz_reset_rx_datapath_in;
  input [0:0]gtwiz_reset_tx_done_in;
  input [0:0]gtwiz_reset_rx_done_in;
  input [0:0]gtwiz_reset_qpll0lock_in;
  input [0:0]gtwiz_reset_qpll1lock_in;
  output [0:0]gtwiz_reset_rx_cdr_stable_out;
  output [0:0]gtwiz_reset_tx_done_out;
  output [0:0]gtwiz_reset_rx_done_out;
  output [0:0]gtwiz_reset_qpll0reset_out;
  output [0:0]gtwiz_reset_qpll1reset_out;
  input [17:0]gtwiz_gthe3_cpll_cal_txoutclk_period_in;
  input [17:0]gtwiz_gthe3_cpll_cal_cnt_tol_in;
  input [0:0]gtwiz_gthe3_cpll_cal_bufg_ce_in;
  input [17:0]gtwiz_gthe4_cpll_cal_txoutclk_period_in;
  input [17:0]gtwiz_gthe4_cpll_cal_cnt_tol_in;
  input [0:0]gtwiz_gthe4_cpll_cal_bufg_ce_in;
  input [17:0]gtwiz_gtye4_cpll_cal_txoutclk_period_in;
  input [17:0]gtwiz_gtye4_cpll_cal_cnt_tol_in;
  input [0:0]gtwiz_gtye4_cpll_cal_bufg_ce_in;
  input [31:0]gtwiz_userdata_tx_in;
  output [31:0]gtwiz_userdata_rx_out;
  input [0:0]bgbypassb_in;
  input [0:0]bgmonitorenb_in;
  input [0:0]bgpdb_in;
  input [4:0]bgrcalovrd_in;
  input [0:0]bgrcalovrdenb_in;
  input [15:0]drpaddr_common_in;
  input [0:0]drpclk_common_in;
  input [15:0]drpdi_common_in;
  input [0:0]drpen_common_in;
  input [0:0]drpwe_common_in;
  input [0:0]gtgrefclk0_in;
  input [0:0]gtgrefclk1_in;
  input [0:0]gtnorthrefclk00_in;
  input [0:0]gtnorthrefclk01_in;
  input [0:0]gtnorthrefclk10_in;
  input [0:0]gtnorthrefclk11_in;
  input [0:0]gtrefclk00_in;
  input [0:0]gtrefclk01_in;
  input [0:0]gtrefclk10_in;
  input [0:0]gtrefclk11_in;
  input [0:0]gtsouthrefclk00_in;
  input [0:0]gtsouthrefclk01_in;
  input [0:0]gtsouthrefclk10_in;
  input [0:0]gtsouthrefclk11_in;
  input [2:0]pcierateqpll0_in;
  input [2:0]pcierateqpll1_in;
  input [7:0]pmarsvd0_in;
  input [7:0]pmarsvd1_in;
  input [0:0]qpll0clkrsvd0_in;
  input [0:0]qpll0clkrsvd1_in;
  input [7:0]qpll0fbdiv_in;
  input [0:0]qpll0lockdetclk_in;
  input [0:0]qpll0locken_in;
  input [0:0]qpll0pd_in;
  input [2:0]qpll0refclksel_in;
  input [0:0]qpll0reset_in;
  input [0:0]qpll1clkrsvd0_in;
  input [0:0]qpll1clkrsvd1_in;
  input [7:0]qpll1fbdiv_in;
  input [0:0]qpll1lockdetclk_in;
  input [0:0]qpll1locken_in;
  input [0:0]qpll1pd_in;
  input [2:0]qpll1refclksel_in;
  input [0:0]qpll1reset_in;
  input [7:0]qpllrsvd1_in;
  input [4:0]qpllrsvd2_in;
  input [4:0]qpllrsvd3_in;
  input [7:0]qpllrsvd4_in;
  input [0:0]rcalenb_in;
  input [24:0]sdm0data_in;
  input [0:0]sdm0reset_in;
  input [0:0]sdm0toggle_in;
  input [1:0]sdm0width_in;
  input [24:0]sdm1data_in;
  input [0:0]sdm1reset_in;
  input [0:0]sdm1toggle_in;
  input [1:0]sdm1width_in;
  input [9:0]tcongpi_in;
  input [0:0]tconpowerup_in;
  input [1:0]tconreset_in;
  input [1:0]tconrsvdin1_in;
  input [0:0]ubcfgstreamen_in;
  input [0:0]ubdo_in;
  input [0:0]ubdrdy_in;
  input [0:0]ubenable_in;
  input [0:0]ubgpi_in;
  input [0:0]ubintr_in;
  input [0:0]ubiolmbrst_in;
  input [0:0]ubmbrst_in;
  input [0:0]ubmdmcapture_in;
  input [0:0]ubmdmdbgrst_in;
  input [0:0]ubmdmdbgupdate_in;
  input [0:0]ubmdmregen_in;
  input [0:0]ubmdmshift_in;
  input [0:0]ubmdmsysrst_in;
  input [0:0]ubmdmtck_in;
  input [0:0]ubmdmtdi_in;
  output [15:0]drpdo_common_out;
  output [0:0]drprdy_common_out;
  output [7:0]pmarsvdout0_out;
  output [7:0]pmarsvdout1_out;
  output [0:0]qpll0fbclklost_out;
  output [0:0]qpll0lock_out;
  output [0:0]qpll0outclk_out;
  output [0:0]qpll0outrefclk_out;
  output [0:0]qpll0refclklost_out;
  output [0:0]qpll1fbclklost_out;
  output [0:0]qpll1lock_out;
  output [0:0]qpll1outclk_out;
  output [0:0]qpll1outrefclk_out;
  output [0:0]qpll1refclklost_out;
  output [7:0]qplldmonitor0_out;
  output [7:0]qplldmonitor1_out;
  output [0:0]refclkoutmonitor0_out;
  output [0:0]refclkoutmonitor1_out;
  output [0:0]rxrecclk0_sel_out;
  output [0:0]rxrecclk1_sel_out;
  output [1:0]rxrecclk0sel_out;
  output [1:0]rxrecclk1sel_out;
  output [3:0]sdm0finalout_out;
  output [14:0]sdm0testdata_out;
  output [3:0]sdm1finalout_out;
  output [14:0]sdm1testdata_out;
  output [9:0]tcongpo_out;
  output [0:0]tconrsvdout0_out;
  output [0:0]ubdaddr_out;
  output [0:0]ubden_out;
  output [0:0]ubdi_out;
  output [0:0]ubdwe_out;
  output [0:0]ubmdmtdo_out;
  output [0:0]ubrsvdout_out;
  output [0:0]ubtxuart_out;
  input [0:0]cdrstepdir_in;
  input [0:0]cdrstepsq_in;
  input [0:0]cdrstepsx_in;
  input [0:0]cfgreset_in;
  input [0:0]clkrsvd0_in;
  input [0:0]clkrsvd1_in;
  input [0:0]cpllfreqlock_in;
  input [0:0]cplllockdetclk_in;
  input [0:0]cplllocken_in;
  input [0:0]cpllpd_in;
  input [2:0]cpllrefclksel_in;
  input [0:0]cpllreset_in;
  input [0:0]dmonfiforeset_in;
  input [0:0]dmonitorclk_in;
  input [9:0]drpaddr_in;
  input [0:0]drpclk_in;
  input [15:0]drpdi_in;
  input [0:0]drpen_in;
  input [0:0]drprst_in;
  input [0:0]drpwe_in;
  input [0:0]elpcaldvorwren_in;
  input [0:0]elpcalpaorwren_in;
  input [0:0]evoddphicaldone_in;
  input [0:0]evoddphicalstart_in;
  input [0:0]evoddphidrden_in;
  input [0:0]evoddphidwren_in;
  input [0:0]evoddphixrden_in;
  input [0:0]evoddphixwren_in;
  input [0:0]eyescanmode_in;
  input [0:0]eyescanreset_in;
  input [0:0]eyescantrigger_in;
  input [0:0]freqos_in;
  input [0:0]gtgrefclk_in;
  input [0:0]gthrxn_in;
  input [0:0]gthrxp_in;
  input [0:0]gtnorthrefclk0_in;
  input [0:0]gtnorthrefclk1_in;
  input [0:0]gtrefclk0_in;
  input [0:0]gtrefclk1_in;
  input [0:0]gtresetsel_in;
  input [15:0]gtrsvd_in;
  input [0:0]gtrxreset_in;
  input [0:0]gtrxresetsel_in;
  input [0:0]gtsouthrefclk0_in;
  input [0:0]gtsouthrefclk1_in;
  input [0:0]gttxreset_in;
  input [0:0]gttxresetsel_in;
  input [0:0]incpctrl_in;
  input [0:0]gtyrxn_in;
  input [0:0]gtyrxp_in;
  input [2:0]loopback_in;
  input [0:0]looprsvd_in;
  input [0:0]lpbkrxtxseren_in;
  input [0:0]lpbktxrxseren_in;
  input [0:0]pcieeqrxeqadaptdone_in;
  input [0:0]pcierstidle_in;
  input [0:0]pciersttxsyncstart_in;
  input [0:0]pcieuserratedone_in;
  input [15:0]pcsrsvdin_in;
  input [0:0]pcsrsvdin2_in;
  input [0:0]pmarsvdin_in;
  input [0:0]qpll0clk_in;
  input [0:0]qpll0freqlock_in;
  input [0:0]qpll0refclk_in;
  input [0:0]qpll1clk_in;
  input [0:0]qpll1freqlock_in;
  input [0:0]qpll1refclk_in;
  input [0:0]resetovrd_in;
  input [0:0]rstclkentx_in;
  input [0:0]rx8b10ben_in;
  input [0:0]rxafecfoken_in;
  input [0:0]rxbufreset_in;
  input [0:0]rxcdrfreqreset_in;
  input [0:0]rxcdrhold_in;
  input [0:0]rxcdrovrden_in;
  input [0:0]rxcdrreset_in;
  input [0:0]rxcdrresetrsv_in;
  input [0:0]rxchbonden_in;
  input [4:0]rxchbondi_in;
  input [2:0]rxchbondlevel_in;
  input [0:0]rxchbondmaster_in;
  input [0:0]rxchbondslave_in;
  input [0:0]rxckcalreset_in;
  input [6:0]rxckcalstart_in;
  input [0:0]rxcommadeten_in;
  input [1:0]rxdfeagcctrl_in;
  input [0:0]rxdccforcestart_in;
  input [0:0]rxdfeagchold_in;
  input [0:0]rxdfeagcovrden_in;
  input [3:0]rxdfecfokfcnum_in;
  input [0:0]rxdfecfokfen_in;
  input [0:0]rxdfecfokfpulse_in;
  input [0:0]rxdfecfokhold_in;
  input [0:0]rxdfecfokovren_in;
  input [0:0]rxdfekhhold_in;
  input [0:0]rxdfekhovrden_in;
  input [0:0]rxdfelfhold_in;
  input [0:0]rxdfelfovrden_in;
  input [0:0]rxdfelpmreset_in;
  input [0:0]rxdfetap10hold_in;
  input [0:0]rxdfetap10ovrden_in;
  input [0:0]rxdfetap11hold_in;
  input [0:0]rxdfetap11ovrden_in;
  input [0:0]rxdfetap12hold_in;
  input [0:0]rxdfetap12ovrden_in;
  input [0:0]rxdfetap13hold_in;
  input [0:0]rxdfetap13ovrden_in;
  input [0:0]rxdfetap14hold_in;
  input [0:0]rxdfetap14ovrden_in;
  input [0:0]rxdfetap15hold_in;
  input [0:0]rxdfetap15ovrden_in;
  input [0:0]rxdfetap2hold_in;
  input [0:0]rxdfetap2ovrden_in;
  input [0:0]rxdfetap3hold_in;
  input [0:0]rxdfetap3ovrden_in;
  input [0:0]rxdfetap4hold_in;
  input [0:0]rxdfetap4ovrden_in;
  input [0:0]rxdfetap5hold_in;
  input [0:0]rxdfetap5ovrden_in;
  input [0:0]rxdfetap6hold_in;
  input [0:0]rxdfetap6ovrden_in;
  input [0:0]rxdfetap7hold_in;
  input [0:0]rxdfetap7ovrden_in;
  input [0:0]rxdfetap8hold_in;
  input [0:0]rxdfetap8ovrden_in;
  input [0:0]rxdfetap9hold_in;
  input [0:0]rxdfetap9ovrden_in;
  input [0:0]rxdfeuthold_in;
  input [0:0]rxdfeutovrden_in;
  input [0:0]rxdfevphold_in;
  input [0:0]rxdfevpovrden_in;
  input [0:0]rxdfevsen_in;
  input [0:0]rxdfexyden_in;
  input [0:0]rxdlybypass_in;
  input [0:0]rxdlyen_in;
  input [0:0]rxdlyovrden_in;
  input [0:0]rxdlysreset_in;
  input [1:0]rxelecidlemode_in;
  input [0:0]rxeqtraining_in;
  input [0:0]rxgearboxslip_in;
  input [0:0]rxlatclk_in;
  input [0:0]rxlpmen_in;
  input [0:0]rxlpmgchold_in;
  input [0:0]rxlpmgcovrden_in;
  input [0:0]rxlpmhfhold_in;
  input [0:0]rxlpmhfovrden_in;
  input [0:0]rxlpmlfhold_in;
  input [0:0]rxlpmlfklovrden_in;
  input [0:0]rxlpmoshold_in;
  input [0:0]rxlpmosovrden_in;
  input [0:0]rxmcommaalignen_in;
  input [1:0]rxmonitorsel_in;
  input [0:0]rxoobreset_in;
  input [0:0]rxoscalreset_in;
  input [0:0]rxoshold_in;
  input [0:0]rxosintcfg_in;
  input [0:0]rxosinten_in;
  input [0:0]rxosinthold_in;
  input [0:0]rxosintovrden_in;
  input [0:0]rxosintstrobe_in;
  input [0:0]rxosinttestovrden_in;
  input [0:0]rxosovrden_in;
  input [2:0]rxoutclksel_in;
  input [0:0]rxpcommaalignen_in;
  input [0:0]rxpcsreset_in;
  input [1:0]rxpd_in;
  input [0:0]rxphalign_in;
  input [0:0]rxphalignen_in;
  input [0:0]rxphdlypd_in;
  input [0:0]rxphdlyreset_in;
  input [0:0]rxphovrden_in;
  input [1:0]rxpllclksel_in;
  input [0:0]rxpmareset_in;
  input [0:0]rxpolarity_in;
  input [0:0]rxprbscntreset_in;
  input [3:0]rxprbssel_in;
  input [0:0]rxprogdivreset_in;
  input [0:0]rxqpien_in;
  input [2:0]rxrate_in;
  input [0:0]rxratemode_in;
  input [0:0]rxslide_in;
  input [0:0]rxslipoutclk_in;
  input [0:0]rxslippma_in;
  input [0:0]rxsyncallin_in;
  input [0:0]rxsyncin_in;
  input [0:0]rxsyncmode_in;
  input [1:0]rxsysclksel_in;
  input [0:0]rxtermination_in;
  input [0:0]rxuserrdy_in;
  input [0:0]rxusrclk_in;
  input [0:0]rxusrclk2_in;
  input [0:0]sigvalidclk_in;
  input [19:0]tstin_in;
  input [7:0]tx8b10bbypass_in;
  input [0:0]tx8b10ben_in;
  input [0:0]txbufdiffctrl_in;
  input [0:0]txcominit_in;
  input [0:0]txcomsas_in;
  input [0:0]txcomwake_in;
  input [15:0]txctrl0_in;
  input [15:0]txctrl1_in;
  input [7:0]txctrl2_in;
  input [127:0]txdata_in;
  input [7:0]txdataextendrsvd_in;
  input [0:0]txdccforcestart_in;
  input [0:0]txdccreset_in;
  input [1:0]txdeemph_in;
  input [0:0]txdetectrx_in;
  input [4:0]txdiffctrl_in;
  input [0:0]txdiffpd_in;
  input [0:0]txdlybypass_in;
  input [0:0]txdlyen_in;
  input [0:0]txdlyhold_in;
  input [0:0]txdlyovrden_in;
  input [0:0]txdlysreset_in;
  input [0:0]txdlyupdown_in;
  input [0:0]txelecidle_in;
  input [0:0]txelforcestart_in;
  input [5:0]txheader_in;
  input [0:0]txinhibit_in;
  input [0:0]txlatclk_in;
  input [0:0]txlfpstreset_in;
  input [0:0]txlfpsu2lpexit_in;
  input [0:0]txlfpsu3wake_in;
  input [6:0]txmaincursor_in;
  input [2:0]txmargin_in;
  input [0:0]txmuxdcdexhold_in;
  input [0:0]txmuxdcdorwren_in;
  input [0:0]txoneszeros_in;
  input [2:0]txoutclksel_in;
  input [0:0]txpcsreset_in;
  input [1:0]txpd_in;
  input [0:0]txpdelecidlemode_in;
  input [0:0]txphalign_in;
  input [0:0]txphalignen_in;
  input [0:0]txphdlypd_in;
  input [0:0]txphdlyreset_in;
  input [0:0]txphdlytstclk_in;
  input [0:0]txphinit_in;
  input [0:0]txphovrden_in;
  input [0:0]txpippmen_in;
  input [0:0]txpippmovrden_in;
  input [0:0]txpippmpd_in;
  input [0:0]txpippmsel_in;
  input [4:0]txpippmstepsize_in;
  input [0:0]txpisopd_in;
  input [1:0]txpllclksel_in;
  input [0:0]txpmareset_in;
  input [0:0]txpolarity_in;
  input [4:0]txpostcursor_in;
  input [0:0]txpostcursorinv_in;
  input [0:0]txprbsforceerr_in;
  input [3:0]txprbssel_in;
  input [4:0]txprecursor_in;
  input [0:0]txprecursorinv_in;
  input [0:0]txprogdivreset_in;
  input [0:0]txqpibiasen_in;
  input [0:0]txqpistrongpdown_in;
  input [0:0]txqpiweakpup_in;
  input [2:0]txrate_in;
  input [0:0]txratemode_in;
  input [6:0]txsequence_in;
  input [0:0]txswing_in;
  input [0:0]txsyncallin_in;
  input [0:0]txsyncin_in;
  input [0:0]txsyncmode_in;
  input [1:0]txsysclksel_in;
  input [0:0]txuserrdy_in;
  input [0:0]txusrclk_in;
  input [0:0]txusrclk2_in;
  output [0:0]bufgtce_out;
  output [2:0]bufgtcemask_out;
  output [8:0]bufgtdiv_out;
  output [0:0]bufgtreset_out;
  output [2:0]bufgtrstmask_out;
  output [0:0]cpllfbclklost_out;
  output [0:0]cplllock_out;
  output [0:0]cpllrefclklost_out;
  output [15:0]dmonitorout_out;
  output [0:0]dmonitoroutclk_out;
  output [15:0]drpdo_out;
  output [0:0]drprdy_out;
  output [0:0]eyescandataerror_out;
  output [0:0]gthtxn_out;
  output [0:0]gthtxp_out;
  output [0:0]gtpowergood_out;
  output [0:0]gtrefclkmonitor_out;
  output [0:0]gtytxn_out;
  output [0:0]gtytxp_out;
  output [0:0]pcierategen3_out;
  output [0:0]pcierateidle_out;
  output [1:0]pcierateqpllpd_out;
  output [1:0]pcierateqpllreset_out;
  output [0:0]pciesynctxsyncdone_out;
  output [0:0]pcieusergen3rdy_out;
  output [0:0]pcieuserphystatusrst_out;
  output [0:0]pcieuserratestart_out;
  output [15:0]pcsrsvdout_out;
  output [0:0]phystatus_out;
  output [15:0]pinrsrvdas_out;
  output [0:0]powerpresent_out;
  output [0:0]resetexception_out;
  output [2:0]rxbufstatus_out;
  output [0:0]rxbyteisaligned_out;
  output [0:0]rxbyterealign_out;
  output [0:0]rxcdrlock_out;
  output [0:0]rxcdrphdone_out;
  output [0:0]rxchanbondseq_out;
  output [0:0]rxchanisaligned_out;
  output [0:0]rxchanrealign_out;
  output [4:0]rxchbondo_out;
  output [0:0]rxckcaldone_out;
  output [1:0]rxclkcorcnt_out;
  output [0:0]rxcominitdet_out;
  output [0:0]rxcommadet_out;
  output [0:0]rxcomsasdet_out;
  output [0:0]rxcomwakedet_out;
  output [15:0]rxctrl0_out;
  output [15:0]rxctrl1_out;
  output [7:0]rxctrl2_out;
  output [7:0]rxctrl3_out;
  output [127:0]rxdata_out;
  output [7:0]rxdataextendrsvd_out;
  output [1:0]rxdatavalid_out;
  output [0:0]rxdlysresetdone_out;
  output [0:0]rxelecidle_out;
  output [5:0]rxheader_out;
  output [1:0]rxheadervalid_out;
  output [0:0]rxlfpstresetdet_out;
  output [0:0]rxlfpsu2lpexitdet_out;
  output [0:0]rxlfpsu3wakedet_out;
  output [7:0]rxmonitorout_out;
  output [0:0]rxosintdone_out;
  output [0:0]rxosintstarted_out;
  output [0:0]rxosintstrobedone_out;
  output [0:0]rxosintstrobestarted_out;
  output [0:0]rxoutclk_out;
  output [0:0]rxoutclkfabric_out;
  output [0:0]rxoutclkpcs_out;
  output [0:0]rxphaligndone_out;
  output [0:0]rxphalignerr_out;
  output [0:0]rxpmaresetdone_out;
  output [0:0]rxprbserr_out;
  output [0:0]rxprbslocked_out;
  output [0:0]rxprgdivresetdone_out;
  output [0:0]rxqpisenn_out;
  output [0:0]rxqpisenp_out;
  output [0:0]rxratedone_out;
  output [0:0]rxrecclkout_out;
  output [0:0]rxresetdone_out;
  output [0:0]rxsliderdy_out;
  output [0:0]rxslipdone_out;
  output [0:0]rxslipoutclkrdy_out;
  output [0:0]rxslippmardy_out;
  output [1:0]rxstartofseq_out;
  output [2:0]rxstatus_out;
  output [0:0]rxsyncdone_out;
  output [0:0]rxsyncout_out;
  output [0:0]rxvalid_out;
  output [1:0]txbufstatus_out;
  output [0:0]txcomfinish_out;
  output [0:0]txdccdone_out;
  output [0:0]txdlysresetdone_out;
  output [0:0]txoutclk_out;
  output [0:0]txoutclkfabric_out;
  output [0:0]txoutclkpcs_out;
  output [0:0]txphaligndone_out;
  output [0:0]txphinitdone_out;
  output [0:0]txpmaresetdone_out;
  output [0:0]txprgdivresetdone_out;
  output [0:0]txqpisenn_out;
  output [0:0]txqpisenp_out;
  output [0:0]txratedone_out;
  output [0:0]txresetdone_out;
  output [0:0]txsyncdone_out;
  output [0:0]txsyncout_out;

  wire \<const0> ;
  wire [0:0]bufgtce_out;
  wire [2:0]bufgtcemask_out;
  wire [8:0]bufgtdiv_out;
  wire [0:0]bufgtreset_out;
  wire [2:0]bufgtrstmask_out;
  wire [0:0]cdrstepdir_in;
  wire [0:0]cdrstepsq_in;
  wire [0:0]cdrstepsx_in;
  wire [0:0]cfgreset_in;
  wire [0:0]clkrsvd0_in;
  wire [0:0]clkrsvd1_in;
  wire [0:0]cpllfbclklost_out;
  wire [0:0]cpllfreqlock_in;
  wire [0:0]cplllock_out;
  wire [0:0]cplllockdetclk_in;
  wire [0:0]cplllocken_in;
  wire [0:0]cpllrefclklost_out;
  wire [2:0]cpllrefclksel_in;
  wire [0:0]cpllreset_in;
  wire [0:0]dmonfiforeset_in;
  wire [0:0]dmonitorclk_in;
  wire [15:0]dmonitorout_out;
  wire [0:0]dmonitoroutclk_out;
  wire [9:0]drpaddr_in;
  wire [0:0]drpclk_in;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire [0:0]drpen_in;
  wire [0:0]drprdy_out;
  wire [0:0]drprst_in;
  wire [0:0]drpwe_in;
  wire [0:0]eyescandataerror_out;
  wire [0:0]eyescanreset_in;
  wire [0:0]eyescantrigger_in;
  wire [0:0]freqos_in;
  wire [0:0]gtgrefclk_in;
  wire [0:0]gthrxn_in;
  wire [0:0]gthrxp_in;
  wire [0:0]gthtxn_out;
  wire [0:0]gthtxp_out;
  wire [0:0]gtnorthrefclk0_in;
  wire [0:0]gtnorthrefclk1_in;
  wire [0:0]gtpowergood_out;
  wire [0:0]gtrefclk0_in;
  wire [0:0]gtrefclk1_in;
  wire [0:0]gtrefclkmonitor_out;
  wire [15:0]gtrsvd_in;
  wire [0:0]gtrxresetsel_in;
  wire [0:0]gtsouthrefclk0_in;
  wire [0:0]gtsouthrefclk1_in;
  wire [0:0]gttxresetsel_in;
  wire [0:0]gtwiz_reset_all_in;
  wire [0:0]gtwiz_reset_clk_freerun_in;
  wire [0:0]gtwiz_reset_qpll0lock_in;
  wire [0:0]gtwiz_reset_qpll1lock_in;
  wire [0:0]gtwiz_reset_rx_cdr_stable_out;
  wire [0:0]gtwiz_reset_rx_datapath_in;
  wire [0:0]gtwiz_reset_rx_done_out;
  wire [0:0]gtwiz_reset_rx_pll_and_datapath_in;
  wire [0:0]gtwiz_reset_tx_datapath_in;
  wire [0:0]gtwiz_reset_tx_done_out;
  wire [0:0]gtwiz_reset_tx_pll_and_datapath_in;
  wire [0:0]gtwiz_userclk_rx_active_in;
  wire [0:0]gtwiz_userclk_tx_active_in;
  wire [0:0]gtwiz_userclk_tx_reset_in;
  wire [31:0]gtwiz_userdata_tx_in;
  wire [0:0]incpctrl_in;
  wire [2:0]loopback_in;
  wire [0:0]pcieeqrxeqadaptdone_in;
  wire [0:0]pcierategen3_out;
  wire [0:0]pcierateidle_out;
  wire [1:0]pcierateqpllpd_out;
  wire [1:0]pcierateqpllreset_out;
  wire [0:0]pcierstidle_in;
  wire [0:0]pciersttxsyncstart_in;
  wire [0:0]pciesynctxsyncdone_out;
  wire [0:0]pcieusergen3rdy_out;
  wire [0:0]pcieuserphystatusrst_out;
  wire [0:0]pcieuserratedone_in;
  wire [0:0]pcieuserratestart_out;
  wire [15:0]pcsrsvdin_in;
  wire [15:0]pcsrsvdout_out;
  wire [0:0]phystatus_out;
  wire [15:0]pinrsrvdas_out;
  wire [0:0]powerpresent_out;
  wire [0:0]qpll0clk_in;
  wire [0:0]qpll0freqlock_in;
  wire [0:0]qpll0refclk_in;
  wire [0:0]qpll0reset_in;
  wire [0:0]qpll1clk_in;
  wire [0:0]qpll1freqlock_in;
  wire [0:0]qpll1refclk_in;
  wire [0:0]qpll1reset_in;
  wire [0:0]resetexception_out;
  wire [0:0]resetovrd_in;
  wire [0:0]rx8b10ben_in;
  wire [0:0]rxafecfoken_in;
  wire [0:0]rxbufreset_in;
  wire [2:0]rxbufstatus_out;
  wire [0:0]rxbyteisaligned_out;
  wire [0:0]rxbyterealign_out;
  wire [0:0]rxcdrfreqreset_in;
  wire [0:0]rxcdrhold_in;
  wire [0:0]rxcdrlock_out;
  wire [0:0]rxcdrovrden_in;
  wire [0:0]rxcdrphdone_out;
  wire [0:0]rxcdrreset_in;
  wire [0:0]rxchanbondseq_out;
  wire [0:0]rxchanisaligned_out;
  wire [0:0]rxchanrealign_out;
  wire [0:0]rxchbonden_in;
  wire [4:0]rxchbondi_in;
  wire [2:0]rxchbondlevel_in;
  wire [0:0]rxchbondmaster_in;
  wire [4:0]rxchbondo_out;
  wire [0:0]rxchbondslave_in;
  wire [0:0]rxckcaldone_out;
  wire [0:0]rxckcalreset_in;
  wire [6:0]rxckcalstart_in;
  wire [1:0]rxclkcorcnt_out;
  wire [0:0]rxcominitdet_out;
  wire [0:0]rxcommadet_out;
  wire [0:0]rxcommadeten_in;
  wire [0:0]rxcomsasdet_out;
  wire [0:0]rxcomwakedet_out;
  wire [15:0]rxctrl0_out;
  wire [15:0]rxctrl1_out;
  wire [7:0]rxctrl2_out;
  wire [7:0]rxctrl3_out;
  wire [127:0]rxdata_out;
  wire [7:0]rxdataextendrsvd_out;
  wire [1:0]rxdatavalid_out;
  wire [1:0]rxdfeagcctrl_in;
  wire [0:0]rxdfeagchold_in;
  wire [0:0]rxdfeagcovrden_in;
  wire [3:0]rxdfecfokfcnum_in;
  wire [0:0]rxdfecfokfen_in;
  wire [0:0]rxdfecfokfpulse_in;
  wire [0:0]rxdfecfokhold_in;
  wire [0:0]rxdfecfokovren_in;
  wire [0:0]rxdfekhhold_in;
  wire [0:0]rxdfekhovrden_in;
  wire [0:0]rxdfelfhold_in;
  wire [0:0]rxdfelfovrden_in;
  wire [0:0]rxdfelpmreset_in;
  wire [0:0]rxdfetap10hold_in;
  wire [0:0]rxdfetap10ovrden_in;
  wire [0:0]rxdfetap11hold_in;
  wire [0:0]rxdfetap11ovrden_in;
  wire [0:0]rxdfetap12hold_in;
  wire [0:0]rxdfetap12ovrden_in;
  wire [0:0]rxdfetap13hold_in;
  wire [0:0]rxdfetap13ovrden_in;
  wire [0:0]rxdfetap14hold_in;
  wire [0:0]rxdfetap14ovrden_in;
  wire [0:0]rxdfetap15hold_in;
  wire [0:0]rxdfetap15ovrden_in;
  wire [0:0]rxdfetap2hold_in;
  wire [0:0]rxdfetap2ovrden_in;
  wire [0:0]rxdfetap3hold_in;
  wire [0:0]rxdfetap3ovrden_in;
  wire [0:0]rxdfetap4hold_in;
  wire [0:0]rxdfetap4ovrden_in;
  wire [0:0]rxdfetap5hold_in;
  wire [0:0]rxdfetap5ovrden_in;
  wire [0:0]rxdfetap6hold_in;
  wire [0:0]rxdfetap6ovrden_in;
  wire [0:0]rxdfetap7hold_in;
  wire [0:0]rxdfetap7ovrden_in;
  wire [0:0]rxdfetap8hold_in;
  wire [0:0]rxdfetap8ovrden_in;
  wire [0:0]rxdfetap9hold_in;
  wire [0:0]rxdfetap9ovrden_in;
  wire [0:0]rxdfeuthold_in;
  wire [0:0]rxdfeutovrden_in;
  wire [0:0]rxdfevphold_in;
  wire [0:0]rxdfevpovrden_in;
  wire [0:0]rxdfexyden_in;
  wire [0:0]rxdlybypass_in;
  wire [0:0]rxdlyen_in;
  wire [0:0]rxdlyovrden_in;
  wire [0:0]rxdlysreset_in;
  wire [0:0]rxdlysresetdone_out;
  wire [0:0]rxelecidle_out;
  wire [1:0]rxelecidlemode_in;
  wire [0:0]rxeqtraining_in;
  wire [0:0]rxgearboxslip_in;
  wire [5:0]rxheader_out;
  wire [1:0]rxheadervalid_out;
  wire [0:0]rxlatclk_in;
  wire [0:0]rxlfpstresetdet_out;
  wire [0:0]rxlfpsu2lpexitdet_out;
  wire [0:0]rxlfpsu3wakedet_out;
  wire [0:0]rxlpmen_in;
  wire [0:0]rxlpmgchold_in;
  wire [0:0]rxlpmgcovrden_in;
  wire [0:0]rxlpmhfhold_in;
  wire [0:0]rxlpmhfovrden_in;
  wire [0:0]rxlpmlfhold_in;
  wire [0:0]rxlpmlfklovrden_in;
  wire [0:0]rxlpmoshold_in;
  wire [0:0]rxlpmosovrden_in;
  wire [0:0]rxmcommaalignen_in;
  wire [7:0]rxmonitorout_out;
  wire [1:0]rxmonitorsel_in;
  wire [0:0]rxoobreset_in;
  wire [0:0]rxoscalreset_in;
  wire [0:0]rxoshold_in;
  wire [0:0]rxosintdone_out;
  wire [0:0]rxosintstarted_out;
  wire [0:0]rxosintstrobedone_out;
  wire [0:0]rxosintstrobestarted_out;
  wire [0:0]rxosovrden_in;
  wire [0:0]rxoutclk_out;
  wire [0:0]rxoutclkfabric_out;
  wire [0:0]rxoutclkpcs_out;
  wire [2:0]rxoutclksel_in;
  wire [0:0]rxpcommaalignen_in;
  wire [0:0]rxpcsreset_in;
  wire [1:0]rxpd_in;
  wire [0:0]rxphalign_in;
  wire [0:0]rxphaligndone_out;
  wire [0:0]rxphalignen_in;
  wire [0:0]rxphalignerr_out;
  wire [0:0]rxphdlypd_in;
  wire [0:0]rxphdlyreset_in;
  wire [0:0]rxphovrden_in;
  wire [1:0]rxpllclksel_in;
  wire [0:0]rxpmareset_in;
  wire [0:0]rxpmaresetdone_out;
  wire [0:0]rxpolarity_in;
  wire [0:0]rxprbscntreset_in;
  wire [0:0]rxprbserr_out;
  wire [0:0]rxprbslocked_out;
  wire [3:0]rxprbssel_in;
  wire [0:0]rxprgdivresetdone_out;
  wire [0:0]rxqpien_in;
  wire [0:0]rxqpisenn_out;
  wire [0:0]rxqpisenp_out;
  wire [2:0]rxrate_in;
  wire [0:0]rxratedone_out;
  wire [0:0]rxratemode_in;
  wire [0:0]rxrecclkout_out;
  wire [0:0]rxresetdone_out;
  wire [0:0]rxslide_in;
  wire [0:0]rxsliderdy_out;
  wire [0:0]rxslipdone_out;
  wire [0:0]rxslipoutclk_in;
  wire [0:0]rxslipoutclkrdy_out;
  wire [0:0]rxslippma_in;
  wire [0:0]rxslippmardy_out;
  wire [1:0]rxstartofseq_out;
  wire [2:0]rxstatus_out;
  wire [0:0]rxsyncallin_in;
  wire [0:0]rxsyncdone_out;
  wire [0:0]rxsyncin_in;
  wire [0:0]rxsyncmode_in;
  wire [0:0]rxsyncout_out;
  wire [1:0]rxsysclksel_in;
  wire [0:0]rxtermination_in;
  wire [0:0]rxusrclk2_in;
  wire [0:0]rxusrclk_in;
  wire [0:0]rxvalid_out;
  wire [0:0]sigvalidclk_in;
  wire [19:0]tstin_in;
  wire [7:0]tx8b10bbypass_in;
  wire [0:0]tx8b10ben_in;
  wire [1:0]txbufstatus_out;
  wire [0:0]txcomfinish_out;
  wire [0:0]txcominit_in;
  wire [0:0]txcomsas_in;
  wire [0:0]txcomwake_in;
  wire [15:0]txctrl0_in;
  wire [15:0]txctrl1_in;
  wire [7:0]txctrl2_in;
  wire [7:0]txdataextendrsvd_in;
  wire [0:0]txdccdone_out;
  wire [0:0]txdccforcestart_in;
  wire [0:0]txdccreset_in;
  wire [1:0]txdeemph_in;
  wire [0:0]txdetectrx_in;
  wire [4:0]txdiffctrl_in;
  wire [0:0]txdlybypass_in;
  wire [0:0]txdlyen_in;
  wire [0:0]txdlyhold_in;
  wire [0:0]txdlyovrden_in;
  wire [0:0]txdlysreset_in;
  wire [0:0]txdlysresetdone_out;
  wire [0:0]txdlyupdown_in;
  wire [0:0]txelecidle_in;
  wire [5:0]txheader_in;
  wire [0:0]txinhibit_in;
  wire [0:0]txlatclk_in;
  wire [0:0]txlfpstreset_in;
  wire [0:0]txlfpsu2lpexit_in;
  wire [0:0]txlfpsu3wake_in;
  wire [6:0]txmaincursor_in;
  wire [2:0]txmargin_in;
  wire [0:0]txmuxdcdexhold_in;
  wire [0:0]txmuxdcdorwren_in;
  wire [0:0]txoneszeros_in;
  wire [0:0]txoutclk_out;
  wire [0:0]txoutclkfabric_out;
  wire [0:0]txoutclkpcs_out;
  wire [2:0]txoutclksel_in;
  wire [0:0]txpcsreset_in;
  wire [1:0]txpd_in;
  wire [0:0]txpdelecidlemode_in;
  wire [0:0]txphalign_in;
  wire [0:0]txphaligndone_out;
  wire [0:0]txphalignen_in;
  wire [0:0]txphdlypd_in;
  wire [0:0]txphdlyreset_in;
  wire [0:0]txphdlytstclk_in;
  wire [0:0]txphinit_in;
  wire [0:0]txphinitdone_out;
  wire [0:0]txphovrden_in;
  wire [0:0]txpippmen_in;
  wire [0:0]txpippmovrden_in;
  wire [0:0]txpippmpd_in;
  wire [0:0]txpippmsel_in;
  wire [4:0]txpippmstepsize_in;
  wire [0:0]txpisopd_in;
  wire [1:0]txpllclksel_in;
  wire [0:0]txpmareset_in;
  wire [0:0]txpmaresetdone_out;
  wire [0:0]txpolarity_in;
  wire [4:0]txpostcursor_in;
  wire [0:0]txprbsforceerr_in;
  wire [3:0]txprbssel_in;
  wire [4:0]txprecursor_in;
  wire [0:0]txprgdivresetdone_out;
  wire [0:0]txqpibiasen_in;
  wire [0:0]txqpisenn_out;
  wire [0:0]txqpisenp_out;
  wire [0:0]txqpiweakpup_in;
  wire [2:0]txrate_in;
  wire [0:0]txratedone_out;
  wire [0:0]txratemode_in;
  wire [0:0]txresetdone_out;
  wire [6:0]txsequence_in;
  wire [0:0]txswing_in;
  wire [0:0]txsyncallin_in;
  wire [0:0]txsyncdone_out;
  wire [0:0]txsyncin_in;
  wire [0:0]txsyncmode_in;
  wire [0:0]txsyncout_out;
  wire [1:0]txsysclksel_in;
  wire [0:0]txusrclk2_in;
  wire [0:0]txusrclk_in;

  assign drpdo_common_out[15] = \<const0> ;
  assign drpdo_common_out[14] = \<const0> ;
  assign drpdo_common_out[13] = \<const0> ;
  assign drpdo_common_out[12] = \<const0> ;
  assign drpdo_common_out[11] = \<const0> ;
  assign drpdo_common_out[10] = \<const0> ;
  assign drpdo_common_out[9] = \<const0> ;
  assign drpdo_common_out[8] = \<const0> ;
  assign drpdo_common_out[7] = \<const0> ;
  assign drpdo_common_out[6] = \<const0> ;
  assign drpdo_common_out[5] = \<const0> ;
  assign drpdo_common_out[4] = \<const0> ;
  assign drpdo_common_out[3] = \<const0> ;
  assign drpdo_common_out[2] = \<const0> ;
  assign drpdo_common_out[1] = \<const0> ;
  assign drpdo_common_out[0] = \<const0> ;
  assign drprdy_common_out[0] = \<const0> ;
  assign gtwiz_buffbypass_rx_done_out[0] = \<const0> ;
  assign gtwiz_buffbypass_rx_error_out[0] = \<const0> ;
  assign gtwiz_buffbypass_tx_done_out[0] = \<const0> ;
  assign gtwiz_buffbypass_tx_error_out[0] = \<const0> ;
  assign gtwiz_reset_qpll0reset_out[0] = qpll0reset_in;
  assign gtwiz_reset_qpll1reset_out[0] = qpll1reset_in;
  assign gtwiz_userclk_rx_active_out[0] = gtwiz_userclk_rx_active_in;
  assign gtwiz_userclk_rx_srcclk_out[0] = \<const0> ;
  assign gtwiz_userclk_rx_usrclk2_out[0] = \<const0> ;
  assign gtwiz_userclk_rx_usrclk_out[0] = \<const0> ;
  assign gtwiz_userclk_tx_active_out[0] = gtwiz_userclk_tx_active_in;
  assign gtwiz_userclk_tx_srcclk_out[0] = \<const0> ;
  assign gtwiz_userclk_tx_usrclk2_out[0] = \<const0> ;
  assign gtwiz_userclk_tx_usrclk_out[0] = \<const0> ;
  assign gtwiz_userdata_rx_out[31:0] = rxdata_out[31:0];
  assign gtytxn_out[0] = \<const0> ;
  assign gtytxp_out[0] = \<const0> ;
  assign pmarsvdout0_out[7] = \<const0> ;
  assign pmarsvdout0_out[6] = \<const0> ;
  assign pmarsvdout0_out[5] = \<const0> ;
  assign pmarsvdout0_out[4] = \<const0> ;
  assign pmarsvdout0_out[3] = \<const0> ;
  assign pmarsvdout0_out[2] = \<const0> ;
  assign pmarsvdout0_out[1] = \<const0> ;
  assign pmarsvdout0_out[0] = \<const0> ;
  assign pmarsvdout1_out[7] = \<const0> ;
  assign pmarsvdout1_out[6] = \<const0> ;
  assign pmarsvdout1_out[5] = \<const0> ;
  assign pmarsvdout1_out[4] = \<const0> ;
  assign pmarsvdout1_out[3] = \<const0> ;
  assign pmarsvdout1_out[2] = \<const0> ;
  assign pmarsvdout1_out[1] = \<const0> ;
  assign pmarsvdout1_out[0] = \<const0> ;
  assign qpll0fbclklost_out[0] = \<const0> ;
  assign qpll0lock_out[0] = gtwiz_reset_qpll0lock_in;
  assign qpll0outclk_out[0] = \<const0> ;
  assign qpll0outrefclk_out[0] = \<const0> ;
  assign qpll0refclklost_out[0] = \<const0> ;
  assign qpll1fbclklost_out[0] = \<const0> ;
  assign qpll1lock_out[0] = gtwiz_reset_qpll1lock_in;
  assign qpll1outclk_out[0] = \<const0> ;
  assign qpll1outrefclk_out[0] = \<const0> ;
  assign qpll1refclklost_out[0] = \<const0> ;
  assign qplldmonitor0_out[7] = \<const0> ;
  assign qplldmonitor0_out[6] = \<const0> ;
  assign qplldmonitor0_out[5] = \<const0> ;
  assign qplldmonitor0_out[4] = \<const0> ;
  assign qplldmonitor0_out[3] = \<const0> ;
  assign qplldmonitor0_out[2] = \<const0> ;
  assign qplldmonitor0_out[1] = \<const0> ;
  assign qplldmonitor0_out[0] = \<const0> ;
  assign qplldmonitor1_out[7] = \<const0> ;
  assign qplldmonitor1_out[6] = \<const0> ;
  assign qplldmonitor1_out[5] = \<const0> ;
  assign qplldmonitor1_out[4] = \<const0> ;
  assign qplldmonitor1_out[3] = \<const0> ;
  assign qplldmonitor1_out[2] = \<const0> ;
  assign qplldmonitor1_out[1] = \<const0> ;
  assign qplldmonitor1_out[0] = \<const0> ;
  assign refclkoutmonitor0_out[0] = \<const0> ;
  assign refclkoutmonitor1_out[0] = \<const0> ;
  assign rxrecclk0_sel_out[0] = \<const0> ;
  assign rxrecclk0sel_out[1] = \<const0> ;
  assign rxrecclk0sel_out[0] = \<const0> ;
  assign rxrecclk1_sel_out[0] = \<const0> ;
  assign rxrecclk1sel_out[1] = \<const0> ;
  assign rxrecclk1sel_out[0] = \<const0> ;
  assign sdm0finalout_out[3] = \<const0> ;
  assign sdm0finalout_out[2] = \<const0> ;
  assign sdm0finalout_out[1] = \<const0> ;
  assign sdm0finalout_out[0] = \<const0> ;
  assign sdm0testdata_out[14] = \<const0> ;
  assign sdm0testdata_out[13] = \<const0> ;
  assign sdm0testdata_out[12] = \<const0> ;
  assign sdm0testdata_out[11] = \<const0> ;
  assign sdm0testdata_out[10] = \<const0> ;
  assign sdm0testdata_out[9] = \<const0> ;
  assign sdm0testdata_out[8] = \<const0> ;
  assign sdm0testdata_out[7] = \<const0> ;
  assign sdm0testdata_out[6] = \<const0> ;
  assign sdm0testdata_out[5] = \<const0> ;
  assign sdm0testdata_out[4] = \<const0> ;
  assign sdm0testdata_out[3] = \<const0> ;
  assign sdm0testdata_out[2] = \<const0> ;
  assign sdm0testdata_out[1] = \<const0> ;
  assign sdm0testdata_out[0] = \<const0> ;
  assign sdm1finalout_out[3] = \<const0> ;
  assign sdm1finalout_out[2] = \<const0> ;
  assign sdm1finalout_out[1] = \<const0> ;
  assign sdm1finalout_out[0] = \<const0> ;
  assign sdm1testdata_out[14] = \<const0> ;
  assign sdm1testdata_out[13] = \<const0> ;
  assign sdm1testdata_out[12] = \<const0> ;
  assign sdm1testdata_out[11] = \<const0> ;
  assign sdm1testdata_out[10] = \<const0> ;
  assign sdm1testdata_out[9] = \<const0> ;
  assign sdm1testdata_out[8] = \<const0> ;
  assign sdm1testdata_out[7] = \<const0> ;
  assign sdm1testdata_out[6] = \<const0> ;
  assign sdm1testdata_out[5] = \<const0> ;
  assign sdm1testdata_out[4] = \<const0> ;
  assign sdm1testdata_out[3] = \<const0> ;
  assign sdm1testdata_out[2] = \<const0> ;
  assign sdm1testdata_out[1] = \<const0> ;
  assign sdm1testdata_out[0] = \<const0> ;
  assign tcongpo_out[9] = \<const0> ;
  assign tcongpo_out[8] = \<const0> ;
  assign tcongpo_out[7] = \<const0> ;
  assign tcongpo_out[6] = \<const0> ;
  assign tcongpo_out[5] = \<const0> ;
  assign tcongpo_out[4] = \<const0> ;
  assign tcongpo_out[3] = \<const0> ;
  assign tcongpo_out[2] = \<const0> ;
  assign tcongpo_out[1] = \<const0> ;
  assign tcongpo_out[0] = \<const0> ;
  assign tconrsvdout0_out[0] = \<const0> ;
  assign ubdaddr_out[0] = \<const0> ;
  assign ubden_out[0] = \<const0> ;
  assign ubdi_out[0] = \<const0> ;
  assign ubdwe_out[0] = \<const0> ;
  assign ubmdmtdo_out[0] = \<const0> ;
  assign ubrsvdout_out[0] = \<const0> ;
  assign ubtxuart_out[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  quadsgmii_0_TEST_quadsgmii_0_TEST_gt_gtwizard_gthe4 \gen_gtwizard_gthe4_top.quadsgmii_0_TEST_gt_gtwizard_gthe4_inst 
       (.bufgtce_out(bufgtce_out),
        .bufgtcemask_out(bufgtcemask_out),
        .bufgtdiv_out(bufgtdiv_out),
        .bufgtreset_out(bufgtreset_out),
        .bufgtrstmask_out(bufgtrstmask_out),
        .cdrstepdir_in(cdrstepdir_in),
        .cdrstepsq_in(cdrstepsq_in),
        .cdrstepsx_in(cdrstepsx_in),
        .cfgreset_in(cfgreset_in),
        .clkrsvd0_in(clkrsvd0_in),
        .clkrsvd1_in(clkrsvd1_in),
        .cpllfbclklost_out(cpllfbclklost_out),
        .cpllfreqlock_in(cpllfreqlock_in),
        .cplllock_out(cplllock_out),
        .cplllockdetclk_in(cplllockdetclk_in),
        .cplllocken_in(cplllocken_in),
        .cpllrefclklost_out(cpllrefclklost_out),
        .cpllrefclksel_in(cpllrefclksel_in),
        .cpllreset_in(cpllreset_in),
        .dmonfiforeset_in(dmonfiforeset_in),
        .dmonitorclk_in(dmonitorclk_in),
        .dmonitorout_out(dmonitorout_out),
        .dmonitoroutclk_out(dmonitoroutclk_out),
        .drpaddr_in(drpaddr_in),
        .drpclk_in(drpclk_in),
        .drpdi_in(drpdi_in),
        .drpdo_out(drpdo_out),
        .drpen_in(drpen_in),
        .drprdy_out(drprdy_out),
        .drprst_in(drprst_in),
        .drpwe_in(drpwe_in),
        .eyescandataerror_out(eyescandataerror_out),
        .eyescanreset_in(eyescanreset_in),
        .eyescantrigger_in(eyescantrigger_in),
        .freqos_in(freqos_in),
        .gtgrefclk_in(gtgrefclk_in),
        .gthrxn_in(gthrxn_in),
        .gthrxp_in(gthrxp_in),
        .gthtxn_out(gthtxn_out),
        .gthtxp_out(gthtxp_out),
        .gtnorthrefclk0_in(gtnorthrefclk0_in),
        .gtnorthrefclk1_in(gtnorthrefclk1_in),
        .gtpowergood_out(gtpowergood_out),
        .gtrefclk0_in(gtrefclk0_in),
        .gtrefclk1_in(gtrefclk1_in),
        .gtrefclkmonitor_out(gtrefclkmonitor_out),
        .gtrsvd_in(gtrsvd_in),
        .gtrxresetsel_in(gtrxresetsel_in),
        .gtsouthrefclk0_in(gtsouthrefclk0_in),
        .gtsouthrefclk1_in(gtsouthrefclk1_in),
        .gttxresetsel_in(gttxresetsel_in),
        .gtwiz_reset_all_in(gtwiz_reset_all_in),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_rx_cdr_stable_out(gtwiz_reset_rx_cdr_stable_out),
        .gtwiz_reset_rx_datapath_in(gtwiz_reset_rx_datapath_in),
        .gtwiz_reset_rx_done_out(gtwiz_reset_rx_done_out),
        .gtwiz_reset_rx_pll_and_datapath_in(gtwiz_reset_rx_pll_and_datapath_in),
        .gtwiz_reset_tx_datapath_in(gtwiz_reset_tx_datapath_in),
        .gtwiz_reset_tx_done_out(gtwiz_reset_tx_done_out),
        .gtwiz_reset_tx_pll_and_datapath_in(gtwiz_reset_tx_pll_and_datapath_in),
        .gtwiz_userclk_rx_active_in(gtwiz_userclk_rx_active_in),
        .gtwiz_userclk_tx_active_in(gtwiz_userclk_tx_active_in),
        .gtwiz_userclk_tx_reset_in(gtwiz_userclk_tx_reset_in),
        .gtwiz_userdata_tx_in(gtwiz_userdata_tx_in),
        .incpctrl_in(incpctrl_in),
        .loopback_in(loopback_in),
        .pcieeqrxeqadaptdone_in(pcieeqrxeqadaptdone_in),
        .pcierategen3_out(pcierategen3_out),
        .pcierateidle_out(pcierateidle_out),
        .pcierateqpllpd_out(pcierateqpllpd_out),
        .pcierateqpllreset_out(pcierateqpllreset_out),
        .pcierstidle_in(pcierstidle_in),
        .pciersttxsyncstart_in(pciersttxsyncstart_in),
        .pciesynctxsyncdone_out(pciesynctxsyncdone_out),
        .pcieusergen3rdy_out(pcieusergen3rdy_out),
        .pcieuserphystatusrst_out(pcieuserphystatusrst_out),
        .pcieuserratedone_in(pcieuserratedone_in),
        .pcieuserratestart_out(pcieuserratestart_out),
        .pcsrsvdin_in(pcsrsvdin_in),
        .pcsrsvdout_out(pcsrsvdout_out),
        .phystatus_out(phystatus_out),
        .pinrsrvdas_out(pinrsrvdas_out),
        .powerpresent_out(powerpresent_out),
        .qpll0clk_in(qpll0clk_in),
        .qpll0freqlock_in(qpll0freqlock_in),
        .qpll0refclk_in(qpll0refclk_in),
        .qpll1clk_in(qpll1clk_in),
        .qpll1freqlock_in(qpll1freqlock_in),
        .qpll1refclk_in(qpll1refclk_in),
        .resetexception_out(resetexception_out),
        .resetovrd_in(resetovrd_in),
        .rx8b10ben_in(rx8b10ben_in),
        .rxafecfoken_in(rxafecfoken_in),
        .rxbufreset_in(rxbufreset_in),
        .rxbufstatus_out(rxbufstatus_out),
        .rxbyteisaligned_out(rxbyteisaligned_out),
        .rxbyterealign_out(rxbyterealign_out),
        .rxcdrfreqreset_in(rxcdrfreqreset_in),
        .rxcdrhold_in(rxcdrhold_in),
        .rxcdrlock_out(rxcdrlock_out),
        .rxcdrovrden_in(rxcdrovrden_in),
        .rxcdrphdone_out(rxcdrphdone_out),
        .rxcdrreset_in(rxcdrreset_in),
        .rxchanbondseq_out(rxchanbondseq_out),
        .rxchanisaligned_out(rxchanisaligned_out),
        .rxchanrealign_out(rxchanrealign_out),
        .rxchbonden_in(rxchbonden_in),
        .rxchbondi_in(rxchbondi_in),
        .rxchbondlevel_in(rxchbondlevel_in),
        .rxchbondmaster_in(rxchbondmaster_in),
        .rxchbondo_out(rxchbondo_out),
        .rxchbondslave_in(rxchbondslave_in),
        .rxckcaldone_out(rxckcaldone_out),
        .rxckcalreset_in(rxckcalreset_in),
        .rxckcalstart_in(rxckcalstart_in),
        .rxclkcorcnt_out(rxclkcorcnt_out),
        .rxcominitdet_out(rxcominitdet_out),
        .rxcommadet_out(rxcommadet_out),
        .rxcommadeten_in(rxcommadeten_in),
        .rxcomsasdet_out(rxcomsasdet_out),
        .rxcomwakedet_out(rxcomwakedet_out),
        .rxctrl0_out(rxctrl0_out),
        .rxctrl1_out(rxctrl1_out),
        .rxctrl2_out(rxctrl2_out),
        .rxctrl3_out(rxctrl3_out),
        .rxdata_out(rxdata_out),
        .rxdataextendrsvd_out(rxdataextendrsvd_out),
        .rxdatavalid_out(rxdatavalid_out),
        .rxdfeagcctrl_in(rxdfeagcctrl_in),
        .rxdfeagchold_in(rxdfeagchold_in),
        .rxdfeagcovrden_in(rxdfeagcovrden_in),
        .rxdfecfokfcnum_in(rxdfecfokfcnum_in),
        .rxdfecfokfen_in(rxdfecfokfen_in),
        .rxdfecfokfpulse_in(rxdfecfokfpulse_in),
        .rxdfecfokhold_in(rxdfecfokhold_in),
        .rxdfecfokovren_in(rxdfecfokovren_in),
        .rxdfekhhold_in(rxdfekhhold_in),
        .rxdfekhovrden_in(rxdfekhovrden_in),
        .rxdfelfhold_in(rxdfelfhold_in),
        .rxdfelfovrden_in(rxdfelfovrden_in),
        .rxdfelpmreset_in(rxdfelpmreset_in),
        .rxdfetap10hold_in(rxdfetap10hold_in),
        .rxdfetap10ovrden_in(rxdfetap10ovrden_in),
        .rxdfetap11hold_in(rxdfetap11hold_in),
        .rxdfetap11ovrden_in(rxdfetap11ovrden_in),
        .rxdfetap12hold_in(rxdfetap12hold_in),
        .rxdfetap12ovrden_in(rxdfetap12ovrden_in),
        .rxdfetap13hold_in(rxdfetap13hold_in),
        .rxdfetap13ovrden_in(rxdfetap13ovrden_in),
        .rxdfetap14hold_in(rxdfetap14hold_in),
        .rxdfetap14ovrden_in(rxdfetap14ovrden_in),
        .rxdfetap15hold_in(rxdfetap15hold_in),
        .rxdfetap15ovrden_in(rxdfetap15ovrden_in),
        .rxdfetap2hold_in(rxdfetap2hold_in),
        .rxdfetap2ovrden_in(rxdfetap2ovrden_in),
        .rxdfetap3hold_in(rxdfetap3hold_in),
        .rxdfetap3ovrden_in(rxdfetap3ovrden_in),
        .rxdfetap4hold_in(rxdfetap4hold_in),
        .rxdfetap4ovrden_in(rxdfetap4ovrden_in),
        .rxdfetap5hold_in(rxdfetap5hold_in),
        .rxdfetap5ovrden_in(rxdfetap5ovrden_in),
        .rxdfetap6hold_in(rxdfetap6hold_in),
        .rxdfetap6ovrden_in(rxdfetap6ovrden_in),
        .rxdfetap7hold_in(rxdfetap7hold_in),
        .rxdfetap7ovrden_in(rxdfetap7ovrden_in),
        .rxdfetap8hold_in(rxdfetap8hold_in),
        .rxdfetap8ovrden_in(rxdfetap8ovrden_in),
        .rxdfetap9hold_in(rxdfetap9hold_in),
        .rxdfetap9ovrden_in(rxdfetap9ovrden_in),
        .rxdfeuthold_in(rxdfeuthold_in),
        .rxdfeutovrden_in(rxdfeutovrden_in),
        .rxdfevphold_in(rxdfevphold_in),
        .rxdfevpovrden_in(rxdfevpovrden_in),
        .rxdfexyden_in(rxdfexyden_in),
        .rxdlybypass_in(rxdlybypass_in),
        .rxdlyen_in(rxdlyen_in),
        .rxdlyovrden_in(rxdlyovrden_in),
        .rxdlysreset_in(rxdlysreset_in),
        .rxdlysresetdone_out(rxdlysresetdone_out),
        .rxelecidle_out(rxelecidle_out),
        .rxelecidlemode_in(rxelecidlemode_in),
        .rxeqtraining_in(rxeqtraining_in),
        .rxgearboxslip_in(rxgearboxslip_in),
        .rxheader_out(rxheader_out),
        .rxheadervalid_out(rxheadervalid_out),
        .rxlatclk_in(rxlatclk_in),
        .rxlfpstresetdet_out(rxlfpstresetdet_out),
        .rxlfpsu2lpexitdet_out(rxlfpsu2lpexitdet_out),
        .rxlfpsu3wakedet_out(rxlfpsu3wakedet_out),
        .rxlpmen_in(rxlpmen_in),
        .rxlpmgchold_in(rxlpmgchold_in),
        .rxlpmgcovrden_in(rxlpmgcovrden_in),
        .rxlpmhfhold_in(rxlpmhfhold_in),
        .rxlpmhfovrden_in(rxlpmhfovrden_in),
        .rxlpmlfhold_in(rxlpmlfhold_in),
        .rxlpmlfklovrden_in(rxlpmlfklovrden_in),
        .rxlpmoshold_in(rxlpmoshold_in),
        .rxlpmosovrden_in(rxlpmosovrden_in),
        .rxmcommaalignen_in(rxmcommaalignen_in),
        .rxmonitorout_out(rxmonitorout_out),
        .rxmonitorsel_in(rxmonitorsel_in),
        .rxoobreset_in(rxoobreset_in),
        .rxoscalreset_in(rxoscalreset_in),
        .rxoshold_in(rxoshold_in),
        .rxosintdone_out(rxosintdone_out),
        .rxosintstarted_out(rxosintstarted_out),
        .rxosintstrobedone_out(rxosintstrobedone_out),
        .rxosintstrobestarted_out(rxosintstrobestarted_out),
        .rxosovrden_in(rxosovrden_in),
        .rxoutclk_out(rxoutclk_out),
        .rxoutclkfabric_out(rxoutclkfabric_out),
        .rxoutclkpcs_out(rxoutclkpcs_out),
        .rxoutclksel_in(rxoutclksel_in),
        .rxpcommaalignen_in(rxpcommaalignen_in),
        .rxpcsreset_in(rxpcsreset_in),
        .rxpd_in(rxpd_in),
        .rxphalign_in(rxphalign_in),
        .rxphaligndone_out(rxphaligndone_out),
        .rxphalignen_in(rxphalignen_in),
        .rxphalignerr_out(rxphalignerr_out),
        .rxphdlypd_in(rxphdlypd_in),
        .rxphdlyreset_in(rxphdlyreset_in),
        .rxphovrden_in(rxphovrden_in),
        .rxpllclksel_in(rxpllclksel_in),
        .rxpmareset_in(rxpmareset_in),
        .rxpmaresetdone_out(rxpmaresetdone_out),
        .rxpolarity_in(rxpolarity_in),
        .rxprbscntreset_in(rxprbscntreset_in),
        .rxprbserr_out(rxprbserr_out),
        .rxprbslocked_out(rxprbslocked_out),
        .rxprbssel_in(rxprbssel_in),
        .rxprgdivresetdone_out(rxprgdivresetdone_out),
        .rxqpien_in(rxqpien_in),
        .rxqpisenn_out(rxqpisenn_out),
        .rxqpisenp_out(rxqpisenp_out),
        .rxrate_in(rxrate_in),
        .rxratedone_out(rxratedone_out),
        .rxratemode_in(rxratemode_in),
        .rxrecclkout_out(rxrecclkout_out),
        .rxresetdone_out(rxresetdone_out),
        .rxslide_in(rxslide_in),
        .rxsliderdy_out(rxsliderdy_out),
        .rxslipdone_out(rxslipdone_out),
        .rxslipoutclk_in(rxslipoutclk_in),
        .rxslipoutclkrdy_out(rxslipoutclkrdy_out),
        .rxslippma_in(rxslippma_in),
        .rxslippmardy_out(rxslippmardy_out),
        .rxstartofseq_out(rxstartofseq_out),
        .rxstatus_out(rxstatus_out),
        .rxsyncallin_in(rxsyncallin_in),
        .rxsyncdone_out(rxsyncdone_out),
        .rxsyncin_in(rxsyncin_in),
        .rxsyncmode_in(rxsyncmode_in),
        .rxsyncout_out(rxsyncout_out),
        .rxsysclksel_in(rxsysclksel_in),
        .rxtermination_in(rxtermination_in),
        .rxusrclk2_in(rxusrclk2_in),
        .rxusrclk_in(rxusrclk_in),
        .rxvalid_out(rxvalid_out),
        .sigvalidclk_in(sigvalidclk_in),
        .tstin_in(tstin_in),
        .tx8b10bbypass_in(tx8b10bbypass_in),
        .tx8b10ben_in(tx8b10ben_in),
        .txbufstatus_out(txbufstatus_out),
        .txcomfinish_out(txcomfinish_out),
        .txcominit_in(txcominit_in),
        .txcomsas_in(txcomsas_in),
        .txcomwake_in(txcomwake_in),
        .txctrl0_in(txctrl0_in),
        .txctrl1_in(txctrl1_in),
        .txctrl2_in(txctrl2_in),
        .txdataextendrsvd_in(txdataextendrsvd_in),
        .txdccdone_out(txdccdone_out),
        .txdccforcestart_in(txdccforcestart_in),
        .txdccreset_in(txdccreset_in),
        .txdeemph_in(txdeemph_in),
        .txdetectrx_in(txdetectrx_in),
        .txdiffctrl_in(txdiffctrl_in),
        .txdlybypass_in(txdlybypass_in),
        .txdlyen_in(txdlyen_in),
        .txdlyhold_in(txdlyhold_in),
        .txdlyovrden_in(txdlyovrden_in),
        .txdlysreset_in(txdlysreset_in),
        .txdlysresetdone_out(txdlysresetdone_out),
        .txdlyupdown_in(txdlyupdown_in),
        .txelecidle_in(txelecidle_in),
        .txheader_in(txheader_in),
        .txinhibit_in(txinhibit_in),
        .txlatclk_in(txlatclk_in),
        .txlfpstreset_in(txlfpstreset_in),
        .txlfpsu2lpexit_in(txlfpsu2lpexit_in),
        .txlfpsu3wake_in(txlfpsu3wake_in),
        .txmaincursor_in(txmaincursor_in),
        .txmargin_in(txmargin_in),
        .txmuxdcdexhold_in(txmuxdcdexhold_in),
        .txmuxdcdorwren_in(txmuxdcdorwren_in),
        .txoneszeros_in(txoneszeros_in),
        .txoutclk_out(txoutclk_out),
        .txoutclkfabric_out(txoutclkfabric_out),
        .txoutclkpcs_out(txoutclkpcs_out),
        .txoutclksel_in(txoutclksel_in),
        .txpcsreset_in(txpcsreset_in),
        .txpd_in(txpd_in),
        .txpdelecidlemode_in(txpdelecidlemode_in),
        .txphalign_in(txphalign_in),
        .txphaligndone_out(txphaligndone_out),
        .txphalignen_in(txphalignen_in),
        .txphdlypd_in(txphdlypd_in),
        .txphdlyreset_in(txphdlyreset_in),
        .txphdlytstclk_in(txphdlytstclk_in),
        .txphinit_in(txphinit_in),
        .txphinitdone_out(txphinitdone_out),
        .txphovrden_in(txphovrden_in),
        .txpippmen_in(txpippmen_in),
        .txpippmovrden_in(txpippmovrden_in),
        .txpippmpd_in(txpippmpd_in),
        .txpippmsel_in(txpippmsel_in),
        .txpippmstepsize_in(txpippmstepsize_in),
        .txpisopd_in(txpisopd_in),
        .txpllclksel_in(txpllclksel_in),
        .txpmareset_in(txpmareset_in),
        .txpmaresetdone_out(txpmaresetdone_out),
        .txpolarity_in(txpolarity_in),
        .txpostcursor_in(txpostcursor_in),
        .txprbsforceerr_in(txprbsforceerr_in),
        .txprbssel_in(txprbssel_in),
        .txprecursor_in(txprecursor_in),
        .txprgdivresetdone_out(txprgdivresetdone_out),
        .txqpibiasen_in(txqpibiasen_in),
        .txqpisenn_out(txqpisenn_out),
        .txqpisenp_out(txqpisenp_out),
        .txqpiweakpup_in(txqpiweakpup_in),
        .txrate_in(txrate_in),
        .txratedone_out(txratedone_out),
        .txratemode_in(txratemode_in),
        .txresetdone_out(txresetdone_out),
        .txsequence_in(txsequence_in),
        .txswing_in(txswing_in),
        .txsyncallin_in(txsyncallin_in),
        .txsyncdone_out(txsyncdone_out),
        .txsyncin_in(txsyncin_in),
        .txsyncmode_in(txsyncmode_in),
        .txsyncout_out(txsyncout_out),
        .txsysclksel_in(txsysclksel_in),
        .txusrclk2_in(txusrclk2_in),
        .txusrclk_in(txusrclk_in));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_johnson_cntr" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr
   (clk1_25,
    clk1_25_reg_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk1_25_reg_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk1_25_reg_reg;
  wire clk_div10_plse_rise;
  wire reg1_i_1__2_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__2
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk1_25_reg_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__2
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__2_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__2_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hAEAA)) 
    reg5_i_1__2
       (.I0(reset_out),
        .I1(reg5_reg_n_0),
        .I2(reg4),
        .I3(clk_div10_plse_rise),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_johnson_cntr" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_41
   (clk1_25,
    clk1_25_reg_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk1_25_reg_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk1_25_reg_reg;
  wire clk_div10_plse_rise;
  wire reg1_i_1__1_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__1
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk1_25_reg_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__1
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__1_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__1_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hAEAA)) 
    reg5_i_1__1
       (.I0(reset_out),
        .I1(reg5_reg_n_0),
        .I2(reg4),
        .I3(clk_div10_plse_rise),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_johnson_cntr" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_47
   (clk1_25,
    clk1_25_reg_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk1_25_reg_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk1_25_reg_reg;
  wire clk_div10_plse_rise;
  wire reg1_i_1__0_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__0
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk1_25_reg_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__0
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__0_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__0_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hAEAA)) 
    reg5_i_1__0
       (.I0(reset_out),
        .I1(reg5_reg_n_0),
        .I2(reg4),
        .I3(clk_div10_plse_rise),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_johnson_cntr" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_53
   (clk1_25,
    clk1_25_reg_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk1_25_reg_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk1_25_reg_reg;
  wire clk_div10_plse_rise;
  wire reg1;
  wire reg1_i_1_n_0;
  wire reg2;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk1_25_reg_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1_n_0),
        .Q(reg1),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1),
        .Q(reg2),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hAEAA)) 
    reg5_i_1
       (.I0(reset_out),
        .I1(reg5_reg_n_0),
        .I2(reg4),
        .I3(clk_div10_plse_rise),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_johnson_cntr" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_63
   (clk1_25,
    clk1_25_reg_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk1_25_reg_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk1_25_reg_reg;
  wire clk_div10_plse_rise;
  wire reg1_i_1__6_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__6
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk1_25_reg_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__6
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__6_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__6_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hFF40)) 
    reg5_i_1__6
       (.I0(reg4),
        .I1(clk_div10_plse_rise),
        .I2(reg5_reg_n_0),
        .I3(reset_out),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_johnson_cntr" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_69
   (clk1_25,
    clk1_25_reg_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk1_25_reg_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk1_25_reg_reg;
  wire clk_div10_plse_rise;
  wire reg1_i_1__5_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__5
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk1_25_reg_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__5
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__5_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__5_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hFF40)) 
    reg5_i_1__5
       (.I0(reg4),
        .I1(clk_div10_plse_rise),
        .I2(reg5_reg_n_0),
        .I3(reset_out),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_johnson_cntr" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_75
   (clk1_25,
    clk1_25_reg_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk1_25_reg_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk1_25_reg_reg;
  wire clk_div10_plse_rise;
  wire reg1_i_1__4_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__4
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk1_25_reg_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__4
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__4_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__4_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hFF40)) 
    reg5_i_1__4
       (.I0(reg4),
        .I1(clk_div10_plse_rise),
        .I2(reg5_reg_n_0),
        .I3(reset_out),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_johnson_cntr" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_johnson_cntr_81
   (clk1_25,
    clk1_25_reg_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk1_25_reg_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk1_25_reg_reg;
  wire clk_div10_plse_rise;
  wire reg1_i_1__3_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__3
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk1_25_reg_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__3
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__3_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__3_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hFF40)) 
    reg5_i_1__3
       (.I0(reg4),
        .I1(clk_div10_plse_rise),
        .I2(reg5_reg_n_0),
        .I3(reset_out),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_qsgmii_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_qsgmii_adapt
   (gmii_rx_dv_out,
    gmii_rx_er_out,
    gmii_rx_dv_out_reg,
    gmii_rx_er_out_reg,
    gmii_rx_dv_out_reg_0,
    gmii_rx_er_out_reg_0,
    gmii_rx_dv_out_reg_1,
    gmii_rx_er_out_reg_1,
    Q,
    \gmii_rxd_out_reg[7] ,
    \gmii_rxd_out_reg[7]_0 ,
    \gmii_rxd_out_reg[7]_1 ,
    userclk2,
    gmii_rx_dv_ch0,
    gmii_rx_er_ch0,
    gmii_rx_dv_ch1,
    gmii_rx_er_ch1,
    gmii_rx_dv_ch2,
    gmii_rx_er_ch2,
    gmii_rx_dv_ch3,
    gmii_rx_er_ch3,
    reset,
    speed_is_10_100_ch0,
    speed_is_100_ch0,
    speed_is_10_100_ch1,
    speed_is_100_ch1,
    speed_is_10_100_ch2,
    speed_is_100_ch2,
    speed_is_10_100_ch3,
    speed_is_100_ch3,
    D,
    \rxd_reg1_reg[7] ,
    \rxd_reg1_reg[7]_0 ,
    \rxd_reg1_reg[7]_1 );
  output gmii_rx_dv_out;
  output gmii_rx_er_out;
  output gmii_rx_dv_out_reg;
  output gmii_rx_er_out_reg;
  output gmii_rx_dv_out_reg_0;
  output gmii_rx_er_out_reg_0;
  output gmii_rx_dv_out_reg_1;
  output gmii_rx_er_out_reg_1;
  output [7:0]Q;
  output [7:0]\gmii_rxd_out_reg[7] ;
  output [7:0]\gmii_rxd_out_reg[7]_0 ;
  output [7:0]\gmii_rxd_out_reg[7]_1 ;
  input userclk2;
  input gmii_rx_dv_ch0;
  input gmii_rx_er_ch0;
  input gmii_rx_dv_ch1;
  input gmii_rx_er_ch1;
  input gmii_rx_dv_ch2;
  input gmii_rx_er_ch2;
  input gmii_rx_dv_ch3;
  input gmii_rx_er_ch3;
  input reset;
  input speed_is_10_100_ch0;
  input speed_is_100_ch0;
  input speed_is_10_100_ch1;
  input speed_is_100_ch1;
  input speed_is_10_100_ch2;
  input speed_is_100_ch2;
  input speed_is_10_100_ch3;
  input speed_is_100_ch3;
  input [7:0]D;
  input [7:0]\rxd_reg1_reg[7] ;
  input [7:0]\rxd_reg1_reg[7]_0 ;
  input [7:0]\rxd_reg1_reg[7]_1 ;

  wire [7:0]D;
  wire [7:0]Q;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_dv_out;
  wire gmii_rx_dv_out_reg;
  wire gmii_rx_dv_out_reg_0;
  wire gmii_rx_dv_out_reg_1;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_ch3;
  wire gmii_rx_er_out;
  wire gmii_rx_er_out_reg;
  wire gmii_rx_er_out_reg_0;
  wire gmii_rx_er_out_reg_1;
  wire [7:0]\gmii_rxd_out_reg[7] ;
  wire [7:0]\gmii_rxd_out_reg[7]_0 ;
  wire [7:0]\gmii_rxd_out_reg[7]_1 ;
  wire reset;
  wire [7:0]\rxd_reg1_reg[7] ;
  wire [7:0]\rxd_reg1_reg[7]_0 ;
  wire [7:0]\rxd_reg1_reg[7]_1 ;
  wire speed_is_100_ch0;
  wire speed_is_100_ch1;
  wire speed_is_100_ch2;
  wire speed_is_100_ch3;
  wire speed_is_10_100_ch0;
  wire speed_is_10_100_ch1;
  wire speed_is_10_100_ch2;
  wire speed_is_10_100_ch3;
  wire sync_reset;
  wire userclk2;

  quadsgmii_0_TEST_quadsgmii_0_TEST_reset_sync_55 gen_sync_reset
       (.reset(reset),
        .reset_out(sync_reset),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_56 sgmii_adapt_ch0
       (.D(D),
        .Q(Q),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0),
        .gmii_rx_dv_out(gmii_rx_dv_out),
        .gmii_rx_er_ch0(gmii_rx_er_ch0),
        .gmii_rx_er_out(gmii_rx_er_out),
        .reset_out(sync_reset),
        .speed_is_100_ch0(speed_is_100_ch0),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_57 sgmii_adapt_ch1
       (.gmii_rx_dv_ch1(gmii_rx_dv_ch1),
        .gmii_rx_dv_out_reg(gmii_rx_dv_out_reg),
        .gmii_rx_er_ch1(gmii_rx_er_ch1),
        .gmii_rx_er_out_reg(gmii_rx_er_out_reg),
        .\gmii_rxd_out_reg[7] (\gmii_rxd_out_reg[7] ),
        .reset_out(sync_reset),
        .\rxd_reg1_reg[7] (\rxd_reg1_reg[7] ),
        .speed_is_100_ch1(speed_is_100_ch1),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_58 sgmii_adapt_ch2
       (.gmii_rx_dv_ch2(gmii_rx_dv_ch2),
        .gmii_rx_dv_out_reg(gmii_rx_dv_out_reg_0),
        .gmii_rx_er_ch2(gmii_rx_er_ch2),
        .gmii_rx_er_out_reg(gmii_rx_er_out_reg_0),
        .\gmii_rxd_out_reg[7] (\gmii_rxd_out_reg[7]_0 ),
        .reset_out(sync_reset),
        .\rxd_reg1_reg[7] (\rxd_reg1_reg[7]_0 ),
        .speed_is_100_ch2(speed_is_100_ch2),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_59 sgmii_adapt_ch3
       (.gmii_rx_dv_ch3(gmii_rx_dv_ch3),
        .gmii_rx_dv_out_reg(gmii_rx_dv_out_reg_1),
        .gmii_rx_er_ch3(gmii_rx_er_ch3),
        .gmii_rx_er_out_reg(gmii_rx_er_out_reg_1),
        .\gmii_rxd_out_reg[7] (\gmii_rxd_out_reg[7]_1 ),
        .reset_out(sync_reset),
        .\rxd_reg1_reg[7] (\rxd_reg1_reg[7]_1 ),
        .speed_is_100_ch3(speed_is_100_ch3),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_qsgmii_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_qsgmii_adapt_0
   (E,
    sgmii_clk_en_reg,
    sgmii_clk_en_reg_0,
    sgmii_clk_en_reg_1,
    gmii_tx_en_ch0,
    gmii_tx_er_ch0,
    gmii_tx_en_ch1,
    gmii_tx_er_ch1,
    gmii_tx_en_ch2,
    gmii_tx_er_ch2,
    gmii_tx_en_ch3,
    gmii_tx_er_ch3,
    Q,
    \gmii_txd_out_reg[7] ,
    \gmii_txd_out_reg[7]_0 ,
    \gmii_txd_out_reg[7]_1 ,
    userclk2,
    gmii_tx_en_ch0_int1,
    gmii_tx_er_ch0_int1,
    gmii_tx_en_ch1_int1,
    gmii_tx_er_ch1_int1,
    gmii_tx_en_ch2_int1,
    gmii_tx_er_ch2_int1,
    gmii_tx_en_ch3_int1,
    gmii_tx_er_ch3_int1,
    reset,
    speed_is_10_100_ch0,
    speed_is_100_ch0,
    speed_is_10_100_ch1,
    speed_is_100_ch1,
    speed_is_10_100_ch2,
    speed_is_100_ch2,
    speed_is_10_100_ch3,
    speed_is_100_ch3,
    \gmii_txd_out_reg[7]_2 ,
    \gmii_txd_out_reg[7]_3 ,
    \gmii_txd_out_reg[7]_4 ,
    \gmii_txd_out_reg[7]_5 );
  output [0:0]E;
  output [0:0]sgmii_clk_en_reg;
  output [0:0]sgmii_clk_en_reg_0;
  output [0:0]sgmii_clk_en_reg_1;
  output gmii_tx_en_ch0;
  output gmii_tx_er_ch0;
  output gmii_tx_en_ch1;
  output gmii_tx_er_ch1;
  output gmii_tx_en_ch2;
  output gmii_tx_er_ch2;
  output gmii_tx_en_ch3;
  output gmii_tx_er_ch3;
  output [7:0]Q;
  output [7:0]\gmii_txd_out_reg[7] ;
  output [7:0]\gmii_txd_out_reg[7]_0 ;
  output [7:0]\gmii_txd_out_reg[7]_1 ;
  input userclk2;
  input gmii_tx_en_ch0_int1;
  input gmii_tx_er_ch0_int1;
  input gmii_tx_en_ch1_int1;
  input gmii_tx_er_ch1_int1;
  input gmii_tx_en_ch2_int1;
  input gmii_tx_er_ch2_int1;
  input gmii_tx_en_ch3_int1;
  input gmii_tx_er_ch3_int1;
  input reset;
  input speed_is_10_100_ch0;
  input speed_is_100_ch0;
  input speed_is_10_100_ch1;
  input speed_is_100_ch1;
  input speed_is_10_100_ch2;
  input speed_is_100_ch2;
  input speed_is_10_100_ch3;
  input speed_is_100_ch3;
  input [7:0]\gmii_txd_out_reg[7]_2 ;
  input [7:0]\gmii_txd_out_reg[7]_3 ;
  input [7:0]\gmii_txd_out_reg[7]_4 ;
  input [7:0]\gmii_txd_out_reg[7]_5 ;

  wire [0:0]E;
  wire [7:0]Q;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch0_int1;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch1_int1;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch2_int1;
  wire gmii_tx_en_ch3;
  wire gmii_tx_en_ch3_int1;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch0_int1;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch1_int1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch2_int1;
  wire gmii_tx_er_ch3;
  wire gmii_tx_er_ch3_int1;
  wire [7:0]\gmii_txd_out_reg[7] ;
  wire [7:0]\gmii_txd_out_reg[7]_0 ;
  wire [7:0]\gmii_txd_out_reg[7]_1 ;
  wire [7:0]\gmii_txd_out_reg[7]_2 ;
  wire [7:0]\gmii_txd_out_reg[7]_3 ;
  wire [7:0]\gmii_txd_out_reg[7]_4 ;
  wire [7:0]\gmii_txd_out_reg[7]_5 ;
  wire reset;
  wire [0:0]sgmii_clk_en_reg;
  wire [0:0]sgmii_clk_en_reg_0;
  wire [0:0]sgmii_clk_en_reg_1;
  wire speed_is_100_ch0;
  wire speed_is_100_ch1;
  wire speed_is_100_ch2;
  wire speed_is_100_ch3;
  wire speed_is_10_100_ch0;
  wire speed_is_10_100_ch1;
  wire speed_is_10_100_ch2;
  wire speed_is_10_100_ch3;
  wire sync_reset;
  wire userclk2;

  quadsgmii_0_TEST_quadsgmii_0_TEST_reset_sync_31 gen_sync_reset
       (.reset(reset),
        .reset_out(sync_reset),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt sgmii_adapt_ch0
       (.E(E),
        .Q(Q),
        .gmii_tx_en_ch0(gmii_tx_en_ch0),
        .gmii_tx_en_ch0_int1(gmii_tx_en_ch0_int1),
        .gmii_tx_er_ch0(gmii_tx_er_ch0),
        .gmii_tx_er_ch0_int1(gmii_tx_er_ch0_int1),
        .\gmii_txd_out_reg[7] (\gmii_txd_out_reg[7]_2 ),
        .reset_out(sync_reset),
        .speed_is_100_ch0(speed_is_100_ch0),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_32 sgmii_adapt_ch1
       (.E(sgmii_clk_en_reg),
        .gmii_tx_en_ch1(gmii_tx_en_ch1),
        .gmii_tx_en_ch1_int1(gmii_tx_en_ch1_int1),
        .gmii_tx_er_ch1(gmii_tx_er_ch1),
        .gmii_tx_er_ch1_int1(gmii_tx_er_ch1_int1),
        .\gmii_txd_out_reg[7] (\gmii_txd_out_reg[7] ),
        .\gmii_txd_out_reg[7]_0 (\gmii_txd_out_reg[7]_3 ),
        .reset_out(sync_reset),
        .speed_is_100_ch1(speed_is_100_ch1),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_33 sgmii_adapt_ch2
       (.E(sgmii_clk_en_reg_0),
        .gmii_tx_en_ch2(gmii_tx_en_ch2),
        .gmii_tx_en_ch2_int1(gmii_tx_en_ch2_int1),
        .gmii_tx_er_ch2(gmii_tx_er_ch2),
        .gmii_tx_er_ch2_int1(gmii_tx_er_ch2_int1),
        .\gmii_txd_out_reg[7] (\gmii_txd_out_reg[7]_0 ),
        .\gmii_txd_out_reg[7]_0 (\gmii_txd_out_reg[7]_4 ),
        .reset_out(sync_reset),
        .speed_is_100_ch2(speed_is_100_ch2),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_34 sgmii_adapt_ch3
       (.E(sgmii_clk_en_reg_1),
        .gmii_tx_en_ch3(gmii_tx_en_ch3),
        .gmii_tx_en_ch3_int1(gmii_tx_en_ch3_int1),
        .gmii_tx_er_ch3(gmii_tx_er_ch3),
        .gmii_tx_er_ch3_int1(gmii_tx_er_ch3_int1),
        .\gmii_txd_out_reg[7] (\gmii_txd_out_reg[7]_1 ),
        .\gmii_txd_out_reg[7]_0 (\gmii_txd_out_reg[7]_5 ),
        .reset_out(sync_reset),
        .speed_is_100_ch3(speed_is_100_ch3),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_reset_sync" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_reset_sync
   (reset_out,
    rxuserclk2,
    enablealign);
  output reset_out;
  input rxuserclk2;
  input enablealign;

  wire enablealign;
  wire reset_out;
  wire reset_stage1;
  wire reset_stage2;
  wire reset_stage3;
  wire reset_stage4;
  wire reset_stage5;
  wire rxuserclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxuserclk2),
        .CE(1'b1),
        .D(1'b0),
        .PRE(enablealign),
        .Q(reset_stage1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxuserclk2),
        .CE(1'b1),
        .D(reset_stage1),
        .PRE(enablealign),
        .Q(reset_stage2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxuserclk2),
        .CE(1'b1),
        .D(reset_stage2),
        .PRE(enablealign),
        .Q(reset_stage3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxuserclk2),
        .CE(1'b1),
        .D(reset_stage3),
        .PRE(enablealign),
        .Q(reset_stage4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxuserclk2),
        .CE(1'b1),
        .D(reset_stage4),
        .PRE(enablealign),
        .Q(reset_stage5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxuserclk2),
        .CE(1'b1),
        .D(reset_stage5),
        .Q(reset_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_reset_sync" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_reset_sync_31
   (reset_out,
    userclk2,
    reset);
  output reset_out;
  input userclk2;
  input reset;

  wire reset;
  wire reset_out;
  wire reset_stage1;
  wire reset_stage2;
  wire reset_stage3;
  wire reset_stage4;
  wire reset_stage5;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(userclk2),
        .CE(1'b1),
        .D(1'b0),
        .PRE(reset),
        .Q(reset_stage1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage1),
        .PRE(reset),
        .Q(reset_stage2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage2),
        .PRE(reset),
        .Q(reset_stage3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage3),
        .PRE(reset),
        .Q(reset_stage4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage4),
        .PRE(reset),
        .Q(reset_stage5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage5),
        .Q(reset_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_reset_sync" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_reset_sync_55
   (reset_out,
    userclk2,
    reset);
  output reset_out;
  input userclk2;
  input reset;

  wire reset;
  wire reset_out;
  wire reset_stage1;
  wire reset_stage2;
  wire reset_stage3;
  wire reset_stage4;
  wire reset_stage5;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(userclk2),
        .CE(1'b1),
        .D(1'b0),
        .PRE(reset),
        .Q(reset_stage1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage1),
        .PRE(reset),
        .Q(reset_stage2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage2),
        .PRE(reset),
        .Q(reset_stage3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage3),
        .PRE(reset),
        .Q(reset_stage4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage4),
        .PRE(reset),
        .Q(reset_stage5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage5),
        .Q(reset_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_rx_rate_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_rx_rate_adapt
   (gmii_rx_dv_out_reg_0,
    gmii_rx_er_out_reg_0,
    \gmii_rxd_out_reg[7]_0 ,
    reset_out,
    rx_er_aligned_reg_0,
    gmii_rx_dv_ch3,
    userclk2,
    gmii_rx_er_ch3,
    \rxd_reg1_reg[7]_0 );
  output gmii_rx_dv_out_reg_0;
  output gmii_rx_er_out_reg_0;
  output [7:0]\gmii_rxd_out_reg[7]_0 ;
  input reset_out;
  input rx_er_aligned_reg_0;
  input gmii_rx_dv_ch3;
  input userclk2;
  input gmii_rx_er_ch3;
  input [7:0]\rxd_reg1_reg[7]_0 ;

  wire gmii_rx_dv_ch3;
  wire gmii_rx_dv_out_reg_0;
  wire gmii_rx_er_ch3;
  wire gmii_rx_er_out_reg_0;
  wire [7:0]\gmii_rxd_out_reg[7]_0 ;
  wire muxsel;
  wire muxsel_i_1__2_n_0;
  wire [3:0]p_0_in;
  wire reset_out;
  wire rx_dv_aligned_i_1__2_n_0;
  wire rx_dv_aligned_reg_n_0;
  wire rx_dv_reg1;
  wire rx_dv_reg2;
  wire rx_er_aligned;
  wire rx_er_aligned_reg_0;
  wire rx_er_aligned_reg_n_0;
  wire rx_er_reg1;
  wire rx_er_reg2;
  wire \rxd_aligned[0]_i_1__2_n_0 ;
  wire \rxd_aligned[1]_i_1__2_n_0 ;
  wire \rxd_aligned[2]_i_1__2_n_0 ;
  wire \rxd_aligned[3]_i_1__2_n_0 ;
  wire \rxd_aligned[4]_i_1__2_n_0 ;
  wire \rxd_aligned[5]_i_1__2_n_0 ;
  wire \rxd_aligned[6]_i_1__2_n_0 ;
  wire \rxd_aligned[7]_i_1__2_n_0 ;
  wire \rxd_aligned_reg_n_0_[0] ;
  wire \rxd_aligned_reg_n_0_[1] ;
  wire \rxd_aligned_reg_n_0_[2] ;
  wire \rxd_aligned_reg_n_0_[3] ;
  wire \rxd_aligned_reg_n_0_[4] ;
  wire \rxd_aligned_reg_n_0_[5] ;
  wire \rxd_aligned_reg_n_0_[6] ;
  wire \rxd_aligned_reg_n_0_[7] ;
  wire [7:0]\rxd_reg1_reg[7]_0 ;
  wire \rxd_reg1_reg_n_0_[0] ;
  wire \rxd_reg1_reg_n_0_[1] ;
  wire \rxd_reg1_reg_n_0_[2] ;
  wire \rxd_reg1_reg_n_0_[3] ;
  wire \rxd_reg2_reg_n_0_[0] ;
  wire \rxd_reg2_reg_n_0_[1] ;
  wire \rxd_reg2_reg_n_0_[2] ;
  wire \rxd_reg2_reg_n_0_[3] ;
  wire \rxd_reg2_reg_n_0_[4] ;
  wire \rxd_reg2_reg_n_0_[5] ;
  wire \rxd_reg2_reg_n_0_[6] ;
  wire \rxd_reg2_reg_n_0_[7] ;
  wire sfd_enable;
  wire sfd_enable0;
  wire sfd_enable_i_1__2_n_0;
  wire sfd_enable_i_2__2_n_0;
  wire sfd_enable_i_4__2_n_0;
  wire sfd_enable_i_5__2_n_0;
  wire userclk2;

  FDRE gmii_rx_dv_out_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_dv_aligned_reg_n_0),
        .Q(gmii_rx_dv_out_reg_0),
        .R(reset_out));
  FDRE gmii_rx_er_out_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_er_aligned_reg_n_0),
        .Q(gmii_rx_er_out_reg_0),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[0] ),
        .Q(\gmii_rxd_out_reg[7]_0 [0]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[1] ),
        .Q(\gmii_rxd_out_reg[7]_0 [1]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[2] ),
        .Q(\gmii_rxd_out_reg[7]_0 [2]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[3] ),
        .Q(\gmii_rxd_out_reg[7]_0 [3]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[4] ),
        .Q(\gmii_rxd_out_reg[7]_0 [4]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[5] ),
        .Q(\gmii_rxd_out_reg[7]_0 [5]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[6] ),
        .Q(\gmii_rxd_out_reg[7]_0 [6]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[7] ),
        .Q(\gmii_rxd_out_reg[7]_0 [7]),
        .R(reset_out));
  LUT6 #(
    .INIT(64'h00000000CCCCA8CC)) 
    muxsel_i_1__2
       (.I0(sfd_enable_i_5__2_n_0),
        .I1(muxsel),
        .I2(sfd_enable_i_2__2_n_0),
        .I3(sfd_enable),
        .I4(sfd_enable_i_4__2_n_0),
        .I5(reset_out),
        .O(muxsel_i_1__2_n_0));
  FDRE muxsel_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(muxsel_i_1__2_n_0),
        .Q(muxsel),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair419" *) 
  LUT3 #(
    .INIT(8'hB0)) 
    rx_dv_aligned_i_1__2
       (.I0(rx_dv_reg1),
        .I1(muxsel),
        .I2(rx_dv_reg2),
        .O(rx_dv_aligned_i_1__2_n_0));
  FDRE rx_dv_aligned_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_dv_aligned_i_1__2_n_0),
        .Q(rx_dv_aligned_reg_n_0),
        .R(reset_out));
  FDRE rx_dv_reg1_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(gmii_rx_dv_ch3),
        .Q(rx_dv_reg1),
        .R(reset_out));
  FDRE rx_dv_reg2_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_dv_reg1),
        .Q(rx_dv_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair419" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    rx_er_aligned_i_1__2
       (.I0(muxsel),
        .I1(rx_er_reg1),
        .I2(rx_er_reg2),
        .O(rx_er_aligned));
  FDRE rx_er_aligned_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_er_aligned),
        .Q(rx_er_aligned_reg_n_0),
        .R(reset_out));
  FDRE rx_er_reg1_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(gmii_rx_er_ch3),
        .Q(rx_er_reg1),
        .R(reset_out));
  FDRE rx_er_reg2_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_er_reg1),
        .Q(rx_er_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair420" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[0]_i_1__2 
       (.I0(\rxd_reg2_reg_n_0_[4] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[0] ),
        .O(\rxd_aligned[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair422" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[1]_i_1__2 
       (.I0(\rxd_reg2_reg_n_0_[5] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[1] ),
        .O(\rxd_aligned[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair421" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[2]_i_1__2 
       (.I0(\rxd_reg2_reg_n_0_[6] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[2] ),
        .O(\rxd_aligned[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair418" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[3]_i_1__2 
       (.I0(\rxd_reg2_reg_n_0_[7] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[3] ),
        .O(\rxd_aligned[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair420" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[4]_i_1__2 
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[4] ),
        .O(\rxd_aligned[4]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair422" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[5]_i_1__2 
       (.I0(\rxd_reg1_reg_n_0_[1] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[5] ),
        .O(\rxd_aligned[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair421" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[6]_i_1__2 
       (.I0(\rxd_reg1_reg_n_0_[2] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[6] ),
        .O(\rxd_aligned[6]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair418" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[7]_i_1__2 
       (.I0(\rxd_reg1_reg_n_0_[3] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[7] ),
        .O(\rxd_aligned[7]_i_1__2_n_0 ));
  FDRE \rxd_aligned_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[0]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[1]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[2]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[3]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[4]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[4] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[5]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[5] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[6]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[6] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[7]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[7] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [0]),
        .Q(\rxd_reg1_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [1]),
        .Q(\rxd_reg1_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [2]),
        .Q(\rxd_reg1_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [3]),
        .Q(\rxd_reg1_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [4]),
        .Q(p_0_in[0]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [5]),
        .Q(p_0_in[1]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [6]),
        .Q(p_0_in[2]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [7]),
        .Q(p_0_in[3]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[0] ),
        .Q(\rxd_reg2_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[1] ),
        .Q(\rxd_reg2_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[2] ),
        .Q(\rxd_reg2_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[3] ),
        .Q(\rxd_reg2_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[0]),
        .Q(\rxd_reg2_reg_n_0_[4] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[1]),
        .Q(\rxd_reg2_reg_n_0_[5] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[2]),
        .Q(\rxd_reg2_reg_n_0_[6] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[3]),
        .Q(\rxd_reg2_reg_n_0_[7] ),
        .R(reset_out));
  LUT6 #(
    .INIT(64'hFFDDFFCCC0C8C0CC)) 
    sfd_enable_i_1__2
       (.I0(sfd_enable_i_2__2_n_0),
        .I1(sfd_enable0),
        .I2(rx_er_aligned_reg_0),
        .I3(sfd_enable_i_4__2_n_0),
        .I4(sfd_enable_i_5__2_n_0),
        .I5(sfd_enable),
        .O(sfd_enable_i_1__2_n_0));
  LUT5 #(
    .INIT(32'h04000000)) 
    sfd_enable_i_2__2
       (.I0(p_0_in[3]),
        .I1(\rxd_reg1_reg[7]_0 [0]),
        .I2(\rxd_reg1_reg[7]_0 [1]),
        .I3(\rxd_reg1_reg[7]_0 [3]),
        .I4(\rxd_reg1_reg[7]_0 [2]),
        .O(sfd_enable_i_2__2_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    sfd_enable_i_3__2
       (.I0(gmii_rx_dv_ch3),
        .I1(rx_dv_reg1),
        .O(sfd_enable0));
  LUT4 #(
    .INIT(16'hDFFF)) 
    sfd_enable_i_4__2
       (.I0(p_0_in[0]),
        .I1(p_0_in[1]),
        .I2(rx_er_aligned_reg_0),
        .I3(p_0_in[2]),
        .O(sfd_enable_i_4__2_n_0));
  LUT5 #(
    .INIT(32'hFFFFDFFF)) 
    sfd_enable_i_5__2
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(\rxd_reg1_reg_n_0_[3] ),
        .I2(p_0_in[3]),
        .I3(\rxd_reg1_reg_n_0_[2] ),
        .I4(\rxd_reg1_reg_n_0_[1] ),
        .O(sfd_enable_i_5__2_n_0));
  FDRE sfd_enable_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sfd_enable_i_1__2_n_0),
        .Q(sfd_enable),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_rx_rate_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_rx_rate_adapt_66
   (gmii_rx_dv_out_reg_0,
    gmii_rx_er_out_reg_0,
    \gmii_rxd_out_reg[7]_0 ,
    reset_out,
    rx_er_aligned_reg_0,
    gmii_rx_dv_ch2,
    userclk2,
    gmii_rx_er_ch2,
    \rxd_reg1_reg[7]_0 );
  output gmii_rx_dv_out_reg_0;
  output gmii_rx_er_out_reg_0;
  output [7:0]\gmii_rxd_out_reg[7]_0 ;
  input reset_out;
  input rx_er_aligned_reg_0;
  input gmii_rx_dv_ch2;
  input userclk2;
  input gmii_rx_er_ch2;
  input [7:0]\rxd_reg1_reg[7]_0 ;

  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_out_reg_0;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_out_reg_0;
  wire [7:0]\gmii_rxd_out_reg[7]_0 ;
  wire muxsel;
  wire muxsel_i_1__1_n_0;
  wire [3:0]p_0_in;
  wire reset_out;
  wire rx_dv_aligned_i_1__1_n_0;
  wire rx_dv_aligned_reg_n_0;
  wire rx_dv_reg1;
  wire rx_dv_reg2;
  wire rx_er_aligned;
  wire rx_er_aligned_reg_0;
  wire rx_er_aligned_reg_n_0;
  wire rx_er_reg1;
  wire rx_er_reg2;
  wire \rxd_aligned[0]_i_1__1_n_0 ;
  wire \rxd_aligned[1]_i_1__1_n_0 ;
  wire \rxd_aligned[2]_i_1__1_n_0 ;
  wire \rxd_aligned[3]_i_1__1_n_0 ;
  wire \rxd_aligned[4]_i_1__1_n_0 ;
  wire \rxd_aligned[5]_i_1__1_n_0 ;
  wire \rxd_aligned[6]_i_1__1_n_0 ;
  wire \rxd_aligned[7]_i_1__1_n_0 ;
  wire \rxd_aligned_reg_n_0_[0] ;
  wire \rxd_aligned_reg_n_0_[1] ;
  wire \rxd_aligned_reg_n_0_[2] ;
  wire \rxd_aligned_reg_n_0_[3] ;
  wire \rxd_aligned_reg_n_0_[4] ;
  wire \rxd_aligned_reg_n_0_[5] ;
  wire \rxd_aligned_reg_n_0_[6] ;
  wire \rxd_aligned_reg_n_0_[7] ;
  wire [7:0]\rxd_reg1_reg[7]_0 ;
  wire \rxd_reg1_reg_n_0_[0] ;
  wire \rxd_reg1_reg_n_0_[1] ;
  wire \rxd_reg1_reg_n_0_[2] ;
  wire \rxd_reg1_reg_n_0_[3] ;
  wire \rxd_reg2_reg_n_0_[0] ;
  wire \rxd_reg2_reg_n_0_[1] ;
  wire \rxd_reg2_reg_n_0_[2] ;
  wire \rxd_reg2_reg_n_0_[3] ;
  wire \rxd_reg2_reg_n_0_[4] ;
  wire \rxd_reg2_reg_n_0_[5] ;
  wire \rxd_reg2_reg_n_0_[6] ;
  wire \rxd_reg2_reg_n_0_[7] ;
  wire sfd_enable;
  wire sfd_enable0;
  wire sfd_enable_i_1__1_n_0;
  wire sfd_enable_i_2__1_n_0;
  wire sfd_enable_i_4__1_n_0;
  wire sfd_enable_i_5__1_n_0;
  wire userclk2;

  FDRE gmii_rx_dv_out_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_dv_aligned_reg_n_0),
        .Q(gmii_rx_dv_out_reg_0),
        .R(reset_out));
  FDRE gmii_rx_er_out_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_er_aligned_reg_n_0),
        .Q(gmii_rx_er_out_reg_0),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[0] ),
        .Q(\gmii_rxd_out_reg[7]_0 [0]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[1] ),
        .Q(\gmii_rxd_out_reg[7]_0 [1]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[2] ),
        .Q(\gmii_rxd_out_reg[7]_0 [2]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[3] ),
        .Q(\gmii_rxd_out_reg[7]_0 [3]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[4] ),
        .Q(\gmii_rxd_out_reg[7]_0 [4]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[5] ),
        .Q(\gmii_rxd_out_reg[7]_0 [5]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[6] ),
        .Q(\gmii_rxd_out_reg[7]_0 [6]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[7] ),
        .Q(\gmii_rxd_out_reg[7]_0 [7]),
        .R(reset_out));
  LUT6 #(
    .INIT(64'h00000000CCCCA8CC)) 
    muxsel_i_1__1
       (.I0(sfd_enable_i_5__1_n_0),
        .I1(muxsel),
        .I2(sfd_enable_i_2__1_n_0),
        .I3(sfd_enable),
        .I4(sfd_enable_i_4__1_n_0),
        .I5(reset_out),
        .O(muxsel_i_1__1_n_0));
  FDRE muxsel_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(muxsel_i_1__1_n_0),
        .Q(muxsel),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair412" *) 
  LUT3 #(
    .INIT(8'hB0)) 
    rx_dv_aligned_i_1__1
       (.I0(rx_dv_reg1),
        .I1(muxsel),
        .I2(rx_dv_reg2),
        .O(rx_dv_aligned_i_1__1_n_0));
  FDRE rx_dv_aligned_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_dv_aligned_i_1__1_n_0),
        .Q(rx_dv_aligned_reg_n_0),
        .R(reset_out));
  FDRE rx_dv_reg1_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(gmii_rx_dv_ch2),
        .Q(rx_dv_reg1),
        .R(reset_out));
  FDRE rx_dv_reg2_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_dv_reg1),
        .Q(rx_dv_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair412" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    rx_er_aligned_i_1__1
       (.I0(muxsel),
        .I1(rx_er_reg1),
        .I2(rx_er_reg2),
        .O(rx_er_aligned));
  FDRE rx_er_aligned_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_er_aligned),
        .Q(rx_er_aligned_reg_n_0),
        .R(reset_out));
  FDRE rx_er_reg1_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(gmii_rx_er_ch2),
        .Q(rx_er_reg1),
        .R(reset_out));
  FDRE rx_er_reg2_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_er_reg1),
        .Q(rx_er_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair413" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[0]_i_1__1 
       (.I0(\rxd_reg2_reg_n_0_[4] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[0] ),
        .O(\rxd_aligned[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair415" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[1]_i_1__1 
       (.I0(\rxd_reg2_reg_n_0_[5] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[1] ),
        .O(\rxd_aligned[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair414" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[2]_i_1__1 
       (.I0(\rxd_reg2_reg_n_0_[6] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[2] ),
        .O(\rxd_aligned[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair411" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[3]_i_1__1 
       (.I0(\rxd_reg2_reg_n_0_[7] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[3] ),
        .O(\rxd_aligned[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair413" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[4]_i_1__1 
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[4] ),
        .O(\rxd_aligned[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair415" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[5]_i_1__1 
       (.I0(\rxd_reg1_reg_n_0_[1] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[5] ),
        .O(\rxd_aligned[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair414" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[6]_i_1__1 
       (.I0(\rxd_reg1_reg_n_0_[2] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[6] ),
        .O(\rxd_aligned[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair411" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[7]_i_1__1 
       (.I0(\rxd_reg1_reg_n_0_[3] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[7] ),
        .O(\rxd_aligned[7]_i_1__1_n_0 ));
  FDRE \rxd_aligned_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[0]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[1]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[2]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[3]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[4]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[4] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[5]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[5] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[6]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[6] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[7]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[7] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [0]),
        .Q(\rxd_reg1_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [1]),
        .Q(\rxd_reg1_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [2]),
        .Q(\rxd_reg1_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [3]),
        .Q(\rxd_reg1_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [4]),
        .Q(p_0_in[0]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [5]),
        .Q(p_0_in[1]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [6]),
        .Q(p_0_in[2]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [7]),
        .Q(p_0_in[3]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[0] ),
        .Q(\rxd_reg2_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[1] ),
        .Q(\rxd_reg2_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[2] ),
        .Q(\rxd_reg2_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[3] ),
        .Q(\rxd_reg2_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[0]),
        .Q(\rxd_reg2_reg_n_0_[4] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[1]),
        .Q(\rxd_reg2_reg_n_0_[5] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[2]),
        .Q(\rxd_reg2_reg_n_0_[6] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[3]),
        .Q(\rxd_reg2_reg_n_0_[7] ),
        .R(reset_out));
  LUT6 #(
    .INIT(64'hFFDDFFCCC0C8C0CC)) 
    sfd_enable_i_1__1
       (.I0(sfd_enable_i_2__1_n_0),
        .I1(sfd_enable0),
        .I2(rx_er_aligned_reg_0),
        .I3(sfd_enable_i_4__1_n_0),
        .I4(sfd_enable_i_5__1_n_0),
        .I5(sfd_enable),
        .O(sfd_enable_i_1__1_n_0));
  LUT5 #(
    .INIT(32'h04000000)) 
    sfd_enable_i_2__1
       (.I0(p_0_in[3]),
        .I1(\rxd_reg1_reg[7]_0 [0]),
        .I2(\rxd_reg1_reg[7]_0 [1]),
        .I3(\rxd_reg1_reg[7]_0 [3]),
        .I4(\rxd_reg1_reg[7]_0 [2]),
        .O(sfd_enable_i_2__1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    sfd_enable_i_3__1
       (.I0(gmii_rx_dv_ch2),
        .I1(rx_dv_reg1),
        .O(sfd_enable0));
  LUT4 #(
    .INIT(16'hDFFF)) 
    sfd_enable_i_4__1
       (.I0(p_0_in[0]),
        .I1(p_0_in[1]),
        .I2(rx_er_aligned_reg_0),
        .I3(p_0_in[2]),
        .O(sfd_enable_i_4__1_n_0));
  LUT5 #(
    .INIT(32'hFFFFDFFF)) 
    sfd_enable_i_5__1
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(\rxd_reg1_reg_n_0_[3] ),
        .I2(p_0_in[3]),
        .I3(\rxd_reg1_reg_n_0_[2] ),
        .I4(\rxd_reg1_reg_n_0_[1] ),
        .O(sfd_enable_i_5__1_n_0));
  FDRE sfd_enable_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sfd_enable_i_1__1_n_0),
        .Q(sfd_enable),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_rx_rate_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_rx_rate_adapt_72
   (gmii_rx_dv_out_reg_0,
    gmii_rx_er_out_reg_0,
    \gmii_rxd_out_reg[7]_0 ,
    reset_out,
    rx_er_aligned_reg_0,
    gmii_rx_dv_ch1,
    userclk2,
    gmii_rx_er_ch1,
    \rxd_reg1_reg[7]_0 );
  output gmii_rx_dv_out_reg_0;
  output gmii_rx_er_out_reg_0;
  output [7:0]\gmii_rxd_out_reg[7]_0 ;
  input reset_out;
  input rx_er_aligned_reg_0;
  input gmii_rx_dv_ch1;
  input userclk2;
  input gmii_rx_er_ch1;
  input [7:0]\rxd_reg1_reg[7]_0 ;

  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_out_reg_0;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_out_reg_0;
  wire [7:0]\gmii_rxd_out_reg[7]_0 ;
  wire muxsel;
  wire muxsel_i_1__0_n_0;
  wire [3:0]p_0_in;
  wire reset_out;
  wire rx_dv_aligned_i_1__0_n_0;
  wire rx_dv_aligned_reg_n_0;
  wire rx_dv_reg1;
  wire rx_dv_reg2;
  wire rx_er_aligned;
  wire rx_er_aligned_reg_0;
  wire rx_er_aligned_reg_n_0;
  wire rx_er_reg1;
  wire rx_er_reg2;
  wire \rxd_aligned[0]_i_1__0_n_0 ;
  wire \rxd_aligned[1]_i_1__0_n_0 ;
  wire \rxd_aligned[2]_i_1__0_n_0 ;
  wire \rxd_aligned[3]_i_1__0_n_0 ;
  wire \rxd_aligned[4]_i_1__0_n_0 ;
  wire \rxd_aligned[5]_i_1__0_n_0 ;
  wire \rxd_aligned[6]_i_1__0_n_0 ;
  wire \rxd_aligned[7]_i_1__0_n_0 ;
  wire \rxd_aligned_reg_n_0_[0] ;
  wire \rxd_aligned_reg_n_0_[1] ;
  wire \rxd_aligned_reg_n_0_[2] ;
  wire \rxd_aligned_reg_n_0_[3] ;
  wire \rxd_aligned_reg_n_0_[4] ;
  wire \rxd_aligned_reg_n_0_[5] ;
  wire \rxd_aligned_reg_n_0_[6] ;
  wire \rxd_aligned_reg_n_0_[7] ;
  wire [7:0]\rxd_reg1_reg[7]_0 ;
  wire \rxd_reg1_reg_n_0_[0] ;
  wire \rxd_reg1_reg_n_0_[1] ;
  wire \rxd_reg1_reg_n_0_[2] ;
  wire \rxd_reg1_reg_n_0_[3] ;
  wire \rxd_reg2_reg_n_0_[0] ;
  wire \rxd_reg2_reg_n_0_[1] ;
  wire \rxd_reg2_reg_n_0_[2] ;
  wire \rxd_reg2_reg_n_0_[3] ;
  wire \rxd_reg2_reg_n_0_[4] ;
  wire \rxd_reg2_reg_n_0_[5] ;
  wire \rxd_reg2_reg_n_0_[6] ;
  wire \rxd_reg2_reg_n_0_[7] ;
  wire sfd_enable;
  wire sfd_enable0;
  wire sfd_enable_i_1__0_n_0;
  wire sfd_enable_i_2__0_n_0;
  wire sfd_enable_i_4__0_n_0;
  wire sfd_enable_i_5__0_n_0;
  wire userclk2;

  FDRE gmii_rx_dv_out_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_dv_aligned_reg_n_0),
        .Q(gmii_rx_dv_out_reg_0),
        .R(reset_out));
  FDRE gmii_rx_er_out_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_er_aligned_reg_n_0),
        .Q(gmii_rx_er_out_reg_0),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[0] ),
        .Q(\gmii_rxd_out_reg[7]_0 [0]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[1] ),
        .Q(\gmii_rxd_out_reg[7]_0 [1]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[2] ),
        .Q(\gmii_rxd_out_reg[7]_0 [2]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[3] ),
        .Q(\gmii_rxd_out_reg[7]_0 [3]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[4] ),
        .Q(\gmii_rxd_out_reg[7]_0 [4]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[5] ),
        .Q(\gmii_rxd_out_reg[7]_0 [5]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[6] ),
        .Q(\gmii_rxd_out_reg[7]_0 [6]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned_reg_n_0_[7] ),
        .Q(\gmii_rxd_out_reg[7]_0 [7]),
        .R(reset_out));
  LUT6 #(
    .INIT(64'h00000000CCCCA8CC)) 
    muxsel_i_1__0
       (.I0(sfd_enable_i_5__0_n_0),
        .I1(muxsel),
        .I2(sfd_enable_i_2__0_n_0),
        .I3(sfd_enable),
        .I4(sfd_enable_i_4__0_n_0),
        .I5(reset_out),
        .O(muxsel_i_1__0_n_0));
  FDRE muxsel_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(muxsel_i_1__0_n_0),
        .Q(muxsel),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair405" *) 
  LUT3 #(
    .INIT(8'hB0)) 
    rx_dv_aligned_i_1__0
       (.I0(rx_dv_reg1),
        .I1(muxsel),
        .I2(rx_dv_reg2),
        .O(rx_dv_aligned_i_1__0_n_0));
  FDRE rx_dv_aligned_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_dv_aligned_i_1__0_n_0),
        .Q(rx_dv_aligned_reg_n_0),
        .R(reset_out));
  FDRE rx_dv_reg1_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(gmii_rx_dv_ch1),
        .Q(rx_dv_reg1),
        .R(reset_out));
  FDRE rx_dv_reg2_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_dv_reg1),
        .Q(rx_dv_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair405" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    rx_er_aligned_i_1__0
       (.I0(muxsel),
        .I1(rx_er_reg1),
        .I2(rx_er_reg2),
        .O(rx_er_aligned));
  FDRE rx_er_aligned_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_er_aligned),
        .Q(rx_er_aligned_reg_n_0),
        .R(reset_out));
  FDRE rx_er_reg1_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(gmii_rx_er_ch1),
        .Q(rx_er_reg1),
        .R(reset_out));
  FDRE rx_er_reg2_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_er_reg1),
        .Q(rx_er_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair406" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[0]_i_1__0 
       (.I0(\rxd_reg2_reg_n_0_[4] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[0] ),
        .O(\rxd_aligned[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair408" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[1]_i_1__0 
       (.I0(\rxd_reg2_reg_n_0_[5] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[1] ),
        .O(\rxd_aligned[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair407" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[2]_i_1__0 
       (.I0(\rxd_reg2_reg_n_0_[6] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[2] ),
        .O(\rxd_aligned[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair404" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[3]_i_1__0 
       (.I0(\rxd_reg2_reg_n_0_[7] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[3] ),
        .O(\rxd_aligned[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair406" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[4]_i_1__0 
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[4] ),
        .O(\rxd_aligned[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair408" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[5]_i_1__0 
       (.I0(\rxd_reg1_reg_n_0_[1] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[5] ),
        .O(\rxd_aligned[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair407" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[6]_i_1__0 
       (.I0(\rxd_reg1_reg_n_0_[2] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[6] ),
        .O(\rxd_aligned[6]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair404" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[7]_i_1__0 
       (.I0(\rxd_reg1_reg_n_0_[3] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[7] ),
        .O(\rxd_aligned[7]_i_1__0_n_0 ));
  FDRE \rxd_aligned_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[0]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[1]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[2]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[3]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[4]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[4] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[5]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[5] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[6]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[6] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[7]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[7] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [0]),
        .Q(\rxd_reg1_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [1]),
        .Q(\rxd_reg1_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [2]),
        .Q(\rxd_reg1_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [3]),
        .Q(\rxd_reg1_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [4]),
        .Q(p_0_in[0]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [5]),
        .Q(p_0_in[1]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [6]),
        .Q(p_0_in[2]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg[7]_0 [7]),
        .Q(p_0_in[3]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[0] ),
        .Q(\rxd_reg2_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[1] ),
        .Q(\rxd_reg2_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[2] ),
        .Q(\rxd_reg2_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[3] ),
        .Q(\rxd_reg2_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[0]),
        .Q(\rxd_reg2_reg_n_0_[4] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[1]),
        .Q(\rxd_reg2_reg_n_0_[5] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[2]),
        .Q(\rxd_reg2_reg_n_0_[6] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[3]),
        .Q(\rxd_reg2_reg_n_0_[7] ),
        .R(reset_out));
  LUT6 #(
    .INIT(64'hFFDDFFCCC0C8C0CC)) 
    sfd_enable_i_1__0
       (.I0(sfd_enable_i_2__0_n_0),
        .I1(sfd_enable0),
        .I2(rx_er_aligned_reg_0),
        .I3(sfd_enable_i_4__0_n_0),
        .I4(sfd_enable_i_5__0_n_0),
        .I5(sfd_enable),
        .O(sfd_enable_i_1__0_n_0));
  LUT5 #(
    .INIT(32'h04000000)) 
    sfd_enable_i_2__0
       (.I0(p_0_in[3]),
        .I1(\rxd_reg1_reg[7]_0 [0]),
        .I2(\rxd_reg1_reg[7]_0 [1]),
        .I3(\rxd_reg1_reg[7]_0 [3]),
        .I4(\rxd_reg1_reg[7]_0 [2]),
        .O(sfd_enable_i_2__0_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    sfd_enable_i_3__0
       (.I0(gmii_rx_dv_ch1),
        .I1(rx_dv_reg1),
        .O(sfd_enable0));
  LUT4 #(
    .INIT(16'hDFFF)) 
    sfd_enable_i_4__0
       (.I0(p_0_in[0]),
        .I1(p_0_in[1]),
        .I2(rx_er_aligned_reg_0),
        .I3(p_0_in[2]),
        .O(sfd_enable_i_4__0_n_0));
  LUT5 #(
    .INIT(32'hFFFFDFFF)) 
    sfd_enable_i_5__0
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(\rxd_reg1_reg_n_0_[3] ),
        .I2(p_0_in[3]),
        .I3(\rxd_reg1_reg_n_0_[2] ),
        .I4(\rxd_reg1_reg_n_0_[1] ),
        .O(sfd_enable_i_5__0_n_0));
  FDRE sfd_enable_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sfd_enable_i_1__0_n_0),
        .Q(sfd_enable),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_rx_rate_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_rx_rate_adapt_78
   (gmii_rx_dv_out,
    gmii_rx_er_out,
    Q,
    reset_out,
    rx_er_aligned_reg_0,
    gmii_rx_dv_ch0,
    userclk2,
    gmii_rx_er_ch0,
    D);
  output gmii_rx_dv_out;
  output gmii_rx_er_out;
  output [7:0]Q;
  input reset_out;
  input rx_er_aligned_reg_0;
  input gmii_rx_dv_ch0;
  input userclk2;
  input gmii_rx_er_ch0;
  input [7:0]D;

  wire [7:0]D;
  wire [7:0]Q;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_out;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_out;
  wire muxsel;
  wire muxsel_i_1_n_0;
  wire [3:0]p_0_in;
  wire reset_out;
  wire rx_dv_aligned;
  wire rx_dv_aligned_i_1_n_0;
  wire rx_dv_reg1;
  wire rx_dv_reg2;
  wire rx_er_aligned;
  wire rx_er_aligned_0;
  wire rx_er_aligned_reg_0;
  wire rx_er_reg1;
  wire rx_er_reg2;
  wire [7:0]rxd_aligned;
  wire \rxd_aligned[0]_i_1_n_0 ;
  wire \rxd_aligned[1]_i_1_n_0 ;
  wire \rxd_aligned[2]_i_1_n_0 ;
  wire \rxd_aligned[3]_i_1_n_0 ;
  wire \rxd_aligned[4]_i_1_n_0 ;
  wire \rxd_aligned[5]_i_1_n_0 ;
  wire \rxd_aligned[6]_i_1_n_0 ;
  wire \rxd_aligned[7]_i_1_n_0 ;
  wire \rxd_reg1_reg_n_0_[0] ;
  wire \rxd_reg1_reg_n_0_[1] ;
  wire \rxd_reg1_reg_n_0_[2] ;
  wire \rxd_reg1_reg_n_0_[3] ;
  wire [7:0]rxd_reg2;
  wire sfd_enable;
  wire sfd_enable0;
  wire sfd_enable_i_1_n_0;
  wire sfd_enable_i_2_n_0;
  wire sfd_enable_i_4_n_0;
  wire sfd_enable_i_5_n_0;
  wire userclk2;

  FDRE gmii_rx_dv_out_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_dv_aligned),
        .Q(gmii_rx_dv_out),
        .R(reset_out));
  FDRE gmii_rx_er_out_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_er_aligned),
        .Q(gmii_rx_er_out),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rxd_aligned[0]),
        .Q(Q[0]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rxd_aligned[1]),
        .Q(Q[1]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rxd_aligned[2]),
        .Q(Q[2]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rxd_aligned[3]),
        .Q(Q[3]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rxd_aligned[4]),
        .Q(Q[4]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rxd_aligned[5]),
        .Q(Q[5]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rxd_aligned[6]),
        .Q(Q[6]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rxd_aligned[7]),
        .Q(Q[7]),
        .R(reset_out));
  LUT6 #(
    .INIT(64'h00000000CCCCA8CC)) 
    muxsel_i_1
       (.I0(sfd_enable_i_5_n_0),
        .I1(muxsel),
        .I2(sfd_enable_i_2_n_0),
        .I3(sfd_enable),
        .I4(sfd_enable_i_4_n_0),
        .I5(reset_out),
        .O(muxsel_i_1_n_0));
  FDRE muxsel_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(muxsel_i_1_n_0),
        .Q(muxsel),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair398" *) 
  LUT3 #(
    .INIT(8'hB0)) 
    rx_dv_aligned_i_1
       (.I0(rx_dv_reg1),
        .I1(muxsel),
        .I2(rx_dv_reg2),
        .O(rx_dv_aligned_i_1_n_0));
  FDRE rx_dv_aligned_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_dv_aligned_i_1_n_0),
        .Q(rx_dv_aligned),
        .R(reset_out));
  FDRE rx_dv_reg1_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(gmii_rx_dv_ch0),
        .Q(rx_dv_reg1),
        .R(reset_out));
  FDRE rx_dv_reg2_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_dv_reg1),
        .Q(rx_dv_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair398" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    rx_er_aligned_i_1
       (.I0(muxsel),
        .I1(rx_er_reg1),
        .I2(rx_er_reg2),
        .O(rx_er_aligned_0));
  FDRE rx_er_aligned_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_er_aligned_0),
        .Q(rx_er_aligned),
        .R(reset_out));
  FDRE rx_er_reg1_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(gmii_rx_er_ch0),
        .Q(rx_er_reg1),
        .R(reset_out));
  FDRE rx_er_reg2_reg
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(rx_er_reg1),
        .Q(rx_er_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair399" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[0]_i_1 
       (.I0(rxd_reg2[4]),
        .I1(muxsel),
        .I2(rxd_reg2[0]),
        .O(\rxd_aligned[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair401" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[1]_i_1 
       (.I0(rxd_reg2[5]),
        .I1(muxsel),
        .I2(rxd_reg2[1]),
        .O(\rxd_aligned[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair400" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[2]_i_1 
       (.I0(rxd_reg2[6]),
        .I1(muxsel),
        .I2(rxd_reg2[2]),
        .O(\rxd_aligned[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair397" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[3]_i_1 
       (.I0(rxd_reg2[7]),
        .I1(muxsel),
        .I2(rxd_reg2[3]),
        .O(\rxd_aligned[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair399" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[4]_i_1 
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(muxsel),
        .I2(rxd_reg2[4]),
        .O(\rxd_aligned[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair401" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[5]_i_1 
       (.I0(\rxd_reg1_reg_n_0_[1] ),
        .I1(muxsel),
        .I2(rxd_reg2[5]),
        .O(\rxd_aligned[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair400" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[6]_i_1 
       (.I0(\rxd_reg1_reg_n_0_[2] ),
        .I1(muxsel),
        .I2(rxd_reg2[6]),
        .O(\rxd_aligned[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair397" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[7]_i_1 
       (.I0(\rxd_reg1_reg_n_0_[3] ),
        .I1(muxsel),
        .I2(rxd_reg2[7]),
        .O(\rxd_aligned[7]_i_1_n_0 ));
  FDRE \rxd_aligned_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[0]_i_1_n_0 ),
        .Q(rxd_aligned[0]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[1]_i_1_n_0 ),
        .Q(rxd_aligned[1]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[2]_i_1_n_0 ),
        .Q(rxd_aligned[2]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[3]_i_1_n_0 ),
        .Q(rxd_aligned[3]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[4]_i_1_n_0 ),
        .Q(rxd_aligned[4]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[5]_i_1_n_0 ),
        .Q(rxd_aligned[5]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[6]_i_1_n_0 ),
        .Q(rxd_aligned[6]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_aligned[7]_i_1_n_0 ),
        .Q(rxd_aligned[7]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(D[0]),
        .Q(\rxd_reg1_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(D[1]),
        .Q(\rxd_reg1_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(D[2]),
        .Q(\rxd_reg1_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(D[3]),
        .Q(\rxd_reg1_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(D[4]),
        .Q(p_0_in[0]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(D[5]),
        .Q(p_0_in[1]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(D[6]),
        .Q(p_0_in[2]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(D[7]),
        .Q(p_0_in[3]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[0] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[0] ),
        .Q(rxd_reg2[0]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[1] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[1] ),
        .Q(rxd_reg2[1]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[2] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[2] ),
        .Q(rxd_reg2[2]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[3] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(\rxd_reg1_reg_n_0_[3] ),
        .Q(rxd_reg2[3]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[4] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[0]),
        .Q(rxd_reg2[4]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[5] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[1]),
        .Q(rxd_reg2[5]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[6] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[2]),
        .Q(rxd_reg2[6]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[7] 
       (.C(userclk2),
        .CE(rx_er_aligned_reg_0),
        .D(p_0_in[3]),
        .Q(rxd_reg2[7]),
        .R(reset_out));
  LUT6 #(
    .INIT(64'hFFDDFFCCC0C8C0CC)) 
    sfd_enable_i_1
       (.I0(sfd_enable_i_2_n_0),
        .I1(sfd_enable0),
        .I2(rx_er_aligned_reg_0),
        .I3(sfd_enable_i_4_n_0),
        .I4(sfd_enable_i_5_n_0),
        .I5(sfd_enable),
        .O(sfd_enable_i_1_n_0));
  LUT5 #(
    .INIT(32'h04000000)) 
    sfd_enable_i_2
       (.I0(p_0_in[3]),
        .I1(D[0]),
        .I2(D[1]),
        .I3(D[3]),
        .I4(D[2]),
        .O(sfd_enable_i_2_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    sfd_enable_i_3
       (.I0(gmii_rx_dv_ch0),
        .I1(rx_dv_reg1),
        .O(sfd_enable0));
  LUT4 #(
    .INIT(16'hDFFF)) 
    sfd_enable_i_4
       (.I0(p_0_in[0]),
        .I1(p_0_in[1]),
        .I2(rx_er_aligned_reg_0),
        .I3(p_0_in[2]),
        .O(sfd_enable_i_4_n_0));
  LUT5 #(
    .INIT(32'hFFFFDFFF)) 
    sfd_enable_i_5
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(\rxd_reg1_reg_n_0_[3] ),
        .I2(p_0_in[3]),
        .I3(\rxd_reg1_reg_n_0_[2] ),
        .I4(\rxd_reg1_reg_n_0_[1] ),
        .O(sfd_enable_i_5_n_0));
  FDRE sfd_enable_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sfd_enable_i_1_n_0),
        .Q(sfd_enable),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sgmii_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt
   (E,
    gmii_tx_en_ch0,
    gmii_tx_er_ch0,
    Q,
    reset_out,
    userclk2,
    gmii_tx_en_ch0_int1,
    gmii_tx_er_ch0_int1,
    speed_is_10_100_ch0,
    speed_is_100_ch0,
    \gmii_txd_out_reg[7] );
  output [0:0]E;
  output gmii_tx_en_ch0;
  output gmii_tx_er_ch0;
  output [7:0]Q;
  input reset_out;
  input userclk2;
  input gmii_tx_en_ch0_int1;
  input gmii_tx_er_ch0_int1;
  input speed_is_10_100_ch0;
  input speed_is_100_ch0;
  input [7:0]\gmii_txd_out_reg[7] ;

  wire [0:0]E;
  wire [7:0]Q;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch0_int1;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch0_int1;
  wire [7:0]\gmii_txd_out_reg[7] ;
  wire reset_out;
  wire speed_is_100_ch0;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch0;
  wire speed_is_10_100_resync;
  wire userclk2;

  quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_49 clock_generation
       (.E(E),
        .data_out(speed_is_100_resync),
        .reset_out(reset_out),
        .sgmii_clk_en_reg_0(speed_is_10_100_resync),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_50 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch0(speed_is_100_ch0),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_51 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_tx_rate_adapt_52 transmitter
       (.E(E),
        .Q(Q),
        .gmii_tx_en_ch0(gmii_tx_en_ch0),
        .gmii_tx_en_ch0_int1(gmii_tx_en_ch0_int1),
        .gmii_tx_er_ch0(gmii_tx_er_ch0),
        .gmii_tx_er_ch0_int1(gmii_tx_er_ch0_int1),
        .\gmii_txd_out_reg[7]_0 (\gmii_txd_out_reg[7] ),
        .reset_out(reset_out),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sgmii_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_32
   (E,
    gmii_tx_en_ch1,
    gmii_tx_er_ch1,
    \gmii_txd_out_reg[7] ,
    reset_out,
    userclk2,
    gmii_tx_en_ch1_int1,
    gmii_tx_er_ch1_int1,
    speed_is_10_100_ch1,
    speed_is_100_ch1,
    \gmii_txd_out_reg[7]_0 );
  output [0:0]E;
  output gmii_tx_en_ch1;
  output gmii_tx_er_ch1;
  output [7:0]\gmii_txd_out_reg[7] ;
  input reset_out;
  input userclk2;
  input gmii_tx_en_ch1_int1;
  input gmii_tx_er_ch1_int1;
  input speed_is_10_100_ch1;
  input speed_is_100_ch1;
  input [7:0]\gmii_txd_out_reg[7]_0 ;

  wire [0:0]E;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch1_int1;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch1_int1;
  wire [7:0]\gmii_txd_out_reg[7] ;
  wire [7:0]\gmii_txd_out_reg[7]_0 ;
  wire reset_out;
  wire speed_is_100_ch1;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch1;
  wire speed_is_10_100_resync;
  wire userclk2;

  quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_43 clock_generation
       (.E(E),
        .data_out(speed_is_100_resync),
        .reset_out(reset_out),
        .sgmii_clk_en_reg_0(speed_is_10_100_resync),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_44 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch1(speed_is_100_ch1),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_45 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_tx_rate_adapt_46 transmitter
       (.E(E),
        .gmii_tx_en_ch1(gmii_tx_en_ch1),
        .gmii_tx_en_ch1_int1(gmii_tx_en_ch1_int1),
        .gmii_tx_er_ch1(gmii_tx_er_ch1),
        .gmii_tx_er_ch1_int1(gmii_tx_er_ch1_int1),
        .\gmii_txd_out_reg[7]_0 (\gmii_txd_out_reg[7] ),
        .\gmii_txd_out_reg[7]_1 (\gmii_txd_out_reg[7]_0 ),
        .reset_out(reset_out),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sgmii_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_33
   (E,
    gmii_tx_en_ch2,
    gmii_tx_er_ch2,
    \gmii_txd_out_reg[7] ,
    reset_out,
    userclk2,
    gmii_tx_en_ch2_int1,
    gmii_tx_er_ch2_int1,
    speed_is_10_100_ch2,
    speed_is_100_ch2,
    \gmii_txd_out_reg[7]_0 );
  output [0:0]E;
  output gmii_tx_en_ch2;
  output gmii_tx_er_ch2;
  output [7:0]\gmii_txd_out_reg[7] ;
  input reset_out;
  input userclk2;
  input gmii_tx_en_ch2_int1;
  input gmii_tx_er_ch2_int1;
  input speed_is_10_100_ch2;
  input speed_is_100_ch2;
  input [7:0]\gmii_txd_out_reg[7]_0 ;

  wire [0:0]E;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch2_int1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch2_int1;
  wire [7:0]\gmii_txd_out_reg[7] ;
  wire [7:0]\gmii_txd_out_reg[7]_0 ;
  wire reset_out;
  wire speed_is_100_ch2;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch2;
  wire speed_is_10_100_resync;
  wire userclk2;

  quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_37 clock_generation
       (.E(E),
        .data_out(speed_is_100_resync),
        .reset_out(reset_out),
        .sgmii_clk_en_reg_0(speed_is_10_100_resync),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_38 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch2(speed_is_100_ch2),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_39 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_tx_rate_adapt_40 transmitter
       (.E(E),
        .gmii_tx_en_ch2(gmii_tx_en_ch2),
        .gmii_tx_en_ch2_int1(gmii_tx_en_ch2_int1),
        .gmii_tx_er_ch2(gmii_tx_er_ch2),
        .gmii_tx_er_ch2_int1(gmii_tx_er_ch2_int1),
        .\gmii_txd_out_reg[7]_0 (\gmii_txd_out_reg[7] ),
        .\gmii_txd_out_reg[7]_1 (\gmii_txd_out_reg[7]_0 ),
        .reset_out(reset_out),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sgmii_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_34
   (E,
    gmii_tx_en_ch3,
    gmii_tx_er_ch3,
    \gmii_txd_out_reg[7] ,
    reset_out,
    userclk2,
    gmii_tx_en_ch3_int1,
    gmii_tx_er_ch3_int1,
    speed_is_10_100_ch3,
    speed_is_100_ch3,
    \gmii_txd_out_reg[7]_0 );
  output [0:0]E;
  output gmii_tx_en_ch3;
  output gmii_tx_er_ch3;
  output [7:0]\gmii_txd_out_reg[7] ;
  input reset_out;
  input userclk2;
  input gmii_tx_en_ch3_int1;
  input gmii_tx_er_ch3_int1;
  input speed_is_10_100_ch3;
  input speed_is_100_ch3;
  input [7:0]\gmii_txd_out_reg[7]_0 ;

  wire [0:0]E;
  wire gmii_tx_en_ch3;
  wire gmii_tx_en_ch3_int1;
  wire gmii_tx_er_ch3;
  wire gmii_tx_er_ch3_int1;
  wire [7:0]\gmii_txd_out_reg[7] ;
  wire [7:0]\gmii_txd_out_reg[7]_0 ;
  wire reset_out;
  wire speed_is_100_ch3;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch3;
  wire speed_is_10_100_resync;
  wire userclk2;

  quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen clock_generation
       (.E(E),
        .data_out(speed_is_100_resync),
        .reset_out(reset_out),
        .sgmii_clk_en_reg_0(speed_is_10_100_resync),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_35 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch3(speed_is_100_ch3),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_36 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_tx_rate_adapt transmitter
       (.E(E),
        .gmii_tx_en_ch3(gmii_tx_en_ch3),
        .gmii_tx_en_ch3_int1(gmii_tx_en_ch3_int1),
        .gmii_tx_er_ch3(gmii_tx_er_ch3),
        .gmii_tx_er_ch3_int1(gmii_tx_er_ch3_int1),
        .\gmii_txd_out_reg[7]_0 (\gmii_txd_out_reg[7] ),
        .\gmii_txd_out_reg[7]_1 (\gmii_txd_out_reg[7]_0 ),
        .reset_out(reset_out),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sgmii_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_56
   (gmii_rx_dv_out,
    gmii_rx_er_out,
    Q,
    reset_out,
    userclk2,
    gmii_rx_dv_ch0,
    gmii_rx_er_ch0,
    D,
    speed_is_10_100_ch0,
    speed_is_100_ch0);
  output gmii_rx_dv_out;
  output gmii_rx_er_out;
  output [7:0]Q;
  input reset_out;
  input userclk2;
  input gmii_rx_dv_ch0;
  input gmii_rx_er_ch0;
  input [7:0]D;
  input speed_is_10_100_ch0;
  input speed_is_100_ch0;

  wire [7:0]D;
  wire [7:0]Q;
  wire clock_generation_n_0;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_out;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_out;
  wire reset_out;
  wire speed_is_100_ch0;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch0;
  wire speed_is_10_100_resync;
  wire userclk2;

  quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_77 clock_generation
       (.data_out(speed_is_100_resync),
        .reset_out(reset_out),
        .sgmii_clk_en_reg_0(clock_generation_n_0),
        .sgmii_clk_en_reg_1(speed_is_10_100_resync),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_rx_rate_adapt_78 receiver
       (.D(D),
        .Q(Q),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0),
        .gmii_rx_dv_out(gmii_rx_dv_out),
        .gmii_rx_er_ch0(gmii_rx_er_ch0),
        .gmii_rx_er_out(gmii_rx_er_out),
        .reset_out(reset_out),
        .rx_er_aligned_reg_0(clock_generation_n_0),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_79 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch0(speed_is_100_ch0),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_80 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sgmii_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_57
   (gmii_rx_dv_out_reg,
    gmii_rx_er_out_reg,
    \gmii_rxd_out_reg[7] ,
    reset_out,
    userclk2,
    gmii_rx_dv_ch1,
    gmii_rx_er_ch1,
    \rxd_reg1_reg[7] ,
    speed_is_10_100_ch1,
    speed_is_100_ch1);
  output gmii_rx_dv_out_reg;
  output gmii_rx_er_out_reg;
  output [7:0]\gmii_rxd_out_reg[7] ;
  input reset_out;
  input userclk2;
  input gmii_rx_dv_ch1;
  input gmii_rx_er_ch1;
  input [7:0]\rxd_reg1_reg[7] ;
  input speed_is_10_100_ch1;
  input speed_is_100_ch1;

  wire clock_generation_n_0;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_out_reg;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_out_reg;
  wire [7:0]\gmii_rxd_out_reg[7] ;
  wire reset_out;
  wire [7:0]\rxd_reg1_reg[7] ;
  wire speed_is_100_ch1;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch1;
  wire speed_is_10_100_resync;
  wire userclk2;

  quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_71 clock_generation
       (.data_out(speed_is_100_resync),
        .reset_out(reset_out),
        .sgmii_clk_en_reg_0(clock_generation_n_0),
        .sgmii_clk_en_reg_1(speed_is_10_100_resync),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_rx_rate_adapt_72 receiver
       (.gmii_rx_dv_ch1(gmii_rx_dv_ch1),
        .gmii_rx_dv_out_reg_0(gmii_rx_dv_out_reg),
        .gmii_rx_er_ch1(gmii_rx_er_ch1),
        .gmii_rx_er_out_reg_0(gmii_rx_er_out_reg),
        .\gmii_rxd_out_reg[7]_0 (\gmii_rxd_out_reg[7] ),
        .reset_out(reset_out),
        .rx_er_aligned_reg_0(clock_generation_n_0),
        .\rxd_reg1_reg[7]_0 (\rxd_reg1_reg[7] ),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_73 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch1(speed_is_100_ch1),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_74 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sgmii_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_58
   (gmii_rx_dv_out_reg,
    gmii_rx_er_out_reg,
    \gmii_rxd_out_reg[7] ,
    reset_out,
    userclk2,
    gmii_rx_dv_ch2,
    gmii_rx_er_ch2,
    \rxd_reg1_reg[7] ,
    speed_is_10_100_ch2,
    speed_is_100_ch2);
  output gmii_rx_dv_out_reg;
  output gmii_rx_er_out_reg;
  output [7:0]\gmii_rxd_out_reg[7] ;
  input reset_out;
  input userclk2;
  input gmii_rx_dv_ch2;
  input gmii_rx_er_ch2;
  input [7:0]\rxd_reg1_reg[7] ;
  input speed_is_10_100_ch2;
  input speed_is_100_ch2;

  wire clock_generation_n_0;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_out_reg;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_out_reg;
  wire [7:0]\gmii_rxd_out_reg[7] ;
  wire reset_out;
  wire [7:0]\rxd_reg1_reg[7] ;
  wire speed_is_100_ch2;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch2;
  wire speed_is_10_100_resync;
  wire userclk2;

  quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_65 clock_generation
       (.data_out(speed_is_100_resync),
        .reset_out(reset_out),
        .sgmii_clk_en_reg_0(clock_generation_n_0),
        .sgmii_clk_en_reg_1(speed_is_10_100_resync),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_rx_rate_adapt_66 receiver
       (.gmii_rx_dv_ch2(gmii_rx_dv_ch2),
        .gmii_rx_dv_out_reg_0(gmii_rx_dv_out_reg),
        .gmii_rx_er_ch2(gmii_rx_er_ch2),
        .gmii_rx_er_out_reg_0(gmii_rx_er_out_reg),
        .\gmii_rxd_out_reg[7]_0 (\gmii_rxd_out_reg[7] ),
        .reset_out(reset_out),
        .rx_er_aligned_reg_0(clock_generation_n_0),
        .\rxd_reg1_reg[7]_0 (\rxd_reg1_reg[7] ),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_67 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch2(speed_is_100_ch2),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_68 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sgmii_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sgmii_adapt_59
   (gmii_rx_dv_out_reg,
    gmii_rx_er_out_reg,
    \gmii_rxd_out_reg[7] ,
    reset_out,
    userclk2,
    gmii_rx_dv_ch3,
    gmii_rx_er_ch3,
    \rxd_reg1_reg[7] ,
    speed_is_10_100_ch3,
    speed_is_100_ch3);
  output gmii_rx_dv_out_reg;
  output gmii_rx_er_out_reg;
  output [7:0]\gmii_rxd_out_reg[7] ;
  input reset_out;
  input userclk2;
  input gmii_rx_dv_ch3;
  input gmii_rx_er_ch3;
  input [7:0]\rxd_reg1_reg[7] ;
  input speed_is_10_100_ch3;
  input speed_is_100_ch3;

  wire clock_generation_n_0;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_dv_out_reg;
  wire gmii_rx_er_ch3;
  wire gmii_rx_er_out_reg;
  wire [7:0]\gmii_rxd_out_reg[7] ;
  wire reset_out;
  wire [7:0]\rxd_reg1_reg[7] ;
  wire speed_is_100_ch3;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch3;
  wire speed_is_10_100_resync;
  wire userclk2;

  quadsgmii_0_TEST_quadsgmii_0_TEST_clk_gen_60 clock_generation
       (.data_out(speed_is_100_resync),
        .reset_out(reset_out),
        .sgmii_clk_en_reg_0(clock_generation_n_0),
        .sgmii_clk_en_reg_1(speed_is_10_100_resync),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_rx_rate_adapt receiver
       (.gmii_rx_dv_ch3(gmii_rx_dv_ch3),
        .gmii_rx_dv_out_reg_0(gmii_rx_dv_out_reg),
        .gmii_rx_er_ch3(gmii_rx_er_ch3),
        .gmii_rx_er_out_reg_0(gmii_rx_er_out_reg),
        .\gmii_rxd_out_reg[7]_0 (\gmii_rxd_out_reg[7] ),
        .reset_out(reset_out),
        .rx_er_aligned_reg_0(clock_generation_n_0),
        .\rxd_reg1_reg[7]_0 (\rxd_reg1_reg[7] ),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_61 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch3(speed_is_100_ch3),
        .userclk2(userclk2));
  quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_62 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block
   (data_out,
    data_in,
    userclk2);
  output data_out;
  input data_in;
  input userclk2;

  wire data_in;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(data_in),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_1
   (reset_done,
    data_out,
    data_in,
    userclk2);
  output reset_done;
  input data_out;
  input data_in;
  input userclk2;

  wire data_in;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire gt0_txresetdone_out_sync;
  wire reset_done;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(data_in),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(gt0_txresetdone_out_sync),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h8)) 
    quadsgmii_0_TEST_core_i_1
       (.I0(gt0_txresetdone_out_sync),
        .I1(data_out),
        .O(reset_done));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_35
   (data_out,
    speed_is_100_ch3,
    userclk2);
  output data_out;
  input speed_is_100_ch3;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch3;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch3),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_36
   (data_out,
    speed_is_10_100_ch3,
    userclk2);
  output data_out;
  input speed_is_10_100_ch3;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch3;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch3),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_38
   (data_out,
    speed_is_100_ch2,
    userclk2);
  output data_out;
  input speed_is_100_ch2;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch2;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch2),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_39
   (data_out,
    speed_is_10_100_ch2,
    userclk2);
  output data_out;
  input speed_is_10_100_ch2;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch2;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch2),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_44
   (data_out,
    speed_is_100_ch1,
    userclk2);
  output data_out;
  input speed_is_100_ch1;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch1;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch1),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_45
   (data_out,
    speed_is_10_100_ch1,
    userclk2);
  output data_out;
  input speed_is_10_100_ch1;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch1;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch1),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_50
   (data_out,
    speed_is_100_ch0,
    userclk2);
  output data_out;
  input speed_is_100_ch0;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch0;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_51
   (data_out,
    speed_is_10_100_ch0,
    userclk2);
  output data_out;
  input speed_is_10_100_ch0;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch0;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_61
   (data_out,
    speed_is_100_ch3,
    userclk2);
  output data_out;
  input speed_is_100_ch3;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch3;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch3),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_62
   (data_out,
    speed_is_10_100_ch3,
    userclk2);
  output data_out;
  input speed_is_10_100_ch3;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch3;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch3),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_67
   (data_out,
    speed_is_100_ch2,
    userclk2);
  output data_out;
  input speed_is_100_ch2;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch2;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch2),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_68
   (data_out,
    speed_is_10_100_ch2,
    userclk2);
  output data_out;
  input speed_is_10_100_ch2;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch2;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch2),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_73
   (data_out,
    speed_is_100_ch1,
    userclk2);
  output data_out;
  input speed_is_100_ch1;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch1;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch1),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_74
   (data_out,
    speed_is_10_100_ch1,
    userclk2);
  output data_out;
  input speed_is_10_100_ch1;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch1;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch1),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_79
   (data_out,
    speed_is_100_ch0,
    userclk2);
  output data_out;
  input speed_is_100_ch0;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch0;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_sync_block" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_sync_block_80
   (data_out,
    speed_is_10_100_ch0,
    userclk2);
  output data_out;
  input speed_is_10_100_ch0;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch0;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_transceiver" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_transceiver
   (gtwiz_userdata_rx_out,
    cplllock_out,
    txn,
    txp,
    gt0_powergood_out,
    rxctrl0_out,
    rxctrl1_out,
    rxctrl2_out,
    rxctrl3_out,
    rxoutclk,
    rxresetdone_out,
    txoutclk,
    txresetdone_out,
    txbuferr,
    resetdone,
    independent_clock_bufgdiv4,
    pma_reset,
    txdata,
    rxn,
    rxp,
    gtrefclk,
    powerdown,
    rxuserclk,
    rxuserclk2,
    txcharisk,
    userclk,
    userclk2,
    enablealign,
    mgt_tx_reset,
    mgt_rx_reset);
  output [31:0]gtwiz_userdata_rx_out;
  output [0:0]cplllock_out;
  output txn;
  output txp;
  output gt0_powergood_out;
  output [3:0]rxctrl0_out;
  output [3:0]rxctrl1_out;
  output [3:0]rxctrl2_out;
  output [3:0]rxctrl3_out;
  output rxoutclk;
  output [0:0]rxresetdone_out;
  output txoutclk;
  output [0:0]txresetdone_out;
  output txbuferr;
  output resetdone;
  input independent_clock_bufgdiv4;
  input pma_reset;
  input [31:0]txdata;
  input rxn;
  input rxp;
  input gtrefclk;
  input powerdown;
  input rxuserclk;
  input rxuserclk2;
  input [3:0]txcharisk;
  input userclk;
  input userclk2;
  input enablealign;
  input mgt_tx_reset;
  input mgt_rx_reset;

  wire [0:0]cplllock_out;
  wire enablealign;
  wire encommaalign_rec;
  wire gt0_powergood_out;
  wire gtrefclk;
  wire gtwiz_reset_rx_datapath_in;
  wire gtwiz_reset_rx_done_out;
  wire gtwiz_reset_tx_datapath_in;
  wire gtwiz_reset_tx_done_out;
  wire gtwiz_userclk_rx_active_in;
  wire [31:0]gtwiz_userdata_rx_out;
  wire independent_clock_bufgdiv4;
  wire mgt_rx_reset;
  wire mgt_tx_reset;
  wire p_0_in;
  wire pma_reset;
  wire powerdown;
  wire quadsgmii_0_TEST_gt_i_n_127;
  wire quadsgmii_0_TEST_gt_i_n_128;
  wire quadsgmii_0_TEST_gt_i_n_129;
  wire quadsgmii_0_TEST_gt_i_n_130;
  wire quadsgmii_0_TEST_gt_i_n_131;
  wire quadsgmii_0_TEST_gt_i_n_132;
  wire quadsgmii_0_TEST_gt_i_n_133;
  wire quadsgmii_0_TEST_gt_i_n_134;
  wire quadsgmii_0_TEST_gt_i_n_136;
  wire quadsgmii_0_TEST_gt_i_n_137;
  wire quadsgmii_0_TEST_gt_i_n_138;
  wire quadsgmii_0_TEST_gt_i_n_140;
  wire quadsgmii_0_TEST_gt_i_n_141;
  wire quadsgmii_0_TEST_gt_i_n_36;
  wire quadsgmii_0_TEST_gt_i_n_37;
  wire quadsgmii_0_TEST_gt_i_n_38;
  wire quadsgmii_0_TEST_gt_i_n_39;
  wire quadsgmii_0_TEST_gt_i_n_40;
  wire quadsgmii_0_TEST_gt_i_n_41;
  wire quadsgmii_0_TEST_gt_i_n_42;
  wire quadsgmii_0_TEST_gt_i_n_43;
  wire quadsgmii_0_TEST_gt_i_n_44;
  wire quadsgmii_0_TEST_gt_i_n_45;
  wire quadsgmii_0_TEST_gt_i_n_46;
  wire quadsgmii_0_TEST_gt_i_n_47;
  wire quadsgmii_0_TEST_gt_i_n_48;
  wire quadsgmii_0_TEST_gt_i_n_49;
  wire quadsgmii_0_TEST_gt_i_n_50;
  wire quadsgmii_0_TEST_gt_i_n_51;
  wire quadsgmii_0_TEST_gt_i_n_52;
  wire quadsgmii_0_TEST_gt_i_n_53;
  wire quadsgmii_0_TEST_gt_i_n_54;
  wire quadsgmii_0_TEST_gt_i_n_55;
  wire quadsgmii_0_TEST_gt_i_n_56;
  wire quadsgmii_0_TEST_gt_i_n_57;
  wire quadsgmii_0_TEST_gt_i_n_58;
  wire quadsgmii_0_TEST_gt_i_n_59;
  wire quadsgmii_0_TEST_gt_i_n_60;
  wire quadsgmii_0_TEST_gt_i_n_61;
  wire quadsgmii_0_TEST_gt_i_n_62;
  wire quadsgmii_0_TEST_gt_i_n_63;
  wire quadsgmii_0_TEST_gt_i_n_64;
  wire quadsgmii_0_TEST_gt_i_n_65;
  wire quadsgmii_0_TEST_gt_i_n_66;
  wire quadsgmii_0_TEST_gt_i_n_67;
  wire quadsgmii_0_TEST_gt_i_n_68;
  wire quadsgmii_0_TEST_gt_i_n_69;
  wire quadsgmii_0_TEST_gt_i_n_73;
  wire quadsgmii_0_TEST_gt_i_n_74;
  wire quadsgmii_0_TEST_gt_i_n_75;
  wire quadsgmii_0_TEST_gt_i_n_76;
  wire quadsgmii_0_TEST_gt_i_n_77;
  wire quadsgmii_0_TEST_gt_i_n_78;
  wire resetdone;
  wire [3:0]rxctrl0_out;
  wire [3:0]rxctrl1_out;
  wire [3:0]rxctrl2_out;
  wire [3:0]rxctrl3_out;
  wire rxn;
  wire rxoutclk;
  wire rxp;
  wire [0:0]rxresetdone_out;
  wire rxuserclk;
  wire rxuserclk2;
  wire txbuferr;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire txn;
  wire txoutclk;
  wire txp;
  wire [0:0]txresetdone_out;
  wire userclk;
  wire userclk2;
  wire [15:4]NLW_quadsgmii_0_TEST_gt_i_rxctrl0_out_UNCONNECTED;
  wire [15:4]NLW_quadsgmii_0_TEST_gt_i_rxctrl1_out_UNCONNECTED;
  wire [7:4]NLW_quadsgmii_0_TEST_gt_i_rxctrl2_out_UNCONNECTED;
  wire [7:4]NLW_quadsgmii_0_TEST_gt_i_rxctrl3_out_UNCONNECTED;
  wire [0:0]NLW_quadsgmii_0_TEST_gt_i_txpmaresetdone_out_UNCONNECTED;

  (* CHECK_LICENSE_TYPE = "quadsgmii_0_TEST_gt,quadsgmii_0_TEST_gt_gtwizard_top,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "quadsgmii_0_TEST_gt_gtwizard_top,Vivado 2019.1" *) 
  quadsgmii_0_TEST_quadsgmii_0_TEST_gt quadsgmii_0_TEST_gt_i
       (.cplllock_out(cplllock_out),
        .dmonitorout_out({quadsgmii_0_TEST_gt_i_n_36,quadsgmii_0_TEST_gt_i_n_37,quadsgmii_0_TEST_gt_i_n_38,quadsgmii_0_TEST_gt_i_n_39,quadsgmii_0_TEST_gt_i_n_40,quadsgmii_0_TEST_gt_i_n_41,quadsgmii_0_TEST_gt_i_n_42,quadsgmii_0_TEST_gt_i_n_43,quadsgmii_0_TEST_gt_i_n_44,quadsgmii_0_TEST_gt_i_n_45,quadsgmii_0_TEST_gt_i_n_46,quadsgmii_0_TEST_gt_i_n_47,quadsgmii_0_TEST_gt_i_n_48,quadsgmii_0_TEST_gt_i_n_49,quadsgmii_0_TEST_gt_i_n_50,quadsgmii_0_TEST_gt_i_n_51}),
        .drpaddr_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .drpclk_in(independent_clock_bufgdiv4),
        .drpdi_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .drpdo_out({quadsgmii_0_TEST_gt_i_n_52,quadsgmii_0_TEST_gt_i_n_53,quadsgmii_0_TEST_gt_i_n_54,quadsgmii_0_TEST_gt_i_n_55,quadsgmii_0_TEST_gt_i_n_56,quadsgmii_0_TEST_gt_i_n_57,quadsgmii_0_TEST_gt_i_n_58,quadsgmii_0_TEST_gt_i_n_59,quadsgmii_0_TEST_gt_i_n_60,quadsgmii_0_TEST_gt_i_n_61,quadsgmii_0_TEST_gt_i_n_62,quadsgmii_0_TEST_gt_i_n_63,quadsgmii_0_TEST_gt_i_n_64,quadsgmii_0_TEST_gt_i_n_65,quadsgmii_0_TEST_gt_i_n_66,quadsgmii_0_TEST_gt_i_n_67}),
        .drpen_in(1'b0),
        .drprdy_out(quadsgmii_0_TEST_gt_i_n_68),
        .drpwe_in(1'b0),
        .eyescandataerror_out(quadsgmii_0_TEST_gt_i_n_69),
        .eyescanreset_in(1'b0),
        .eyescantrigger_in(1'b0),
        .gthrxn_in(rxn),
        .gthrxp_in(rxp),
        .gthtxn_out(txn),
        .gthtxp_out(txp),
        .gtpowergood_out(gt0_powergood_out),
        .gtrefclk0_in(gtrefclk),
        .gtwiz_reset_all_in(pma_reset),
        .gtwiz_reset_clk_freerun_in(independent_clock_bufgdiv4),
        .gtwiz_reset_rx_cdr_stable_out(gtwiz_userclk_rx_active_in),
        .gtwiz_reset_rx_datapath_in(gtwiz_reset_rx_datapath_in),
        .gtwiz_reset_rx_done_out(gtwiz_reset_rx_done_out),
        .gtwiz_reset_rx_pll_and_datapath_in(1'b0),
        .gtwiz_reset_tx_datapath_in(gtwiz_reset_tx_datapath_in),
        .gtwiz_reset_tx_done_out(gtwiz_reset_tx_done_out),
        .gtwiz_reset_tx_pll_and_datapath_in(1'b0),
        .gtwiz_userclk_rx_active_in(gtwiz_userclk_rx_active_in),
        .gtwiz_userclk_tx_active_in(1'b1),
        .gtwiz_userclk_tx_reset_in(1'b0),
        .gtwiz_userdata_rx_out(gtwiz_userdata_rx_out),
        .gtwiz_userdata_tx_in(txdata),
        .loopback_in({1'b0,1'b0,1'b0}),
        .pcsrsvdin_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rx8b10ben_in(1'b1),
        .rxbufreset_in(1'b0),
        .rxbufstatus_out({quadsgmii_0_TEST_gt_i_n_73,quadsgmii_0_TEST_gt_i_n_74,quadsgmii_0_TEST_gt_i_n_75}),
        .rxbyteisaligned_out(quadsgmii_0_TEST_gt_i_n_76),
        .rxbyterealign_out(quadsgmii_0_TEST_gt_i_n_77),
        .rxcdrhold_in(1'b0),
        .rxcommadet_out(quadsgmii_0_TEST_gt_i_n_78),
        .rxcommadeten_in(1'b1),
        .rxctrl0_out({NLW_quadsgmii_0_TEST_gt_i_rxctrl0_out_UNCONNECTED[15:4],rxctrl0_out}),
        .rxctrl1_out({NLW_quadsgmii_0_TEST_gt_i_rxctrl1_out_UNCONNECTED[15:4],rxctrl1_out}),
        .rxctrl2_out({NLW_quadsgmii_0_TEST_gt_i_rxctrl2_out_UNCONNECTED[7:4],rxctrl2_out}),
        .rxctrl3_out({NLW_quadsgmii_0_TEST_gt_i_rxctrl3_out_UNCONNECTED[7:4],rxctrl3_out}),
        .rxdfeagcovrden_in(1'b0),
        .rxdfelpmreset_in(1'b0),
        .rxlpmen_in(1'b1),
        .rxmcommaalignen_in(encommaalign_rec),
        .rxmonitorout_out({quadsgmii_0_TEST_gt_i_n_127,quadsgmii_0_TEST_gt_i_n_128,quadsgmii_0_TEST_gt_i_n_129,quadsgmii_0_TEST_gt_i_n_130,quadsgmii_0_TEST_gt_i_n_131,quadsgmii_0_TEST_gt_i_n_132,quadsgmii_0_TEST_gt_i_n_133,quadsgmii_0_TEST_gt_i_n_134}),
        .rxmonitorsel_in({1'b0,1'b0}),
        .rxoutclk_out(rxoutclk),
        .rxpcommaalignen_in(encommaalign_rec),
        .rxpcsreset_in(1'b0),
        .rxpd_in({powerdown,powerdown}),
        .rxpmareset_in(1'b0),
        .rxpmaresetdone_out(quadsgmii_0_TEST_gt_i_n_136),
        .rxpolarity_in(1'b0),
        .rxprbscntreset_in(1'b0),
        .rxprbserr_out(quadsgmii_0_TEST_gt_i_n_137),
        .rxprbssel_in({1'b0,1'b0,1'b0,1'b0}),
        .rxrate_in({1'b0,1'b0,1'b0}),
        .rxratedone_out(quadsgmii_0_TEST_gt_i_n_138),
        .rxresetdone_out(rxresetdone_out),
        .rxusrclk2_in(rxuserclk2),
        .rxusrclk_in(rxuserclk),
        .tx8b10ben_in(1'b1),
        .txbufstatus_out({quadsgmii_0_TEST_gt_i_n_140,quadsgmii_0_TEST_gt_i_n_141}),
        .txctrl0_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .txctrl1_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .txctrl2_in({1'b0,1'b0,1'b0,1'b0,txcharisk}),
        .txdiffctrl_in({1'b1,1'b1,1'b0,1'b0,1'b0}),
        .txelecidle_in(powerdown),
        .txinhibit_in(1'b0),
        .txoutclk_out(txoutclk),
        .txoutclksel_in({1'b0,1'b1,1'b1}),
        .txpcsreset_in(1'b0),
        .txpd_in({powerdown,powerdown}),
        .txpmareset_in(1'b0),
        .txpmaresetdone_out(NLW_quadsgmii_0_TEST_gt_i_txpmaresetdone_out_UNCONNECTED[0]),
        .txpolarity_in(1'b0),
        .txpostcursor_in({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .txprbsforceerr_in(1'b0),
        .txprbssel_in({1'b0,1'b0,1'b0,1'b0}),
        .txprecursor_in({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .txresetdone_out(txresetdone_out),
        .txusrclk2_in(userclk),
        .txusrclk_in(userclk));
  (* SOFT_HLUTNM = "soft_lutpair517" *) 
  LUT2 #(
    .INIT(4'h8)) 
    quadsgmii_0_TEST_gt_i_i_1
       (.I0(mgt_tx_reset),
        .I1(gtwiz_reset_tx_done_out),
        .O(gtwiz_reset_tx_datapath_in));
  LUT2 #(
    .INIT(4'h8)) 
    quadsgmii_0_TEST_gt_i_i_2
       (.I0(mgt_rx_reset),
        .I1(gtwiz_reset_rx_done_out),
        .O(gtwiz_reset_rx_datapath_in));
  (* SOFT_HLUTNM = "soft_lutpair517" *) 
  LUT2 #(
    .INIT(4'h8)) 
    resetdone_INST_0
       (.I0(gtwiz_reset_tx_done_out),
        .I1(gtwiz_reset_rx_done_out),
        .O(resetdone));
  quadsgmii_0_TEST_quadsgmii_0_TEST_reset_sync rxrecclk_encommaalign
       (.enablealign(enablealign),
        .reset_out(encommaalign_rec),
        .rxuserclk2(rxuserclk2));
  FDRE txbuferr_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(p_0_in),
        .Q(txbuferr),
        .R(1'b0));
  FDRE \txbufstatus_reg_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(quadsgmii_0_TEST_gt_i_n_140),
        .Q(p_0_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_tx_rate_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_tx_rate_adapt
   (gmii_tx_en_ch3,
    gmii_tx_er_ch3,
    \gmii_txd_out_reg[7]_0 ,
    reset_out,
    E,
    gmii_tx_en_ch3_int1,
    userclk2,
    gmii_tx_er_ch3_int1,
    \gmii_txd_out_reg[7]_1 );
  output gmii_tx_en_ch3;
  output gmii_tx_er_ch3;
  output [7:0]\gmii_txd_out_reg[7]_0 ;
  input reset_out;
  input [0:0]E;
  input gmii_tx_en_ch3_int1;
  input userclk2;
  input gmii_tx_er_ch3_int1;
  input [7:0]\gmii_txd_out_reg[7]_1 ;

  wire [0:0]E;
  wire gmii_tx_en_ch3;
  wire gmii_tx_en_ch3_int1;
  wire gmii_tx_er_ch3;
  wire gmii_tx_er_ch3_int1;
  wire [7:0]\gmii_txd_out_reg[7]_0 ;
  wire [7:0]\gmii_txd_out_reg[7]_1 ;
  wire reset_out;
  wire userclk2;

  FDRE gmii_tx_en_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_en_ch3_int1),
        .Q(gmii_tx_en_ch3),
        .R(reset_out));
  FDRE gmii_tx_er_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_er_ch3_int1),
        .Q(gmii_tx_er_ch3),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[0] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [0]),
        .Q(\gmii_txd_out_reg[7]_0 [0]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[1] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [1]),
        .Q(\gmii_txd_out_reg[7]_0 [1]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[2] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [2]),
        .Q(\gmii_txd_out_reg[7]_0 [2]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[3] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [3]),
        .Q(\gmii_txd_out_reg[7]_0 [3]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[4] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [4]),
        .Q(\gmii_txd_out_reg[7]_0 [4]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[5] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [5]),
        .Q(\gmii_txd_out_reg[7]_0 [5]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[6] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [6]),
        .Q(\gmii_txd_out_reg[7]_0 [6]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[7] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [7]),
        .Q(\gmii_txd_out_reg[7]_0 [7]),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_tx_rate_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_tx_rate_adapt_40
   (gmii_tx_en_ch2,
    gmii_tx_er_ch2,
    \gmii_txd_out_reg[7]_0 ,
    reset_out,
    E,
    gmii_tx_en_ch2_int1,
    userclk2,
    gmii_tx_er_ch2_int1,
    \gmii_txd_out_reg[7]_1 );
  output gmii_tx_en_ch2;
  output gmii_tx_er_ch2;
  output [7:0]\gmii_txd_out_reg[7]_0 ;
  input reset_out;
  input [0:0]E;
  input gmii_tx_en_ch2_int1;
  input userclk2;
  input gmii_tx_er_ch2_int1;
  input [7:0]\gmii_txd_out_reg[7]_1 ;

  wire [0:0]E;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch2_int1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch2_int1;
  wire [7:0]\gmii_txd_out_reg[7]_0 ;
  wire [7:0]\gmii_txd_out_reg[7]_1 ;
  wire reset_out;
  wire userclk2;

  FDRE gmii_tx_en_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_en_ch2_int1),
        .Q(gmii_tx_en_ch2),
        .R(reset_out));
  FDRE gmii_tx_er_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_er_ch2_int1),
        .Q(gmii_tx_er_ch2),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[0] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [0]),
        .Q(\gmii_txd_out_reg[7]_0 [0]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[1] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [1]),
        .Q(\gmii_txd_out_reg[7]_0 [1]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[2] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [2]),
        .Q(\gmii_txd_out_reg[7]_0 [2]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[3] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [3]),
        .Q(\gmii_txd_out_reg[7]_0 [3]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[4] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [4]),
        .Q(\gmii_txd_out_reg[7]_0 [4]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[5] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [5]),
        .Q(\gmii_txd_out_reg[7]_0 [5]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[6] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [6]),
        .Q(\gmii_txd_out_reg[7]_0 [6]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[7] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [7]),
        .Q(\gmii_txd_out_reg[7]_0 [7]),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_tx_rate_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_tx_rate_adapt_46
   (gmii_tx_en_ch1,
    gmii_tx_er_ch1,
    \gmii_txd_out_reg[7]_0 ,
    reset_out,
    E,
    gmii_tx_en_ch1_int1,
    userclk2,
    gmii_tx_er_ch1_int1,
    \gmii_txd_out_reg[7]_1 );
  output gmii_tx_en_ch1;
  output gmii_tx_er_ch1;
  output [7:0]\gmii_txd_out_reg[7]_0 ;
  input reset_out;
  input [0:0]E;
  input gmii_tx_en_ch1_int1;
  input userclk2;
  input gmii_tx_er_ch1_int1;
  input [7:0]\gmii_txd_out_reg[7]_1 ;

  wire [0:0]E;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch1_int1;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch1_int1;
  wire [7:0]\gmii_txd_out_reg[7]_0 ;
  wire [7:0]\gmii_txd_out_reg[7]_1 ;
  wire reset_out;
  wire userclk2;

  FDRE gmii_tx_en_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_en_ch1_int1),
        .Q(gmii_tx_en_ch1),
        .R(reset_out));
  FDRE gmii_tx_er_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_er_ch1_int1),
        .Q(gmii_tx_er_ch1),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[0] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [0]),
        .Q(\gmii_txd_out_reg[7]_0 [0]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[1] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [1]),
        .Q(\gmii_txd_out_reg[7]_0 [1]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[2] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [2]),
        .Q(\gmii_txd_out_reg[7]_0 [2]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[3] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [3]),
        .Q(\gmii_txd_out_reg[7]_0 [3]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[4] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [4]),
        .Q(\gmii_txd_out_reg[7]_0 [4]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[5] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [5]),
        .Q(\gmii_txd_out_reg[7]_0 [5]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[6] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [6]),
        .Q(\gmii_txd_out_reg[7]_0 [6]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[7] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_1 [7]),
        .Q(\gmii_txd_out_reg[7]_0 [7]),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "quadsgmii_0_TEST_tx_rate_adapt" *) 
module quadsgmii_0_TEST_quadsgmii_0_TEST_tx_rate_adapt_52
   (gmii_tx_en_ch0,
    gmii_tx_er_ch0,
    Q,
    reset_out,
    E,
    gmii_tx_en_ch0_int1,
    userclk2,
    gmii_tx_er_ch0_int1,
    \gmii_txd_out_reg[7]_0 );
  output gmii_tx_en_ch0;
  output gmii_tx_er_ch0;
  output [7:0]Q;
  input reset_out;
  input [0:0]E;
  input gmii_tx_en_ch0_int1;
  input userclk2;
  input gmii_tx_er_ch0_int1;
  input [7:0]\gmii_txd_out_reg[7]_0 ;

  wire [0:0]E;
  wire [7:0]Q;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch0_int1;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch0_int1;
  wire [7:0]\gmii_txd_out_reg[7]_0 ;
  wire reset_out;
  wire userclk2;

  FDRE gmii_tx_en_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_en_ch0_int1),
        .Q(gmii_tx_en_ch0),
        .R(reset_out));
  FDRE gmii_tx_er_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_er_ch0_int1),
        .Q(gmii_tx_er_ch0),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[0] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_0 [0]),
        .Q(Q[0]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[1] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_0 [1]),
        .Q(Q[1]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[2] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_0 [2]),
        .Q(Q[2]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[3] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_0 [3]),
        .Q(Q[3]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[4] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_0 [4]),
        .Q(Q[4]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[5] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_0 [5]),
        .Q(Q[5]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[6] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_0 [6]),
        .Q(Q[6]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[7] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_out_reg[7]_0 [7]),
        .Q(Q[7]),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "AGGREGATOR" *) 
module quadsgmii_0_TEST_AGGREGATOR
   (powerdown,
    enablealign,
    txcharisk,
    txdata,
    POWERDOWN_CH3,
    POWERDOWN_CH0,
    POWERDOWN_CH1,
    POWERDOWN_CH2,
    ENABLEALIGN,
    ENABLEALIGN_reg_0,
    ENABLEALIGN_reg_1,
    ENABLEALIGN_reg_2,
    MGT_TX_RESET,
    userclk,
    D,
    TXDATA_CH3,
    \TXDATA_reg[7]_0 ,
    TXDATA_CH0,
    TXDATA_CH2,
    TXDATA_CH1);
  output powerdown;
  output enablealign;
  output [3:0]txcharisk;
  output [31:0]txdata;
  input POWERDOWN_CH3;
  input POWERDOWN_CH0;
  input POWERDOWN_CH1;
  input POWERDOWN_CH2;
  input ENABLEALIGN;
  input ENABLEALIGN_reg_0;
  input ENABLEALIGN_reg_1;
  input ENABLEALIGN_reg_2;
  input MGT_TX_RESET;
  input userclk;
  input [3:0]D;
  input [7:0]TXDATA_CH3;
  input \TXDATA_reg[7]_0 ;
  input [6:0]TXDATA_CH0;
  input [7:0]TXDATA_CH2;
  input [7:0]TXDATA_CH1;

  wire [3:0]D;
  wire ENABLEALIGN;
  wire ENABLEALIGN0__0;
  wire ENABLEALIGN_reg_0;
  wire ENABLEALIGN_reg_1;
  wire ENABLEALIGN_reg_2;
  wire MGT_TX_RESET;
  wire POWERDOWN0__0;
  wire POWERDOWN_CH0;
  wire POWERDOWN_CH1;
  wire POWERDOWN_CH2;
  wire POWERDOWN_CH3;
  wire [6:0]TXDATA_CH0;
  wire [7:0]TXDATA_CH1;
  wire [7:0]TXDATA_CH2;
  wire [7:0]TXDATA_CH3;
  wire \TXDATA_reg[7]_0 ;
  wire enablealign;
  wire powerdown;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire userclk;

  LUT4 #(
    .INIT(16'hFFFE)) 
    ENABLEALIGN0
       (.I0(ENABLEALIGN),
        .I1(ENABLEALIGN_reg_0),
        .I2(ENABLEALIGN_reg_1),
        .I3(ENABLEALIGN_reg_2),
        .O(ENABLEALIGN0__0));
  FDSE ENABLEALIGN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ENABLEALIGN0__0),
        .Q(enablealign),
        .S(MGT_TX_RESET));
  LUT4 #(
    .INIT(16'hFFFE)) 
    POWERDOWN0
       (.I0(POWERDOWN_CH3),
        .I1(POWERDOWN_CH0),
        .I2(POWERDOWN_CH1),
        .I3(POWERDOWN_CH2),
        .O(POWERDOWN0__0));
  FDRE POWERDOWN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(POWERDOWN0__0),
        .Q(powerdown),
        .R(MGT_TX_RESET));
  FDRE \TXCHARISK_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(txcharisk[0]),
        .R(MGT_TX_RESET));
  FDRE \TXCHARISK_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(txcharisk[1]),
        .R(MGT_TX_RESET));
  FDRE \TXCHARISK_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(txcharisk[2]),
        .R(MGT_TX_RESET));
  FDRE \TXCHARISK_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(txcharisk[3]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[0]),
        .Q(txdata[0]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[2]),
        .Q(txdata[10]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[3]),
        .Q(txdata[11]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[4]),
        .Q(txdata[12]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[5]),
        .Q(txdata[13]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[6]),
        .Q(txdata[14]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[15] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[7]),
        .Q(txdata[15]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[0]),
        .Q(txdata[16]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[17] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[1]),
        .Q(txdata[17]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[18] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[2]),
        .Q(txdata[18]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[19] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[3]),
        .Q(txdata[19]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[1]),
        .Q(txdata[1]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[20] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[4]),
        .Q(txdata[20]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[21] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[5]),
        .Q(txdata[21]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[22] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[6]),
        .Q(txdata[22]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[23] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[7]),
        .Q(txdata[23]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[24] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[0]),
        .Q(txdata[24]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[25] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[1]),
        .Q(txdata[25]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[26] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[2]),
        .Q(txdata[26]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[27] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[3]),
        .Q(txdata[27]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[28] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[4]),
        .Q(txdata[28]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[29] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[5]),
        .Q(txdata[29]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[2]),
        .Q(txdata[2]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[30] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[6]),
        .Q(txdata[30]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[31] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[7]),
        .Q(txdata[31]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[3]),
        .Q(txdata[3]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[4]),
        .Q(txdata[4]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[5]),
        .Q(txdata[5]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[6]),
        .Q(txdata[6]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TXDATA_reg[7]_0 ),
        .Q(txdata[7]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[0]),
        .Q(txdata[8]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[1]),
        .Q(txdata[9]),
        .R(MGT_TX_RESET));
endmodule

(* ORIG_REF_NAME = "ALIGNER" *) 
module quadsgmii_0_TEST_ALIGNER
   (Q,
    \RXDISPERR_ALIGNED_reg[3]_0 ,
    \RXNOTINTABLE_ALIGNED_reg[3]_0 ,
    \RXCHARISK_ALIGNED_reg[3]_0 ,
    \RXDATA_ALIGNED_reg[31]_0 ,
    RESET_OUT,
    rxchariscomma,
    rxrecclk,
    rxdata,
    rxcharisk,
    rxdisperr,
    rxnotintable);
  output [3:0]Q;
  output [3:0]\RXDISPERR_ALIGNED_reg[3]_0 ;
  output [3:0]\RXNOTINTABLE_ALIGNED_reg[3]_0 ;
  output [3:0]\RXCHARISK_ALIGNED_reg[3]_0 ;
  output [31:0]\RXDATA_ALIGNED_reg[31]_0 ;
  input RESET_OUT;
  input [3:0]rxchariscomma;
  input rxrecclk;
  input [31:0]rxdata;
  input [3:0]rxcharisk;
  input [3:0]rxdisperr;
  input [3:0]rxnotintable;

  wire [1:0]ALIGN_SEL;
  wire ALIGN_SEL1;
  wire ALIGN_SEL12_out;
  wire ALIGN_SEL15_out;
  wire ALIGN_SEL17_out;
  wire [1:0]ALIGN_SEL_REG;
  wire \ALIGN_SEL_REG[0]_i_1_n_0 ;
  wire \ALIGN_SEL_REG[0]_i_2_n_0 ;
  wire \ALIGN_SEL_REG[1]_i_6_n_0 ;
  wire \ALIGN_SEL_REG[1]_i_7_n_0 ;
  wire \ALIGN_SEL_REG[1]_i_8_n_0 ;
  wire \ALIGN_SEL_REG[1]_i_9_n_0 ;
  wire [3:0]Q;
  wire RESET_OUT;
  wire \RXCHARISCOMMA_ALIGNED[0]_i_1_n_0 ;
  wire \RXCHARISCOMMA_ALIGNED[1]_i_1_n_0 ;
  wire \RXCHARISCOMMA_ALIGNED[2]_i_1_n_0 ;
  wire \RXCHARISCOMMA_ALIGNED[3]_i_1_n_0 ;
  wire [3:0]RXCHARISCOMMA_REG;
  wire \RXCHARISK_ALIGNED[0]_i_1_n_0 ;
  wire \RXCHARISK_ALIGNED[1]_i_1_n_0 ;
  wire \RXCHARISK_ALIGNED[2]_i_1_n_0 ;
  wire \RXCHARISK_ALIGNED[3]_i_1_n_0 ;
  wire [3:0]\RXCHARISK_ALIGNED_reg[3]_0 ;
  wire \RXCHARISK_REG_reg_n_0_[0] ;
  wire \RXDATA_ALIGNED[0]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[0]_i_3_n_0 ;
  wire \RXDATA_ALIGNED[0]_i_4_n_0 ;
  wire \RXDATA_ALIGNED[0]_i_5_n_0 ;
  wire \RXDATA_ALIGNED[1]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[1]_i_3_n_0 ;
  wire \RXDATA_ALIGNED[1]_i_4_n_0 ;
  wire \RXDATA_ALIGNED[1]_i_5_n_0 ;
  wire \RXDATA_ALIGNED[2]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[3]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[4]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[5]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[6]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[6]_i_3_n_0 ;
  wire \RXDATA_ALIGNED[6]_i_4_n_0 ;
  wire \RXDATA_ALIGNED[6]_i_5_n_0 ;
  wire \RXDATA_ALIGNED[7]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[7]_i_3_n_0 ;
  wire \RXDATA_ALIGNED[7]_i_4_n_0 ;
  wire \RXDATA_ALIGNED[7]_i_5_n_0 ;
  wire \RXDATA_ALIGNED[7]_i_6_n_0 ;
  wire [31:0]\RXDATA_ALIGNED_reg[31]_0 ;
  wire \RXDATA_REG_reg_n_0_[0] ;
  wire \RXDATA_REG_reg_n_0_[16] ;
  wire \RXDATA_REG_reg_n_0_[17] ;
  wire \RXDATA_REG_reg_n_0_[18] ;
  wire \RXDATA_REG_reg_n_0_[19] ;
  wire \RXDATA_REG_reg_n_0_[1] ;
  wire \RXDATA_REG_reg_n_0_[20] ;
  wire \RXDATA_REG_reg_n_0_[21] ;
  wire \RXDATA_REG_reg_n_0_[22] ;
  wire \RXDATA_REG_reg_n_0_[23] ;
  wire \RXDATA_REG_reg_n_0_[24] ;
  wire \RXDATA_REG_reg_n_0_[25] ;
  wire \RXDATA_REG_reg_n_0_[26] ;
  wire \RXDATA_REG_reg_n_0_[27] ;
  wire \RXDATA_REG_reg_n_0_[28] ;
  wire \RXDATA_REG_reg_n_0_[29] ;
  wire \RXDATA_REG_reg_n_0_[2] ;
  wire \RXDATA_REG_reg_n_0_[30] ;
  wire \RXDATA_REG_reg_n_0_[31] ;
  wire \RXDATA_REG_reg_n_0_[3] ;
  wire \RXDATA_REG_reg_n_0_[4] ;
  wire \RXDATA_REG_reg_n_0_[5] ;
  wire \RXDATA_REG_reg_n_0_[6] ;
  wire \RXDATA_REG_reg_n_0_[7] ;
  wire \RXDISPERR_ALIGNED[0]_i_1_n_0 ;
  wire \RXDISPERR_ALIGNED[1]_i_1_n_0 ;
  wire \RXDISPERR_ALIGNED[2]_i_1_n_0 ;
  wire \RXDISPERR_ALIGNED[3]_i_1_n_0 ;
  wire [3:0]\RXDISPERR_ALIGNED_reg[3]_0 ;
  wire [3:0]RXDISPERR_REG;
  wire \RXNOTINTABLE_ALIGNED[0]_i_1_n_0 ;
  wire \RXNOTINTABLE_ALIGNED[1]_i_1_n_0 ;
  wire \RXNOTINTABLE_ALIGNED[2]_i_1_n_0 ;
  wire \RXNOTINTABLE_ALIGNED[3]_i_1_n_0 ;
  wire [3:0]\RXNOTINTABLE_ALIGNED_reg[3]_0 ;
  wire [3:0]RXNOTINTABLE_REG;
  wire [7:0]p_0_in;
  wire [31:0]p_0_in__0;
  wire p_1_in;
  wire p_1_in1_in;
  wire p_1_in4_in;
  wire [3:0]rxchariscomma;
  wire [3:0]rxcharisk;
  wire [31:0]rxdata;
  wire [3:0]rxdisperr;
  wire [3:0]rxnotintable;
  wire rxrecclk;

  LUT4 #(
    .INIT(16'h00BA)) 
    \ALIGN_SEL_REG[0]_i_1 
       (.I0(ALIGN_SEL15_out),
        .I1(ALIGN_SEL12_out),
        .I2(\ALIGN_SEL_REG[0]_i_2_n_0 ),
        .I3(ALIGN_SEL17_out),
        .O(\ALIGN_SEL_REG[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'hABAAAAAA)) 
    \ALIGN_SEL_REG[0]_i_2 
       (.I0(ALIGN_SEL_REG[0]),
        .I1(\RXDATA_REG_reg_n_0_[25] ),
        .I2(\RXDATA_REG_reg_n_0_[24] ),
        .I3(p_1_in),
        .I4(\ALIGN_SEL_REG[1]_i_7_n_0 ),
        .O(\ALIGN_SEL_REG[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h000000FE)) 
    \ALIGN_SEL_REG[1]_i_1 
       (.I0(ALIGN_SEL_REG[1]),
        .I1(ALIGN_SEL12_out),
        .I2(ALIGN_SEL1),
        .I3(ALIGN_SEL17_out),
        .I4(ALIGN_SEL15_out),
        .O(ALIGN_SEL[1]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \ALIGN_SEL_REG[1]_i_2 
       (.I0(\ALIGN_SEL_REG[1]_i_6_n_0 ),
        .I1(p_1_in1_in),
        .I2(\RXDATA_REG_reg_n_0_[16] ),
        .I3(\RXDATA_REG_reg_n_0_[17] ),
        .O(ALIGN_SEL12_out));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \ALIGN_SEL_REG[1]_i_3 
       (.I0(\ALIGN_SEL_REG[1]_i_7_n_0 ),
        .I1(p_1_in),
        .I2(\RXDATA_REG_reg_n_0_[24] ),
        .I3(\RXDATA_REG_reg_n_0_[25] ),
        .O(ALIGN_SEL1));
  LUT4 #(
    .INIT(16'h0008)) 
    \ALIGN_SEL_REG[1]_i_4 
       (.I0(\ALIGN_SEL_REG[1]_i_8_n_0 ),
        .I1(\RXCHARISK_REG_reg_n_0_[0] ),
        .I2(\RXDATA_REG_reg_n_0_[0] ),
        .I3(\RXDATA_REG_reg_n_0_[1] ),
        .O(ALIGN_SEL17_out));
  LUT4 #(
    .INIT(16'h0008)) 
    \ALIGN_SEL_REG[1]_i_5 
       (.I0(\ALIGN_SEL_REG[1]_i_9_n_0 ),
        .I1(p_1_in4_in),
        .I2(p_0_in[0]),
        .I3(p_0_in[1]),
        .O(ALIGN_SEL15_out));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \ALIGN_SEL_REG[1]_i_6 
       (.I0(\RXDATA_REG_reg_n_0_[18] ),
        .I1(\RXDATA_REG_reg_n_0_[19] ),
        .I2(\RXDATA_REG_reg_n_0_[20] ),
        .I3(\RXDATA_REG_reg_n_0_[21] ),
        .I4(\RXDATA_REG_reg_n_0_[23] ),
        .I5(\RXDATA_REG_reg_n_0_[22] ),
        .O(\ALIGN_SEL_REG[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \ALIGN_SEL_REG[1]_i_7 
       (.I0(\RXDATA_REG_reg_n_0_[26] ),
        .I1(\RXDATA_REG_reg_n_0_[27] ),
        .I2(\RXDATA_REG_reg_n_0_[28] ),
        .I3(\RXDATA_REG_reg_n_0_[29] ),
        .I4(\RXDATA_REG_reg_n_0_[31] ),
        .I5(\RXDATA_REG_reg_n_0_[30] ),
        .O(\ALIGN_SEL_REG[1]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \ALIGN_SEL_REG[1]_i_8 
       (.I0(\RXDATA_REG_reg_n_0_[2] ),
        .I1(\RXDATA_REG_reg_n_0_[3] ),
        .I2(\RXDATA_REG_reg_n_0_[4] ),
        .I3(\RXDATA_REG_reg_n_0_[5] ),
        .I4(\RXDATA_REG_reg_n_0_[7] ),
        .I5(\RXDATA_REG_reg_n_0_[6] ),
        .O(\ALIGN_SEL_REG[1]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \ALIGN_SEL_REG[1]_i_9 
       (.I0(p_0_in[2]),
        .I1(p_0_in[3]),
        .I2(p_0_in[4]),
        .I3(p_0_in[5]),
        .I4(p_0_in[7]),
        .I5(p_0_in[6]),
        .O(\ALIGN_SEL_REG[1]_i_9_n_0 ));
  FDRE \ALIGN_SEL_REG_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .Q(ALIGN_SEL_REG[0]),
        .R(RESET_OUT));
  FDRE \ALIGN_SEL_REG_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(ALIGN_SEL[1]),
        .Q(ALIGN_SEL_REG[1]),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXCHARISCOMMA_ALIGNED[0]_i_1 
       (.I0(RXCHARISCOMMA_REG[2]),
        .I1(RXCHARISCOMMA_REG[3]),
        .I2(RXCHARISCOMMA_REG[0]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(RXCHARISCOMMA_REG[1]),
        .O(\RXCHARISCOMMA_ALIGNED[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXCHARISCOMMA_ALIGNED[1]_i_1 
       (.I0(RXCHARISCOMMA_REG[3]),
        .I1(rxchariscomma[0]),
        .I2(RXCHARISCOMMA_REG[1]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(RXCHARISCOMMA_REG[2]),
        .O(\RXCHARISCOMMA_ALIGNED[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXCHARISCOMMA_ALIGNED[2]_i_1 
       (.I0(rxchariscomma[0]),
        .I1(rxchariscomma[1]),
        .I2(RXCHARISCOMMA_REG[2]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(RXCHARISCOMMA_REG[3]),
        .O(\RXCHARISCOMMA_ALIGNED[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXCHARISCOMMA_ALIGNED[3]_i_1 
       (.I0(rxchariscomma[1]),
        .I1(rxchariscomma[2]),
        .I2(RXCHARISCOMMA_REG[3]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(rxchariscomma[0]),
        .O(\RXCHARISCOMMA_ALIGNED[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h00AE)) 
    \RXCHARISCOMMA_ALIGNED[3]_i_2 
       (.I0(ALIGN_SEL15_out),
        .I1(\ALIGN_SEL_REG[0]_i_2_n_0 ),
        .I2(ALIGN_SEL12_out),
        .I3(ALIGN_SEL17_out),
        .O(ALIGN_SEL[0]));
  FDRE \RXCHARISCOMMA_ALIGNED_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISCOMMA_ALIGNED[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_ALIGNED_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISCOMMA_ALIGNED[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_ALIGNED_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISCOMMA_ALIGNED[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_ALIGNED_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISCOMMA_ALIGNED[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_REG_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxchariscomma[0]),
        .Q(RXCHARISCOMMA_REG[0]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_REG_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxchariscomma[1]),
        .Q(RXCHARISCOMMA_REG[1]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_REG_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxchariscomma[2]),
        .Q(RXCHARISCOMMA_REG[2]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_REG_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxchariscomma[3]),
        .Q(RXCHARISCOMMA_REG[3]),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXCHARISK_ALIGNED[0]_i_1 
       (.I0(p_1_in1_in),
        .I1(p_1_in),
        .I2(\RXCHARISK_REG_reg_n_0_[0] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(p_1_in4_in),
        .O(\RXCHARISK_ALIGNED[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXCHARISK_ALIGNED[1]_i_1 
       (.I0(p_1_in),
        .I1(rxcharisk[0]),
        .I2(p_1_in4_in),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(p_1_in1_in),
        .O(\RXCHARISK_ALIGNED[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXCHARISK_ALIGNED[2]_i_1 
       (.I0(rxcharisk[0]),
        .I1(rxcharisk[1]),
        .I2(p_1_in1_in),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(p_1_in),
        .O(\RXCHARISK_ALIGNED[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXCHARISK_ALIGNED[3]_i_1 
       (.I0(rxcharisk[1]),
        .I1(rxcharisk[2]),
        .I2(p_1_in),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(rxcharisk[0]),
        .O(\RXCHARISK_ALIGNED[3]_i_1_n_0 ));
  FDRE \RXCHARISK_ALIGNED_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISK_ALIGNED[0]_i_1_n_0 ),
        .Q(\RXCHARISK_ALIGNED_reg[3]_0 [0]),
        .R(RESET_OUT));
  FDRE \RXCHARISK_ALIGNED_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISK_ALIGNED[1]_i_1_n_0 ),
        .Q(\RXCHARISK_ALIGNED_reg[3]_0 [1]),
        .R(RESET_OUT));
  FDRE \RXCHARISK_ALIGNED_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISK_ALIGNED[2]_i_1_n_0 ),
        .Q(\RXCHARISK_ALIGNED_reg[3]_0 [2]),
        .R(RESET_OUT));
  FDRE \RXCHARISK_ALIGNED_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISK_ALIGNED[3]_i_1_n_0 ),
        .Q(\RXCHARISK_ALIGNED_reg[3]_0 [3]),
        .R(RESET_OUT));
  FDRE \RXCHARISK_REG_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxcharisk[0]),
        .Q(\RXCHARISK_REG_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \RXCHARISK_REG_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxcharisk[1]),
        .Q(p_1_in4_in),
        .R(RESET_OUT));
  FDRE \RXCHARISK_REG_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxcharisk[2]),
        .Q(p_1_in1_in),
        .R(RESET_OUT));
  FDRE \RXCHARISK_REG_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxcharisk[3]),
        .Q(p_1_in),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[0]_i_1 
       (.I0(\RXDATA_ALIGNED[0]_i_2_n_0 ),
        .I1(\RXDATA_ALIGNED[0]_i_3_n_0 ),
        .I2(\RXDATA_ALIGNED[0]_i_4_n_0 ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_ALIGNED[0]_i_5_n_0 ),
        .O(p_0_in__0[0]));
  LUT5 #(
    .INIT(32'h00000002)) 
    \RXDATA_ALIGNED[0]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[16] ),
        .I1(ALIGN_SEL12_out),
        .I2(ALIGN_SEL1),
        .I3(ALIGN_SEL15_out),
        .I4(ALIGN_SEL17_out),
        .O(\RXDATA_ALIGNED[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \RXDATA_ALIGNED[0]_i_3 
       (.I0(\RXDATA_REG_reg_n_0_[24] ),
        .I1(ALIGN_SEL12_out),
        .I2(ALIGN_SEL1),
        .I3(ALIGN_SEL15_out),
        .I4(ALIGN_SEL17_out),
        .O(\RXDATA_ALIGNED[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \RXDATA_ALIGNED[0]_i_4 
       (.I0(\RXDATA_REG_reg_n_0_[0] ),
        .I1(ALIGN_SEL12_out),
        .I2(ALIGN_SEL1),
        .I3(ALIGN_SEL15_out),
        .I4(ALIGN_SEL17_out),
        .O(\RXDATA_ALIGNED[0]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \RXDATA_ALIGNED[0]_i_5 
       (.I0(p_0_in[0]),
        .I1(ALIGN_SEL12_out),
        .I2(ALIGN_SEL1),
        .I3(ALIGN_SEL15_out),
        .I4(ALIGN_SEL17_out),
        .O(\RXDATA_ALIGNED[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[10]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[26] ),
        .I1(rxdata[2]),
        .I2(p_0_in[2]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[18] ),
        .O(p_0_in__0[10]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[11]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[27] ),
        .I1(rxdata[3]),
        .I2(p_0_in[3]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[19] ),
        .O(p_0_in__0[11]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[12]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[28] ),
        .I1(rxdata[4]),
        .I2(p_0_in[4]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[20] ),
        .O(p_0_in__0[12]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[13]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[29] ),
        .I1(rxdata[5]),
        .I2(p_0_in[5]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[21] ),
        .O(p_0_in__0[13]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[14]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[30] ),
        .I1(rxdata[6]),
        .I2(p_0_in[6]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[22] ),
        .O(p_0_in__0[14]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[15]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[31] ),
        .I1(rxdata[7]),
        .I2(p_0_in[7]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[23] ),
        .O(p_0_in__0[15]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[16]_i_1 
       (.I0(rxdata[0]),
        .I1(rxdata[8]),
        .I2(\RXDATA_REG_reg_n_0_[16] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[24] ),
        .O(p_0_in__0[16]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[17]_i_1 
       (.I0(rxdata[1]),
        .I1(rxdata[9]),
        .I2(\RXDATA_REG_reg_n_0_[17] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[25] ),
        .O(p_0_in__0[17]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[18]_i_1 
       (.I0(rxdata[2]),
        .I1(rxdata[10]),
        .I2(\RXDATA_REG_reg_n_0_[18] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[26] ),
        .O(p_0_in__0[18]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[19]_i_1 
       (.I0(rxdata[3]),
        .I1(rxdata[11]),
        .I2(\RXDATA_REG_reg_n_0_[19] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[27] ),
        .O(p_0_in__0[19]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[1]_i_1 
       (.I0(\RXDATA_ALIGNED[1]_i_2_n_0 ),
        .I1(\RXDATA_ALIGNED[1]_i_3_n_0 ),
        .I2(\RXDATA_ALIGNED[1]_i_4_n_0 ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_ALIGNED[1]_i_5_n_0 ),
        .O(p_0_in__0[1]));
  LUT5 #(
    .INIT(32'h00000002)) 
    \RXDATA_ALIGNED[1]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[17] ),
        .I1(ALIGN_SEL12_out),
        .I2(ALIGN_SEL1),
        .I3(ALIGN_SEL15_out),
        .I4(ALIGN_SEL17_out),
        .O(\RXDATA_ALIGNED[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \RXDATA_ALIGNED[1]_i_3 
       (.I0(\RXDATA_REG_reg_n_0_[25] ),
        .I1(ALIGN_SEL12_out),
        .I2(ALIGN_SEL1),
        .I3(ALIGN_SEL15_out),
        .I4(ALIGN_SEL17_out),
        .O(\RXDATA_ALIGNED[1]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \RXDATA_ALIGNED[1]_i_4 
       (.I0(\RXDATA_REG_reg_n_0_[1] ),
        .I1(ALIGN_SEL12_out),
        .I2(ALIGN_SEL1),
        .I3(ALIGN_SEL15_out),
        .I4(ALIGN_SEL17_out),
        .O(\RXDATA_ALIGNED[1]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \RXDATA_ALIGNED[1]_i_5 
       (.I0(p_0_in[1]),
        .I1(ALIGN_SEL12_out),
        .I2(ALIGN_SEL1),
        .I3(ALIGN_SEL15_out),
        .I4(ALIGN_SEL17_out),
        .O(\RXDATA_ALIGNED[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[20]_i_1 
       (.I0(rxdata[4]),
        .I1(rxdata[12]),
        .I2(\RXDATA_REG_reg_n_0_[20] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[28] ),
        .O(p_0_in__0[20]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[21]_i_1 
       (.I0(rxdata[5]),
        .I1(rxdata[13]),
        .I2(\RXDATA_REG_reg_n_0_[21] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[29] ),
        .O(p_0_in__0[21]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[22]_i_1 
       (.I0(rxdata[6]),
        .I1(rxdata[14]),
        .I2(\RXDATA_REG_reg_n_0_[22] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[30] ),
        .O(p_0_in__0[22]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[23]_i_1 
       (.I0(rxdata[7]),
        .I1(rxdata[15]),
        .I2(\RXDATA_REG_reg_n_0_[23] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[31] ),
        .O(p_0_in__0[23]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[24]_i_1 
       (.I0(rxdata[8]),
        .I1(rxdata[16]),
        .I2(\RXDATA_REG_reg_n_0_[24] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(rxdata[0]),
        .O(p_0_in__0[24]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[25]_i_1 
       (.I0(rxdata[9]),
        .I1(rxdata[17]),
        .I2(\RXDATA_REG_reg_n_0_[25] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(rxdata[1]),
        .O(p_0_in__0[25]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[26]_i_1 
       (.I0(rxdata[10]),
        .I1(rxdata[18]),
        .I2(\RXDATA_REG_reg_n_0_[26] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(rxdata[2]),
        .O(p_0_in__0[26]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[27]_i_1 
       (.I0(rxdata[11]),
        .I1(rxdata[19]),
        .I2(\RXDATA_REG_reg_n_0_[27] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(rxdata[3]),
        .O(p_0_in__0[27]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[28]_i_1 
       (.I0(rxdata[12]),
        .I1(rxdata[20]),
        .I2(\RXDATA_REG_reg_n_0_[28] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(rxdata[4]),
        .O(p_0_in__0[28]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[29]_i_1 
       (.I0(rxdata[13]),
        .I1(rxdata[21]),
        .I2(\RXDATA_REG_reg_n_0_[29] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(rxdata[5]),
        .O(p_0_in__0[29]));
  LUT6 #(
    .INIT(64'hFFFFFFFFBC8CB080)) 
    \RXDATA_ALIGNED[2]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[26] ),
        .I1(ALIGN_SEL[0]),
        .I2(ALIGN_SEL[1]),
        .I3(\RXDATA_REG_reg_n_0_[18] ),
        .I4(p_0_in[2]),
        .I5(\RXDATA_ALIGNED[2]_i_2_n_0 ),
        .O(p_0_in__0[2]));
  LUT6 #(
    .INIT(64'hFFFCFFFCFFFCFFFE)) 
    \RXDATA_ALIGNED[2]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[2] ),
        .I1(ALIGN_SEL17_out),
        .I2(ALIGN_SEL15_out),
        .I3(\RXDATA_ALIGNED[7]_i_3_n_0 ),
        .I4(\RXDATA_ALIGNED[7]_i_4_n_0 ),
        .I5(ALIGN_SEL_REG[1]),
        .O(\RXDATA_ALIGNED[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[30]_i_1 
       (.I0(rxdata[14]),
        .I1(rxdata[22]),
        .I2(\RXDATA_REG_reg_n_0_[30] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(rxdata[6]),
        .O(p_0_in__0[30]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[31]_i_1 
       (.I0(rxdata[15]),
        .I1(rxdata[23]),
        .I2(\RXDATA_REG_reg_n_0_[31] ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(rxdata[7]),
        .O(p_0_in__0[31]));
  LUT6 #(
    .INIT(64'hFFFFFFFFBC8CB080)) 
    \RXDATA_ALIGNED[3]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[27] ),
        .I1(ALIGN_SEL[0]),
        .I2(ALIGN_SEL[1]),
        .I3(\RXDATA_REG_reg_n_0_[19] ),
        .I4(p_0_in[3]),
        .I5(\RXDATA_ALIGNED[3]_i_2_n_0 ),
        .O(p_0_in__0[3]));
  LUT6 #(
    .INIT(64'hFFFCFFFCFFFCFFFE)) 
    \RXDATA_ALIGNED[3]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[3] ),
        .I1(ALIGN_SEL17_out),
        .I2(ALIGN_SEL15_out),
        .I3(\RXDATA_ALIGNED[7]_i_3_n_0 ),
        .I4(\RXDATA_ALIGNED[7]_i_4_n_0 ),
        .I5(ALIGN_SEL_REG[1]),
        .O(\RXDATA_ALIGNED[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFBC8CB080)) 
    \RXDATA_ALIGNED[4]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[28] ),
        .I1(ALIGN_SEL[0]),
        .I2(ALIGN_SEL[1]),
        .I3(\RXDATA_REG_reg_n_0_[20] ),
        .I4(p_0_in[4]),
        .I5(\RXDATA_ALIGNED[4]_i_2_n_0 ),
        .O(p_0_in__0[4]));
  LUT6 #(
    .INIT(64'hFFFCFFFCFFFCFFFE)) 
    \RXDATA_ALIGNED[4]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[4] ),
        .I1(ALIGN_SEL17_out),
        .I2(ALIGN_SEL15_out),
        .I3(\RXDATA_ALIGNED[7]_i_3_n_0 ),
        .I4(\RXDATA_ALIGNED[7]_i_4_n_0 ),
        .I5(ALIGN_SEL_REG[1]),
        .O(\RXDATA_ALIGNED[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFBC8CB080)) 
    \RXDATA_ALIGNED[5]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[29] ),
        .I1(ALIGN_SEL[0]),
        .I2(ALIGN_SEL[1]),
        .I3(\RXDATA_REG_reg_n_0_[21] ),
        .I4(p_0_in[5]),
        .I5(\RXDATA_ALIGNED[5]_i_2_n_0 ),
        .O(p_0_in__0[5]));
  LUT6 #(
    .INIT(64'hFFFCFFFCFFFCFFFE)) 
    \RXDATA_ALIGNED[5]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[5] ),
        .I1(ALIGN_SEL17_out),
        .I2(ALIGN_SEL15_out),
        .I3(\RXDATA_ALIGNED[7]_i_3_n_0 ),
        .I4(\RXDATA_ALIGNED[7]_i_4_n_0 ),
        .I5(ALIGN_SEL_REG[1]),
        .O(\RXDATA_ALIGNED[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[6]_i_1 
       (.I0(\RXDATA_ALIGNED[6]_i_2_n_0 ),
        .I1(\RXDATA_ALIGNED[6]_i_3_n_0 ),
        .I2(\RXDATA_ALIGNED[6]_i_4_n_0 ),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_ALIGNED[6]_i_5_n_0 ),
        .O(p_0_in__0[6]));
  LUT5 #(
    .INIT(32'h00000002)) 
    \RXDATA_ALIGNED[6]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[22] ),
        .I1(ALIGN_SEL12_out),
        .I2(ALIGN_SEL1),
        .I3(ALIGN_SEL15_out),
        .I4(ALIGN_SEL17_out),
        .O(\RXDATA_ALIGNED[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \RXDATA_ALIGNED[6]_i_3 
       (.I0(\RXDATA_REG_reg_n_0_[30] ),
        .I1(ALIGN_SEL12_out),
        .I2(ALIGN_SEL1),
        .I3(ALIGN_SEL15_out),
        .I4(ALIGN_SEL17_out),
        .O(\RXDATA_ALIGNED[6]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \RXDATA_ALIGNED[6]_i_4 
       (.I0(\RXDATA_REG_reg_n_0_[6] ),
        .I1(ALIGN_SEL12_out),
        .I2(ALIGN_SEL1),
        .I3(ALIGN_SEL15_out),
        .I4(ALIGN_SEL17_out),
        .O(\RXDATA_ALIGNED[6]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \RXDATA_ALIGNED[6]_i_5 
       (.I0(p_0_in[6]),
        .I1(ALIGN_SEL12_out),
        .I2(ALIGN_SEL1),
        .I3(ALIGN_SEL15_out),
        .I4(ALIGN_SEL17_out),
        .O(\RXDATA_ALIGNED[6]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFBC8CB080)) 
    \RXDATA_ALIGNED[7]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[31] ),
        .I1(ALIGN_SEL[0]),
        .I2(ALIGN_SEL[1]),
        .I3(\RXDATA_REG_reg_n_0_[23] ),
        .I4(p_0_in[7]),
        .I5(\RXDATA_ALIGNED[7]_i_2_n_0 ),
        .O(p_0_in__0[7]));
  LUT6 #(
    .INIT(64'hFFFCFFFCFFFCFFFE)) 
    \RXDATA_ALIGNED[7]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[7] ),
        .I1(ALIGN_SEL17_out),
        .I2(ALIGN_SEL15_out),
        .I3(\RXDATA_ALIGNED[7]_i_3_n_0 ),
        .I4(\RXDATA_ALIGNED[7]_i_4_n_0 ),
        .I5(ALIGN_SEL_REG[1]),
        .O(\RXDATA_ALIGNED[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF100010001000)) 
    \RXDATA_ALIGNED[7]_i_3 
       (.I0(\RXDATA_REG_reg_n_0_[17] ),
        .I1(\RXDATA_REG_reg_n_0_[16] ),
        .I2(p_1_in1_in),
        .I3(\ALIGN_SEL_REG[1]_i_6_n_0 ),
        .I4(\RXDATA_ALIGNED[7]_i_5_n_0 ),
        .I5(\ALIGN_SEL_REG[1]_i_7_n_0 ),
        .O(\RXDATA_ALIGNED[7]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00F8F8F8)) 
    \RXDATA_ALIGNED[7]_i_4 
       (.I0(\ALIGN_SEL_REG[1]_i_7_n_0 ),
        .I1(\RXDATA_ALIGNED[7]_i_5_n_0 ),
        .I2(ALIGN_SEL_REG[0]),
        .I3(\RXDATA_ALIGNED[7]_i_6_n_0 ),
        .I4(\ALIGN_SEL_REG[1]_i_6_n_0 ),
        .O(\RXDATA_ALIGNED[7]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h10)) 
    \RXDATA_ALIGNED[7]_i_5 
       (.I0(\RXDATA_REG_reg_n_0_[25] ),
        .I1(\RXDATA_REG_reg_n_0_[24] ),
        .I2(p_1_in),
        .O(\RXDATA_ALIGNED[7]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \RXDATA_ALIGNED[7]_i_6 
       (.I0(\RXDATA_REG_reg_n_0_[17] ),
        .I1(\RXDATA_REG_reg_n_0_[16] ),
        .I2(p_1_in1_in),
        .O(\RXDATA_ALIGNED[7]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[8]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[24] ),
        .I1(rxdata[0]),
        .I2(p_0_in[0]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[16] ),
        .O(p_0_in__0[8]));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDATA_ALIGNED[9]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[25] ),
        .I1(rxdata[1]),
        .I2(p_0_in[1]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(\RXDATA_REG_reg_n_0_[17] ),
        .O(p_0_in__0[9]));
  FDRE \RXDATA_ALIGNED_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [0]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[10] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[10]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [10]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[11]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [11]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[12]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [12]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[13] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[13]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [13]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[14] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[14]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [14]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[15] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[15]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [15]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[16] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[16]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [16]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[17] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[17]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [17]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[18] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[18]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [18]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[19] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[19]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [19]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [1]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[20] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[20]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [20]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[21] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[21]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [21]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[22] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[22]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [22]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[23] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[23]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [23]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[24] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[24]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [24]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[25] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[25]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [25]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[26] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[26]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [26]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[27] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[27]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [27]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[28] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[28]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [28]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[29] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[29]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [29]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [2]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[30] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[30]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [30]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[31] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[31]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [31]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [3]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[4]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [4]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[5]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [5]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[6]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [6]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[7]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [7]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[8] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[8]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [8]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[9]),
        .Q(\RXDATA_ALIGNED_reg[31]_0 [9]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[0]),
        .Q(\RXDATA_REG_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[10] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[10]),
        .Q(p_0_in[2]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[11]),
        .Q(p_0_in[3]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[12]),
        .Q(p_0_in[4]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[13] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[13]),
        .Q(p_0_in[5]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[14] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[14]),
        .Q(p_0_in[6]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[15] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[15]),
        .Q(p_0_in[7]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[16] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[16]),
        .Q(\RXDATA_REG_reg_n_0_[16] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[17] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[17]),
        .Q(\RXDATA_REG_reg_n_0_[17] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[18] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[18]),
        .Q(\RXDATA_REG_reg_n_0_[18] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[19] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[19]),
        .Q(\RXDATA_REG_reg_n_0_[19] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[1]),
        .Q(\RXDATA_REG_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[20] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[20]),
        .Q(\RXDATA_REG_reg_n_0_[20] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[21] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[21]),
        .Q(\RXDATA_REG_reg_n_0_[21] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[22] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[22]),
        .Q(\RXDATA_REG_reg_n_0_[22] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[23] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[23]),
        .Q(\RXDATA_REG_reg_n_0_[23] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[24] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[24]),
        .Q(\RXDATA_REG_reg_n_0_[24] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[25] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[25]),
        .Q(\RXDATA_REG_reg_n_0_[25] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[26] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[26]),
        .Q(\RXDATA_REG_reg_n_0_[26] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[27] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[27]),
        .Q(\RXDATA_REG_reg_n_0_[27] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[28] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[28]),
        .Q(\RXDATA_REG_reg_n_0_[28] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[29] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[29]),
        .Q(\RXDATA_REG_reg_n_0_[29] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[2]),
        .Q(\RXDATA_REG_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[30] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[30]),
        .Q(\RXDATA_REG_reg_n_0_[30] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[31] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[31]),
        .Q(\RXDATA_REG_reg_n_0_[31] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[3]),
        .Q(\RXDATA_REG_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[4]),
        .Q(\RXDATA_REG_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[5]),
        .Q(\RXDATA_REG_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[6]),
        .Q(\RXDATA_REG_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[7]),
        .Q(\RXDATA_REG_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[8] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[8]),
        .Q(p_0_in[0]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[9]),
        .Q(p_0_in[1]),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDISPERR_ALIGNED[0]_i_1 
       (.I0(RXDISPERR_REG[2]),
        .I1(RXDISPERR_REG[3]),
        .I2(RXDISPERR_REG[0]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(RXDISPERR_REG[1]),
        .O(\RXDISPERR_ALIGNED[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDISPERR_ALIGNED[1]_i_1 
       (.I0(RXDISPERR_REG[3]),
        .I1(rxdisperr[0]),
        .I2(RXDISPERR_REG[1]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(RXDISPERR_REG[2]),
        .O(\RXDISPERR_ALIGNED[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDISPERR_ALIGNED[2]_i_1 
       (.I0(rxdisperr[0]),
        .I1(rxdisperr[1]),
        .I2(RXDISPERR_REG[2]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(RXDISPERR_REG[3]),
        .O(\RXDISPERR_ALIGNED[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXDISPERR_ALIGNED[3]_i_1 
       (.I0(rxdisperr[1]),
        .I1(rxdisperr[2]),
        .I2(RXDISPERR_REG[3]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(rxdisperr[0]),
        .O(\RXDISPERR_ALIGNED[3]_i_1_n_0 ));
  FDRE \RXDISPERR_ALIGNED_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXDISPERR_ALIGNED[0]_i_1_n_0 ),
        .Q(\RXDISPERR_ALIGNED_reg[3]_0 [0]),
        .R(RESET_OUT));
  FDRE \RXDISPERR_ALIGNED_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXDISPERR_ALIGNED[1]_i_1_n_0 ),
        .Q(\RXDISPERR_ALIGNED_reg[3]_0 [1]),
        .R(RESET_OUT));
  FDRE \RXDISPERR_ALIGNED_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXDISPERR_ALIGNED[2]_i_1_n_0 ),
        .Q(\RXDISPERR_ALIGNED_reg[3]_0 [2]),
        .R(RESET_OUT));
  FDRE \RXDISPERR_ALIGNED_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXDISPERR_ALIGNED[3]_i_1_n_0 ),
        .Q(\RXDISPERR_ALIGNED_reg[3]_0 [3]),
        .R(RESET_OUT));
  FDRE \RXDISPERR_REG_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdisperr[0]),
        .Q(RXDISPERR_REG[0]),
        .R(RESET_OUT));
  FDRE \RXDISPERR_REG_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdisperr[1]),
        .Q(RXDISPERR_REG[1]),
        .R(RESET_OUT));
  FDRE \RXDISPERR_REG_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdisperr[2]),
        .Q(RXDISPERR_REG[2]),
        .R(RESET_OUT));
  FDRE \RXDISPERR_REG_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdisperr[3]),
        .Q(RXDISPERR_REG[3]),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXNOTINTABLE_ALIGNED[0]_i_1 
       (.I0(RXNOTINTABLE_REG[2]),
        .I1(RXNOTINTABLE_REG[3]),
        .I2(RXNOTINTABLE_REG[0]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(RXNOTINTABLE_REG[1]),
        .O(\RXNOTINTABLE_ALIGNED[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXNOTINTABLE_ALIGNED[1]_i_1 
       (.I0(RXNOTINTABLE_REG[3]),
        .I1(rxnotintable[0]),
        .I2(RXNOTINTABLE_REG[1]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(RXNOTINTABLE_REG[2]),
        .O(\RXNOTINTABLE_ALIGNED[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXNOTINTABLE_ALIGNED[2]_i_1 
       (.I0(rxnotintable[0]),
        .I1(rxnotintable[1]),
        .I2(RXNOTINTABLE_REG[2]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(RXNOTINTABLE_REG[3]),
        .O(\RXNOTINTABLE_ALIGNED[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCFFAAF0CC00AAF0)) 
    \RXNOTINTABLE_ALIGNED[3]_i_1 
       (.I0(rxnotintable[1]),
        .I1(rxnotintable[2]),
        .I2(RXNOTINTABLE_REG[3]),
        .I3(ALIGN_SEL[1]),
        .I4(ALIGN_SEL[0]),
        .I5(rxnotintable[0]),
        .O(\RXNOTINTABLE_ALIGNED[3]_i_1_n_0 ));
  FDRE \RXNOTINTABLE_ALIGNED_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXNOTINTABLE_ALIGNED[0]_i_1_n_0 ),
        .Q(\RXNOTINTABLE_ALIGNED_reg[3]_0 [0]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_ALIGNED_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXNOTINTABLE_ALIGNED[1]_i_1_n_0 ),
        .Q(\RXNOTINTABLE_ALIGNED_reg[3]_0 [1]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_ALIGNED_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXNOTINTABLE_ALIGNED[2]_i_1_n_0 ),
        .Q(\RXNOTINTABLE_ALIGNED_reg[3]_0 [2]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_ALIGNED_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXNOTINTABLE_ALIGNED[3]_i_1_n_0 ),
        .Q(\RXNOTINTABLE_ALIGNED_reg[3]_0 [3]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_REG_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxnotintable[0]),
        .Q(RXNOTINTABLE_REG[0]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_REG_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxnotintable[1]),
        .Q(RXNOTINTABLE_REG[1]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_REG_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxnotintable[2]),
        .Q(RXNOTINTABLE_REG[2]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_REG_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxnotintable[3]),
        .Q(RXNOTINTABLE_REG[3]),
        .R(RESET_OUT));
endmodule

(* ORIG_REF_NAME = "AUTO_NEG" *) 
module quadsgmii_0_TEST_AUTO_NEG
   (status_vector_ch3,
    TOGGLE_RX,
    XMIT_DATA_INT,
    MR_AN_COMPLETE,
    MR_PAGE_RX_SET,
    XMIT_CONFIG_INT,
    RECEIVED_IDLE,
    RX_CONFIG_REG_NULL_reg_0,
    MR_LINK_STATUS,
    \RX_CONFIG_REG_REG_reg[11]_0 ,
    \MASK_RUDI_BUFERR_TIMER_reg[3]_0 ,
    \MR_LP_ADV_ABILITY_INT_reg[16]_0 ,
    D,
    out,
    userclk,
    Q,
    BASEX_REMOTE_FAULT_RSLVD,
    RX_RUDI_INVALID_REG_reg_0,
    RX_RUDI_INVALID,
    AN_ENABLE_INT,
    RESTART_AN_REG,
    RX_CONFIG_VALID,
    RX_IDLE,
    CLEAR_PAGE_RECEIVED,
    CLEAR_STATUS_REG,
    RECEIVED_IDLE_reg_0,
    RX_CONFIG_REG_NULL_reg_1,
    data_out,
    \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ,
    \MASK_RUDI_BUFERR_TIMER_reg[0]_0 ,
    SR,
    RX_INVALID,
    XMIT_DATA,
    RXSYNC_STATUS,
    CONFIG_REG_MATCH_reg_0,
    MASK_RUDI_CLKCOR_reg_0,
    \TX_CONFIG_REG_INT_reg[13]_0 ,
    \TX_CONFIG_REG_INT_reg[0]_0 ,
    link_timer_value_ch3,
    \MASK_RUDI_BUFERR_TIMER_reg[12]_1 );
  output [5:0]status_vector_ch3;
  output TOGGLE_RX;
  output XMIT_DATA_INT;
  output MR_AN_COMPLETE;
  output MR_PAGE_RX_SET;
  output XMIT_CONFIG_INT;
  output RECEIVED_IDLE;
  output RX_CONFIG_REG_NULL_reg_0;
  output MR_LINK_STATUS;
  output [2:0]\RX_CONFIG_REG_REG_reg[11]_0 ;
  output \MASK_RUDI_BUFERR_TIMER_reg[3]_0 ;
  output [3:0]\MR_LP_ADV_ABILITY_INT_reg[16]_0 ;
  output [3:0]D;
  input out;
  input userclk;
  input [15:0]Q;
  input [0:0]BASEX_REMOTE_FAULT_RSLVD;
  input RX_RUDI_INVALID_REG_reg_0;
  input RX_RUDI_INVALID;
  input AN_ENABLE_INT;
  input RESTART_AN_REG;
  input RX_CONFIG_VALID;
  input RX_IDLE;
  input CLEAR_PAGE_RECEIVED;
  input CLEAR_STATUS_REG;
  input RECEIVED_IDLE_reg_0;
  input RX_CONFIG_REG_NULL_reg_1;
  input data_out;
  input \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  input \MASK_RUDI_BUFERR_TIMER_reg[0]_0 ;
  input [0:0]SR;
  input RX_INVALID;
  input XMIT_DATA;
  input RXSYNC_STATUS;
  input CONFIG_REG_MATCH_reg_0;
  input [1:0]MASK_RUDI_CLKCOR_reg_0;
  input \TX_CONFIG_REG_INT_reg[13]_0 ;
  input \TX_CONFIG_REG_INT_reg[0]_0 ;
  input [8:0]link_timer_value_ch3;
  input \MASK_RUDI_BUFERR_TIMER_reg[12]_1 ;

  wire ABILITY_MATCH;
  wire ABILITY_MATCH_2;
  wire ABILITY_MATCH_2_i_3__2_n_0;
  wire ABILITY_MATCH_2_i_4__2_n_0;
  wire ABILITY_MATCH_2_i_6__2_n_0;
  wire ABILITY_MATCH_2_i_7__2_n_0;
  wire ABILITY_MATCH_i_1__2_n_0;
  wire ACKNOWLEDGE_MATCH_2;
  wire ACKNOWLEDGE_MATCH_20;
  wire ACKNOWLEDGE_MATCH_3;
  wire ACKNOWLEDGE_MATCH_30;
  wire ACKNOWLEDGE_MATCH_3_reg_n_0;
  wire AN_ENABLE_INT;
  wire AN_SYNC_STATUS;
  wire AN_SYNC_STATUS_i_1__2_n_0;
  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire CLEAR_PAGE_RECEIVED;
  wire CLEAR_STATUS_REG;
  wire CLEAR_STATUS_REG1;
  wire CLEAR_STATUS_REG2;
  wire CONFIG_REG_MATCH;
  wire CONFIG_REG_MATCH_COMB;
  wire CONFIG_REG_MATCH_reg_0;
  wire CONSISTENCY_MATCH;
  wire CONSISTENCY_MATCH_COMB;
  wire CONSISTENCY_MATCH_i_2__2_n_0;
  wire CONSISTENCY_MATCH_i_3__2_n_0;
  wire CONSISTENCY_MATCH_i_4__2_n_0;
  wire CONSISTENCY_MATCH_i_5__2_n_0;
  wire CONSISTENCY_MATCH_i_6__2_n_0;
  wire [3:0]D;
  wire GENERATE_REMOTE_FAULT;
  wire GENERATE_REMOTE_FAULT0;
  wire GENERATE_REMOTE_FAULT_i_2__2_n_0;
  wire GENERATE_REMOTE_FAULT_i_3__2_n_0;
  wire GENERATE_REMOTE_FAULT_i_4__2_n_0;
  wire IDLE_INSERTED;
  wire IDLE_INSERTED0;
  wire IDLE_INSERTED_REG1;
  wire IDLE_INSERTED_REG2;
  wire IDLE_INSERTED_REG3;
  wire IDLE_INSERTED_REG30;
  wire IDLE_INSERTED_REG4;
  wire IDLE_MATCH;
  wire IDLE_MATCH0;
  wire IDLE_MATCH_2;
  wire IDLE_MATCH_20;
  wire IDLE_REMOVED;
  wire IDLE_REMOVED0;
  wire IDLE_REMOVED_REG1;
  wire IDLE_REMOVED_REG2;
  wire \LINK_TIMER[6]_i_1__2_n_0 ;
  wire \LINK_TIMER[9]_i_1__2_n_0 ;
  wire \LINK_TIMER[9]_i_3__2_n_0 ;
  wire LINK_TIMER_DONE;
  wire LINK_TIMER_DONE_i_1__2_n_0;
  wire LINK_TIMER_DONE_i_2__2_n_0;
  wire LINK_TIMER_DONE_i_3__2_n_0;
  wire LINK_TIMER_SATURATED;
  wire LINK_TIMER_SATURATED_COMB;
  wire LINK_TIMER_SATURATED_i_2__2_n_0;
  wire LINK_TIMER_SATURATED_i_3__2_n_0;
  wire LINK_TIMER_SATURATED_i_4__2_n_0;
  wire [9:0]LINK_TIMER_reg;
  wire MASK_RUDI_BUFERR;
  wire [12:0]MASK_RUDI_BUFERR_TIMER;
  wire \MASK_RUDI_BUFERR_TIMER[0]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[10]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[11]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_2__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_4__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_5__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[1]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[2]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[3]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[4]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[5]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[6]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[7]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[8]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[9]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[0]_0 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[12]_1 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[3]_0 ;
  wire MASK_RUDI_BUFERR_i_1__2_n_0;
  wire MASK_RUDI_CLKCOR;
  wire MASK_RUDI_CLKCOR_i_1__2_n_0;
  wire [1:0]MASK_RUDI_CLKCOR_reg_0;
  wire MR_AN_COMPLETE;
  wire MR_AN_COMPLETE_i_1__2_n_0;
  wire MR_AN_ENABLE_CHANGE;
  wire MR_AN_ENABLE_CHANGE0;
  wire MR_AN_ENABLE_REG1;
  wire MR_AN_ENABLE_REG2;
  wire MR_LINK_STATUS;
  wire MR_LINK_STATUS_i_1__2_n_0;
  wire [3:0]\MR_LP_ADV_ABILITY_INT_reg[16]_0 ;
  wire MR_PAGE_RX_CLEAR_REG1;
  wire MR_PAGE_RX_CLEAR_REG2;
  wire MR_PAGE_RX_SET;
  wire MR_PAGE_RX_SET0;
  wire MR_PAGE_RX_SET_i_1__2_n_0;
  wire MR_REMOTE_FAULT_i_1__2_n_0;
  wire MR_RESTART_AN_INT;
  wire MR_RESTART_AN_INT_i_1__2_n_0;
  wire MR_RESTART_AN_SET_REG1;
  wire MR_RESTART_AN_SET_REG2;
  wire [3:0]PREVIOUS_STATE;
  wire PULSE4096;
  wire PULSE40960;
  wire [15:0]Q;
  wire RECEIVED_IDLE;
  wire RECEIVED_IDLE_reg_0;
  wire RESTART_AN_REG;
  wire RXSYNC_STATUS;
  wire RX_CONFIG_REG_NULL_reg_0;
  wire RX_CONFIG_REG_NULL_reg_1;
  wire [2:0]\RX_CONFIG_REG_REG_reg[11]_0 ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[12] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[13] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[1] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[2] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[3] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[4] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[5] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[6] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[7] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[8] ;
  wire RX_CONFIG_SNAPSHOT;
  wire \RX_CONFIG_SNAPSHOT[15]_i_2__2_n_0 ;
  wire \RX_CONFIG_SNAPSHOT[15]_i_3__2_n_0 ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[0] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[10] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[11] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[12] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[13] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[15] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[1] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[2] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[3] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[4] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[5] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[6] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[7] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[8] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[9] ;
  wire RX_CONFIG_VALID;
  wire RX_IDLE;
  wire RX_IDLE_REG1;
  wire RX_IDLE_REG2;
  wire RX_INVALID;
  wire RX_RUDI_INVALID;
  wire [1:0]RX_RUDI_INVALID_DELAY;
  wire RX_RUDI_INVALID_DELAY0;
  wire RX_RUDI_INVALID_REG;
  wire RX_RUDI_INVALID_REG_reg_0;
  wire \SGMII_SPEED[1]_i_2__2_n_0 ;
  wire [0:0]SR;
  wire START_LINK_TIMER;
  wire START_LINK_TIMER_REG;
  wire START_LINK_TIMER_REG2;
  wire START_LINK_TIMER_REG_i_2__2_n_0;
  wire START_LINK_TIMER_REG_i_3__2_n_0;
  wire [3:0]STATE;
  wire \STATE[0]_i_1__2_n_0 ;
  wire \STATE[0]_i_2__2_n_0 ;
  wire \STATE[0]_i_3__2_n_0 ;
  wire \STATE[0]_i_4__2_n_0 ;
  wire \STATE[1]_i_1__2_n_0 ;
  wire \STATE[1]_i_2__2_n_0 ;
  wire \STATE[1]_i_3__2_n_0 ;
  wire \STATE[1]_i_4__2_n_0 ;
  wire \STATE[1]_i_5__2_n_0 ;
  wire \STATE[2]_i_1__2_n_0 ;
  wire \STATE[2]_i_2__2_n_0 ;
  wire \STATE[2]_i_3__2_n_0 ;
  wire \STATE[2]_i_4__2_n_0 ;
  wire \STATE[2]_i_5__2_n_0 ;
  wire \STATE[2]_i_6__2_n_0 ;
  wire \STATE[3]_i_1__2_n_0 ;
  wire \STATE[3]_i_2__2_n_0 ;
  wire \STATE[3]_i_3__2_n_0 ;
  wire \STATE[3]_i_4__2_n_0 ;
  wire SYNC_STATUS_HELD;
  wire SYNC_STATUS_HELD_i_1__2_n_0;
  wire TIMER4096_MSB_REG;
  wire [11:11]TIMER4096_reg;
  wire \TIMER4096_reg_n_0_[0] ;
  wire \TIMER4096_reg_n_0_[10] ;
  wire \TIMER4096_reg_n_0_[1] ;
  wire \TIMER4096_reg_n_0_[2] ;
  wire \TIMER4096_reg_n_0_[3] ;
  wire \TIMER4096_reg_n_0_[4] ;
  wire \TIMER4096_reg_n_0_[5] ;
  wire \TIMER4096_reg_n_0_[6] ;
  wire \TIMER4096_reg_n_0_[7] ;
  wire \TIMER4096_reg_n_0_[8] ;
  wire \TIMER4096_reg_n_0_[9] ;
  wire TOGGLE_RX;
  wire TOGGLE_TX;
  wire TOGGLE_TX_i_1__2_n_0;
  wire \TX_CONFIG_REG_INT[0]_i_1__2_n_0 ;
  wire \TX_CONFIG_REG_INT[11]_i_1__2_n_0 ;
  wire \TX_CONFIG_REG_INT[13]_i_2__2_n_0 ;
  wire \TX_CONFIG_REG_INT[14]_i_1__2_n_0 ;
  wire \TX_CONFIG_REG_INT_reg[0]_0 ;
  wire \TX_CONFIG_REG_INT_reg[13]_0 ;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_i_1__5_n_0;
  wire XMIT_CONFIG_INT_i_2__6_n_0;
  wire XMIT_CONFIG_INT_i_3__2_n_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT0;
  wire [15:15]__16;
  wire data_out;
  wire [8:0]link_timer_value_ch3;
  wire out;
  wire p_0_in0_in;
  wire p_0_in26_in;
  wire [11:0]plusOp__0;
  wire [9:0]plusOp__0__0;
  wire plusOp__0_carry__0_n_6;
  wire plusOp__0_carry__0_n_7;
  wire plusOp__0_carry_n_0;
  wire plusOp__0_carry_n_1;
  wire plusOp__0_carry_n_2;
  wire plusOp__0_carry_n_3;
  wire plusOp__0_carry_n_4;
  wire plusOp__0_carry_n_5;
  wire plusOp__0_carry_n_6;
  wire plusOp__0_carry_n_7;
  wire \plusOp_inferred__0/i__carry__0_n_12 ;
  wire \plusOp_inferred__0/i__carry__0_n_13 ;
  wire \plusOp_inferred__0/i__carry__0_n_14 ;
  wire \plusOp_inferred__0/i__carry__0_n_15 ;
  wire \plusOp_inferred__0/i__carry__0_n_5 ;
  wire \plusOp_inferred__0/i__carry__0_n_6 ;
  wire \plusOp_inferred__0/i__carry__0_n_7 ;
  wire \plusOp_inferred__0/i__carry_n_0 ;
  wire \plusOp_inferred__0/i__carry_n_1 ;
  wire \plusOp_inferred__0/i__carry_n_10 ;
  wire \plusOp_inferred__0/i__carry_n_11 ;
  wire \plusOp_inferred__0/i__carry_n_12 ;
  wire \plusOp_inferred__0/i__carry_n_13 ;
  wire \plusOp_inferred__0/i__carry_n_14 ;
  wire \plusOp_inferred__0/i__carry_n_15 ;
  wire \plusOp_inferred__0/i__carry_n_2 ;
  wire \plusOp_inferred__0/i__carry_n_3 ;
  wire \plusOp_inferred__0/i__carry_n_4 ;
  wire \plusOp_inferred__0/i__carry_n_5 ;
  wire \plusOp_inferred__0/i__carry_n_6 ;
  wire \plusOp_inferred__0/i__carry_n_7 ;
  wire \plusOp_inferred__0/i__carry_n_8 ;
  wire \plusOp_inferred__0/i__carry_n_9 ;
  wire [5:0]status_vector_ch3;
  wire userclk;
  wire [7:2]NLW_plusOp__0_carry__0_CO_UNCONNECTED;
  wire [7:3]NLW_plusOp__0_carry__0_O_UNCONNECTED;
  wire [7:3]\NLW_plusOp_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [7:4]\NLW_plusOp_inferred__0/i__carry__0_O_UNCONNECTED ;

  LUT3 #(
    .INIT(8'hFE)) 
    ABILITY_MATCH_2_i_1__2
       (.I0(MASK_RUDI_BUFERR),
        .I1(RX_IDLE),
        .I2(out),
        .O(ACKNOWLEDGE_MATCH_3));
  LUT6 #(
    .INIT(64'h0000000000000009)) 
    ABILITY_MATCH_2_i_2__2
       (.I0(Q[15]),
        .I1(p_0_in0_in),
        .I2(RECEIVED_IDLE),
        .I3(ABILITY_MATCH_2_i_3__2_n_0),
        .I4(ABILITY_MATCH_2_i_4__2_n_0),
        .I5(CONFIG_REG_MATCH_reg_0),
        .O(CONFIG_REG_MATCH_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_3__2
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .I4(Q[8]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .O(ABILITY_MATCH_2_i_3__2_n_0));
  LUT6 #(
    .INIT(64'hEFFEFFFFFFFFEFFE)) 
    ABILITY_MATCH_2_i_4__2
       (.I0(ABILITY_MATCH_2_i_6__2_n_0),
        .I1(ABILITY_MATCH_2_i_7__2_n_0),
        .I2(Q[13]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[13] ),
        .I4(Q[12]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[12] ),
        .O(ABILITY_MATCH_2_i_4__2_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_6__2
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .I4(Q[1]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .O(ABILITY_MATCH_2_i_6__2_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_7__2
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .I4(Q[5]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .O(ABILITY_MATCH_2_i_7__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_2_reg
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(CONFIG_REG_MATCH_COMB),
        .Q(ABILITY_MATCH_2),
        .R(ACKNOWLEDGE_MATCH_3));
  LUT6 #(
    .INIT(64'h0000000000008F80)) 
    ABILITY_MATCH_i_1__2
       (.I0(CONFIG_REG_MATCH_COMB),
        .I1(ABILITY_MATCH_2),
        .I2(RX_CONFIG_VALID),
        .I3(ABILITY_MATCH),
        .I4(MASK_RUDI_BUFERR),
        .I5(SR),
        .O(ABILITY_MATCH_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ABILITY_MATCH_i_1__2_n_0),
        .Q(ABILITY_MATCH),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT2 #(
    .INIT(4'h8)) 
    ACKNOWLEDGE_MATCH_2_i_1__2
       (.I0(p_0_in26_in),
        .I1(Q[14]),
        .O(ACKNOWLEDGE_MATCH_20));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_2_reg
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(ACKNOWLEDGE_MATCH_20),
        .Q(ACKNOWLEDGE_MATCH_2),
        .R(ACKNOWLEDGE_MATCH_3));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT3 #(
    .INIT(8'h80)) 
    ACKNOWLEDGE_MATCH_3_i_1__2
       (.I0(ACKNOWLEDGE_MATCH_2),
        .I1(Q[14]),
        .I2(p_0_in26_in),
        .O(ACKNOWLEDGE_MATCH_30));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_3_reg
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(ACKNOWLEDGE_MATCH_30),
        .Q(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .R(ACKNOWLEDGE_MATCH_3));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT5 #(
    .INIT(32'hFFBFFF80)) 
    AN_SYNC_STATUS_i_1__2
       (.I0(SYNC_STATUS_HELD),
        .I1(LINK_TIMER_SATURATED),
        .I2(PULSE4096),
        .I3(RXSYNC_STATUS),
        .I4(AN_SYNC_STATUS),
        .O(AN_SYNC_STATUS_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    AN_SYNC_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(AN_SYNC_STATUS_i_1__2_n_0),
        .Q(AN_SYNC_STATUS),
        .R(out));
  FDRE \BASEX_REMOTE_FAULT_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(BASEX_REMOTE_FAULT_RSLVD),
        .Q(status_vector_ch3[2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    CLEAR_STATUS_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CLEAR_STATUS_REG),
        .Q(CLEAR_STATUS_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    CLEAR_STATUS_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CLEAR_STATUS_REG1),
        .Q(CLEAR_STATUS_REG2),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    CONFIG_REG_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_REG_MATCH_COMB),
        .Q(CONFIG_REG_MATCH),
        .R(out));
  LUT5 #(
    .INIT(32'h00000009)) 
    CONSISTENCY_MATCH_i_1__2
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .I1(Q[15]),
        .I2(CONSISTENCY_MATCH_i_2__2_n_0),
        .I3(CONSISTENCY_MATCH_i_3__2_n_0),
        .I4(CONSISTENCY_MATCH_i_4__2_n_0),
        .O(CONSISTENCY_MATCH_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_2__2
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .I4(Q[8]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .O(CONSISTENCY_MATCH_i_2__2_n_0));
  LUT6 #(
    .INIT(64'hEFFEFFFFFFFFEFFE)) 
    CONSISTENCY_MATCH_i_3__2
       (.I0(CONSISTENCY_MATCH_i_5__2_n_0),
        .I1(CONSISTENCY_MATCH_i_6__2_n_0),
        .I2(Q[12]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[12] ),
        .I4(Q[13]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[13] ),
        .O(CONSISTENCY_MATCH_i_3__2_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_4__2
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .I1(Q[9]),
        .I2(Q[10]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .I4(Q[11]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .O(CONSISTENCY_MATCH_i_4__2_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_5__2
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .I4(Q[2]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .O(CONSISTENCY_MATCH_i_5__2_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_6__2
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .I4(Q[5]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .O(CONSISTENCY_MATCH_i_6__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    CONSISTENCY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONSISTENCY_MATCH_COMB),
        .Q(CONSISTENCY_MATCH),
        .R(out));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    GENERATE_REMOTE_FAULT_i_1__2
       (.I0(GENERATE_REMOTE_FAULT_i_2__2_n_0),
        .I1(\STATE[3]_i_3__2_n_0 ),
        .I2(GENERATE_REMOTE_FAULT_i_3__2_n_0),
        .I3(STATE[3]),
        .I4(GENERATE_REMOTE_FAULT_i_4__2_n_0),
        .I5(STATE[0]),
        .O(GENERATE_REMOTE_FAULT0));
  LUT6 #(
    .INIT(64'h0888888888888888)) 
    GENERATE_REMOTE_FAULT_i_2__2
       (.I0(\STATE[1]_i_2__2_n_0 ),
        .I1(\STATE[2]_i_3__2_n_0 ),
        .I2(\STATE[2]_i_4__2_n_0 ),
        .I3(IDLE_MATCH),
        .I4(LINK_TIMER_DONE),
        .I5(STATE[0]),
        .O(GENERATE_REMOTE_FAULT_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h000000000000FF60)) 
    GENERATE_REMOTE_FAULT_i_3__2
       (.I0(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .I1(TOGGLE_RX),
        .I2(ABILITY_MATCH),
        .I3(\STATE[2]_i_3__2_n_0 ),
        .I4(\STATE[2]_i_4__2_n_0 ),
        .I5(\STATE[2]_i_5__2_n_0 ),
        .O(GENERATE_REMOTE_FAULT_i_3__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT2 #(
    .INIT(4'h2)) 
    GENERATE_REMOTE_FAULT_i_4__2
       (.I0(STATE[2]),
        .I1(STATE[1]),
        .O(GENERATE_REMOTE_FAULT_i_4__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    GENERATE_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(GENERATE_REMOTE_FAULT0),
        .Q(GENERATE_REMOTE_FAULT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED),
        .Q(IDLE_INSERTED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG1),
        .Q(IDLE_INSERTED_REG2),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    IDLE_INSERTED_REG3_i_1__2
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE_REG2),
        .O(IDLE_INSERTED_REG30));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG30),
        .Q(IDLE_INSERTED_REG3),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG4_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG3),
        .Q(IDLE_INSERTED_REG4),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT3 #(
    .INIT(8'h08)) 
    IDLE_INSERTED_i_1__2
       (.I0(MASK_RUDI_CLKCOR_reg_0[1]),
        .I1(MASK_RUDI_CLKCOR_reg_0[0]),
        .I2(XMIT_CONFIG_INT),
        .O(IDLE_INSERTED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED0),
        .Q(IDLE_INSERTED),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT3 #(
    .INIT(8'h04)) 
    IDLE_MATCH_2_i_1__2
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_INSERTED_REG4),
        .O(IDLE_MATCH_20));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_2_reg
       (.C(userclk),
        .CE(RX_IDLE_REG2),
        .D(IDLE_MATCH_20),
        .Q(IDLE_MATCH_2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT4 #(
    .INIT(16'h4440)) 
    IDLE_MATCH_i_1__2
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_REMOVED_REG2),
        .I3(IDLE_MATCH_2),
        .O(IDLE_MATCH0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_reg
       (.C(userclk),
        .CE(RX_IDLE_REG2),
        .D(IDLE_MATCH0),
        .Q(IDLE_MATCH),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED),
        .Q(IDLE_REMOVED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED_REG1),
        .Q(IDLE_REMOVED_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT3 #(
    .INIT(8'h04)) 
    IDLE_REMOVED_i_1__2
       (.I0(MASK_RUDI_CLKCOR_reg_0[1]),
        .I1(MASK_RUDI_CLKCOR_reg_0[0]),
        .I2(XMIT_CONFIG_INT),
        .O(IDLE_REMOVED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED0),
        .Q(IDLE_REMOVED),
        .R(out));
  LUT1 #(
    .INIT(2'h1)) 
    \LINK_TIMER[0]_i_1__2 
       (.I0(LINK_TIMER_reg[0]),
        .O(plusOp__0__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \LINK_TIMER[1]_i_1__2 
       (.I0(LINK_TIMER_reg[0]),
        .I1(LINK_TIMER_reg[1]),
        .O(plusOp__0__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \LINK_TIMER[2]_i_1__2 
       (.I0(LINK_TIMER_reg[2]),
        .I1(LINK_TIMER_reg[0]),
        .I2(LINK_TIMER_reg[1]),
        .O(plusOp__0__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \LINK_TIMER[3]_i_1__2 
       (.I0(LINK_TIMER_reg[3]),
        .I1(LINK_TIMER_reg[1]),
        .I2(LINK_TIMER_reg[0]),
        .I3(LINK_TIMER_reg[2]),
        .O(plusOp__0__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \LINK_TIMER[4]_i_1__2 
       (.I0(LINK_TIMER_reg[4]),
        .I1(LINK_TIMER_reg[2]),
        .I2(LINK_TIMER_reg[0]),
        .I3(LINK_TIMER_reg[1]),
        .I4(LINK_TIMER_reg[3]),
        .O(plusOp__0__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \LINK_TIMER[5]_i_1__2 
       (.I0(LINK_TIMER_reg[5]),
        .I1(LINK_TIMER_reg[3]),
        .I2(LINK_TIMER_reg[1]),
        .I3(LINK_TIMER_reg[0]),
        .I4(LINK_TIMER_reg[2]),
        .I5(LINK_TIMER_reg[4]),
        .O(plusOp__0__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \LINK_TIMER[6]_i_1__2 
       (.I0(LINK_TIMER_reg[6]),
        .I1(\LINK_TIMER[9]_i_3__2_n_0 ),
        .O(\LINK_TIMER[6]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    \LINK_TIMER[7]_i_1__2 
       (.I0(LINK_TIMER_reg[7]),
        .I1(\LINK_TIMER[9]_i_3__2_n_0 ),
        .I2(LINK_TIMER_reg[6]),
        .O(plusOp__0__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \LINK_TIMER[8]_i_1__2 
       (.I0(LINK_TIMER_reg[8]),
        .I1(LINK_TIMER_reg[6]),
        .I2(\LINK_TIMER[9]_i_3__2_n_0 ),
        .I3(LINK_TIMER_reg[7]),
        .O(plusOp__0__0[8]));
  LUT4 #(
    .INIT(16'hFFF8)) 
    \LINK_TIMER[9]_i_1__2 
       (.I0(LINK_TIMER_SATURATED),
        .I1(PULSE4096),
        .I2(START_LINK_TIMER_REG),
        .I3(out),
        .O(\LINK_TIMER[9]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \LINK_TIMER[9]_i_2__2 
       (.I0(LINK_TIMER_reg[9]),
        .I1(LINK_TIMER_reg[7]),
        .I2(\LINK_TIMER[9]_i_3__2_n_0 ),
        .I3(LINK_TIMER_reg[6]),
        .I4(LINK_TIMER_reg[8]),
        .O(plusOp__0__0[9]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \LINK_TIMER[9]_i_3__2 
       (.I0(LINK_TIMER_reg[4]),
        .I1(LINK_TIMER_reg[2]),
        .I2(LINK_TIMER_reg[0]),
        .I3(LINK_TIMER_reg[1]),
        .I4(LINK_TIMER_reg[3]),
        .I5(LINK_TIMER_reg[5]),
        .O(\LINK_TIMER[9]_i_3__2_n_0 ));
  LUT5 #(
    .INIT(32'h08000808)) 
    LINK_TIMER_DONE_i_1__2
       (.I0(LINK_TIMER_DONE_i_2__2_n_0),
        .I1(\STATE[3]_i_3__2_n_0 ),
        .I2(LINK_TIMER_DONE_i_3__2_n_0),
        .I3(STATE[3]),
        .I4(\STATE[2]_i_5__2_n_0 ),
        .O(LINK_TIMER_DONE_i_1__2_n_0));
  LUT5 #(
    .INIT(32'h00001110)) 
    LINK_TIMER_DONE_i_2__2
       (.I0(START_LINK_TIMER_REG),
        .I1(out),
        .I2(LINK_TIMER_SATURATED),
        .I3(LINK_TIMER_DONE),
        .I4(START_LINK_TIMER_REG2),
        .O(LINK_TIMER_DONE_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h44F4F4F444444444)) 
    LINK_TIMER_DONE_i_3__2
       (.I0(START_LINK_TIMER_REG_i_2__2_n_0),
        .I1(AN_ENABLE_INT),
        .I2(LINK_TIMER_DONE),
        .I3(RX_CONFIG_REG_NULL_reg_0),
        .I4(ABILITY_MATCH),
        .I5(\SGMII_SPEED[1]_i_2__2_n_0 ),
        .O(LINK_TIMER_DONE_i_3__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_DONE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_DONE_i_1__2_n_0),
        .Q(LINK_TIMER_DONE),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0004)) 
    LINK_TIMER_SATURATED_i_1__2
       (.I0(LINK_TIMER_SATURATED_i_2__2_n_0),
        .I1(LINK_TIMER_SATURATED_i_3__2_n_0),
        .I2(LINK_TIMER_SATURATED_i_4__2_n_0),
        .I3(LINK_TIMER_reg[9]),
        .O(LINK_TIMER_SATURATED_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    LINK_TIMER_SATURATED_i_2__2
       (.I0(link_timer_value_ch3[3]),
        .I1(LINK_TIMER_reg[3]),
        .I2(LINK_TIMER_reg[5]),
        .I3(link_timer_value_ch3[5]),
        .I4(LINK_TIMER_reg[4]),
        .I5(link_timer_value_ch3[4]),
        .O(LINK_TIMER_SATURATED_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_i_3__2
       (.I0(link_timer_value_ch3[6]),
        .I1(LINK_TIMER_reg[6]),
        .I2(LINK_TIMER_reg[7]),
        .I3(link_timer_value_ch3[7]),
        .I4(LINK_TIMER_reg[8]),
        .I5(link_timer_value_ch3[8]),
        .O(LINK_TIMER_SATURATED_i_3__2_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    LINK_TIMER_SATURATED_i_4__2
       (.I0(LINK_TIMER_reg[1]),
        .I1(link_timer_value_ch3[1]),
        .I2(LINK_TIMER_reg[2]),
        .I3(link_timer_value_ch3[2]),
        .I4(link_timer_value_ch3[0]),
        .I5(LINK_TIMER_reg[0]),
        .O(LINK_TIMER_SATURATED_i_4__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_SATURATED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_SATURATED_COMB),
        .Q(LINK_TIMER_SATURATED),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[0] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[0]),
        .Q(LINK_TIMER_reg[0]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[1] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[1]),
        .Q(LINK_TIMER_reg[1]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[2] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[2]),
        .Q(LINK_TIMER_reg[2]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[3] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[3]),
        .Q(LINK_TIMER_reg[3]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[4] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[4]),
        .Q(LINK_TIMER_reg[4]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[5] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[5]),
        .Q(LINK_TIMER_reg[5]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[6] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(\LINK_TIMER[6]_i_1__2_n_0 ),
        .Q(LINK_TIMER_reg[6]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[7] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[7]),
        .Q(LINK_TIMER_reg[7]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[8] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[8]),
        .Q(LINK_TIMER_reg[8]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[9] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[9]),
        .Q(LINK_TIMER_reg[9]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h5155)) 
    \MASK_RUDI_BUFERR_TIMER[0]_i_1__2 
       (.I0(MASK_RUDI_BUFERR_TIMER[0]),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[10]_i_1__2 
       (.I0(\plusOp_inferred__0/i__carry__0_n_14 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[10]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[11]_i_1__2 
       (.I0(\plusOp_inferred__0/i__carry__0_n_13 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[11]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_2__2 
       (.I0(\plusOp_inferred__0/i__carry__0_n_12 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h20000000)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_3__2 
       (.I0(\MASK_RUDI_BUFERR_TIMER[12]_i_4__2_n_0 ),
        .I1(\MASK_RUDI_BUFERR_TIMER[12]_i_5__2_n_0 ),
        .I2(MASK_RUDI_BUFERR_TIMER[3]),
        .I3(MASK_RUDI_BUFERR_TIMER[1]),
        .I4(MASK_RUDI_BUFERR_TIMER[8]),
        .O(\MASK_RUDI_BUFERR_TIMER_reg[3]_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_4__2 
       (.I0(MASK_RUDI_BUFERR_TIMER[10]),
        .I1(MASK_RUDI_BUFERR_TIMER[12]),
        .I2(MASK_RUDI_BUFERR_TIMER[0]),
        .I3(MASK_RUDI_BUFERR_TIMER[2]),
        .I4(MASK_RUDI_BUFERR_TIMER[7]),
        .I5(MASK_RUDI_BUFERR_TIMER[4]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_4__2_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_5__2 
       (.I0(MASK_RUDI_BUFERR_TIMER[6]),
        .I1(MASK_RUDI_BUFERR_TIMER[5]),
        .I2(MASK_RUDI_BUFERR_TIMER[11]),
        .I3(MASK_RUDI_BUFERR_TIMER[9]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_5__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[1]_i_1__2 
       (.I0(\plusOp_inferred__0/i__carry_n_15 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[2]_i_1__2 
       (.I0(\plusOp_inferred__0/i__carry_n_14 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[3]_i_1__2 
       (.I0(\plusOp_inferred__0/i__carry_n_13 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[4]_i_1__2 
       (.I0(\plusOp_inferred__0/i__carry_n_12 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[4]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[5]_i_1__2 
       (.I0(\plusOp_inferred__0/i__carry_n_11 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[6]_i_1__2 
       (.I0(\plusOp_inferred__0/i__carry_n_10 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[6]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[7]_i_1__2 
       (.I0(\plusOp_inferred__0/i__carry_n_9 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[7]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[8]_i_1__2 
       (.I0(\plusOp_inferred__0/i__carry_n_8 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[8]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[9]_i_1__2 
       (.I0(\plusOp_inferred__0/i__carry__0_n_15 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[9]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[0] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[0]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[0]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[10] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[10]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[10]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[11] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[11]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[11]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[12] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[12]_i_2__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[12]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[1] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[1]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[1]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[2] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[2]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[2]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[3] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[3]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[3]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[4] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[4]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[4]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[5] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[5]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[5]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[6] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[6]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[6]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[7] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[7]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[7]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[8] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[8]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[8]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[9] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[9]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[9]),
        .S(out));
  LUT5 #(
    .INIT(32'h20FF2020)) 
    MASK_RUDI_BUFERR_i_1__2
       (.I0(data_out),
        .I1(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[3]_0 ),
        .I4(MASK_RUDI_BUFERR),
        .O(MASK_RUDI_BUFERR_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_BUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_BUFERR_i_1__2_n_0),
        .Q(MASK_RUDI_BUFERR),
        .R(out));
  LUT5 #(
    .INIT(32'hFFFBFFF0)) 
    MASK_RUDI_CLKCOR_i_1__2
       (.I0(RX_RUDI_INVALID),
        .I1(RX_RUDI_INVALID_REG),
        .I2(MASK_RUDI_CLKCOR_reg_0[1]),
        .I3(MASK_RUDI_CLKCOR_reg_0[0]),
        .I4(MASK_RUDI_CLKCOR),
        .O(MASK_RUDI_CLKCOR_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_CLKCOR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_CLKCOR_i_1__2_n_0),
        .Q(MASK_RUDI_CLKCOR),
        .R(RX_RUDI_INVALID_REG_reg_0));
  LUT6 #(
    .INIT(64'h2232222222222020)) 
    MR_AN_COMPLETE_i_1__2
       (.I0(MR_AN_COMPLETE),
        .I1(out),
        .I2(STATE[2]),
        .I3(STATE[3]),
        .I4(STATE[0]),
        .I5(STATE[1]),
        .O(MR_AN_COMPLETE_i_1__2_n_0));
  FDRE MR_AN_COMPLETE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_COMPLETE_i_1__2_n_0),
        .Q(MR_AN_COMPLETE),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    MR_AN_ENABLE_CHANGE_i_1__2
       (.I0(MR_AN_ENABLE_REG2),
        .I1(MR_AN_ENABLE_REG1),
        .O(MR_AN_ENABLE_CHANGE0));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_CHANGE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_CHANGE0),
        .Q(MR_AN_ENABLE_CHANGE),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(AN_ENABLE_INT),
        .Q(MR_AN_ENABLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_REG1),
        .Q(MR_AN_ENABLE_REG2),
        .R(out));
  LUT5 #(
    .INIT(32'h0000AE00)) 
    MR_LINK_STATUS_i_1__2
       (.I0(MR_LINK_STATUS),
        .I1(CLEAR_STATUS_REG1),
        .I2(CLEAR_STATUS_REG2),
        .I3(XMIT_DATA_INT),
        .I4(out),
        .O(MR_LINK_STATUS_i_1__2_n_0));
  FDRE MR_LINK_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_LINK_STATUS_i_1__2_n_0),
        .Q(MR_LINK_STATUS),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[11] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[10]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[13] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[12]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[15] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[14]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[16] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[15]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [3]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_PAGE_RX_CLEAR_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CLEAR_PAGE_RECEIVED),
        .Q(MR_PAGE_RX_CLEAR_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_PAGE_RX_CLEAR_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_PAGE_RX_CLEAR_REG1),
        .Q(MR_PAGE_RX_CLEAR_REG2),
        .R(out));
  LUT5 #(
    .INIT(32'hEFAAAAAA)) 
    MR_PAGE_RX_SET_i_1__2
       (.I0(MR_PAGE_RX_SET0),
        .I1(MR_PAGE_RX_CLEAR_REG2),
        .I2(MR_PAGE_RX_CLEAR_REG1),
        .I3(START_LINK_TIMER_REG_i_2__2_n_0),
        .I4(MR_PAGE_RX_SET),
        .O(MR_PAGE_RX_SET_i_1__2_n_0));
  FDRE MR_PAGE_RX_SET_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_PAGE_RX_SET_i_1__2_n_0),
        .Q(MR_PAGE_RX_SET),
        .R(out));
  LUT5 #(
    .INIT(32'hF4FF4444)) 
    MR_REMOTE_FAULT_i_1__2
       (.I0(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [3]),
        .I1(GENERATE_REMOTE_FAULT),
        .I2(CLEAR_STATUS_REG2),
        .I3(CLEAR_STATUS_REG1),
        .I4(status_vector_ch3[5]),
        .O(MR_REMOTE_FAULT_i_1__2_n_0));
  FDRE MR_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_REMOTE_FAULT_i_1__2_n_0),
        .Q(status_vector_ch3[5]),
        .R(out));
  LUT5 #(
    .INIT(32'hAE0C0C0C)) 
    MR_RESTART_AN_INT_i_1__2
       (.I0(START_LINK_TIMER_REG_i_2__2_n_0),
        .I1(MR_RESTART_AN_SET_REG1),
        .I2(MR_RESTART_AN_SET_REG2),
        .I3(AN_ENABLE_INT),
        .I4(MR_RESTART_AN_INT),
        .O(MR_RESTART_AN_INT_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_INT_i_1__2_n_0),
        .Q(MR_RESTART_AN_INT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RESTART_AN_REG),
        .Q(MR_RESTART_AN_SET_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_SET_REG1),
        .Q(MR_RESTART_AN_SET_REG2),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[0]),
        .Q(PREVIOUS_STATE[0]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[1]),
        .Q(PREVIOUS_STATE[1]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[2]),
        .Q(PREVIOUS_STATE[2]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[3]),
        .Q(PREVIOUS_STATE[3]),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    PULSE4096_i_1__2
       (.I0(TIMER4096_MSB_REG),
        .I1(TIMER4096_reg),
        .O(PULSE40960));
  FDRE #(
    .INIT(1'b0)) 
    PULSE4096_reg
       (.C(userclk),
        .CE(1'b1),
        .D(PULSE40960),
        .Q(PULSE4096),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RECEIVED_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RECEIVED_IDLE_reg_0),
        .Q(RECEIVED_IDLE),
        .R(out));
  FDRE RUDI_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[1]),
        .Q(status_vector_ch3[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_CONFIG_REG_NULL_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_REG_NULL_reg_1),
        .Q(RX_CONFIG_REG_NULL_reg_0),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[10]),
        .Q(\RX_CONFIG_REG_REG_reg[11]_0 [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[11]),
        .Q(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[12]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[12] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[13]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[13] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[14] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[14]),
        .Q(p_0_in26_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[15]),
        .Q(p_0_in0_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[8]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[9]),
        .Q(\RX_CONFIG_REG_REG_reg[11]_0 [0]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0D00000000000000)) 
    \RX_CONFIG_SNAPSHOT[15]_i_1__2 
       (.I0(\RX_CONFIG_SNAPSHOT[15]_i_2__2_n_0 ),
        .I1(\RX_CONFIG_SNAPSHOT[15]_i_3__2_n_0 ),
        .I2(ABILITY_MATCH),
        .I3(RX_CONFIG_VALID),
        .I4(ABILITY_MATCH_2),
        .I5(CONFIG_REG_MATCH),
        .O(RX_CONFIG_SNAPSHOT));
  LUT2 #(
    .INIT(4'h8)) 
    \RX_CONFIG_SNAPSHOT[15]_i_2__2 
       (.I0(STATE[0]),
        .I1(STATE[1]),
        .O(\RX_CONFIG_SNAPSHOT[15]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \RX_CONFIG_SNAPSHOT[15]_i_3__2 
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .O(\RX_CONFIG_SNAPSHOT[15]_i_3__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[0]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[10]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[11]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[12]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[12] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[13]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[13] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[15]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[1]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[2]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[3]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[4]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[5]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[6]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[7]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[8]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[9]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(RX_IDLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE_REG1),
        .Q(RX_IDLE_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT5 #(
    .INIT(32'h000000AB)) 
    \RX_RUDI_INVALID_DELAY[0]_i_1__2 
       (.I0(RX_INVALID),
        .I1(XMIT_DATA),
        .I2(RXSYNC_STATUS),
        .I3(MASK_RUDI_BUFERR),
        .I4(MASK_RUDI_CLKCOR),
        .O(RX_RUDI_INVALID_DELAY0));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY0),
        .Q(RX_RUDI_INVALID_DELAY[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[0]),
        .Q(RX_RUDI_INVALID_DELAY[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_RUDI_INVALID_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID),
        .Q(RX_RUDI_INVALID_REG),
        .R(RX_RUDI_INVALID_REG_reg_0));
  FDRE SGMII_PHY_STATUS_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[15]),
        .Q(status_vector_ch3[1]),
        .R(out));
  LUT5 #(
    .INIT(32'h00200000)) 
    \SGMII_SPEED[1]_i_1__2 
       (.I0(\SGMII_SPEED[1]_i_2__2_n_0 ),
        .I1(PREVIOUS_STATE[2]),
        .I2(PREVIOUS_STATE[0]),
        .I3(PREVIOUS_STATE[3]),
        .I4(PREVIOUS_STATE[1]),
        .O(MR_PAGE_RX_SET0));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \SGMII_SPEED[1]_i_2__2 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[0]),
        .O(\SGMII_SPEED[1]_i_2__2_n_0 ));
  FDRE \SGMII_SPEED_reg[0] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[10]),
        .Q(status_vector_ch3[3]),
        .R(out));
  FDSE \SGMII_SPEED_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[11]),
        .Q(status_vector_ch3[4]),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER_REG),
        .Q(START_LINK_TIMER_REG2),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFF2F22FFFFFFFF)) 
    START_LINK_TIMER_REG_i_1__2
       (.I0(\STATE[2]_i_5__2_n_0 ),
        .I1(STATE[3]),
        .I2(START_LINK_TIMER_REG_i_2__2_n_0),
        .I3(AN_ENABLE_INT),
        .I4(START_LINK_TIMER_REG_i_3__2_n_0),
        .I5(\STATE[3]_i_3__2_n_0 ),
        .O(START_LINK_TIMER));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    START_LINK_TIMER_REG_i_2__2
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .O(START_LINK_TIMER_REG_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    START_LINK_TIMER_REG_i_3__2
       (.I0(STATE[0]),
        .I1(STATE[3]),
        .I2(STATE[2]),
        .I3(STATE[1]),
        .I4(\STATE[1]_i_4__2_n_0 ),
        .I5(LINK_TIMER_DONE),
        .O(START_LINK_TIMER_REG_i_3__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER),
        .Q(START_LINK_TIMER_REG),
        .R(out));
  LUT5 #(
    .INIT(32'h0000AAA2)) 
    \STATE[0]_i_1__2 
       (.I0(\STATE[3]_i_3__2_n_0 ),
        .I1(\STATE[0]_i_2__2_n_0 ),
        .I2(\STATE[0]_i_3__2_n_0 ),
        .I3(\STATE[0]_i_4__2_n_0 ),
        .I4(STATE[3]),
        .O(\STATE[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT5 #(
    .INIT(32'hEBAAEBFF)) 
    \STATE[0]_i_2__2 
       (.I0(\STATE[2]_i_3__2_n_0 ),
        .I1(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .I2(TOGGLE_RX),
        .I3(ABILITY_MATCH),
        .I4(STATE[0]),
        .O(\STATE[0]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h000000008B88B3B0)) 
    \STATE[0]_i_3__2 
       (.I0(\STATE[1]_i_4__2_n_0 ),
        .I1(STATE[2]),
        .I2(STATE[0]),
        .I3(AN_ENABLE_INT),
        .I4(LINK_TIMER_DONE),
        .I5(STATE[1]),
        .O(\STATE[0]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h000007CC00000000)) 
    \STATE[0]_i_4__2 
       (.I0(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I1(STATE[0]),
        .I2(RX_CONFIG_REG_NULL_reg_0),
        .I3(ABILITY_MATCH),
        .I4(STATE[2]),
        .I5(STATE[1]),
        .O(\STATE[0]_i_4__2_n_0 ));
  LUT5 #(
    .INIT(32'h0000AA2A)) 
    \STATE[1]_i_1__2 
       (.I0(\STATE[3]_i_3__2_n_0 ),
        .I1(\STATE[1]_i_2__2_n_0 ),
        .I2(\STATE[2]_i_3__2_n_0 ),
        .I3(\STATE[1]_i_3__2_n_0 ),
        .I4(STATE[3]),
        .O(\STATE[1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF70700FFF)) 
    \STATE[1]_i_2__2 
       (.I0(\STATE[1]_i_4__2_n_0 ),
        .I1(\STATE[1]_i_5__2_n_0 ),
        .I2(STATE[0]),
        .I3(LINK_TIMER_DONE),
        .I4(STATE[1]),
        .I5(STATE[2]),
        .O(\STATE[1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    \STATE[1]_i_3__2 
       (.I0(\STATE[1]_i_4__2_n_0 ),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .I3(IDLE_MATCH),
        .I4(LINK_TIMER_DONE),
        .I5(STATE[0]),
        .O(\STATE[1]_i_3__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \STATE[1]_i_4__2 
       (.I0(ABILITY_MATCH),
        .I1(RX_CONFIG_REG_NULL_reg_0),
        .O(\STATE[1]_i_4__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \STATE[1]_i_5__2 
       (.I0(ABILITY_MATCH),
        .I1(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .O(\STATE[1]_i_5__2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAAAAA02)) 
    \STATE[2]_i_1__2 
       (.I0(\STATE[3]_i_3__2_n_0 ),
        .I1(\STATE[2]_i_2__2_n_0 ),
        .I2(\STATE[2]_i_3__2_n_0 ),
        .I3(\STATE[2]_i_4__2_n_0 ),
        .I4(\STATE[2]_i_5__2_n_0 ),
        .I5(STATE[3]),
        .O(\STATE[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \STATE[2]_i_2__2 
       (.I0(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .I1(TOGGLE_RX),
        .I2(ABILITY_MATCH),
        .O(\STATE[2]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT5 #(
    .INIT(32'hFF77F777)) 
    \STATE[2]_i_3__2 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(RX_CONFIG_REG_NULL_reg_0),
        .I3(ABILITY_MATCH),
        .I4(STATE[0]),
        .O(\STATE[2]_i_3__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT4 #(
    .INIT(16'h0444)) 
    \STATE[2]_i_4__2 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(RX_CONFIG_REG_NULL_reg_0),
        .I3(ABILITY_MATCH),
        .O(\STATE[2]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h0040000000000000)) 
    \STATE[2]_i_5__2 
       (.I0(RX_CONFIG_REG_NULL_reg_0),
        .I1(STATE[0]),
        .I2(CONSISTENCY_MATCH),
        .I3(\STATE[2]_i_6__2_n_0 ),
        .I4(ABILITY_MATCH),
        .I5(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .O(\STATE[2]_i_5__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \STATE[2]_i_6__2 
       (.I0(STATE[2]),
        .I1(STATE[1]),
        .O(\STATE[2]_i_6__2_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \STATE[3]_i_1__2 
       (.I0(\STATE[3]_i_2__2_n_0 ),
        .I1(\STATE[3]_i_3__2_n_0 ),
        .I2(AN_SYNC_STATUS),
        .I3(AN_ENABLE_INT),
        .O(\STATE[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT5 #(
    .INIT(32'h00100011)) 
    \STATE[3]_i_2__2 
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .I4(AN_ENABLE_INT),
        .O(\STATE[3]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h000D0000)) 
    \STATE[3]_i_3__2 
       (.I0(XMIT_CONFIG_INT),
        .I1(\STATE[3]_i_4__2_n_0 ),
        .I2(MR_AN_ENABLE_CHANGE),
        .I3(MR_RESTART_AN_INT),
        .I4(AN_SYNC_STATUS),
        .O(\STATE[3]_i_3__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT5 #(
    .INIT(32'hEEEEFFFE)) 
    \STATE[3]_i_4__2 
       (.I0(MASK_RUDI_CLKCOR),
        .I1(MASK_RUDI_BUFERR),
        .I2(RXSYNC_STATUS),
        .I3(XMIT_DATA),
        .I4(RX_INVALID),
        .O(\STATE[3]_i_4__2_n_0 ));
  FDRE \STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[0]_i_1__2_n_0 ),
        .Q(STATE[0]),
        .R(out));
  FDRE \STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[1]_i_1__2_n_0 ),
        .Q(STATE[1]),
        .R(out));
  FDRE \STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[2]_i_1__2_n_0 ),
        .Q(STATE[2]),
        .R(out));
  FDRE \STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[3]_i_1__2_n_0 ),
        .Q(STATE[3]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT4 #(
    .INIT(16'hBFAA)) 
    SYNC_STATUS_HELD_i_1__2
       (.I0(RXSYNC_STATUS),
        .I1(LINK_TIMER_SATURATED),
        .I2(PULSE4096),
        .I3(SYNC_STATUS_HELD),
        .O(SYNC_STATUS_HELD_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_HELD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_HELD_i_1__2_n_0),
        .Q(SYNC_STATUS_HELD),
        .R(out));
  LUT1 #(
    .INIT(2'h1)) 
    \TIMER4096[0]_i_1__2 
       (.I0(\TIMER4096_reg_n_0_[0] ),
        .O(plusOp__0[0]));
  FDRE #(
    .INIT(1'b0)) 
    TIMER4096_MSB_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TIMER4096_reg),
        .Q(TIMER4096_MSB_REG),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[0]),
        .Q(\TIMER4096_reg_n_0_[0] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[10]),
        .Q(\TIMER4096_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[11]),
        .Q(TIMER4096_reg),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[1]),
        .Q(\TIMER4096_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[2]),
        .Q(\TIMER4096_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[3]),
        .Q(\TIMER4096_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[4]),
        .Q(\TIMER4096_reg_n_0_[4] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[5]),
        .Q(\TIMER4096_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[6]),
        .Q(\TIMER4096_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[7]),
        .Q(\TIMER4096_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[8]),
        .Q(\TIMER4096_reg_n_0_[8] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[9]),
        .Q(\TIMER4096_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_RX_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[11]),
        .Q(TOGGLE_RX),
        .R(out));
  LUT6 #(
    .INIT(64'h5555554588888888)) 
    TOGGLE_TX_i_1__2
       (.I0(MR_PAGE_RX_SET0),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .I3(STATE[0]),
        .I4(STATE[3]),
        .I5(TOGGLE_TX),
        .O(TOGGLE_TX_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_TX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TOGGLE_TX_i_1__2_n_0),
        .Q(TOGGLE_TX),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    \TX_CONFIG_REG_INT[0]_i_1__2 
       (.I0(STATE[1]),
        .I1(\TX_CONFIG_REG_INT_reg[0]_0 ),
        .I2(STATE[2]),
        .O(\TX_CONFIG_REG_INT[0]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \TX_CONFIG_REG_INT[11]_i_1__2 
       (.I0(STATE[2]),
        .I1(TOGGLE_TX),
        .O(\TX_CONFIG_REG_INT[11]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h000B)) 
    \TX_CONFIG_REG_INT[13]_i_1__2 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[0]),
        .O(__16));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \TX_CONFIG_REG_INT[13]_i_2__2 
       (.I0(STATE[2]),
        .I1(\TX_CONFIG_REG_INT_reg[13]_0 ),
        .O(\TX_CONFIG_REG_INT[13]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT5 #(
    .INIT(32'hFAFE0200)) 
    \TX_CONFIG_REG_INT[14]_i_1__2 
       (.I0(STATE[0]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[1]),
        .I4(D[3]),
        .O(\TX_CONFIG_REG_INT[14]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[0] 
       (.C(userclk),
        .CE(__16),
        .D(\TX_CONFIG_REG_INT[0]_i_1__2_n_0 ),
        .Q(D[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[11] 
       (.C(userclk),
        .CE(__16),
        .D(\TX_CONFIG_REG_INT[11]_i_1__2_n_0 ),
        .Q(D[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[13] 
       (.C(userclk),
        .CE(__16),
        .D(\TX_CONFIG_REG_INT[13]_i_2__2_n_0 ),
        .Q(D[2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[14]_i_1__2_n_0 ),
        .Q(D[3]),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFFFFFF0F002F20)) 
    XMIT_CONFIG_INT_i_1__5
       (.I0(XMIT_CONFIG_INT),
        .I1(XMIT_CONFIG_INT_i_2__6_n_0),
        .I2(START_LINK_TIMER_REG_i_2__2_n_0),
        .I3(AN_ENABLE_INT),
        .I4(XMIT_CONFIG_INT_i_3__2_n_0),
        .I5(out),
        .O(XMIT_CONFIG_INT_i_1__5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    XMIT_CONFIG_INT_i_2__6
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .O(XMIT_CONFIG_INT_i_2__6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    XMIT_CONFIG_INT_i_3__2
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[0]),
        .O(XMIT_CONFIG_INT_i_3__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_CONFIG_INT_i_1__5_n_0),
        .Q(XMIT_CONFIG_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT4 #(
    .INIT(16'h0180)) 
    XMIT_DATA_INT_i_1__6
       (.I0(STATE[2]),
        .I1(STATE[1]),
        .I2(STATE[0]),
        .I3(STATE[3]),
        .O(XMIT_DATA_INT0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_DATA_INT0),
        .Q(XMIT_DATA_INT),
        .R(out));
  CARRY8 plusOp__0_carry
       (.CI(\TIMER4096_reg_n_0_[0] ),
        .CI_TOP(1'b0),
        .CO({plusOp__0_carry_n_0,plusOp__0_carry_n_1,plusOp__0_carry_n_2,plusOp__0_carry_n_3,plusOp__0_carry_n_4,plusOp__0_carry_n_5,plusOp__0_carry_n_6,plusOp__0_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp__0[8:1]),
        .S({\TIMER4096_reg_n_0_[8] ,\TIMER4096_reg_n_0_[7] ,\TIMER4096_reg_n_0_[6] ,\TIMER4096_reg_n_0_[5] ,\TIMER4096_reg_n_0_[4] ,\TIMER4096_reg_n_0_[3] ,\TIMER4096_reg_n_0_[2] ,\TIMER4096_reg_n_0_[1] }));
  CARRY8 plusOp__0_carry__0
       (.CI(plusOp__0_carry_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_plusOp__0_carry__0_CO_UNCONNECTED[7:2],plusOp__0_carry__0_n_6,plusOp__0_carry__0_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp__0_carry__0_O_UNCONNECTED[7:3],plusOp__0[11:9]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,TIMER4096_reg,\TIMER4096_reg_n_0_[10] ,\TIMER4096_reg_n_0_[9] }));
  CARRY8 \plusOp_inferred__0/i__carry 
       (.CI(MASK_RUDI_BUFERR_TIMER[0]),
        .CI_TOP(1'b0),
        .CO({\plusOp_inferred__0/i__carry_n_0 ,\plusOp_inferred__0/i__carry_n_1 ,\plusOp_inferred__0/i__carry_n_2 ,\plusOp_inferred__0/i__carry_n_3 ,\plusOp_inferred__0/i__carry_n_4 ,\plusOp_inferred__0/i__carry_n_5 ,\plusOp_inferred__0/i__carry_n_6 ,\plusOp_inferred__0/i__carry_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\plusOp_inferred__0/i__carry_n_8 ,\plusOp_inferred__0/i__carry_n_9 ,\plusOp_inferred__0/i__carry_n_10 ,\plusOp_inferred__0/i__carry_n_11 ,\plusOp_inferred__0/i__carry_n_12 ,\plusOp_inferred__0/i__carry_n_13 ,\plusOp_inferred__0/i__carry_n_14 ,\plusOp_inferred__0/i__carry_n_15 }),
        .S(MASK_RUDI_BUFERR_TIMER[8:1]));
  CARRY8 \plusOp_inferred__0/i__carry__0 
       (.CI(\plusOp_inferred__0/i__carry_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_plusOp_inferred__0/i__carry__0_CO_UNCONNECTED [7:3],\plusOp_inferred__0/i__carry__0_n_5 ,\plusOp_inferred__0/i__carry__0_n_6 ,\plusOp_inferred__0/i__carry__0_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_plusOp_inferred__0/i__carry__0_O_UNCONNECTED [7:4],\plusOp_inferred__0/i__carry__0_n_12 ,\plusOp_inferred__0/i__carry__0_n_13 ,\plusOp_inferred__0/i__carry__0_n_14 ,\plusOp_inferred__0/i__carry__0_n_15 }),
        .S({1'b0,1'b0,1'b0,1'b0,MASK_RUDI_BUFERR_TIMER[12:9]}));
endmodule

(* ORIG_REF_NAME = "AUTO_NEG" *) 
module quadsgmii_0_TEST_AUTO_NEG_152
   (status_vector_ch2,
    TOGGLE_RX,
    XMIT_DATA_INT,
    MR_AN_COMPLETE,
    MR_PAGE_RX_SET,
    XMIT_CONFIG_INT,
    RECEIVED_IDLE,
    RX_CONFIG_REG_NULL_reg_0,
    MR_LINK_STATUS,
    \RX_CONFIG_REG_REG_reg[11]_0 ,
    \MASK_RUDI_BUFERR_TIMER_reg[3]_0 ,
    \MR_LP_ADV_ABILITY_INT_reg[16]_0 ,
    D,
    out,
    userclk,
    Q,
    BASEX_REMOTE_FAULT_RSLVD,
    RX_RUDI_INVALID_REG_reg_0,
    RX_RUDI_INVALID,
    AN_ENABLE_INT,
    RESTART_AN_REG,
    RX_CONFIG_VALID,
    RX_IDLE,
    CLEAR_PAGE_RECEIVED,
    CLEAR_STATUS_REG,
    RECEIVED_IDLE_reg_0,
    RX_CONFIG_REG_NULL_reg_1,
    data_out,
    \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ,
    \MASK_RUDI_BUFERR_TIMER_reg[0]_0 ,
    SR,
    RX_INVALID,
    XMIT_DATA,
    RXSYNC_STATUS,
    CONFIG_REG_MATCH_reg_0,
    MASK_RUDI_CLKCOR_reg_0,
    \TX_CONFIG_REG_INT_reg[13]_0 ,
    \TX_CONFIG_REG_INT_reg[0]_0 ,
    link_timer_value_ch2,
    \MASK_RUDI_BUFERR_TIMER_reg[12]_1 );
  output [5:0]status_vector_ch2;
  output TOGGLE_RX;
  output XMIT_DATA_INT;
  output MR_AN_COMPLETE;
  output MR_PAGE_RX_SET;
  output XMIT_CONFIG_INT;
  output RECEIVED_IDLE;
  output RX_CONFIG_REG_NULL_reg_0;
  output MR_LINK_STATUS;
  output [2:0]\RX_CONFIG_REG_REG_reg[11]_0 ;
  output \MASK_RUDI_BUFERR_TIMER_reg[3]_0 ;
  output [3:0]\MR_LP_ADV_ABILITY_INT_reg[16]_0 ;
  output [3:0]D;
  input out;
  input userclk;
  input [15:0]Q;
  input [0:0]BASEX_REMOTE_FAULT_RSLVD;
  input RX_RUDI_INVALID_REG_reg_0;
  input RX_RUDI_INVALID;
  input AN_ENABLE_INT;
  input RESTART_AN_REG;
  input RX_CONFIG_VALID;
  input RX_IDLE;
  input CLEAR_PAGE_RECEIVED;
  input CLEAR_STATUS_REG;
  input RECEIVED_IDLE_reg_0;
  input RX_CONFIG_REG_NULL_reg_1;
  input data_out;
  input \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  input \MASK_RUDI_BUFERR_TIMER_reg[0]_0 ;
  input [0:0]SR;
  input RX_INVALID;
  input XMIT_DATA;
  input RXSYNC_STATUS;
  input CONFIG_REG_MATCH_reg_0;
  input [1:0]MASK_RUDI_CLKCOR_reg_0;
  input \TX_CONFIG_REG_INT_reg[13]_0 ;
  input \TX_CONFIG_REG_INT_reg[0]_0 ;
  input [8:0]link_timer_value_ch2;
  input \MASK_RUDI_BUFERR_TIMER_reg[12]_1 ;

  wire ABILITY_MATCH;
  wire ABILITY_MATCH_2;
  wire ABILITY_MATCH_2_i_3__1_n_0;
  wire ABILITY_MATCH_2_i_4__1_n_0;
  wire ABILITY_MATCH_2_i_6__1_n_0;
  wire ABILITY_MATCH_2_i_7__1_n_0;
  wire ABILITY_MATCH_i_1__1_n_0;
  wire ACKNOWLEDGE_MATCH_2;
  wire ACKNOWLEDGE_MATCH_20;
  wire ACKNOWLEDGE_MATCH_3;
  wire ACKNOWLEDGE_MATCH_30;
  wire ACKNOWLEDGE_MATCH_3_reg_n_0;
  wire AN_ENABLE_INT;
  wire AN_SYNC_STATUS;
  wire AN_SYNC_STATUS_i_1__1_n_0;
  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire CLEAR_PAGE_RECEIVED;
  wire CLEAR_STATUS_REG;
  wire CLEAR_STATUS_REG1;
  wire CLEAR_STATUS_REG2;
  wire CONFIG_REG_MATCH;
  wire CONFIG_REG_MATCH_COMB;
  wire CONFIG_REG_MATCH_reg_0;
  wire CONSISTENCY_MATCH;
  wire CONSISTENCY_MATCH_COMB;
  wire CONSISTENCY_MATCH_i_2__1_n_0;
  wire CONSISTENCY_MATCH_i_3__1_n_0;
  wire CONSISTENCY_MATCH_i_4__1_n_0;
  wire CONSISTENCY_MATCH_i_5__1_n_0;
  wire CONSISTENCY_MATCH_i_6__1_n_0;
  wire [3:0]D;
  wire GENERATE_REMOTE_FAULT;
  wire GENERATE_REMOTE_FAULT0;
  wire GENERATE_REMOTE_FAULT_i_2__1_n_0;
  wire GENERATE_REMOTE_FAULT_i_3__1_n_0;
  wire GENERATE_REMOTE_FAULT_i_4__1_n_0;
  wire IDLE_INSERTED;
  wire IDLE_INSERTED0;
  wire IDLE_INSERTED_REG1;
  wire IDLE_INSERTED_REG2;
  wire IDLE_INSERTED_REG3;
  wire IDLE_INSERTED_REG30;
  wire IDLE_INSERTED_REG4;
  wire IDLE_MATCH;
  wire IDLE_MATCH0;
  wire IDLE_MATCH_2;
  wire IDLE_MATCH_20;
  wire IDLE_REMOVED;
  wire IDLE_REMOVED0;
  wire IDLE_REMOVED_REG1;
  wire IDLE_REMOVED_REG2;
  wire \LINK_TIMER[6]_i_1__1_n_0 ;
  wire \LINK_TIMER[9]_i_1__1_n_0 ;
  wire \LINK_TIMER[9]_i_3__1_n_0 ;
  wire LINK_TIMER_DONE;
  wire LINK_TIMER_DONE_i_1__1_n_0;
  wire LINK_TIMER_DONE_i_2__1_n_0;
  wire LINK_TIMER_DONE_i_3__1_n_0;
  wire LINK_TIMER_SATURATED;
  wire LINK_TIMER_SATURATED_COMB;
  wire LINK_TIMER_SATURATED_i_2__1_n_0;
  wire LINK_TIMER_SATURATED_i_3__1_n_0;
  wire LINK_TIMER_SATURATED_i_4__1_n_0;
  wire [9:0]LINK_TIMER_reg;
  wire MASK_RUDI_BUFERR;
  wire [12:0]MASK_RUDI_BUFERR_TIMER;
  wire \MASK_RUDI_BUFERR_TIMER[0]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[10]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[11]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_2__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_4__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_5__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[1]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[2]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[3]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[4]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[5]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[6]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[7]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[8]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[9]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[0]_0 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[12]_1 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[3]_0 ;
  wire MASK_RUDI_BUFERR_i_1__1_n_0;
  wire MASK_RUDI_CLKCOR;
  wire MASK_RUDI_CLKCOR_i_1__1_n_0;
  wire [1:0]MASK_RUDI_CLKCOR_reg_0;
  wire MR_AN_COMPLETE;
  wire MR_AN_COMPLETE_i_1__1_n_0;
  wire MR_AN_ENABLE_CHANGE;
  wire MR_AN_ENABLE_CHANGE0;
  wire MR_AN_ENABLE_REG1;
  wire MR_AN_ENABLE_REG2;
  wire MR_LINK_STATUS;
  wire MR_LINK_STATUS_i_1__1_n_0;
  wire [3:0]\MR_LP_ADV_ABILITY_INT_reg[16]_0 ;
  wire MR_PAGE_RX_CLEAR_REG1;
  wire MR_PAGE_RX_CLEAR_REG2;
  wire MR_PAGE_RX_SET;
  wire MR_PAGE_RX_SET0;
  wire MR_PAGE_RX_SET_i_1__1_n_0;
  wire MR_REMOTE_FAULT_i_1__1_n_0;
  wire MR_RESTART_AN_INT;
  wire MR_RESTART_AN_INT_i_1__1_n_0;
  wire MR_RESTART_AN_SET_REG1;
  wire MR_RESTART_AN_SET_REG2;
  wire [3:0]PREVIOUS_STATE;
  wire PULSE4096;
  wire PULSE40960;
  wire [15:0]Q;
  wire RECEIVED_IDLE;
  wire RECEIVED_IDLE_reg_0;
  wire RESTART_AN_REG;
  wire RXSYNC_STATUS;
  wire RX_CONFIG_REG_NULL_reg_0;
  wire RX_CONFIG_REG_NULL_reg_1;
  wire [2:0]\RX_CONFIG_REG_REG_reg[11]_0 ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[12] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[13] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[1] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[2] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[3] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[4] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[5] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[6] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[7] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[8] ;
  wire RX_CONFIG_SNAPSHOT;
  wire \RX_CONFIG_SNAPSHOT[15]_i_2__1_n_0 ;
  wire \RX_CONFIG_SNAPSHOT[15]_i_3__1_n_0 ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[0] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[10] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[11] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[12] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[13] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[15] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[1] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[2] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[3] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[4] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[5] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[6] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[7] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[8] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[9] ;
  wire RX_CONFIG_VALID;
  wire RX_IDLE;
  wire RX_IDLE_REG1;
  wire RX_IDLE_REG2;
  wire RX_INVALID;
  wire RX_RUDI_INVALID;
  wire [1:0]RX_RUDI_INVALID_DELAY;
  wire RX_RUDI_INVALID_DELAY0;
  wire RX_RUDI_INVALID_REG;
  wire RX_RUDI_INVALID_REG_reg_0;
  wire \SGMII_SPEED[1]_i_2__1_n_0 ;
  wire [0:0]SR;
  wire START_LINK_TIMER;
  wire START_LINK_TIMER_REG;
  wire START_LINK_TIMER_REG2;
  wire START_LINK_TIMER_REG_i_2__1_n_0;
  wire START_LINK_TIMER_REG_i_3__1_n_0;
  wire [3:0]STATE;
  wire \STATE[0]_i_1__1_n_0 ;
  wire \STATE[0]_i_2__1_n_0 ;
  wire \STATE[0]_i_3__1_n_0 ;
  wire \STATE[0]_i_4__1_n_0 ;
  wire \STATE[1]_i_1__1_n_0 ;
  wire \STATE[1]_i_2__1_n_0 ;
  wire \STATE[1]_i_3__1_n_0 ;
  wire \STATE[1]_i_4__1_n_0 ;
  wire \STATE[1]_i_5__1_n_0 ;
  wire \STATE[2]_i_1__1_n_0 ;
  wire \STATE[2]_i_2__1_n_0 ;
  wire \STATE[2]_i_3__1_n_0 ;
  wire \STATE[2]_i_4__1_n_0 ;
  wire \STATE[2]_i_5__1_n_0 ;
  wire \STATE[2]_i_6__1_n_0 ;
  wire \STATE[3]_i_1__1_n_0 ;
  wire \STATE[3]_i_2__1_n_0 ;
  wire \STATE[3]_i_3__1_n_0 ;
  wire \STATE[3]_i_4__1_n_0 ;
  wire SYNC_STATUS_HELD;
  wire SYNC_STATUS_HELD_i_1__1_n_0;
  wire TIMER4096_MSB_REG;
  wire [11:11]TIMER4096_reg;
  wire \TIMER4096_reg_n_0_[0] ;
  wire \TIMER4096_reg_n_0_[10] ;
  wire \TIMER4096_reg_n_0_[1] ;
  wire \TIMER4096_reg_n_0_[2] ;
  wire \TIMER4096_reg_n_0_[3] ;
  wire \TIMER4096_reg_n_0_[4] ;
  wire \TIMER4096_reg_n_0_[5] ;
  wire \TIMER4096_reg_n_0_[6] ;
  wire \TIMER4096_reg_n_0_[7] ;
  wire \TIMER4096_reg_n_0_[8] ;
  wire \TIMER4096_reg_n_0_[9] ;
  wire TOGGLE_RX;
  wire TOGGLE_TX;
  wire TOGGLE_TX_i_1__1_n_0;
  wire \TX_CONFIG_REG_INT[0]_i_1__1_n_0 ;
  wire \TX_CONFIG_REG_INT[11]_i_1__1_n_0 ;
  wire \TX_CONFIG_REG_INT[13]_i_2__1_n_0 ;
  wire \TX_CONFIG_REG_INT[14]_i_1__1_n_0 ;
  wire \TX_CONFIG_REG_INT_reg[0]_0 ;
  wire \TX_CONFIG_REG_INT_reg[13]_0 ;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_i_1__3_n_0;
  wire XMIT_CONFIG_INT_i_2__4_n_0;
  wire XMIT_CONFIG_INT_i_3__1_n_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT0;
  wire [15:15]__16;
  wire data_out;
  wire [8:0]link_timer_value_ch2;
  wire out;
  wire p_0_in0_in;
  wire p_0_in26_in;
  wire [11:0]plusOp__0;
  wire [9:0]plusOp__0__0;
  wire plusOp__0_carry__0_n_6;
  wire plusOp__0_carry__0_n_7;
  wire plusOp__0_carry_n_0;
  wire plusOp__0_carry_n_1;
  wire plusOp__0_carry_n_2;
  wire plusOp__0_carry_n_3;
  wire plusOp__0_carry_n_4;
  wire plusOp__0_carry_n_5;
  wire plusOp__0_carry_n_6;
  wire plusOp__0_carry_n_7;
  wire \plusOp_inferred__0/i__carry__0_n_12 ;
  wire \plusOp_inferred__0/i__carry__0_n_13 ;
  wire \plusOp_inferred__0/i__carry__0_n_14 ;
  wire \plusOp_inferred__0/i__carry__0_n_15 ;
  wire \plusOp_inferred__0/i__carry__0_n_5 ;
  wire \plusOp_inferred__0/i__carry__0_n_6 ;
  wire \plusOp_inferred__0/i__carry__0_n_7 ;
  wire \plusOp_inferred__0/i__carry_n_0 ;
  wire \plusOp_inferred__0/i__carry_n_1 ;
  wire \plusOp_inferred__0/i__carry_n_10 ;
  wire \plusOp_inferred__0/i__carry_n_11 ;
  wire \plusOp_inferred__0/i__carry_n_12 ;
  wire \plusOp_inferred__0/i__carry_n_13 ;
  wire \plusOp_inferred__0/i__carry_n_14 ;
  wire \plusOp_inferred__0/i__carry_n_15 ;
  wire \plusOp_inferred__0/i__carry_n_2 ;
  wire \plusOp_inferred__0/i__carry_n_3 ;
  wire \plusOp_inferred__0/i__carry_n_4 ;
  wire \plusOp_inferred__0/i__carry_n_5 ;
  wire \plusOp_inferred__0/i__carry_n_6 ;
  wire \plusOp_inferred__0/i__carry_n_7 ;
  wire \plusOp_inferred__0/i__carry_n_8 ;
  wire \plusOp_inferred__0/i__carry_n_9 ;
  wire [5:0]status_vector_ch2;
  wire userclk;
  wire [7:2]NLW_plusOp__0_carry__0_CO_UNCONNECTED;
  wire [7:3]NLW_plusOp__0_carry__0_O_UNCONNECTED;
  wire [7:3]\NLW_plusOp_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [7:4]\NLW_plusOp_inferred__0/i__carry__0_O_UNCONNECTED ;

  LUT3 #(
    .INIT(8'hFE)) 
    ABILITY_MATCH_2_i_1__1
       (.I0(MASK_RUDI_BUFERR),
        .I1(RX_IDLE),
        .I2(out),
        .O(ACKNOWLEDGE_MATCH_3));
  LUT6 #(
    .INIT(64'h0000000000000009)) 
    ABILITY_MATCH_2_i_2__1
       (.I0(Q[15]),
        .I1(p_0_in0_in),
        .I2(RECEIVED_IDLE),
        .I3(ABILITY_MATCH_2_i_3__1_n_0),
        .I4(ABILITY_MATCH_2_i_4__1_n_0),
        .I5(CONFIG_REG_MATCH_reg_0),
        .O(CONFIG_REG_MATCH_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_3__1
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .I4(Q[8]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .O(ABILITY_MATCH_2_i_3__1_n_0));
  LUT6 #(
    .INIT(64'hEFFEFFFFFFFFEFFE)) 
    ABILITY_MATCH_2_i_4__1
       (.I0(ABILITY_MATCH_2_i_6__1_n_0),
        .I1(ABILITY_MATCH_2_i_7__1_n_0),
        .I2(Q[13]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[13] ),
        .I4(Q[12]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[12] ),
        .O(ABILITY_MATCH_2_i_4__1_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_6__1
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .I4(Q[1]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .O(ABILITY_MATCH_2_i_6__1_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_7__1
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .I4(Q[5]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .O(ABILITY_MATCH_2_i_7__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_2_reg
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(CONFIG_REG_MATCH_COMB),
        .Q(ABILITY_MATCH_2),
        .R(ACKNOWLEDGE_MATCH_3));
  LUT6 #(
    .INIT(64'h0000000000008F80)) 
    ABILITY_MATCH_i_1__1
       (.I0(CONFIG_REG_MATCH_COMB),
        .I1(ABILITY_MATCH_2),
        .I2(RX_CONFIG_VALID),
        .I3(ABILITY_MATCH),
        .I4(MASK_RUDI_BUFERR),
        .I5(SR),
        .O(ABILITY_MATCH_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ABILITY_MATCH_i_1__1_n_0),
        .Q(ABILITY_MATCH),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT2 #(
    .INIT(4'h8)) 
    ACKNOWLEDGE_MATCH_2_i_1__1
       (.I0(p_0_in26_in),
        .I1(Q[14]),
        .O(ACKNOWLEDGE_MATCH_20));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_2_reg
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(ACKNOWLEDGE_MATCH_20),
        .Q(ACKNOWLEDGE_MATCH_2),
        .R(ACKNOWLEDGE_MATCH_3));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'h80)) 
    ACKNOWLEDGE_MATCH_3_i_1__1
       (.I0(ACKNOWLEDGE_MATCH_2),
        .I1(Q[14]),
        .I2(p_0_in26_in),
        .O(ACKNOWLEDGE_MATCH_30));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_3_reg
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(ACKNOWLEDGE_MATCH_30),
        .Q(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .R(ACKNOWLEDGE_MATCH_3));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT5 #(
    .INIT(32'hFFBFFF80)) 
    AN_SYNC_STATUS_i_1__1
       (.I0(SYNC_STATUS_HELD),
        .I1(LINK_TIMER_SATURATED),
        .I2(PULSE4096),
        .I3(RXSYNC_STATUS),
        .I4(AN_SYNC_STATUS),
        .O(AN_SYNC_STATUS_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    AN_SYNC_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(AN_SYNC_STATUS_i_1__1_n_0),
        .Q(AN_SYNC_STATUS),
        .R(out));
  FDRE \BASEX_REMOTE_FAULT_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(BASEX_REMOTE_FAULT_RSLVD),
        .Q(status_vector_ch2[2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    CLEAR_STATUS_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CLEAR_STATUS_REG),
        .Q(CLEAR_STATUS_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    CLEAR_STATUS_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CLEAR_STATUS_REG1),
        .Q(CLEAR_STATUS_REG2),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    CONFIG_REG_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_REG_MATCH_COMB),
        .Q(CONFIG_REG_MATCH),
        .R(out));
  LUT5 #(
    .INIT(32'h00000009)) 
    CONSISTENCY_MATCH_i_1__1
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .I1(Q[15]),
        .I2(CONSISTENCY_MATCH_i_2__1_n_0),
        .I3(CONSISTENCY_MATCH_i_3__1_n_0),
        .I4(CONSISTENCY_MATCH_i_4__1_n_0),
        .O(CONSISTENCY_MATCH_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_2__1
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .I4(Q[8]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .O(CONSISTENCY_MATCH_i_2__1_n_0));
  LUT6 #(
    .INIT(64'hEFFEFFFFFFFFEFFE)) 
    CONSISTENCY_MATCH_i_3__1
       (.I0(CONSISTENCY_MATCH_i_5__1_n_0),
        .I1(CONSISTENCY_MATCH_i_6__1_n_0),
        .I2(Q[12]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[12] ),
        .I4(Q[13]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[13] ),
        .O(CONSISTENCY_MATCH_i_3__1_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_4__1
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .I1(Q[9]),
        .I2(Q[10]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .I4(Q[11]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .O(CONSISTENCY_MATCH_i_4__1_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_5__1
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .I4(Q[2]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .O(CONSISTENCY_MATCH_i_5__1_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_6__1
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .I4(Q[5]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .O(CONSISTENCY_MATCH_i_6__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    CONSISTENCY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONSISTENCY_MATCH_COMB),
        .Q(CONSISTENCY_MATCH),
        .R(out));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    GENERATE_REMOTE_FAULT_i_1__1
       (.I0(GENERATE_REMOTE_FAULT_i_2__1_n_0),
        .I1(\STATE[3]_i_3__1_n_0 ),
        .I2(GENERATE_REMOTE_FAULT_i_3__1_n_0),
        .I3(STATE[3]),
        .I4(GENERATE_REMOTE_FAULT_i_4__1_n_0),
        .I5(STATE[0]),
        .O(GENERATE_REMOTE_FAULT0));
  LUT6 #(
    .INIT(64'h0888888888888888)) 
    GENERATE_REMOTE_FAULT_i_2__1
       (.I0(\STATE[1]_i_2__1_n_0 ),
        .I1(\STATE[2]_i_3__1_n_0 ),
        .I2(\STATE[2]_i_4__1_n_0 ),
        .I3(IDLE_MATCH),
        .I4(LINK_TIMER_DONE),
        .I5(STATE[0]),
        .O(GENERATE_REMOTE_FAULT_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h000000000000FF60)) 
    GENERATE_REMOTE_FAULT_i_3__1
       (.I0(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .I1(TOGGLE_RX),
        .I2(ABILITY_MATCH),
        .I3(\STATE[2]_i_3__1_n_0 ),
        .I4(\STATE[2]_i_4__1_n_0 ),
        .I5(\STATE[2]_i_5__1_n_0 ),
        .O(GENERATE_REMOTE_FAULT_i_3__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT2 #(
    .INIT(4'h2)) 
    GENERATE_REMOTE_FAULT_i_4__1
       (.I0(STATE[2]),
        .I1(STATE[1]),
        .O(GENERATE_REMOTE_FAULT_i_4__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    GENERATE_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(GENERATE_REMOTE_FAULT0),
        .Q(GENERATE_REMOTE_FAULT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED),
        .Q(IDLE_INSERTED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG1),
        .Q(IDLE_INSERTED_REG2),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    IDLE_INSERTED_REG3_i_1__1
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE_REG2),
        .O(IDLE_INSERTED_REG30));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG30),
        .Q(IDLE_INSERTED_REG3),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG4_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG3),
        .Q(IDLE_INSERTED_REG4),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'h08)) 
    IDLE_INSERTED_i_1__1
       (.I0(MASK_RUDI_CLKCOR_reg_0[1]),
        .I1(MASK_RUDI_CLKCOR_reg_0[0]),
        .I2(XMIT_CONFIG_INT),
        .O(IDLE_INSERTED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED0),
        .Q(IDLE_INSERTED),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'h04)) 
    IDLE_MATCH_2_i_1__1
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_INSERTED_REG4),
        .O(IDLE_MATCH_20));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_2_reg
       (.C(userclk),
        .CE(RX_IDLE_REG2),
        .D(IDLE_MATCH_20),
        .Q(IDLE_MATCH_2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT4 #(
    .INIT(16'h4440)) 
    IDLE_MATCH_i_1__1
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_REMOVED_REG2),
        .I3(IDLE_MATCH_2),
        .O(IDLE_MATCH0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_reg
       (.C(userclk),
        .CE(RX_IDLE_REG2),
        .D(IDLE_MATCH0),
        .Q(IDLE_MATCH),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED),
        .Q(IDLE_REMOVED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED_REG1),
        .Q(IDLE_REMOVED_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'h04)) 
    IDLE_REMOVED_i_1__1
       (.I0(MASK_RUDI_CLKCOR_reg_0[1]),
        .I1(MASK_RUDI_CLKCOR_reg_0[0]),
        .I2(XMIT_CONFIG_INT),
        .O(IDLE_REMOVED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED0),
        .Q(IDLE_REMOVED),
        .R(out));
  LUT1 #(
    .INIT(2'h1)) 
    \LINK_TIMER[0]_i_1__1 
       (.I0(LINK_TIMER_reg[0]),
        .O(plusOp__0__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \LINK_TIMER[1]_i_1__1 
       (.I0(LINK_TIMER_reg[0]),
        .I1(LINK_TIMER_reg[1]),
        .O(plusOp__0__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \LINK_TIMER[2]_i_1__1 
       (.I0(LINK_TIMER_reg[2]),
        .I1(LINK_TIMER_reg[0]),
        .I2(LINK_TIMER_reg[1]),
        .O(plusOp__0__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \LINK_TIMER[3]_i_1__1 
       (.I0(LINK_TIMER_reg[3]),
        .I1(LINK_TIMER_reg[1]),
        .I2(LINK_TIMER_reg[0]),
        .I3(LINK_TIMER_reg[2]),
        .O(plusOp__0__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \LINK_TIMER[4]_i_1__1 
       (.I0(LINK_TIMER_reg[4]),
        .I1(LINK_TIMER_reg[2]),
        .I2(LINK_TIMER_reg[0]),
        .I3(LINK_TIMER_reg[1]),
        .I4(LINK_TIMER_reg[3]),
        .O(plusOp__0__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \LINK_TIMER[5]_i_1__1 
       (.I0(LINK_TIMER_reg[5]),
        .I1(LINK_TIMER_reg[3]),
        .I2(LINK_TIMER_reg[1]),
        .I3(LINK_TIMER_reg[0]),
        .I4(LINK_TIMER_reg[2]),
        .I5(LINK_TIMER_reg[4]),
        .O(plusOp__0__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \LINK_TIMER[6]_i_1__1 
       (.I0(LINK_TIMER_reg[6]),
        .I1(\LINK_TIMER[9]_i_3__1_n_0 ),
        .O(\LINK_TIMER[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    \LINK_TIMER[7]_i_1__1 
       (.I0(LINK_TIMER_reg[7]),
        .I1(\LINK_TIMER[9]_i_3__1_n_0 ),
        .I2(LINK_TIMER_reg[6]),
        .O(plusOp__0__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \LINK_TIMER[8]_i_1__1 
       (.I0(LINK_TIMER_reg[8]),
        .I1(LINK_TIMER_reg[6]),
        .I2(\LINK_TIMER[9]_i_3__1_n_0 ),
        .I3(LINK_TIMER_reg[7]),
        .O(plusOp__0__0[8]));
  LUT4 #(
    .INIT(16'hFFF8)) 
    \LINK_TIMER[9]_i_1__1 
       (.I0(LINK_TIMER_SATURATED),
        .I1(PULSE4096),
        .I2(START_LINK_TIMER_REG),
        .I3(out),
        .O(\LINK_TIMER[9]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \LINK_TIMER[9]_i_2__1 
       (.I0(LINK_TIMER_reg[9]),
        .I1(LINK_TIMER_reg[7]),
        .I2(\LINK_TIMER[9]_i_3__1_n_0 ),
        .I3(LINK_TIMER_reg[6]),
        .I4(LINK_TIMER_reg[8]),
        .O(plusOp__0__0[9]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \LINK_TIMER[9]_i_3__1 
       (.I0(LINK_TIMER_reg[4]),
        .I1(LINK_TIMER_reg[2]),
        .I2(LINK_TIMER_reg[0]),
        .I3(LINK_TIMER_reg[1]),
        .I4(LINK_TIMER_reg[3]),
        .I5(LINK_TIMER_reg[5]),
        .O(\LINK_TIMER[9]_i_3__1_n_0 ));
  LUT5 #(
    .INIT(32'h08000808)) 
    LINK_TIMER_DONE_i_1__1
       (.I0(LINK_TIMER_DONE_i_2__1_n_0),
        .I1(\STATE[3]_i_3__1_n_0 ),
        .I2(LINK_TIMER_DONE_i_3__1_n_0),
        .I3(STATE[3]),
        .I4(\STATE[2]_i_5__1_n_0 ),
        .O(LINK_TIMER_DONE_i_1__1_n_0));
  LUT5 #(
    .INIT(32'h00001110)) 
    LINK_TIMER_DONE_i_2__1
       (.I0(START_LINK_TIMER_REG),
        .I1(out),
        .I2(LINK_TIMER_SATURATED),
        .I3(LINK_TIMER_DONE),
        .I4(START_LINK_TIMER_REG2),
        .O(LINK_TIMER_DONE_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h44F4F4F444444444)) 
    LINK_TIMER_DONE_i_3__1
       (.I0(START_LINK_TIMER_REG_i_2__1_n_0),
        .I1(AN_ENABLE_INT),
        .I2(LINK_TIMER_DONE),
        .I3(RX_CONFIG_REG_NULL_reg_0),
        .I4(ABILITY_MATCH),
        .I5(\SGMII_SPEED[1]_i_2__1_n_0 ),
        .O(LINK_TIMER_DONE_i_3__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_DONE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_DONE_i_1__1_n_0),
        .Q(LINK_TIMER_DONE),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0004)) 
    LINK_TIMER_SATURATED_i_1__1
       (.I0(LINK_TIMER_SATURATED_i_2__1_n_0),
        .I1(LINK_TIMER_SATURATED_i_3__1_n_0),
        .I2(LINK_TIMER_SATURATED_i_4__1_n_0),
        .I3(LINK_TIMER_reg[9]),
        .O(LINK_TIMER_SATURATED_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    LINK_TIMER_SATURATED_i_2__1
       (.I0(link_timer_value_ch2[3]),
        .I1(LINK_TIMER_reg[3]),
        .I2(LINK_TIMER_reg[5]),
        .I3(link_timer_value_ch2[5]),
        .I4(LINK_TIMER_reg[4]),
        .I5(link_timer_value_ch2[4]),
        .O(LINK_TIMER_SATURATED_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_i_3__1
       (.I0(link_timer_value_ch2[6]),
        .I1(LINK_TIMER_reg[6]),
        .I2(LINK_TIMER_reg[7]),
        .I3(link_timer_value_ch2[7]),
        .I4(LINK_TIMER_reg[8]),
        .I5(link_timer_value_ch2[8]),
        .O(LINK_TIMER_SATURATED_i_3__1_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    LINK_TIMER_SATURATED_i_4__1
       (.I0(LINK_TIMER_reg[1]),
        .I1(link_timer_value_ch2[1]),
        .I2(LINK_TIMER_reg[2]),
        .I3(link_timer_value_ch2[2]),
        .I4(link_timer_value_ch2[0]),
        .I5(LINK_TIMER_reg[0]),
        .O(LINK_TIMER_SATURATED_i_4__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_SATURATED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_SATURATED_COMB),
        .Q(LINK_TIMER_SATURATED),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[0] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[0]),
        .Q(LINK_TIMER_reg[0]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[1] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[1]),
        .Q(LINK_TIMER_reg[1]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[2] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[2]),
        .Q(LINK_TIMER_reg[2]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[3] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[3]),
        .Q(LINK_TIMER_reg[3]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[4] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[4]),
        .Q(LINK_TIMER_reg[4]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[5] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[5]),
        .Q(LINK_TIMER_reg[5]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[6] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(\LINK_TIMER[6]_i_1__1_n_0 ),
        .Q(LINK_TIMER_reg[6]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[7] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[7]),
        .Q(LINK_TIMER_reg[7]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[8] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[8]),
        .Q(LINK_TIMER_reg[8]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[9] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[9]),
        .Q(LINK_TIMER_reg[9]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h5155)) 
    \MASK_RUDI_BUFERR_TIMER[0]_i_1__1 
       (.I0(MASK_RUDI_BUFERR_TIMER[0]),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[10]_i_1__1 
       (.I0(\plusOp_inferred__0/i__carry__0_n_14 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[10]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[11]_i_1__1 
       (.I0(\plusOp_inferred__0/i__carry__0_n_13 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[11]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_2__1 
       (.I0(\plusOp_inferred__0/i__carry__0_n_12 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h20000000)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_3__1 
       (.I0(\MASK_RUDI_BUFERR_TIMER[12]_i_4__1_n_0 ),
        .I1(\MASK_RUDI_BUFERR_TIMER[12]_i_5__1_n_0 ),
        .I2(MASK_RUDI_BUFERR_TIMER[3]),
        .I3(MASK_RUDI_BUFERR_TIMER[1]),
        .I4(MASK_RUDI_BUFERR_TIMER[8]),
        .O(\MASK_RUDI_BUFERR_TIMER_reg[3]_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_4__1 
       (.I0(MASK_RUDI_BUFERR_TIMER[10]),
        .I1(MASK_RUDI_BUFERR_TIMER[12]),
        .I2(MASK_RUDI_BUFERR_TIMER[0]),
        .I3(MASK_RUDI_BUFERR_TIMER[2]),
        .I4(MASK_RUDI_BUFERR_TIMER[7]),
        .I5(MASK_RUDI_BUFERR_TIMER[4]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_4__1_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_5__1 
       (.I0(MASK_RUDI_BUFERR_TIMER[6]),
        .I1(MASK_RUDI_BUFERR_TIMER[5]),
        .I2(MASK_RUDI_BUFERR_TIMER[11]),
        .I3(MASK_RUDI_BUFERR_TIMER[9]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_5__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[1]_i_1__1 
       (.I0(\plusOp_inferred__0/i__carry_n_15 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[2]_i_1__1 
       (.I0(\plusOp_inferred__0/i__carry_n_14 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[3]_i_1__1 
       (.I0(\plusOp_inferred__0/i__carry_n_13 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[4]_i_1__1 
       (.I0(\plusOp_inferred__0/i__carry_n_12 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[5]_i_1__1 
       (.I0(\plusOp_inferred__0/i__carry_n_11 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[6]_i_1__1 
       (.I0(\plusOp_inferred__0/i__carry_n_10 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[7]_i_1__1 
       (.I0(\plusOp_inferred__0/i__carry_n_9 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[7]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[8]_i_1__1 
       (.I0(\plusOp_inferred__0/i__carry_n_8 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[8]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[9]_i_1__1 
       (.I0(\plusOp_inferred__0/i__carry__0_n_15 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[9]_i_1__1_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[0] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[0]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[0]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[10] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[10]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[10]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[11] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[11]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[11]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[12] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[12]_i_2__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[12]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[1] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[1]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[1]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[2] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[2]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[2]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[3] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[3]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[3]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[4] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[4]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[4]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[5] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[5]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[5]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[6] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[6]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[6]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[7] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[7]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[7]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[8] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[8]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[8]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[9] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[9]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[9]),
        .S(out));
  LUT5 #(
    .INIT(32'h20FF2020)) 
    MASK_RUDI_BUFERR_i_1__1
       (.I0(data_out),
        .I1(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[3]_0 ),
        .I4(MASK_RUDI_BUFERR),
        .O(MASK_RUDI_BUFERR_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_BUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_BUFERR_i_1__1_n_0),
        .Q(MASK_RUDI_BUFERR),
        .R(out));
  LUT5 #(
    .INIT(32'hFFFBFFF0)) 
    MASK_RUDI_CLKCOR_i_1__1
       (.I0(RX_RUDI_INVALID),
        .I1(RX_RUDI_INVALID_REG),
        .I2(MASK_RUDI_CLKCOR_reg_0[1]),
        .I3(MASK_RUDI_CLKCOR_reg_0[0]),
        .I4(MASK_RUDI_CLKCOR),
        .O(MASK_RUDI_CLKCOR_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_CLKCOR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_CLKCOR_i_1__1_n_0),
        .Q(MASK_RUDI_CLKCOR),
        .R(RX_RUDI_INVALID_REG_reg_0));
  LUT6 #(
    .INIT(64'h2232222222222020)) 
    MR_AN_COMPLETE_i_1__1
       (.I0(MR_AN_COMPLETE),
        .I1(out),
        .I2(STATE[2]),
        .I3(STATE[3]),
        .I4(STATE[0]),
        .I5(STATE[1]),
        .O(MR_AN_COMPLETE_i_1__1_n_0));
  FDRE MR_AN_COMPLETE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_COMPLETE_i_1__1_n_0),
        .Q(MR_AN_COMPLETE),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    MR_AN_ENABLE_CHANGE_i_1__1
       (.I0(MR_AN_ENABLE_REG2),
        .I1(MR_AN_ENABLE_REG1),
        .O(MR_AN_ENABLE_CHANGE0));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_CHANGE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_CHANGE0),
        .Q(MR_AN_ENABLE_CHANGE),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(AN_ENABLE_INT),
        .Q(MR_AN_ENABLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_REG1),
        .Q(MR_AN_ENABLE_REG2),
        .R(out));
  LUT5 #(
    .INIT(32'h0000AE00)) 
    MR_LINK_STATUS_i_1__1
       (.I0(MR_LINK_STATUS),
        .I1(CLEAR_STATUS_REG1),
        .I2(CLEAR_STATUS_REG2),
        .I3(XMIT_DATA_INT),
        .I4(out),
        .O(MR_LINK_STATUS_i_1__1_n_0));
  FDRE MR_LINK_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_LINK_STATUS_i_1__1_n_0),
        .Q(MR_LINK_STATUS),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[11] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[10]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[13] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[12]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[15] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[14]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[16] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[15]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [3]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_PAGE_RX_CLEAR_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CLEAR_PAGE_RECEIVED),
        .Q(MR_PAGE_RX_CLEAR_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_PAGE_RX_CLEAR_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_PAGE_RX_CLEAR_REG1),
        .Q(MR_PAGE_RX_CLEAR_REG2),
        .R(out));
  LUT5 #(
    .INIT(32'hEFAAAAAA)) 
    MR_PAGE_RX_SET_i_1__1
       (.I0(MR_PAGE_RX_SET0),
        .I1(MR_PAGE_RX_CLEAR_REG2),
        .I2(MR_PAGE_RX_CLEAR_REG1),
        .I3(START_LINK_TIMER_REG_i_2__1_n_0),
        .I4(MR_PAGE_RX_SET),
        .O(MR_PAGE_RX_SET_i_1__1_n_0));
  FDRE MR_PAGE_RX_SET_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_PAGE_RX_SET_i_1__1_n_0),
        .Q(MR_PAGE_RX_SET),
        .R(out));
  LUT5 #(
    .INIT(32'hF4FF4444)) 
    MR_REMOTE_FAULT_i_1__1
       (.I0(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [3]),
        .I1(GENERATE_REMOTE_FAULT),
        .I2(CLEAR_STATUS_REG2),
        .I3(CLEAR_STATUS_REG1),
        .I4(status_vector_ch2[5]),
        .O(MR_REMOTE_FAULT_i_1__1_n_0));
  FDRE MR_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_REMOTE_FAULT_i_1__1_n_0),
        .Q(status_vector_ch2[5]),
        .R(out));
  LUT5 #(
    .INIT(32'hAE0C0C0C)) 
    MR_RESTART_AN_INT_i_1__1
       (.I0(START_LINK_TIMER_REG_i_2__1_n_0),
        .I1(MR_RESTART_AN_SET_REG1),
        .I2(MR_RESTART_AN_SET_REG2),
        .I3(AN_ENABLE_INT),
        .I4(MR_RESTART_AN_INT),
        .O(MR_RESTART_AN_INT_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_INT_i_1__1_n_0),
        .Q(MR_RESTART_AN_INT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RESTART_AN_REG),
        .Q(MR_RESTART_AN_SET_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_SET_REG1),
        .Q(MR_RESTART_AN_SET_REG2),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[0]),
        .Q(PREVIOUS_STATE[0]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[1]),
        .Q(PREVIOUS_STATE[1]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[2]),
        .Q(PREVIOUS_STATE[2]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[3]),
        .Q(PREVIOUS_STATE[3]),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    PULSE4096_i_1__1
       (.I0(TIMER4096_MSB_REG),
        .I1(TIMER4096_reg),
        .O(PULSE40960));
  FDRE #(
    .INIT(1'b0)) 
    PULSE4096_reg
       (.C(userclk),
        .CE(1'b1),
        .D(PULSE40960),
        .Q(PULSE4096),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RECEIVED_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RECEIVED_IDLE_reg_0),
        .Q(RECEIVED_IDLE),
        .R(out));
  FDRE RUDI_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[1]),
        .Q(status_vector_ch2[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_CONFIG_REG_NULL_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_REG_NULL_reg_1),
        .Q(RX_CONFIG_REG_NULL_reg_0),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[10]),
        .Q(\RX_CONFIG_REG_REG_reg[11]_0 [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[11]),
        .Q(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[12]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[12] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[13]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[13] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[14] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[14]),
        .Q(p_0_in26_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[15]),
        .Q(p_0_in0_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[8]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[9]),
        .Q(\RX_CONFIG_REG_REG_reg[11]_0 [0]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0D00000000000000)) 
    \RX_CONFIG_SNAPSHOT[15]_i_1__1 
       (.I0(\RX_CONFIG_SNAPSHOT[15]_i_2__1_n_0 ),
        .I1(\RX_CONFIG_SNAPSHOT[15]_i_3__1_n_0 ),
        .I2(ABILITY_MATCH),
        .I3(RX_CONFIG_VALID),
        .I4(ABILITY_MATCH_2),
        .I5(CONFIG_REG_MATCH),
        .O(RX_CONFIG_SNAPSHOT));
  LUT2 #(
    .INIT(4'h8)) 
    \RX_CONFIG_SNAPSHOT[15]_i_2__1 
       (.I0(STATE[0]),
        .I1(STATE[1]),
        .O(\RX_CONFIG_SNAPSHOT[15]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \RX_CONFIG_SNAPSHOT[15]_i_3__1 
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .O(\RX_CONFIG_SNAPSHOT[15]_i_3__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[0]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[10]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[11]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[12]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[12] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[13]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[13] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[15]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[1]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[2]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[3]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[4]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[5]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[6]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[7]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[8]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[9]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(RX_IDLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE_REG1),
        .Q(RX_IDLE_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT5 #(
    .INIT(32'h000000AB)) 
    \RX_RUDI_INVALID_DELAY[0]_i_1__1 
       (.I0(RX_INVALID),
        .I1(XMIT_DATA),
        .I2(RXSYNC_STATUS),
        .I3(MASK_RUDI_BUFERR),
        .I4(MASK_RUDI_CLKCOR),
        .O(RX_RUDI_INVALID_DELAY0));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY0),
        .Q(RX_RUDI_INVALID_DELAY[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[0]),
        .Q(RX_RUDI_INVALID_DELAY[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_RUDI_INVALID_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID),
        .Q(RX_RUDI_INVALID_REG),
        .R(RX_RUDI_INVALID_REG_reg_0));
  FDRE SGMII_PHY_STATUS_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[15]),
        .Q(status_vector_ch2[1]),
        .R(out));
  LUT5 #(
    .INIT(32'h00200000)) 
    \SGMII_SPEED[1]_i_1__1 
       (.I0(\SGMII_SPEED[1]_i_2__1_n_0 ),
        .I1(PREVIOUS_STATE[2]),
        .I2(PREVIOUS_STATE[0]),
        .I3(PREVIOUS_STATE[3]),
        .I4(PREVIOUS_STATE[1]),
        .O(MR_PAGE_RX_SET0));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \SGMII_SPEED[1]_i_2__1 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[0]),
        .O(\SGMII_SPEED[1]_i_2__1_n_0 ));
  FDRE \SGMII_SPEED_reg[0] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[10]),
        .Q(status_vector_ch2[3]),
        .R(out));
  FDSE \SGMII_SPEED_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[11]),
        .Q(status_vector_ch2[4]),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER_REG),
        .Q(START_LINK_TIMER_REG2),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFF2F22FFFFFFFF)) 
    START_LINK_TIMER_REG_i_1__1
       (.I0(\STATE[2]_i_5__1_n_0 ),
        .I1(STATE[3]),
        .I2(START_LINK_TIMER_REG_i_2__1_n_0),
        .I3(AN_ENABLE_INT),
        .I4(START_LINK_TIMER_REG_i_3__1_n_0),
        .I5(\STATE[3]_i_3__1_n_0 ),
        .O(START_LINK_TIMER));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    START_LINK_TIMER_REG_i_2__1
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .O(START_LINK_TIMER_REG_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    START_LINK_TIMER_REG_i_3__1
       (.I0(STATE[0]),
        .I1(STATE[3]),
        .I2(STATE[2]),
        .I3(STATE[1]),
        .I4(\STATE[1]_i_4__1_n_0 ),
        .I5(LINK_TIMER_DONE),
        .O(START_LINK_TIMER_REG_i_3__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER),
        .Q(START_LINK_TIMER_REG),
        .R(out));
  LUT5 #(
    .INIT(32'h0000AAA2)) 
    \STATE[0]_i_1__1 
       (.I0(\STATE[3]_i_3__1_n_0 ),
        .I1(\STATE[0]_i_2__1_n_0 ),
        .I2(\STATE[0]_i_3__1_n_0 ),
        .I3(\STATE[0]_i_4__1_n_0 ),
        .I4(STATE[3]),
        .O(\STATE[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT5 #(
    .INIT(32'hEBAAEBFF)) 
    \STATE[0]_i_2__1 
       (.I0(\STATE[2]_i_3__1_n_0 ),
        .I1(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .I2(TOGGLE_RX),
        .I3(ABILITY_MATCH),
        .I4(STATE[0]),
        .O(\STATE[0]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h000000008B88B3B0)) 
    \STATE[0]_i_3__1 
       (.I0(\STATE[1]_i_4__1_n_0 ),
        .I1(STATE[2]),
        .I2(STATE[0]),
        .I3(AN_ENABLE_INT),
        .I4(LINK_TIMER_DONE),
        .I5(STATE[1]),
        .O(\STATE[0]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h000007CC00000000)) 
    \STATE[0]_i_4__1 
       (.I0(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I1(STATE[0]),
        .I2(RX_CONFIG_REG_NULL_reg_0),
        .I3(ABILITY_MATCH),
        .I4(STATE[2]),
        .I5(STATE[1]),
        .O(\STATE[0]_i_4__1_n_0 ));
  LUT5 #(
    .INIT(32'h0000AA2A)) 
    \STATE[1]_i_1__1 
       (.I0(\STATE[3]_i_3__1_n_0 ),
        .I1(\STATE[1]_i_2__1_n_0 ),
        .I2(\STATE[2]_i_3__1_n_0 ),
        .I3(\STATE[1]_i_3__1_n_0 ),
        .I4(STATE[3]),
        .O(\STATE[1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF70700FFF)) 
    \STATE[1]_i_2__1 
       (.I0(\STATE[1]_i_4__1_n_0 ),
        .I1(\STATE[1]_i_5__1_n_0 ),
        .I2(STATE[0]),
        .I3(LINK_TIMER_DONE),
        .I4(STATE[1]),
        .I5(STATE[2]),
        .O(\STATE[1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    \STATE[1]_i_3__1 
       (.I0(\STATE[1]_i_4__1_n_0 ),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .I3(IDLE_MATCH),
        .I4(LINK_TIMER_DONE),
        .I5(STATE[0]),
        .O(\STATE[1]_i_3__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \STATE[1]_i_4__1 
       (.I0(ABILITY_MATCH),
        .I1(RX_CONFIG_REG_NULL_reg_0),
        .O(\STATE[1]_i_4__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \STATE[1]_i_5__1 
       (.I0(ABILITY_MATCH),
        .I1(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .O(\STATE[1]_i_5__1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAAAAA02)) 
    \STATE[2]_i_1__1 
       (.I0(\STATE[3]_i_3__1_n_0 ),
        .I1(\STATE[2]_i_2__1_n_0 ),
        .I2(\STATE[2]_i_3__1_n_0 ),
        .I3(\STATE[2]_i_4__1_n_0 ),
        .I4(\STATE[2]_i_5__1_n_0 ),
        .I5(STATE[3]),
        .O(\STATE[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \STATE[2]_i_2__1 
       (.I0(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .I1(TOGGLE_RX),
        .I2(ABILITY_MATCH),
        .O(\STATE[2]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT5 #(
    .INIT(32'hFF77F777)) 
    \STATE[2]_i_3__1 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(RX_CONFIG_REG_NULL_reg_0),
        .I3(ABILITY_MATCH),
        .I4(STATE[0]),
        .O(\STATE[2]_i_3__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT4 #(
    .INIT(16'h0444)) 
    \STATE[2]_i_4__1 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(RX_CONFIG_REG_NULL_reg_0),
        .I3(ABILITY_MATCH),
        .O(\STATE[2]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h0040000000000000)) 
    \STATE[2]_i_5__1 
       (.I0(RX_CONFIG_REG_NULL_reg_0),
        .I1(STATE[0]),
        .I2(CONSISTENCY_MATCH),
        .I3(\STATE[2]_i_6__1_n_0 ),
        .I4(ABILITY_MATCH),
        .I5(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .O(\STATE[2]_i_5__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \STATE[2]_i_6__1 
       (.I0(STATE[2]),
        .I1(STATE[1]),
        .O(\STATE[2]_i_6__1_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \STATE[3]_i_1__1 
       (.I0(\STATE[3]_i_2__1_n_0 ),
        .I1(\STATE[3]_i_3__1_n_0 ),
        .I2(AN_SYNC_STATUS),
        .I3(AN_ENABLE_INT),
        .O(\STATE[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT5 #(
    .INIT(32'h00100011)) 
    \STATE[3]_i_2__1 
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .I4(AN_ENABLE_INT),
        .O(\STATE[3]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h000D0000)) 
    \STATE[3]_i_3__1 
       (.I0(XMIT_CONFIG_INT),
        .I1(\STATE[3]_i_4__1_n_0 ),
        .I2(MR_AN_ENABLE_CHANGE),
        .I3(MR_RESTART_AN_INT),
        .I4(AN_SYNC_STATUS),
        .O(\STATE[3]_i_3__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT5 #(
    .INIT(32'hEEEEFFFE)) 
    \STATE[3]_i_4__1 
       (.I0(MASK_RUDI_CLKCOR),
        .I1(MASK_RUDI_BUFERR),
        .I2(RXSYNC_STATUS),
        .I3(XMIT_DATA),
        .I4(RX_INVALID),
        .O(\STATE[3]_i_4__1_n_0 ));
  FDRE \STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[0]_i_1__1_n_0 ),
        .Q(STATE[0]),
        .R(out));
  FDRE \STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[1]_i_1__1_n_0 ),
        .Q(STATE[1]),
        .R(out));
  FDRE \STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[2]_i_1__1_n_0 ),
        .Q(STATE[2]),
        .R(out));
  FDRE \STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[3]_i_1__1_n_0 ),
        .Q(STATE[3]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT4 #(
    .INIT(16'hBFAA)) 
    SYNC_STATUS_HELD_i_1__1
       (.I0(RXSYNC_STATUS),
        .I1(LINK_TIMER_SATURATED),
        .I2(PULSE4096),
        .I3(SYNC_STATUS_HELD),
        .O(SYNC_STATUS_HELD_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_HELD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_HELD_i_1__1_n_0),
        .Q(SYNC_STATUS_HELD),
        .R(out));
  LUT1 #(
    .INIT(2'h1)) 
    \TIMER4096[0]_i_1__1 
       (.I0(\TIMER4096_reg_n_0_[0] ),
        .O(plusOp__0[0]));
  FDRE #(
    .INIT(1'b0)) 
    TIMER4096_MSB_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TIMER4096_reg),
        .Q(TIMER4096_MSB_REG),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[0]),
        .Q(\TIMER4096_reg_n_0_[0] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[10]),
        .Q(\TIMER4096_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[11]),
        .Q(TIMER4096_reg),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[1]),
        .Q(\TIMER4096_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[2]),
        .Q(\TIMER4096_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[3]),
        .Q(\TIMER4096_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[4]),
        .Q(\TIMER4096_reg_n_0_[4] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[5]),
        .Q(\TIMER4096_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[6]),
        .Q(\TIMER4096_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[7]),
        .Q(\TIMER4096_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[8]),
        .Q(\TIMER4096_reg_n_0_[8] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[9]),
        .Q(\TIMER4096_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_RX_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[11]),
        .Q(TOGGLE_RX),
        .R(out));
  LUT6 #(
    .INIT(64'h5555554588888888)) 
    TOGGLE_TX_i_1__1
       (.I0(MR_PAGE_RX_SET0),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .I3(STATE[0]),
        .I4(STATE[3]),
        .I5(TOGGLE_TX),
        .O(TOGGLE_TX_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_TX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TOGGLE_TX_i_1__1_n_0),
        .Q(TOGGLE_TX),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    \TX_CONFIG_REG_INT[0]_i_1__1 
       (.I0(STATE[1]),
        .I1(\TX_CONFIG_REG_INT_reg[0]_0 ),
        .I2(STATE[2]),
        .O(\TX_CONFIG_REG_INT[0]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \TX_CONFIG_REG_INT[11]_i_1__1 
       (.I0(STATE[2]),
        .I1(TOGGLE_TX),
        .O(\TX_CONFIG_REG_INT[11]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h000B)) 
    \TX_CONFIG_REG_INT[13]_i_1__1 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[0]),
        .O(__16));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \TX_CONFIG_REG_INT[13]_i_2__1 
       (.I0(STATE[2]),
        .I1(\TX_CONFIG_REG_INT_reg[13]_0 ),
        .O(\TX_CONFIG_REG_INT[13]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT5 #(
    .INIT(32'hFAFE0200)) 
    \TX_CONFIG_REG_INT[14]_i_1__1 
       (.I0(STATE[0]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[1]),
        .I4(D[3]),
        .O(\TX_CONFIG_REG_INT[14]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[0] 
       (.C(userclk),
        .CE(__16),
        .D(\TX_CONFIG_REG_INT[0]_i_1__1_n_0 ),
        .Q(D[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[11] 
       (.C(userclk),
        .CE(__16),
        .D(\TX_CONFIG_REG_INT[11]_i_1__1_n_0 ),
        .Q(D[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[13] 
       (.C(userclk),
        .CE(__16),
        .D(\TX_CONFIG_REG_INT[13]_i_2__1_n_0 ),
        .Q(D[2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[14]_i_1__1_n_0 ),
        .Q(D[3]),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFFFFFF0F002F20)) 
    XMIT_CONFIG_INT_i_1__3
       (.I0(XMIT_CONFIG_INT),
        .I1(XMIT_CONFIG_INT_i_2__4_n_0),
        .I2(START_LINK_TIMER_REG_i_2__1_n_0),
        .I3(AN_ENABLE_INT),
        .I4(XMIT_CONFIG_INT_i_3__1_n_0),
        .I5(out),
        .O(XMIT_CONFIG_INT_i_1__3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    XMIT_CONFIG_INT_i_2__4
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .O(XMIT_CONFIG_INT_i_2__4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    XMIT_CONFIG_INT_i_3__1
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[0]),
        .O(XMIT_CONFIG_INT_i_3__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_CONFIG_INT_i_1__3_n_0),
        .Q(XMIT_CONFIG_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT4 #(
    .INIT(16'h0180)) 
    XMIT_DATA_INT_i_1__4
       (.I0(STATE[2]),
        .I1(STATE[1]),
        .I2(STATE[0]),
        .I3(STATE[3]),
        .O(XMIT_DATA_INT0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_DATA_INT0),
        .Q(XMIT_DATA_INT),
        .R(out));
  CARRY8 plusOp__0_carry
       (.CI(\TIMER4096_reg_n_0_[0] ),
        .CI_TOP(1'b0),
        .CO({plusOp__0_carry_n_0,plusOp__0_carry_n_1,plusOp__0_carry_n_2,plusOp__0_carry_n_3,plusOp__0_carry_n_4,plusOp__0_carry_n_5,plusOp__0_carry_n_6,plusOp__0_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp__0[8:1]),
        .S({\TIMER4096_reg_n_0_[8] ,\TIMER4096_reg_n_0_[7] ,\TIMER4096_reg_n_0_[6] ,\TIMER4096_reg_n_0_[5] ,\TIMER4096_reg_n_0_[4] ,\TIMER4096_reg_n_0_[3] ,\TIMER4096_reg_n_0_[2] ,\TIMER4096_reg_n_0_[1] }));
  CARRY8 plusOp__0_carry__0
       (.CI(plusOp__0_carry_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_plusOp__0_carry__0_CO_UNCONNECTED[7:2],plusOp__0_carry__0_n_6,plusOp__0_carry__0_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp__0_carry__0_O_UNCONNECTED[7:3],plusOp__0[11:9]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,TIMER4096_reg,\TIMER4096_reg_n_0_[10] ,\TIMER4096_reg_n_0_[9] }));
  CARRY8 \plusOp_inferred__0/i__carry 
       (.CI(MASK_RUDI_BUFERR_TIMER[0]),
        .CI_TOP(1'b0),
        .CO({\plusOp_inferred__0/i__carry_n_0 ,\plusOp_inferred__0/i__carry_n_1 ,\plusOp_inferred__0/i__carry_n_2 ,\plusOp_inferred__0/i__carry_n_3 ,\plusOp_inferred__0/i__carry_n_4 ,\plusOp_inferred__0/i__carry_n_5 ,\plusOp_inferred__0/i__carry_n_6 ,\plusOp_inferred__0/i__carry_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\plusOp_inferred__0/i__carry_n_8 ,\plusOp_inferred__0/i__carry_n_9 ,\plusOp_inferred__0/i__carry_n_10 ,\plusOp_inferred__0/i__carry_n_11 ,\plusOp_inferred__0/i__carry_n_12 ,\plusOp_inferred__0/i__carry_n_13 ,\plusOp_inferred__0/i__carry_n_14 ,\plusOp_inferred__0/i__carry_n_15 }),
        .S(MASK_RUDI_BUFERR_TIMER[8:1]));
  CARRY8 \plusOp_inferred__0/i__carry__0 
       (.CI(\plusOp_inferred__0/i__carry_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_plusOp_inferred__0/i__carry__0_CO_UNCONNECTED [7:3],\plusOp_inferred__0/i__carry__0_n_5 ,\plusOp_inferred__0/i__carry__0_n_6 ,\plusOp_inferred__0/i__carry__0_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_plusOp_inferred__0/i__carry__0_O_UNCONNECTED [7:4],\plusOp_inferred__0/i__carry__0_n_12 ,\plusOp_inferred__0/i__carry__0_n_13 ,\plusOp_inferred__0/i__carry__0_n_14 ,\plusOp_inferred__0/i__carry__0_n_15 }),
        .S({1'b0,1'b0,1'b0,1'b0,MASK_RUDI_BUFERR_TIMER[12:9]}));
endmodule

(* ORIG_REF_NAME = "AUTO_NEG" *) 
module quadsgmii_0_TEST_AUTO_NEG_164
   (status_vector_ch1,
    TOGGLE_RX,
    XMIT_DATA_INT,
    MR_AN_COMPLETE,
    MR_PAGE_RX_SET,
    XMIT_CONFIG_INT,
    RECEIVED_IDLE,
    RX_CONFIG_REG_NULL_reg_0,
    MR_LINK_STATUS,
    \RX_CONFIG_REG_REG_reg[11]_0 ,
    \MASK_RUDI_BUFERR_TIMER_reg[3]_0 ,
    \MR_LP_ADV_ABILITY_INT_reg[16]_0 ,
    D,
    out,
    userclk,
    Q,
    BASEX_REMOTE_FAULT_RSLVD,
    RX_RUDI_INVALID_REG_reg_0,
    RX_RUDI_INVALID,
    AN_ENABLE_INT,
    RESTART_AN_REG,
    RX_CONFIG_VALID,
    RX_IDLE,
    CLEAR_PAGE_RECEIVED,
    CLEAR_STATUS_REG,
    RECEIVED_IDLE_reg_0,
    RX_CONFIG_REG_NULL_reg_1,
    data_out,
    \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ,
    \MASK_RUDI_BUFERR_TIMER_reg[0]_0 ,
    SR,
    RX_INVALID,
    XMIT_DATA,
    RXSYNC_STATUS,
    CONFIG_REG_MATCH_reg_0,
    MASK_RUDI_CLKCOR_reg_0,
    \TX_CONFIG_REG_INT_reg[13]_0 ,
    \TX_CONFIG_REG_INT_reg[0]_0 ,
    link_timer_value_ch1,
    \MASK_RUDI_BUFERR_TIMER_reg[12]_1 );
  output [5:0]status_vector_ch1;
  output TOGGLE_RX;
  output XMIT_DATA_INT;
  output MR_AN_COMPLETE;
  output MR_PAGE_RX_SET;
  output XMIT_CONFIG_INT;
  output RECEIVED_IDLE;
  output RX_CONFIG_REG_NULL_reg_0;
  output MR_LINK_STATUS;
  output [2:0]\RX_CONFIG_REG_REG_reg[11]_0 ;
  output \MASK_RUDI_BUFERR_TIMER_reg[3]_0 ;
  output [3:0]\MR_LP_ADV_ABILITY_INT_reg[16]_0 ;
  output [3:0]D;
  input out;
  input userclk;
  input [15:0]Q;
  input [0:0]BASEX_REMOTE_FAULT_RSLVD;
  input RX_RUDI_INVALID_REG_reg_0;
  input RX_RUDI_INVALID;
  input AN_ENABLE_INT;
  input RESTART_AN_REG;
  input RX_CONFIG_VALID;
  input RX_IDLE;
  input CLEAR_PAGE_RECEIVED;
  input CLEAR_STATUS_REG;
  input RECEIVED_IDLE_reg_0;
  input RX_CONFIG_REG_NULL_reg_1;
  input data_out;
  input \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  input \MASK_RUDI_BUFERR_TIMER_reg[0]_0 ;
  input [0:0]SR;
  input RX_INVALID;
  input XMIT_DATA;
  input RXSYNC_STATUS;
  input CONFIG_REG_MATCH_reg_0;
  input [1:0]MASK_RUDI_CLKCOR_reg_0;
  input \TX_CONFIG_REG_INT_reg[13]_0 ;
  input \TX_CONFIG_REG_INT_reg[0]_0 ;
  input [8:0]link_timer_value_ch1;
  input \MASK_RUDI_BUFERR_TIMER_reg[12]_1 ;

  wire ABILITY_MATCH;
  wire ABILITY_MATCH_2;
  wire ABILITY_MATCH_2_i_3__0_n_0;
  wire ABILITY_MATCH_2_i_4__0_n_0;
  wire ABILITY_MATCH_2_i_6__0_n_0;
  wire ABILITY_MATCH_2_i_7__0_n_0;
  wire ABILITY_MATCH_i_1__0_n_0;
  wire ACKNOWLEDGE_MATCH_2;
  wire ACKNOWLEDGE_MATCH_20;
  wire ACKNOWLEDGE_MATCH_3;
  wire ACKNOWLEDGE_MATCH_30;
  wire ACKNOWLEDGE_MATCH_3_reg_n_0;
  wire AN_ENABLE_INT;
  wire AN_SYNC_STATUS;
  wire AN_SYNC_STATUS_i_1__0_n_0;
  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire CLEAR_PAGE_RECEIVED;
  wire CLEAR_STATUS_REG;
  wire CLEAR_STATUS_REG1;
  wire CLEAR_STATUS_REG2;
  wire CONFIG_REG_MATCH;
  wire CONFIG_REG_MATCH_COMB;
  wire CONFIG_REG_MATCH_reg_0;
  wire CONSISTENCY_MATCH;
  wire CONSISTENCY_MATCH_COMB;
  wire CONSISTENCY_MATCH_i_2__0_n_0;
  wire CONSISTENCY_MATCH_i_3__0_n_0;
  wire CONSISTENCY_MATCH_i_4__0_n_0;
  wire CONSISTENCY_MATCH_i_5__0_n_0;
  wire CONSISTENCY_MATCH_i_6__0_n_0;
  wire [3:0]D;
  wire GENERATE_REMOTE_FAULT;
  wire GENERATE_REMOTE_FAULT0;
  wire GENERATE_REMOTE_FAULT_i_2__0_n_0;
  wire GENERATE_REMOTE_FAULT_i_3__0_n_0;
  wire GENERATE_REMOTE_FAULT_i_4__0_n_0;
  wire IDLE_INSERTED;
  wire IDLE_INSERTED0;
  wire IDLE_INSERTED_REG1;
  wire IDLE_INSERTED_REG2;
  wire IDLE_INSERTED_REG3;
  wire IDLE_INSERTED_REG30;
  wire IDLE_INSERTED_REG4;
  wire IDLE_MATCH;
  wire IDLE_MATCH0;
  wire IDLE_MATCH_2;
  wire IDLE_MATCH_20;
  wire IDLE_REMOVED;
  wire IDLE_REMOVED0;
  wire IDLE_REMOVED_REG1;
  wire IDLE_REMOVED_REG2;
  wire \LINK_TIMER[6]_i_1__0_n_0 ;
  wire \LINK_TIMER[9]_i_1__0_n_0 ;
  wire \LINK_TIMER[9]_i_3__0_n_0 ;
  wire LINK_TIMER_DONE;
  wire LINK_TIMER_DONE_i_1__0_n_0;
  wire LINK_TIMER_DONE_i_2__0_n_0;
  wire LINK_TIMER_DONE_i_3__0_n_0;
  wire LINK_TIMER_SATURATED;
  wire LINK_TIMER_SATURATED_COMB;
  wire LINK_TIMER_SATURATED_i_2__0_n_0;
  wire LINK_TIMER_SATURATED_i_3__0_n_0;
  wire LINK_TIMER_SATURATED_i_4__0_n_0;
  wire [9:0]LINK_TIMER_reg;
  wire MASK_RUDI_BUFERR;
  wire [12:0]MASK_RUDI_BUFERR_TIMER;
  wire \MASK_RUDI_BUFERR_TIMER[0]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[10]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[11]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_2__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_4__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_5__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[1]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[2]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[3]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[4]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[5]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[6]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[7]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[8]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[9]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[0]_0 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[12]_1 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[3]_0 ;
  wire MASK_RUDI_BUFERR_i_1__0_n_0;
  wire MASK_RUDI_CLKCOR;
  wire MASK_RUDI_CLKCOR_i_1__0_n_0;
  wire [1:0]MASK_RUDI_CLKCOR_reg_0;
  wire MR_AN_COMPLETE;
  wire MR_AN_COMPLETE_i_1__0_n_0;
  wire MR_AN_ENABLE_CHANGE;
  wire MR_AN_ENABLE_CHANGE0;
  wire MR_AN_ENABLE_REG1;
  wire MR_AN_ENABLE_REG2;
  wire MR_LINK_STATUS;
  wire MR_LINK_STATUS_i_1__0_n_0;
  wire [3:0]\MR_LP_ADV_ABILITY_INT_reg[16]_0 ;
  wire MR_PAGE_RX_CLEAR_REG1;
  wire MR_PAGE_RX_CLEAR_REG2;
  wire MR_PAGE_RX_SET;
  wire MR_PAGE_RX_SET0;
  wire MR_PAGE_RX_SET_i_1__0_n_0;
  wire MR_REMOTE_FAULT_i_1__0_n_0;
  wire MR_RESTART_AN_INT;
  wire MR_RESTART_AN_INT_i_1__0_n_0;
  wire MR_RESTART_AN_SET_REG1;
  wire MR_RESTART_AN_SET_REG2;
  wire [3:0]PREVIOUS_STATE;
  wire PULSE4096;
  wire PULSE40960;
  wire [15:0]Q;
  wire RECEIVED_IDLE;
  wire RECEIVED_IDLE_reg_0;
  wire RESTART_AN_REG;
  wire RXSYNC_STATUS;
  wire RX_CONFIG_REG_NULL_reg_0;
  wire RX_CONFIG_REG_NULL_reg_1;
  wire [2:0]\RX_CONFIG_REG_REG_reg[11]_0 ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[12] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[13] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[1] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[2] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[3] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[4] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[5] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[6] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[7] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[8] ;
  wire RX_CONFIG_SNAPSHOT;
  wire \RX_CONFIG_SNAPSHOT[15]_i_2__0_n_0 ;
  wire \RX_CONFIG_SNAPSHOT[15]_i_3__0_n_0 ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[0] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[10] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[11] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[12] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[13] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[15] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[1] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[2] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[3] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[4] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[5] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[6] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[7] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[8] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[9] ;
  wire RX_CONFIG_VALID;
  wire RX_IDLE;
  wire RX_IDLE_REG1;
  wire RX_IDLE_REG2;
  wire RX_INVALID;
  wire RX_RUDI_INVALID;
  wire [1:0]RX_RUDI_INVALID_DELAY;
  wire RX_RUDI_INVALID_DELAY0;
  wire RX_RUDI_INVALID_REG;
  wire RX_RUDI_INVALID_REG_reg_0;
  wire \SGMII_SPEED[1]_i_2__0_n_0 ;
  wire [0:0]SR;
  wire START_LINK_TIMER;
  wire START_LINK_TIMER_REG;
  wire START_LINK_TIMER_REG2;
  wire START_LINK_TIMER_REG_i_2__0_n_0;
  wire START_LINK_TIMER_REG_i_3__0_n_0;
  wire [3:0]STATE;
  wire \STATE[0]_i_1__0_n_0 ;
  wire \STATE[0]_i_2__0_n_0 ;
  wire \STATE[0]_i_3__0_n_0 ;
  wire \STATE[0]_i_4__0_n_0 ;
  wire \STATE[1]_i_1__0_n_0 ;
  wire \STATE[1]_i_2__0_n_0 ;
  wire \STATE[1]_i_3__0_n_0 ;
  wire \STATE[1]_i_4__0_n_0 ;
  wire \STATE[1]_i_5__0_n_0 ;
  wire \STATE[2]_i_1__0_n_0 ;
  wire \STATE[2]_i_2__0_n_0 ;
  wire \STATE[2]_i_3__0_n_0 ;
  wire \STATE[2]_i_4__0_n_0 ;
  wire \STATE[2]_i_5__0_n_0 ;
  wire \STATE[2]_i_6__0_n_0 ;
  wire \STATE[3]_i_1__0_n_0 ;
  wire \STATE[3]_i_2__0_n_0 ;
  wire \STATE[3]_i_3__0_n_0 ;
  wire \STATE[3]_i_4__0_n_0 ;
  wire SYNC_STATUS_HELD;
  wire SYNC_STATUS_HELD_i_1__0_n_0;
  wire TIMER4096_MSB_REG;
  wire [11:11]TIMER4096_reg;
  wire \TIMER4096_reg_n_0_[0] ;
  wire \TIMER4096_reg_n_0_[10] ;
  wire \TIMER4096_reg_n_0_[1] ;
  wire \TIMER4096_reg_n_0_[2] ;
  wire \TIMER4096_reg_n_0_[3] ;
  wire \TIMER4096_reg_n_0_[4] ;
  wire \TIMER4096_reg_n_0_[5] ;
  wire \TIMER4096_reg_n_0_[6] ;
  wire \TIMER4096_reg_n_0_[7] ;
  wire \TIMER4096_reg_n_0_[8] ;
  wire \TIMER4096_reg_n_0_[9] ;
  wire TOGGLE_RX;
  wire TOGGLE_TX;
  wire TOGGLE_TX_i_1__0_n_0;
  wire \TX_CONFIG_REG_INT[0]_i_1__0_n_0 ;
  wire \TX_CONFIG_REG_INT[11]_i_1__0_n_0 ;
  wire \TX_CONFIG_REG_INT[13]_i_2__0_n_0 ;
  wire \TX_CONFIG_REG_INT[14]_i_1__0_n_0 ;
  wire \TX_CONFIG_REG_INT_reg[0]_0 ;
  wire \TX_CONFIG_REG_INT_reg[13]_0 ;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_i_1__1_n_0;
  wire XMIT_CONFIG_INT_i_2__2_n_0;
  wire XMIT_CONFIG_INT_i_3__0_n_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT0;
  wire [15:15]__16;
  wire data_out;
  wire [8:0]link_timer_value_ch1;
  wire out;
  wire p_0_in0_in;
  wire p_0_in26_in;
  wire [11:0]plusOp__0;
  wire [9:0]plusOp__0__0;
  wire plusOp__0_carry__0_n_6;
  wire plusOp__0_carry__0_n_7;
  wire plusOp__0_carry_n_0;
  wire plusOp__0_carry_n_1;
  wire plusOp__0_carry_n_2;
  wire plusOp__0_carry_n_3;
  wire plusOp__0_carry_n_4;
  wire plusOp__0_carry_n_5;
  wire plusOp__0_carry_n_6;
  wire plusOp__0_carry_n_7;
  wire \plusOp_inferred__0/i__carry__0_n_12 ;
  wire \plusOp_inferred__0/i__carry__0_n_13 ;
  wire \plusOp_inferred__0/i__carry__0_n_14 ;
  wire \plusOp_inferred__0/i__carry__0_n_15 ;
  wire \plusOp_inferred__0/i__carry__0_n_5 ;
  wire \plusOp_inferred__0/i__carry__0_n_6 ;
  wire \plusOp_inferred__0/i__carry__0_n_7 ;
  wire \plusOp_inferred__0/i__carry_n_0 ;
  wire \plusOp_inferred__0/i__carry_n_1 ;
  wire \plusOp_inferred__0/i__carry_n_10 ;
  wire \plusOp_inferred__0/i__carry_n_11 ;
  wire \plusOp_inferred__0/i__carry_n_12 ;
  wire \plusOp_inferred__0/i__carry_n_13 ;
  wire \plusOp_inferred__0/i__carry_n_14 ;
  wire \plusOp_inferred__0/i__carry_n_15 ;
  wire \plusOp_inferred__0/i__carry_n_2 ;
  wire \plusOp_inferred__0/i__carry_n_3 ;
  wire \plusOp_inferred__0/i__carry_n_4 ;
  wire \plusOp_inferred__0/i__carry_n_5 ;
  wire \plusOp_inferred__0/i__carry_n_6 ;
  wire \plusOp_inferred__0/i__carry_n_7 ;
  wire \plusOp_inferred__0/i__carry_n_8 ;
  wire \plusOp_inferred__0/i__carry_n_9 ;
  wire [5:0]status_vector_ch1;
  wire userclk;
  wire [7:2]NLW_plusOp__0_carry__0_CO_UNCONNECTED;
  wire [7:3]NLW_plusOp__0_carry__0_O_UNCONNECTED;
  wire [7:3]\NLW_plusOp_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [7:4]\NLW_plusOp_inferred__0/i__carry__0_O_UNCONNECTED ;

  LUT3 #(
    .INIT(8'hFE)) 
    ABILITY_MATCH_2_i_1__0
       (.I0(MASK_RUDI_BUFERR),
        .I1(RX_IDLE),
        .I2(out),
        .O(ACKNOWLEDGE_MATCH_3));
  LUT6 #(
    .INIT(64'h0000000000000009)) 
    ABILITY_MATCH_2_i_2__0
       (.I0(Q[15]),
        .I1(p_0_in0_in),
        .I2(RECEIVED_IDLE),
        .I3(ABILITY_MATCH_2_i_3__0_n_0),
        .I4(ABILITY_MATCH_2_i_4__0_n_0),
        .I5(CONFIG_REG_MATCH_reg_0),
        .O(CONFIG_REG_MATCH_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_3__0
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .I4(Q[8]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .O(ABILITY_MATCH_2_i_3__0_n_0));
  LUT6 #(
    .INIT(64'hEFFEFFFFFFFFEFFE)) 
    ABILITY_MATCH_2_i_4__0
       (.I0(ABILITY_MATCH_2_i_6__0_n_0),
        .I1(ABILITY_MATCH_2_i_7__0_n_0),
        .I2(Q[13]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[13] ),
        .I4(Q[12]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[12] ),
        .O(ABILITY_MATCH_2_i_4__0_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_6__0
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .I4(Q[1]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .O(ABILITY_MATCH_2_i_6__0_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_7__0
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .I4(Q[5]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .O(ABILITY_MATCH_2_i_7__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_2_reg
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(CONFIG_REG_MATCH_COMB),
        .Q(ABILITY_MATCH_2),
        .R(ACKNOWLEDGE_MATCH_3));
  LUT6 #(
    .INIT(64'h0000000000008F80)) 
    ABILITY_MATCH_i_1__0
       (.I0(CONFIG_REG_MATCH_COMB),
        .I1(ABILITY_MATCH_2),
        .I2(RX_CONFIG_VALID),
        .I3(ABILITY_MATCH),
        .I4(MASK_RUDI_BUFERR),
        .I5(SR),
        .O(ABILITY_MATCH_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ABILITY_MATCH_i_1__0_n_0),
        .Q(ABILITY_MATCH),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT2 #(
    .INIT(4'h8)) 
    ACKNOWLEDGE_MATCH_2_i_1__0
       (.I0(p_0_in26_in),
        .I1(Q[14]),
        .O(ACKNOWLEDGE_MATCH_20));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_2_reg
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(ACKNOWLEDGE_MATCH_20),
        .Q(ACKNOWLEDGE_MATCH_2),
        .R(ACKNOWLEDGE_MATCH_3));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'h80)) 
    ACKNOWLEDGE_MATCH_3_i_1__0
       (.I0(ACKNOWLEDGE_MATCH_2),
        .I1(Q[14]),
        .I2(p_0_in26_in),
        .O(ACKNOWLEDGE_MATCH_30));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_3_reg
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(ACKNOWLEDGE_MATCH_30),
        .Q(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .R(ACKNOWLEDGE_MATCH_3));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT5 #(
    .INIT(32'hFFBFFF80)) 
    AN_SYNC_STATUS_i_1__0
       (.I0(SYNC_STATUS_HELD),
        .I1(LINK_TIMER_SATURATED),
        .I2(PULSE4096),
        .I3(RXSYNC_STATUS),
        .I4(AN_SYNC_STATUS),
        .O(AN_SYNC_STATUS_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    AN_SYNC_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(AN_SYNC_STATUS_i_1__0_n_0),
        .Q(AN_SYNC_STATUS),
        .R(out));
  FDRE \BASEX_REMOTE_FAULT_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(BASEX_REMOTE_FAULT_RSLVD),
        .Q(status_vector_ch1[2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    CLEAR_STATUS_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CLEAR_STATUS_REG),
        .Q(CLEAR_STATUS_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    CLEAR_STATUS_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CLEAR_STATUS_REG1),
        .Q(CLEAR_STATUS_REG2),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    CONFIG_REG_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_REG_MATCH_COMB),
        .Q(CONFIG_REG_MATCH),
        .R(out));
  LUT5 #(
    .INIT(32'h00000009)) 
    CONSISTENCY_MATCH_i_1__0
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .I1(Q[15]),
        .I2(CONSISTENCY_MATCH_i_2__0_n_0),
        .I3(CONSISTENCY_MATCH_i_3__0_n_0),
        .I4(CONSISTENCY_MATCH_i_4__0_n_0),
        .O(CONSISTENCY_MATCH_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_2__0
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .I4(Q[8]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .O(CONSISTENCY_MATCH_i_2__0_n_0));
  LUT6 #(
    .INIT(64'hEFFEFFFFFFFFEFFE)) 
    CONSISTENCY_MATCH_i_3__0
       (.I0(CONSISTENCY_MATCH_i_5__0_n_0),
        .I1(CONSISTENCY_MATCH_i_6__0_n_0),
        .I2(Q[12]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[12] ),
        .I4(Q[13]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[13] ),
        .O(CONSISTENCY_MATCH_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_4__0
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .I1(Q[9]),
        .I2(Q[10]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .I4(Q[11]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .O(CONSISTENCY_MATCH_i_4__0_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_5__0
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .I4(Q[2]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .O(CONSISTENCY_MATCH_i_5__0_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_6__0
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .I4(Q[5]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .O(CONSISTENCY_MATCH_i_6__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    CONSISTENCY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONSISTENCY_MATCH_COMB),
        .Q(CONSISTENCY_MATCH),
        .R(out));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    GENERATE_REMOTE_FAULT_i_1__0
       (.I0(GENERATE_REMOTE_FAULT_i_2__0_n_0),
        .I1(\STATE[3]_i_3__0_n_0 ),
        .I2(GENERATE_REMOTE_FAULT_i_3__0_n_0),
        .I3(STATE[3]),
        .I4(GENERATE_REMOTE_FAULT_i_4__0_n_0),
        .I5(STATE[0]),
        .O(GENERATE_REMOTE_FAULT0));
  LUT6 #(
    .INIT(64'h0888888888888888)) 
    GENERATE_REMOTE_FAULT_i_2__0
       (.I0(\STATE[1]_i_2__0_n_0 ),
        .I1(\STATE[2]_i_3__0_n_0 ),
        .I2(\STATE[2]_i_4__0_n_0 ),
        .I3(IDLE_MATCH),
        .I4(LINK_TIMER_DONE),
        .I5(STATE[0]),
        .O(GENERATE_REMOTE_FAULT_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h000000000000FF60)) 
    GENERATE_REMOTE_FAULT_i_3__0
       (.I0(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .I1(TOGGLE_RX),
        .I2(ABILITY_MATCH),
        .I3(\STATE[2]_i_3__0_n_0 ),
        .I4(\STATE[2]_i_4__0_n_0 ),
        .I5(\STATE[2]_i_5__0_n_0 ),
        .O(GENERATE_REMOTE_FAULT_i_3__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT2 #(
    .INIT(4'h2)) 
    GENERATE_REMOTE_FAULT_i_4__0
       (.I0(STATE[2]),
        .I1(STATE[1]),
        .O(GENERATE_REMOTE_FAULT_i_4__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    GENERATE_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(GENERATE_REMOTE_FAULT0),
        .Q(GENERATE_REMOTE_FAULT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED),
        .Q(IDLE_INSERTED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG1),
        .Q(IDLE_INSERTED_REG2),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    IDLE_INSERTED_REG3_i_1__0
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE_REG2),
        .O(IDLE_INSERTED_REG30));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG30),
        .Q(IDLE_INSERTED_REG3),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG4_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG3),
        .Q(IDLE_INSERTED_REG4),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'h08)) 
    IDLE_INSERTED_i_1__0
       (.I0(MASK_RUDI_CLKCOR_reg_0[1]),
        .I1(MASK_RUDI_CLKCOR_reg_0[0]),
        .I2(XMIT_CONFIG_INT),
        .O(IDLE_INSERTED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED0),
        .Q(IDLE_INSERTED),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'h04)) 
    IDLE_MATCH_2_i_1__0
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_INSERTED_REG4),
        .O(IDLE_MATCH_20));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_2_reg
       (.C(userclk),
        .CE(RX_IDLE_REG2),
        .D(IDLE_MATCH_20),
        .Q(IDLE_MATCH_2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT4 #(
    .INIT(16'h4440)) 
    IDLE_MATCH_i_1__0
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_REMOVED_REG2),
        .I3(IDLE_MATCH_2),
        .O(IDLE_MATCH0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_reg
       (.C(userclk),
        .CE(RX_IDLE_REG2),
        .D(IDLE_MATCH0),
        .Q(IDLE_MATCH),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED),
        .Q(IDLE_REMOVED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED_REG1),
        .Q(IDLE_REMOVED_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'h04)) 
    IDLE_REMOVED_i_1__0
       (.I0(MASK_RUDI_CLKCOR_reg_0[1]),
        .I1(MASK_RUDI_CLKCOR_reg_0[0]),
        .I2(XMIT_CONFIG_INT),
        .O(IDLE_REMOVED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED0),
        .Q(IDLE_REMOVED),
        .R(out));
  LUT1 #(
    .INIT(2'h1)) 
    \LINK_TIMER[0]_i_1__0 
       (.I0(LINK_TIMER_reg[0]),
        .O(plusOp__0__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \LINK_TIMER[1]_i_1__0 
       (.I0(LINK_TIMER_reg[0]),
        .I1(LINK_TIMER_reg[1]),
        .O(plusOp__0__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \LINK_TIMER[2]_i_1__0 
       (.I0(LINK_TIMER_reg[2]),
        .I1(LINK_TIMER_reg[0]),
        .I2(LINK_TIMER_reg[1]),
        .O(plusOp__0__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \LINK_TIMER[3]_i_1__0 
       (.I0(LINK_TIMER_reg[3]),
        .I1(LINK_TIMER_reg[1]),
        .I2(LINK_TIMER_reg[0]),
        .I3(LINK_TIMER_reg[2]),
        .O(plusOp__0__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \LINK_TIMER[4]_i_1__0 
       (.I0(LINK_TIMER_reg[4]),
        .I1(LINK_TIMER_reg[2]),
        .I2(LINK_TIMER_reg[0]),
        .I3(LINK_TIMER_reg[1]),
        .I4(LINK_TIMER_reg[3]),
        .O(plusOp__0__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \LINK_TIMER[5]_i_1__0 
       (.I0(LINK_TIMER_reg[5]),
        .I1(LINK_TIMER_reg[3]),
        .I2(LINK_TIMER_reg[1]),
        .I3(LINK_TIMER_reg[0]),
        .I4(LINK_TIMER_reg[2]),
        .I5(LINK_TIMER_reg[4]),
        .O(plusOp__0__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \LINK_TIMER[6]_i_1__0 
       (.I0(LINK_TIMER_reg[6]),
        .I1(\LINK_TIMER[9]_i_3__0_n_0 ),
        .O(\LINK_TIMER[6]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    \LINK_TIMER[7]_i_1__0 
       (.I0(LINK_TIMER_reg[7]),
        .I1(\LINK_TIMER[9]_i_3__0_n_0 ),
        .I2(LINK_TIMER_reg[6]),
        .O(plusOp__0__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \LINK_TIMER[8]_i_1__0 
       (.I0(LINK_TIMER_reg[8]),
        .I1(LINK_TIMER_reg[6]),
        .I2(\LINK_TIMER[9]_i_3__0_n_0 ),
        .I3(LINK_TIMER_reg[7]),
        .O(plusOp__0__0[8]));
  LUT4 #(
    .INIT(16'hFFF8)) 
    \LINK_TIMER[9]_i_1__0 
       (.I0(LINK_TIMER_SATURATED),
        .I1(PULSE4096),
        .I2(START_LINK_TIMER_REG),
        .I3(out),
        .O(\LINK_TIMER[9]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \LINK_TIMER[9]_i_2__0 
       (.I0(LINK_TIMER_reg[9]),
        .I1(LINK_TIMER_reg[7]),
        .I2(\LINK_TIMER[9]_i_3__0_n_0 ),
        .I3(LINK_TIMER_reg[6]),
        .I4(LINK_TIMER_reg[8]),
        .O(plusOp__0__0[9]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \LINK_TIMER[9]_i_3__0 
       (.I0(LINK_TIMER_reg[4]),
        .I1(LINK_TIMER_reg[2]),
        .I2(LINK_TIMER_reg[0]),
        .I3(LINK_TIMER_reg[1]),
        .I4(LINK_TIMER_reg[3]),
        .I5(LINK_TIMER_reg[5]),
        .O(\LINK_TIMER[9]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h08000808)) 
    LINK_TIMER_DONE_i_1__0
       (.I0(LINK_TIMER_DONE_i_2__0_n_0),
        .I1(\STATE[3]_i_3__0_n_0 ),
        .I2(LINK_TIMER_DONE_i_3__0_n_0),
        .I3(STATE[3]),
        .I4(\STATE[2]_i_5__0_n_0 ),
        .O(LINK_TIMER_DONE_i_1__0_n_0));
  LUT5 #(
    .INIT(32'h00001110)) 
    LINK_TIMER_DONE_i_2__0
       (.I0(START_LINK_TIMER_REG),
        .I1(out),
        .I2(LINK_TIMER_SATURATED),
        .I3(LINK_TIMER_DONE),
        .I4(START_LINK_TIMER_REG2),
        .O(LINK_TIMER_DONE_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h44F4F4F444444444)) 
    LINK_TIMER_DONE_i_3__0
       (.I0(START_LINK_TIMER_REG_i_2__0_n_0),
        .I1(AN_ENABLE_INT),
        .I2(LINK_TIMER_DONE),
        .I3(RX_CONFIG_REG_NULL_reg_0),
        .I4(ABILITY_MATCH),
        .I5(\SGMII_SPEED[1]_i_2__0_n_0 ),
        .O(LINK_TIMER_DONE_i_3__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_DONE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_DONE_i_1__0_n_0),
        .Q(LINK_TIMER_DONE),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0004)) 
    LINK_TIMER_SATURATED_i_1__0
       (.I0(LINK_TIMER_SATURATED_i_2__0_n_0),
        .I1(LINK_TIMER_SATURATED_i_3__0_n_0),
        .I2(LINK_TIMER_SATURATED_i_4__0_n_0),
        .I3(LINK_TIMER_reg[9]),
        .O(LINK_TIMER_SATURATED_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    LINK_TIMER_SATURATED_i_2__0
       (.I0(link_timer_value_ch1[3]),
        .I1(LINK_TIMER_reg[3]),
        .I2(LINK_TIMER_reg[5]),
        .I3(link_timer_value_ch1[5]),
        .I4(LINK_TIMER_reg[4]),
        .I5(link_timer_value_ch1[4]),
        .O(LINK_TIMER_SATURATED_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_i_3__0
       (.I0(link_timer_value_ch1[6]),
        .I1(LINK_TIMER_reg[6]),
        .I2(LINK_TIMER_reg[7]),
        .I3(link_timer_value_ch1[7]),
        .I4(LINK_TIMER_reg[8]),
        .I5(link_timer_value_ch1[8]),
        .O(LINK_TIMER_SATURATED_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    LINK_TIMER_SATURATED_i_4__0
       (.I0(LINK_TIMER_reg[1]),
        .I1(link_timer_value_ch1[1]),
        .I2(LINK_TIMER_reg[2]),
        .I3(link_timer_value_ch1[2]),
        .I4(link_timer_value_ch1[0]),
        .I5(LINK_TIMER_reg[0]),
        .O(LINK_TIMER_SATURATED_i_4__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_SATURATED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_SATURATED_COMB),
        .Q(LINK_TIMER_SATURATED),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[0] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[0]),
        .Q(LINK_TIMER_reg[0]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[1] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[1]),
        .Q(LINK_TIMER_reg[1]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[2] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[2]),
        .Q(LINK_TIMER_reg[2]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[3] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[3]),
        .Q(LINK_TIMER_reg[3]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[4] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[4]),
        .Q(LINK_TIMER_reg[4]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[5] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[5]),
        .Q(LINK_TIMER_reg[5]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[6] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(\LINK_TIMER[6]_i_1__0_n_0 ),
        .Q(LINK_TIMER_reg[6]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[7] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[7]),
        .Q(LINK_TIMER_reg[7]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[8] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[8]),
        .Q(LINK_TIMER_reg[8]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[9] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[9]),
        .Q(LINK_TIMER_reg[9]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h5155)) 
    \MASK_RUDI_BUFERR_TIMER[0]_i_1__0 
       (.I0(MASK_RUDI_BUFERR_TIMER[0]),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[10]_i_1__0 
       (.I0(\plusOp_inferred__0/i__carry__0_n_14 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[10]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[11]_i_1__0 
       (.I0(\plusOp_inferred__0/i__carry__0_n_13 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[11]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_2__0 
       (.I0(\plusOp_inferred__0/i__carry__0_n_12 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h20000000)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_3__0 
       (.I0(\MASK_RUDI_BUFERR_TIMER[12]_i_4__0_n_0 ),
        .I1(\MASK_RUDI_BUFERR_TIMER[12]_i_5__0_n_0 ),
        .I2(MASK_RUDI_BUFERR_TIMER[3]),
        .I3(MASK_RUDI_BUFERR_TIMER[1]),
        .I4(MASK_RUDI_BUFERR_TIMER[8]),
        .O(\MASK_RUDI_BUFERR_TIMER_reg[3]_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_4__0 
       (.I0(MASK_RUDI_BUFERR_TIMER[10]),
        .I1(MASK_RUDI_BUFERR_TIMER[12]),
        .I2(MASK_RUDI_BUFERR_TIMER[0]),
        .I3(MASK_RUDI_BUFERR_TIMER[2]),
        .I4(MASK_RUDI_BUFERR_TIMER[7]),
        .I5(MASK_RUDI_BUFERR_TIMER[4]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_4__0_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_5__0 
       (.I0(MASK_RUDI_BUFERR_TIMER[6]),
        .I1(MASK_RUDI_BUFERR_TIMER[5]),
        .I2(MASK_RUDI_BUFERR_TIMER[11]),
        .I3(MASK_RUDI_BUFERR_TIMER[9]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[1]_i_1__0 
       (.I0(\plusOp_inferred__0/i__carry_n_15 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[2]_i_1__0 
       (.I0(\plusOp_inferred__0/i__carry_n_14 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[3]_i_1__0 
       (.I0(\plusOp_inferred__0/i__carry_n_13 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[4]_i_1__0 
       (.I0(\plusOp_inferred__0/i__carry_n_12 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[5]_i_1__0 
       (.I0(\plusOp_inferred__0/i__carry_n_11 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[6]_i_1__0 
       (.I0(\plusOp_inferred__0/i__carry_n_10 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[6]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[7]_i_1__0 
       (.I0(\plusOp_inferred__0/i__carry_n_9 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[7]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[8]_i_1__0 
       (.I0(\plusOp_inferred__0/i__carry_n_8 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[8]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[9]_i_1__0 
       (.I0(\plusOp_inferred__0/i__carry__0_n_15 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[9]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[0] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[0]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[0]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[10] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[10]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[10]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[11] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[11]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[11]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[12] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[12]_i_2__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[12]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[1] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[1]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[1]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[2] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[2]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[2]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[3] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[3]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[3]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[4] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[4]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[4]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[5] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[5]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[5]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[6] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[6]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[6]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[7] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[7]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[7]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[8] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[8]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[8]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[9] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[9]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[9]),
        .S(out));
  LUT5 #(
    .INIT(32'h20FF2020)) 
    MASK_RUDI_BUFERR_i_1__0
       (.I0(data_out),
        .I1(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[3]_0 ),
        .I4(MASK_RUDI_BUFERR),
        .O(MASK_RUDI_BUFERR_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_BUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_BUFERR_i_1__0_n_0),
        .Q(MASK_RUDI_BUFERR),
        .R(out));
  LUT5 #(
    .INIT(32'hFFFBFFF0)) 
    MASK_RUDI_CLKCOR_i_1__0
       (.I0(RX_RUDI_INVALID),
        .I1(RX_RUDI_INVALID_REG),
        .I2(MASK_RUDI_CLKCOR_reg_0[1]),
        .I3(MASK_RUDI_CLKCOR_reg_0[0]),
        .I4(MASK_RUDI_CLKCOR),
        .O(MASK_RUDI_CLKCOR_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_CLKCOR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_CLKCOR_i_1__0_n_0),
        .Q(MASK_RUDI_CLKCOR),
        .R(RX_RUDI_INVALID_REG_reg_0));
  LUT6 #(
    .INIT(64'h2232222222222020)) 
    MR_AN_COMPLETE_i_1__0
       (.I0(MR_AN_COMPLETE),
        .I1(out),
        .I2(STATE[2]),
        .I3(STATE[3]),
        .I4(STATE[0]),
        .I5(STATE[1]),
        .O(MR_AN_COMPLETE_i_1__0_n_0));
  FDRE MR_AN_COMPLETE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_COMPLETE_i_1__0_n_0),
        .Q(MR_AN_COMPLETE),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    MR_AN_ENABLE_CHANGE_i_1__0
       (.I0(MR_AN_ENABLE_REG2),
        .I1(MR_AN_ENABLE_REG1),
        .O(MR_AN_ENABLE_CHANGE0));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_CHANGE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_CHANGE0),
        .Q(MR_AN_ENABLE_CHANGE),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(AN_ENABLE_INT),
        .Q(MR_AN_ENABLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_REG1),
        .Q(MR_AN_ENABLE_REG2),
        .R(out));
  LUT5 #(
    .INIT(32'h0000AE00)) 
    MR_LINK_STATUS_i_1__0
       (.I0(MR_LINK_STATUS),
        .I1(CLEAR_STATUS_REG1),
        .I2(CLEAR_STATUS_REG2),
        .I3(XMIT_DATA_INT),
        .I4(out),
        .O(MR_LINK_STATUS_i_1__0_n_0));
  FDRE MR_LINK_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_LINK_STATUS_i_1__0_n_0),
        .Q(MR_LINK_STATUS),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[11] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[10]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[13] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[12]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[15] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[14]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[16] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[15]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [3]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_PAGE_RX_CLEAR_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CLEAR_PAGE_RECEIVED),
        .Q(MR_PAGE_RX_CLEAR_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_PAGE_RX_CLEAR_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_PAGE_RX_CLEAR_REG1),
        .Q(MR_PAGE_RX_CLEAR_REG2),
        .R(out));
  LUT5 #(
    .INIT(32'hEFAAAAAA)) 
    MR_PAGE_RX_SET_i_1__0
       (.I0(MR_PAGE_RX_SET0),
        .I1(MR_PAGE_RX_CLEAR_REG2),
        .I2(MR_PAGE_RX_CLEAR_REG1),
        .I3(START_LINK_TIMER_REG_i_2__0_n_0),
        .I4(MR_PAGE_RX_SET),
        .O(MR_PAGE_RX_SET_i_1__0_n_0));
  FDRE MR_PAGE_RX_SET_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_PAGE_RX_SET_i_1__0_n_0),
        .Q(MR_PAGE_RX_SET),
        .R(out));
  LUT5 #(
    .INIT(32'hF4FF4444)) 
    MR_REMOTE_FAULT_i_1__0
       (.I0(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [3]),
        .I1(GENERATE_REMOTE_FAULT),
        .I2(CLEAR_STATUS_REG2),
        .I3(CLEAR_STATUS_REG1),
        .I4(status_vector_ch1[5]),
        .O(MR_REMOTE_FAULT_i_1__0_n_0));
  FDRE MR_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_REMOTE_FAULT_i_1__0_n_0),
        .Q(status_vector_ch1[5]),
        .R(out));
  LUT5 #(
    .INIT(32'hAE0C0C0C)) 
    MR_RESTART_AN_INT_i_1__0
       (.I0(START_LINK_TIMER_REG_i_2__0_n_0),
        .I1(MR_RESTART_AN_SET_REG1),
        .I2(MR_RESTART_AN_SET_REG2),
        .I3(AN_ENABLE_INT),
        .I4(MR_RESTART_AN_INT),
        .O(MR_RESTART_AN_INT_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_INT_i_1__0_n_0),
        .Q(MR_RESTART_AN_INT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RESTART_AN_REG),
        .Q(MR_RESTART_AN_SET_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_SET_REG1),
        .Q(MR_RESTART_AN_SET_REG2),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[0]),
        .Q(PREVIOUS_STATE[0]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[1]),
        .Q(PREVIOUS_STATE[1]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[2]),
        .Q(PREVIOUS_STATE[2]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[3]),
        .Q(PREVIOUS_STATE[3]),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    PULSE4096_i_1__0
       (.I0(TIMER4096_MSB_REG),
        .I1(TIMER4096_reg),
        .O(PULSE40960));
  FDRE #(
    .INIT(1'b0)) 
    PULSE4096_reg
       (.C(userclk),
        .CE(1'b1),
        .D(PULSE40960),
        .Q(PULSE4096),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RECEIVED_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RECEIVED_IDLE_reg_0),
        .Q(RECEIVED_IDLE),
        .R(out));
  FDRE RUDI_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[1]),
        .Q(status_vector_ch1[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_CONFIG_REG_NULL_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_REG_NULL_reg_1),
        .Q(RX_CONFIG_REG_NULL_reg_0),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[10]),
        .Q(\RX_CONFIG_REG_REG_reg[11]_0 [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[11]),
        .Q(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[12]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[12] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[13]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[13] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[14] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[14]),
        .Q(p_0_in26_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[15]),
        .Q(p_0_in0_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[8]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[9]),
        .Q(\RX_CONFIG_REG_REG_reg[11]_0 [0]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0D00000000000000)) 
    \RX_CONFIG_SNAPSHOT[15]_i_1__0 
       (.I0(\RX_CONFIG_SNAPSHOT[15]_i_2__0_n_0 ),
        .I1(\RX_CONFIG_SNAPSHOT[15]_i_3__0_n_0 ),
        .I2(ABILITY_MATCH),
        .I3(RX_CONFIG_VALID),
        .I4(ABILITY_MATCH_2),
        .I5(CONFIG_REG_MATCH),
        .O(RX_CONFIG_SNAPSHOT));
  LUT2 #(
    .INIT(4'h8)) 
    \RX_CONFIG_SNAPSHOT[15]_i_2__0 
       (.I0(STATE[0]),
        .I1(STATE[1]),
        .O(\RX_CONFIG_SNAPSHOT[15]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \RX_CONFIG_SNAPSHOT[15]_i_3__0 
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .O(\RX_CONFIG_SNAPSHOT[15]_i_3__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[0]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[10]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[11]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[12]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[12] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[13]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[13] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[15]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[1]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[2]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[3]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[4]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[5]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[6]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[7]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[8]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[9]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(RX_IDLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE_REG1),
        .Q(RX_IDLE_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT5 #(
    .INIT(32'h000000AB)) 
    \RX_RUDI_INVALID_DELAY[0]_i_1__0 
       (.I0(RX_INVALID),
        .I1(XMIT_DATA),
        .I2(RXSYNC_STATUS),
        .I3(MASK_RUDI_BUFERR),
        .I4(MASK_RUDI_CLKCOR),
        .O(RX_RUDI_INVALID_DELAY0));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY0),
        .Q(RX_RUDI_INVALID_DELAY[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[0]),
        .Q(RX_RUDI_INVALID_DELAY[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_RUDI_INVALID_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID),
        .Q(RX_RUDI_INVALID_REG),
        .R(RX_RUDI_INVALID_REG_reg_0));
  FDRE SGMII_PHY_STATUS_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[15]),
        .Q(status_vector_ch1[1]),
        .R(out));
  LUT5 #(
    .INIT(32'h00200000)) 
    \SGMII_SPEED[1]_i_1__0 
       (.I0(\SGMII_SPEED[1]_i_2__0_n_0 ),
        .I1(PREVIOUS_STATE[2]),
        .I2(PREVIOUS_STATE[0]),
        .I3(PREVIOUS_STATE[3]),
        .I4(PREVIOUS_STATE[1]),
        .O(MR_PAGE_RX_SET0));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \SGMII_SPEED[1]_i_2__0 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[0]),
        .O(\SGMII_SPEED[1]_i_2__0_n_0 ));
  FDRE \SGMII_SPEED_reg[0] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[10]),
        .Q(status_vector_ch1[3]),
        .R(out));
  FDSE \SGMII_SPEED_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[11]),
        .Q(status_vector_ch1[4]),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER_REG),
        .Q(START_LINK_TIMER_REG2),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFF2F22FFFFFFFF)) 
    START_LINK_TIMER_REG_i_1__0
       (.I0(\STATE[2]_i_5__0_n_0 ),
        .I1(STATE[3]),
        .I2(START_LINK_TIMER_REG_i_2__0_n_0),
        .I3(AN_ENABLE_INT),
        .I4(START_LINK_TIMER_REG_i_3__0_n_0),
        .I5(\STATE[3]_i_3__0_n_0 ),
        .O(START_LINK_TIMER));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    START_LINK_TIMER_REG_i_2__0
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .O(START_LINK_TIMER_REG_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    START_LINK_TIMER_REG_i_3__0
       (.I0(STATE[0]),
        .I1(STATE[3]),
        .I2(STATE[2]),
        .I3(STATE[1]),
        .I4(\STATE[1]_i_4__0_n_0 ),
        .I5(LINK_TIMER_DONE),
        .O(START_LINK_TIMER_REG_i_3__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER),
        .Q(START_LINK_TIMER_REG),
        .R(out));
  LUT5 #(
    .INIT(32'h0000AAA2)) 
    \STATE[0]_i_1__0 
       (.I0(\STATE[3]_i_3__0_n_0 ),
        .I1(\STATE[0]_i_2__0_n_0 ),
        .I2(\STATE[0]_i_3__0_n_0 ),
        .I3(\STATE[0]_i_4__0_n_0 ),
        .I4(STATE[3]),
        .O(\STATE[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT5 #(
    .INIT(32'hEBAAEBFF)) 
    \STATE[0]_i_2__0 
       (.I0(\STATE[2]_i_3__0_n_0 ),
        .I1(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .I2(TOGGLE_RX),
        .I3(ABILITY_MATCH),
        .I4(STATE[0]),
        .O(\STATE[0]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h000000008B88B3B0)) 
    \STATE[0]_i_3__0 
       (.I0(\STATE[1]_i_4__0_n_0 ),
        .I1(STATE[2]),
        .I2(STATE[0]),
        .I3(AN_ENABLE_INT),
        .I4(LINK_TIMER_DONE),
        .I5(STATE[1]),
        .O(\STATE[0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h000007CC00000000)) 
    \STATE[0]_i_4__0 
       (.I0(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I1(STATE[0]),
        .I2(RX_CONFIG_REG_NULL_reg_0),
        .I3(ABILITY_MATCH),
        .I4(STATE[2]),
        .I5(STATE[1]),
        .O(\STATE[0]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'h0000AA2A)) 
    \STATE[1]_i_1__0 
       (.I0(\STATE[3]_i_3__0_n_0 ),
        .I1(\STATE[1]_i_2__0_n_0 ),
        .I2(\STATE[2]_i_3__0_n_0 ),
        .I3(\STATE[1]_i_3__0_n_0 ),
        .I4(STATE[3]),
        .O(\STATE[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF70700FFF)) 
    \STATE[1]_i_2__0 
       (.I0(\STATE[1]_i_4__0_n_0 ),
        .I1(\STATE[1]_i_5__0_n_0 ),
        .I2(STATE[0]),
        .I3(LINK_TIMER_DONE),
        .I4(STATE[1]),
        .I5(STATE[2]),
        .O(\STATE[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    \STATE[1]_i_3__0 
       (.I0(\STATE[1]_i_4__0_n_0 ),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .I3(IDLE_MATCH),
        .I4(LINK_TIMER_DONE),
        .I5(STATE[0]),
        .O(\STATE[1]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \STATE[1]_i_4__0 
       (.I0(ABILITY_MATCH),
        .I1(RX_CONFIG_REG_NULL_reg_0),
        .O(\STATE[1]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \STATE[1]_i_5__0 
       (.I0(ABILITY_MATCH),
        .I1(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .O(\STATE[1]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAAAAA02)) 
    \STATE[2]_i_1__0 
       (.I0(\STATE[3]_i_3__0_n_0 ),
        .I1(\STATE[2]_i_2__0_n_0 ),
        .I2(\STATE[2]_i_3__0_n_0 ),
        .I3(\STATE[2]_i_4__0_n_0 ),
        .I4(\STATE[2]_i_5__0_n_0 ),
        .I5(STATE[3]),
        .O(\STATE[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \STATE[2]_i_2__0 
       (.I0(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .I1(TOGGLE_RX),
        .I2(ABILITY_MATCH),
        .O(\STATE[2]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT5 #(
    .INIT(32'hFF77F777)) 
    \STATE[2]_i_3__0 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(RX_CONFIG_REG_NULL_reg_0),
        .I3(ABILITY_MATCH),
        .I4(STATE[0]),
        .O(\STATE[2]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT4 #(
    .INIT(16'h0444)) 
    \STATE[2]_i_4__0 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(RX_CONFIG_REG_NULL_reg_0),
        .I3(ABILITY_MATCH),
        .O(\STATE[2]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0040000000000000)) 
    \STATE[2]_i_5__0 
       (.I0(RX_CONFIG_REG_NULL_reg_0),
        .I1(STATE[0]),
        .I2(CONSISTENCY_MATCH),
        .I3(\STATE[2]_i_6__0_n_0 ),
        .I4(ABILITY_MATCH),
        .I5(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .O(\STATE[2]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \STATE[2]_i_6__0 
       (.I0(STATE[2]),
        .I1(STATE[1]),
        .O(\STATE[2]_i_6__0_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \STATE[3]_i_1__0 
       (.I0(\STATE[3]_i_2__0_n_0 ),
        .I1(\STATE[3]_i_3__0_n_0 ),
        .I2(AN_SYNC_STATUS),
        .I3(AN_ENABLE_INT),
        .O(\STATE[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT5 #(
    .INIT(32'h00100011)) 
    \STATE[3]_i_2__0 
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .I4(AN_ENABLE_INT),
        .O(\STATE[3]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h000D0000)) 
    \STATE[3]_i_3__0 
       (.I0(XMIT_CONFIG_INT),
        .I1(\STATE[3]_i_4__0_n_0 ),
        .I2(MR_AN_ENABLE_CHANGE),
        .I3(MR_RESTART_AN_INT),
        .I4(AN_SYNC_STATUS),
        .O(\STATE[3]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT5 #(
    .INIT(32'hEEEEFFFE)) 
    \STATE[3]_i_4__0 
       (.I0(MASK_RUDI_CLKCOR),
        .I1(MASK_RUDI_BUFERR),
        .I2(RXSYNC_STATUS),
        .I3(XMIT_DATA),
        .I4(RX_INVALID),
        .O(\STATE[3]_i_4__0_n_0 ));
  FDRE \STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[0]_i_1__0_n_0 ),
        .Q(STATE[0]),
        .R(out));
  FDRE \STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[1]_i_1__0_n_0 ),
        .Q(STATE[1]),
        .R(out));
  FDRE \STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[2]_i_1__0_n_0 ),
        .Q(STATE[2]),
        .R(out));
  FDRE \STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[3]_i_1__0_n_0 ),
        .Q(STATE[3]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT4 #(
    .INIT(16'hBFAA)) 
    SYNC_STATUS_HELD_i_1__0
       (.I0(RXSYNC_STATUS),
        .I1(LINK_TIMER_SATURATED),
        .I2(PULSE4096),
        .I3(SYNC_STATUS_HELD),
        .O(SYNC_STATUS_HELD_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_HELD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_HELD_i_1__0_n_0),
        .Q(SYNC_STATUS_HELD),
        .R(out));
  LUT1 #(
    .INIT(2'h1)) 
    \TIMER4096[0]_i_1__0 
       (.I0(\TIMER4096_reg_n_0_[0] ),
        .O(plusOp__0[0]));
  FDRE #(
    .INIT(1'b0)) 
    TIMER4096_MSB_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TIMER4096_reg),
        .Q(TIMER4096_MSB_REG),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[0]),
        .Q(\TIMER4096_reg_n_0_[0] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[10]),
        .Q(\TIMER4096_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[11]),
        .Q(TIMER4096_reg),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[1]),
        .Q(\TIMER4096_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[2]),
        .Q(\TIMER4096_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[3]),
        .Q(\TIMER4096_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[4]),
        .Q(\TIMER4096_reg_n_0_[4] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[5]),
        .Q(\TIMER4096_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[6]),
        .Q(\TIMER4096_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[7]),
        .Q(\TIMER4096_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[8]),
        .Q(\TIMER4096_reg_n_0_[8] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[9]),
        .Q(\TIMER4096_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_RX_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[11]),
        .Q(TOGGLE_RX),
        .R(out));
  LUT6 #(
    .INIT(64'h5555554588888888)) 
    TOGGLE_TX_i_1__0
       (.I0(MR_PAGE_RX_SET0),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .I3(STATE[0]),
        .I4(STATE[3]),
        .I5(TOGGLE_TX),
        .O(TOGGLE_TX_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_TX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TOGGLE_TX_i_1__0_n_0),
        .Q(TOGGLE_TX),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    \TX_CONFIG_REG_INT[0]_i_1__0 
       (.I0(STATE[1]),
        .I1(\TX_CONFIG_REG_INT_reg[0]_0 ),
        .I2(STATE[2]),
        .O(\TX_CONFIG_REG_INT[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \TX_CONFIG_REG_INT[11]_i_1__0 
       (.I0(STATE[2]),
        .I1(TOGGLE_TX),
        .O(\TX_CONFIG_REG_INT[11]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h000B)) 
    \TX_CONFIG_REG_INT[13]_i_1__0 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[0]),
        .O(__16));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \TX_CONFIG_REG_INT[13]_i_2__0 
       (.I0(STATE[2]),
        .I1(\TX_CONFIG_REG_INT_reg[13]_0 ),
        .O(\TX_CONFIG_REG_INT[13]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT5 #(
    .INIT(32'hFAFE0200)) 
    \TX_CONFIG_REG_INT[14]_i_1__0 
       (.I0(STATE[0]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[1]),
        .I4(D[3]),
        .O(\TX_CONFIG_REG_INT[14]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[0] 
       (.C(userclk),
        .CE(__16),
        .D(\TX_CONFIG_REG_INT[0]_i_1__0_n_0 ),
        .Q(D[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[11] 
       (.C(userclk),
        .CE(__16),
        .D(\TX_CONFIG_REG_INT[11]_i_1__0_n_0 ),
        .Q(D[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[13] 
       (.C(userclk),
        .CE(__16),
        .D(\TX_CONFIG_REG_INT[13]_i_2__0_n_0 ),
        .Q(D[2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[14]_i_1__0_n_0 ),
        .Q(D[3]),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFFFFFF0F002F20)) 
    XMIT_CONFIG_INT_i_1__1
       (.I0(XMIT_CONFIG_INT),
        .I1(XMIT_CONFIG_INT_i_2__2_n_0),
        .I2(START_LINK_TIMER_REG_i_2__0_n_0),
        .I3(AN_ENABLE_INT),
        .I4(XMIT_CONFIG_INT_i_3__0_n_0),
        .I5(out),
        .O(XMIT_CONFIG_INT_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    XMIT_CONFIG_INT_i_2__2
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .O(XMIT_CONFIG_INT_i_2__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    XMIT_CONFIG_INT_i_3__0
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[0]),
        .O(XMIT_CONFIG_INT_i_3__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_CONFIG_INT_i_1__1_n_0),
        .Q(XMIT_CONFIG_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT4 #(
    .INIT(16'h0180)) 
    XMIT_DATA_INT_i_1__2
       (.I0(STATE[2]),
        .I1(STATE[1]),
        .I2(STATE[0]),
        .I3(STATE[3]),
        .O(XMIT_DATA_INT0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_DATA_INT0),
        .Q(XMIT_DATA_INT),
        .R(out));
  CARRY8 plusOp__0_carry
       (.CI(\TIMER4096_reg_n_0_[0] ),
        .CI_TOP(1'b0),
        .CO({plusOp__0_carry_n_0,plusOp__0_carry_n_1,plusOp__0_carry_n_2,plusOp__0_carry_n_3,plusOp__0_carry_n_4,plusOp__0_carry_n_5,plusOp__0_carry_n_6,plusOp__0_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp__0[8:1]),
        .S({\TIMER4096_reg_n_0_[8] ,\TIMER4096_reg_n_0_[7] ,\TIMER4096_reg_n_0_[6] ,\TIMER4096_reg_n_0_[5] ,\TIMER4096_reg_n_0_[4] ,\TIMER4096_reg_n_0_[3] ,\TIMER4096_reg_n_0_[2] ,\TIMER4096_reg_n_0_[1] }));
  CARRY8 plusOp__0_carry__0
       (.CI(plusOp__0_carry_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_plusOp__0_carry__0_CO_UNCONNECTED[7:2],plusOp__0_carry__0_n_6,plusOp__0_carry__0_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp__0_carry__0_O_UNCONNECTED[7:3],plusOp__0[11:9]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,TIMER4096_reg,\TIMER4096_reg_n_0_[10] ,\TIMER4096_reg_n_0_[9] }));
  CARRY8 \plusOp_inferred__0/i__carry 
       (.CI(MASK_RUDI_BUFERR_TIMER[0]),
        .CI_TOP(1'b0),
        .CO({\plusOp_inferred__0/i__carry_n_0 ,\plusOp_inferred__0/i__carry_n_1 ,\plusOp_inferred__0/i__carry_n_2 ,\plusOp_inferred__0/i__carry_n_3 ,\plusOp_inferred__0/i__carry_n_4 ,\plusOp_inferred__0/i__carry_n_5 ,\plusOp_inferred__0/i__carry_n_6 ,\plusOp_inferred__0/i__carry_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\plusOp_inferred__0/i__carry_n_8 ,\plusOp_inferred__0/i__carry_n_9 ,\plusOp_inferred__0/i__carry_n_10 ,\plusOp_inferred__0/i__carry_n_11 ,\plusOp_inferred__0/i__carry_n_12 ,\plusOp_inferred__0/i__carry_n_13 ,\plusOp_inferred__0/i__carry_n_14 ,\plusOp_inferred__0/i__carry_n_15 }),
        .S(MASK_RUDI_BUFERR_TIMER[8:1]));
  CARRY8 \plusOp_inferred__0/i__carry__0 
       (.CI(\plusOp_inferred__0/i__carry_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_plusOp_inferred__0/i__carry__0_CO_UNCONNECTED [7:3],\plusOp_inferred__0/i__carry__0_n_5 ,\plusOp_inferred__0/i__carry__0_n_6 ,\plusOp_inferred__0/i__carry__0_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_plusOp_inferred__0/i__carry__0_O_UNCONNECTED [7:4],\plusOp_inferred__0/i__carry__0_n_12 ,\plusOp_inferred__0/i__carry__0_n_13 ,\plusOp_inferred__0/i__carry__0_n_14 ,\plusOp_inferred__0/i__carry__0_n_15 }),
        .S({1'b0,1'b0,1'b0,1'b0,MASK_RUDI_BUFERR_TIMER[12:9]}));
endmodule

(* ORIG_REF_NAME = "AUTO_NEG" *) 
module quadsgmii_0_TEST_AUTO_NEG_176
   (status_vector_ch0,
    TOGGLE_RX,
    XMIT_DATA_INT,
    MR_AN_COMPLETE,
    MR_PAGE_RX_SET,
    XMIT_CONFIG_INT,
    RECEIVED_IDLE,
    RX_CONFIG_REG_NULL_reg_0,
    MR_LINK_STATUS,
    \RX_CONFIG_REG_REG_reg[11]_0 ,
    \MR_LP_ADV_ABILITY_INT_reg[16]_0 ,
    \MASK_RUDI_BUFERR_TIMER_reg[3]_0 ,
    D,
    out,
    userclk,
    Q,
    BASEX_REMOTE_FAULT_RSLVD,
    RX_RUDI_INVALID_REG_reg_0,
    RX_RUDI_INVALID,
    AN_ENABLE_INT,
    RESTART_AN_REG,
    RX_CONFIG_VALID,
    RX_IDLE,
    CLEAR_PAGE_RECEIVED,
    CLEAR_STATUS_REG,
    RECEIVED_IDLE_reg_0,
    RX_CONFIG_REG_NULL_reg_1,
    data_out,
    \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ,
    \MASK_RUDI_BUFERR_TIMER_reg[0]_0 ,
    MASK_RUDI_CLKCOR_reg_0,
    RXSYNC_STATUS,
    SR,
    RX_INVALID,
    XMIT_DATA,
    CONFIG_REG_MATCH_reg_0,
    \TX_CONFIG_REG_INT_reg[13]_0 ,
    \TX_CONFIG_REG_INT_reg[0]_0 ,
    link_timer_value_ch0,
    \MASK_RUDI_BUFERR_TIMER_reg[12]_1 );
  output [5:0]status_vector_ch0;
  output TOGGLE_RX;
  output XMIT_DATA_INT;
  output MR_AN_COMPLETE;
  output MR_PAGE_RX_SET;
  output XMIT_CONFIG_INT;
  output RECEIVED_IDLE;
  output RX_CONFIG_REG_NULL_reg_0;
  output MR_LINK_STATUS;
  output [2:0]\RX_CONFIG_REG_REG_reg[11]_0 ;
  output [3:0]\MR_LP_ADV_ABILITY_INT_reg[16]_0 ;
  output \MASK_RUDI_BUFERR_TIMER_reg[3]_0 ;
  output [3:0]D;
  input out;
  input userclk;
  input [15:0]Q;
  input [0:0]BASEX_REMOTE_FAULT_RSLVD;
  input RX_RUDI_INVALID_REG_reg_0;
  input RX_RUDI_INVALID;
  input AN_ENABLE_INT;
  input RESTART_AN_REG;
  input RX_CONFIG_VALID;
  input RX_IDLE;
  input CLEAR_PAGE_RECEIVED;
  input CLEAR_STATUS_REG;
  input RECEIVED_IDLE_reg_0;
  input RX_CONFIG_REG_NULL_reg_1;
  input data_out;
  input \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  input \MASK_RUDI_BUFERR_TIMER_reg[0]_0 ;
  input [1:0]MASK_RUDI_CLKCOR_reg_0;
  input RXSYNC_STATUS;
  input [0:0]SR;
  input RX_INVALID;
  input XMIT_DATA;
  input CONFIG_REG_MATCH_reg_0;
  input \TX_CONFIG_REG_INT_reg[13]_0 ;
  input \TX_CONFIG_REG_INT_reg[0]_0 ;
  input [8:0]link_timer_value_ch0;
  input \MASK_RUDI_BUFERR_TIMER_reg[12]_1 ;

  wire ABILITY_MATCH;
  wire ABILITY_MATCH_2;
  wire ABILITY_MATCH_2_i_3_n_0;
  wire ABILITY_MATCH_2_i_4_n_0;
  wire ABILITY_MATCH_2_i_6_n_0;
  wire ABILITY_MATCH_2_i_7_n_0;
  wire ABILITY_MATCH_i_1_n_0;
  wire ACKNOWLEDGE_MATCH_2;
  wire ACKNOWLEDGE_MATCH_20;
  wire ACKNOWLEDGE_MATCH_3;
  wire ACKNOWLEDGE_MATCH_30;
  wire ACKNOWLEDGE_MATCH_3_reg_n_0;
  wire AN_ENABLE_INT;
  wire AN_SYNC_STATUS;
  wire AN_SYNC_STATUS_i_1_n_0;
  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire CLEAR_PAGE_RECEIVED;
  wire CLEAR_STATUS_REG;
  wire CLEAR_STATUS_REG1;
  wire CLEAR_STATUS_REG2;
  wire CONFIG_REG_MATCH;
  wire CONFIG_REG_MATCH_COMB;
  wire CONFIG_REG_MATCH_reg_0;
  wire CONSISTENCY_MATCH;
  wire CONSISTENCY_MATCH_COMB;
  wire CONSISTENCY_MATCH_i_2_n_0;
  wire CONSISTENCY_MATCH_i_3_n_0;
  wire CONSISTENCY_MATCH_i_4_n_0;
  wire CONSISTENCY_MATCH_i_5_n_0;
  wire CONSISTENCY_MATCH_i_6_n_0;
  wire [3:0]D;
  wire GENERATE_REMOTE_FAULT;
  wire GENERATE_REMOTE_FAULT0;
  wire GENERATE_REMOTE_FAULT_i_2_n_0;
  wire GENERATE_REMOTE_FAULT_i_3_n_0;
  wire GENERATE_REMOTE_FAULT_i_4_n_0;
  wire IDLE_INSERTED;
  wire IDLE_INSERTED0;
  wire IDLE_INSERTED_REG1;
  wire IDLE_INSERTED_REG2;
  wire IDLE_INSERTED_REG3;
  wire IDLE_INSERTED_REG30;
  wire IDLE_INSERTED_REG4;
  wire IDLE_MATCH;
  wire IDLE_MATCH0;
  wire IDLE_MATCH_2;
  wire IDLE_MATCH_20;
  wire IDLE_REMOVED;
  wire IDLE_REMOVED0;
  wire IDLE_REMOVED_REG1;
  wire IDLE_REMOVED_REG2;
  wire \LINK_TIMER[6]_i_1_n_0 ;
  wire \LINK_TIMER[9]_i_1_n_0 ;
  wire \LINK_TIMER[9]_i_3_n_0 ;
  wire LINK_TIMER_DONE;
  wire LINK_TIMER_DONE_i_1_n_0;
  wire LINK_TIMER_DONE_i_2_n_0;
  wire LINK_TIMER_DONE_i_3_n_0;
  wire LINK_TIMER_SATURATED;
  wire LINK_TIMER_SATURATED_COMB;
  wire LINK_TIMER_SATURATED_i_2_n_0;
  wire LINK_TIMER_SATURATED_i_3_n_0;
  wire LINK_TIMER_SATURATED_i_4_n_0;
  wire [9:0]LINK_TIMER_reg;
  wire MASK_RUDI_BUFERR;
  wire [12:0]MASK_RUDI_BUFERR_TIMER;
  wire \MASK_RUDI_BUFERR_TIMER[0]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[10]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[11]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_4_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_5_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[1]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[2]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[3]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[4]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[5]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[6]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[7]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[8]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[9]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[0]_0 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[12]_1 ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[3]_0 ;
  wire MASK_RUDI_BUFERR_i_1_n_0;
  wire MASK_RUDI_CLKCOR;
  wire MASK_RUDI_CLKCOR_i_1_n_0;
  wire [1:0]MASK_RUDI_CLKCOR_reg_0;
  wire MR_AN_COMPLETE;
  wire MR_AN_COMPLETE_i_1_n_0;
  wire MR_AN_ENABLE_CHANGE;
  wire MR_AN_ENABLE_CHANGE0;
  wire MR_AN_ENABLE_REG1;
  wire MR_AN_ENABLE_REG2;
  wire MR_LINK_STATUS;
  wire MR_LINK_STATUS_i_1_n_0;
  wire [3:0]\MR_LP_ADV_ABILITY_INT_reg[16]_0 ;
  wire MR_PAGE_RX_CLEAR_REG1;
  wire MR_PAGE_RX_CLEAR_REG2;
  wire MR_PAGE_RX_SET;
  wire MR_PAGE_RX_SET0;
  wire MR_PAGE_RX_SET_i_1_n_0;
  wire MR_REMOTE_FAULT_i_1_n_0;
  wire MR_RESTART_AN_INT;
  wire MR_RESTART_AN_INT_i_1_n_0;
  wire MR_RESTART_AN_SET_REG1;
  wire MR_RESTART_AN_SET_REG2;
  wire [3:0]PREVIOUS_STATE;
  wire PULSE4096;
  wire PULSE40960;
  wire [15:0]Q;
  wire RECEIVED_IDLE;
  wire RECEIVED_IDLE_reg_0;
  wire RESTART_AN_REG;
  wire RXSYNC_STATUS;
  wire RX_CONFIG_REG_NULL_reg_0;
  wire RX_CONFIG_REG_NULL_reg_1;
  wire [2:0]\RX_CONFIG_REG_REG_reg[11]_0 ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[12] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[13] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[1] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[2] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[3] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[4] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[5] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[6] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[7] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[8] ;
  wire RX_CONFIG_SNAPSHOT;
  wire \RX_CONFIG_SNAPSHOT[15]_i_2_n_0 ;
  wire \RX_CONFIG_SNAPSHOT[15]_i_3_n_0 ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[0] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[10] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[11] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[12] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[13] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[15] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[1] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[2] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[3] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[4] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[5] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[6] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[7] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[8] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[9] ;
  wire RX_CONFIG_VALID;
  wire RX_IDLE;
  wire RX_IDLE_REG1;
  wire RX_IDLE_REG2;
  wire RX_INVALID;
  wire RX_RUDI_INVALID;
  wire [1:0]RX_RUDI_INVALID_DELAY;
  wire RX_RUDI_INVALID_DELAY0;
  wire RX_RUDI_INVALID_REG;
  wire RX_RUDI_INVALID_REG_reg_0;
  wire \SGMII_SPEED[1]_i_2_n_0 ;
  wire [0:0]SR;
  wire START_LINK_TIMER;
  wire START_LINK_TIMER_REG;
  wire START_LINK_TIMER_REG2;
  wire START_LINK_TIMER_REG_i_2_n_0;
  wire START_LINK_TIMER_REG_i_3_n_0;
  wire [3:0]STATE;
  wire \STATE[0]_i_1_n_0 ;
  wire \STATE[0]_i_2_n_0 ;
  wire \STATE[0]_i_3_n_0 ;
  wire \STATE[0]_i_4_n_0 ;
  wire \STATE[1]_i_1_n_0 ;
  wire \STATE[1]_i_2_n_0 ;
  wire \STATE[1]_i_3_n_0 ;
  wire \STATE[1]_i_4_n_0 ;
  wire \STATE[1]_i_5_n_0 ;
  wire \STATE[2]_i_1_n_0 ;
  wire \STATE[2]_i_2_n_0 ;
  wire \STATE[2]_i_3_n_0 ;
  wire \STATE[2]_i_4_n_0 ;
  wire \STATE[2]_i_5_n_0 ;
  wire \STATE[2]_i_6_n_0 ;
  wire \STATE[3]_i_1_n_0 ;
  wire \STATE[3]_i_2_n_0 ;
  wire \STATE[3]_i_3_n_0 ;
  wire \STATE[3]_i_4_n_0 ;
  wire SYNC_STATUS_HELD;
  wire SYNC_STATUS_HELD_i_1_n_0;
  wire TIMER4096_MSB_REG;
  wire [11:11]TIMER4096_reg;
  wire \TIMER4096_reg_n_0_[0] ;
  wire \TIMER4096_reg_n_0_[10] ;
  wire \TIMER4096_reg_n_0_[1] ;
  wire \TIMER4096_reg_n_0_[2] ;
  wire \TIMER4096_reg_n_0_[3] ;
  wire \TIMER4096_reg_n_0_[4] ;
  wire \TIMER4096_reg_n_0_[5] ;
  wire \TIMER4096_reg_n_0_[6] ;
  wire \TIMER4096_reg_n_0_[7] ;
  wire \TIMER4096_reg_n_0_[8] ;
  wire \TIMER4096_reg_n_0_[9] ;
  wire TOGGLE_RX;
  wire TOGGLE_TX;
  wire TOGGLE_TX_i_1_n_0;
  wire \TX_CONFIG_REG_INT[0]_i_1_n_0 ;
  wire \TX_CONFIG_REG_INT[11]_i_1_n_0 ;
  wire \TX_CONFIG_REG_INT[13]_i_2_n_0 ;
  wire \TX_CONFIG_REG_INT[14]_i_1_n_0 ;
  wire \TX_CONFIG_REG_INT_reg[0]_0 ;
  wire \TX_CONFIG_REG_INT_reg[13]_0 ;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_i_1_n_0;
  wire XMIT_CONFIG_INT_i_2__0_n_0;
  wire XMIT_CONFIG_INT_i_3_n_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT0;
  wire [15:15]__16;
  wire data_out;
  wire [8:0]link_timer_value_ch0;
  wire out;
  wire p_0_in0_in;
  wire p_0_in26_in;
  wire [11:0]plusOp__0;
  wire [9:0]plusOp__0__0;
  wire plusOp__0_carry__0_n_6;
  wire plusOp__0_carry__0_n_7;
  wire plusOp__0_carry_n_0;
  wire plusOp__0_carry_n_1;
  wire plusOp__0_carry_n_2;
  wire plusOp__0_carry_n_3;
  wire plusOp__0_carry_n_4;
  wire plusOp__0_carry_n_5;
  wire plusOp__0_carry_n_6;
  wire plusOp__0_carry_n_7;
  wire \plusOp_inferred__0/i__carry__0_n_12 ;
  wire \plusOp_inferred__0/i__carry__0_n_13 ;
  wire \plusOp_inferred__0/i__carry__0_n_14 ;
  wire \plusOp_inferred__0/i__carry__0_n_15 ;
  wire \plusOp_inferred__0/i__carry__0_n_5 ;
  wire \plusOp_inferred__0/i__carry__0_n_6 ;
  wire \plusOp_inferred__0/i__carry__0_n_7 ;
  wire \plusOp_inferred__0/i__carry_n_0 ;
  wire \plusOp_inferred__0/i__carry_n_1 ;
  wire \plusOp_inferred__0/i__carry_n_10 ;
  wire \plusOp_inferred__0/i__carry_n_11 ;
  wire \plusOp_inferred__0/i__carry_n_12 ;
  wire \plusOp_inferred__0/i__carry_n_13 ;
  wire \plusOp_inferred__0/i__carry_n_14 ;
  wire \plusOp_inferred__0/i__carry_n_15 ;
  wire \plusOp_inferred__0/i__carry_n_2 ;
  wire \plusOp_inferred__0/i__carry_n_3 ;
  wire \plusOp_inferred__0/i__carry_n_4 ;
  wire \plusOp_inferred__0/i__carry_n_5 ;
  wire \plusOp_inferred__0/i__carry_n_6 ;
  wire \plusOp_inferred__0/i__carry_n_7 ;
  wire \plusOp_inferred__0/i__carry_n_8 ;
  wire \plusOp_inferred__0/i__carry_n_9 ;
  wire [5:0]status_vector_ch0;
  wire userclk;
  wire [7:2]NLW_plusOp__0_carry__0_CO_UNCONNECTED;
  wire [7:3]NLW_plusOp__0_carry__0_O_UNCONNECTED;
  wire [7:3]\NLW_plusOp_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [7:4]\NLW_plusOp_inferred__0/i__carry__0_O_UNCONNECTED ;

  LUT3 #(
    .INIT(8'hFE)) 
    ABILITY_MATCH_2_i_1
       (.I0(MASK_RUDI_BUFERR),
        .I1(RX_IDLE),
        .I2(out),
        .O(ACKNOWLEDGE_MATCH_3));
  LUT6 #(
    .INIT(64'h0000000000000009)) 
    ABILITY_MATCH_2_i_2
       (.I0(Q[15]),
        .I1(p_0_in0_in),
        .I2(RECEIVED_IDLE),
        .I3(ABILITY_MATCH_2_i_3_n_0),
        .I4(ABILITY_MATCH_2_i_4_n_0),
        .I5(CONFIG_REG_MATCH_reg_0),
        .O(CONFIG_REG_MATCH_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_3
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .I4(Q[8]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .O(ABILITY_MATCH_2_i_3_n_0));
  LUT6 #(
    .INIT(64'hEFFEFFFFFFFFEFFE)) 
    ABILITY_MATCH_2_i_4
       (.I0(ABILITY_MATCH_2_i_6_n_0),
        .I1(ABILITY_MATCH_2_i_7_n_0),
        .I2(Q[13]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[13] ),
        .I4(Q[12]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[12] ),
        .O(ABILITY_MATCH_2_i_4_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_6
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .I4(Q[1]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .O(ABILITY_MATCH_2_i_6_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_7
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .I4(Q[5]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .O(ABILITY_MATCH_2_i_7_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_2_reg
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(CONFIG_REG_MATCH_COMB),
        .Q(ABILITY_MATCH_2),
        .R(ACKNOWLEDGE_MATCH_3));
  LUT6 #(
    .INIT(64'h0000000000008F80)) 
    ABILITY_MATCH_i_1
       (.I0(CONFIG_REG_MATCH_COMB),
        .I1(ABILITY_MATCH_2),
        .I2(RX_CONFIG_VALID),
        .I3(ABILITY_MATCH),
        .I4(MASK_RUDI_BUFERR),
        .I5(SR),
        .O(ABILITY_MATCH_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ABILITY_MATCH_i_1_n_0),
        .Q(ABILITY_MATCH),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT2 #(
    .INIT(4'h8)) 
    ACKNOWLEDGE_MATCH_2_i_1
       (.I0(p_0_in26_in),
        .I1(Q[14]),
        .O(ACKNOWLEDGE_MATCH_20));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_2_reg
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(ACKNOWLEDGE_MATCH_20),
        .Q(ACKNOWLEDGE_MATCH_2),
        .R(ACKNOWLEDGE_MATCH_3));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'h80)) 
    ACKNOWLEDGE_MATCH_3_i_1
       (.I0(ACKNOWLEDGE_MATCH_2),
        .I1(Q[14]),
        .I2(p_0_in26_in),
        .O(ACKNOWLEDGE_MATCH_30));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_3_reg
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(ACKNOWLEDGE_MATCH_30),
        .Q(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .R(ACKNOWLEDGE_MATCH_3));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT5 #(
    .INIT(32'hFFBFFF80)) 
    AN_SYNC_STATUS_i_1
       (.I0(SYNC_STATUS_HELD),
        .I1(LINK_TIMER_SATURATED),
        .I2(PULSE4096),
        .I3(RXSYNC_STATUS),
        .I4(AN_SYNC_STATUS),
        .O(AN_SYNC_STATUS_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    AN_SYNC_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(AN_SYNC_STATUS_i_1_n_0),
        .Q(AN_SYNC_STATUS),
        .R(out));
  FDRE \BASEX_REMOTE_FAULT_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(BASEX_REMOTE_FAULT_RSLVD),
        .Q(status_vector_ch0[2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    CLEAR_STATUS_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CLEAR_STATUS_REG),
        .Q(CLEAR_STATUS_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    CLEAR_STATUS_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CLEAR_STATUS_REG1),
        .Q(CLEAR_STATUS_REG2),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    CONFIG_REG_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_REG_MATCH_COMB),
        .Q(CONFIG_REG_MATCH),
        .R(out));
  LUT5 #(
    .INIT(32'h00000009)) 
    CONSISTENCY_MATCH_i_1
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .I1(Q[15]),
        .I2(CONSISTENCY_MATCH_i_2_n_0),
        .I3(CONSISTENCY_MATCH_i_3_n_0),
        .I4(CONSISTENCY_MATCH_i_4_n_0),
        .O(CONSISTENCY_MATCH_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_2
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .I4(Q[8]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .O(CONSISTENCY_MATCH_i_2_n_0));
  LUT6 #(
    .INIT(64'hEFFEFFFFFFFFEFFE)) 
    CONSISTENCY_MATCH_i_3
       (.I0(CONSISTENCY_MATCH_i_5_n_0),
        .I1(CONSISTENCY_MATCH_i_6_n_0),
        .I2(Q[12]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[12] ),
        .I4(Q[13]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[13] ),
        .O(CONSISTENCY_MATCH_i_3_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_4
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .I1(Q[9]),
        .I2(Q[10]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .I4(Q[11]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .O(CONSISTENCY_MATCH_i_4_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_5
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .I4(Q[2]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .O(CONSISTENCY_MATCH_i_5_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    CONSISTENCY_MATCH_i_6
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .I4(Q[5]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .O(CONSISTENCY_MATCH_i_6_n_0));
  FDRE #(
    .INIT(1'b0)) 
    CONSISTENCY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONSISTENCY_MATCH_COMB),
        .Q(CONSISTENCY_MATCH),
        .R(out));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    GENERATE_REMOTE_FAULT_i_1
       (.I0(GENERATE_REMOTE_FAULT_i_2_n_0),
        .I1(\STATE[3]_i_3_n_0 ),
        .I2(GENERATE_REMOTE_FAULT_i_3_n_0),
        .I3(STATE[3]),
        .I4(GENERATE_REMOTE_FAULT_i_4_n_0),
        .I5(STATE[0]),
        .O(GENERATE_REMOTE_FAULT0));
  LUT6 #(
    .INIT(64'h0888888888888888)) 
    GENERATE_REMOTE_FAULT_i_2
       (.I0(\STATE[1]_i_2_n_0 ),
        .I1(\STATE[2]_i_3_n_0 ),
        .I2(\STATE[2]_i_4_n_0 ),
        .I3(IDLE_MATCH),
        .I4(LINK_TIMER_DONE),
        .I5(STATE[0]),
        .O(GENERATE_REMOTE_FAULT_i_2_n_0));
  LUT6 #(
    .INIT(64'h000000000000FF60)) 
    GENERATE_REMOTE_FAULT_i_3
       (.I0(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .I1(TOGGLE_RX),
        .I2(ABILITY_MATCH),
        .I3(\STATE[2]_i_3_n_0 ),
        .I4(\STATE[2]_i_4_n_0 ),
        .I5(\STATE[2]_i_5_n_0 ),
        .O(GENERATE_REMOTE_FAULT_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT2 #(
    .INIT(4'h2)) 
    GENERATE_REMOTE_FAULT_i_4
       (.I0(STATE[2]),
        .I1(STATE[1]),
        .O(GENERATE_REMOTE_FAULT_i_4_n_0));
  FDRE #(
    .INIT(1'b0)) 
    GENERATE_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(GENERATE_REMOTE_FAULT0),
        .Q(GENERATE_REMOTE_FAULT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED),
        .Q(IDLE_INSERTED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG1),
        .Q(IDLE_INSERTED_REG2),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    IDLE_INSERTED_REG3_i_1
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE_REG2),
        .O(IDLE_INSERTED_REG30));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG30),
        .Q(IDLE_INSERTED_REG3),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG4_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG3),
        .Q(IDLE_INSERTED_REG4),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'h08)) 
    IDLE_INSERTED_i_1
       (.I0(MASK_RUDI_CLKCOR_reg_0[1]),
        .I1(MASK_RUDI_CLKCOR_reg_0[0]),
        .I2(XMIT_CONFIG_INT),
        .O(IDLE_INSERTED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED0),
        .Q(IDLE_INSERTED),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'h04)) 
    IDLE_MATCH_2_i_1
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_INSERTED_REG4),
        .O(IDLE_MATCH_20));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_2_reg
       (.C(userclk),
        .CE(RX_IDLE_REG2),
        .D(IDLE_MATCH_20),
        .Q(IDLE_MATCH_2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT4 #(
    .INIT(16'h4440)) 
    IDLE_MATCH_i_1
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_REMOVED_REG2),
        .I3(IDLE_MATCH_2),
        .O(IDLE_MATCH0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_reg
       (.C(userclk),
        .CE(RX_IDLE_REG2),
        .D(IDLE_MATCH0),
        .Q(IDLE_MATCH),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED),
        .Q(IDLE_REMOVED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED_REG1),
        .Q(IDLE_REMOVED_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'h04)) 
    IDLE_REMOVED_i_1
       (.I0(MASK_RUDI_CLKCOR_reg_0[1]),
        .I1(MASK_RUDI_CLKCOR_reg_0[0]),
        .I2(XMIT_CONFIG_INT),
        .O(IDLE_REMOVED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED0),
        .Q(IDLE_REMOVED),
        .R(out));
  LUT1 #(
    .INIT(2'h1)) 
    \LINK_TIMER[0]_i_1 
       (.I0(LINK_TIMER_reg[0]),
        .O(plusOp__0__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \LINK_TIMER[1]_i_1 
       (.I0(LINK_TIMER_reg[0]),
        .I1(LINK_TIMER_reg[1]),
        .O(plusOp__0__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \LINK_TIMER[2]_i_1 
       (.I0(LINK_TIMER_reg[2]),
        .I1(LINK_TIMER_reg[0]),
        .I2(LINK_TIMER_reg[1]),
        .O(plusOp__0__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \LINK_TIMER[3]_i_1 
       (.I0(LINK_TIMER_reg[3]),
        .I1(LINK_TIMER_reg[1]),
        .I2(LINK_TIMER_reg[0]),
        .I3(LINK_TIMER_reg[2]),
        .O(plusOp__0__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \LINK_TIMER[4]_i_1 
       (.I0(LINK_TIMER_reg[4]),
        .I1(LINK_TIMER_reg[2]),
        .I2(LINK_TIMER_reg[0]),
        .I3(LINK_TIMER_reg[1]),
        .I4(LINK_TIMER_reg[3]),
        .O(plusOp__0__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \LINK_TIMER[5]_i_1 
       (.I0(LINK_TIMER_reg[5]),
        .I1(LINK_TIMER_reg[3]),
        .I2(LINK_TIMER_reg[1]),
        .I3(LINK_TIMER_reg[0]),
        .I4(LINK_TIMER_reg[2]),
        .I5(LINK_TIMER_reg[4]),
        .O(plusOp__0__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \LINK_TIMER[6]_i_1 
       (.I0(LINK_TIMER_reg[6]),
        .I1(\LINK_TIMER[9]_i_3_n_0 ),
        .O(\LINK_TIMER[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    \LINK_TIMER[7]_i_1 
       (.I0(LINK_TIMER_reg[7]),
        .I1(\LINK_TIMER[9]_i_3_n_0 ),
        .I2(LINK_TIMER_reg[6]),
        .O(plusOp__0__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \LINK_TIMER[8]_i_1 
       (.I0(LINK_TIMER_reg[8]),
        .I1(LINK_TIMER_reg[6]),
        .I2(\LINK_TIMER[9]_i_3_n_0 ),
        .I3(LINK_TIMER_reg[7]),
        .O(plusOp__0__0[8]));
  LUT4 #(
    .INIT(16'hFFF8)) 
    \LINK_TIMER[9]_i_1 
       (.I0(LINK_TIMER_SATURATED),
        .I1(PULSE4096),
        .I2(START_LINK_TIMER_REG),
        .I3(out),
        .O(\LINK_TIMER[9]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \LINK_TIMER[9]_i_2 
       (.I0(LINK_TIMER_reg[9]),
        .I1(LINK_TIMER_reg[7]),
        .I2(\LINK_TIMER[9]_i_3_n_0 ),
        .I3(LINK_TIMER_reg[6]),
        .I4(LINK_TIMER_reg[8]),
        .O(plusOp__0__0[9]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \LINK_TIMER[9]_i_3 
       (.I0(LINK_TIMER_reg[4]),
        .I1(LINK_TIMER_reg[2]),
        .I2(LINK_TIMER_reg[0]),
        .I3(LINK_TIMER_reg[1]),
        .I4(LINK_TIMER_reg[3]),
        .I5(LINK_TIMER_reg[5]),
        .O(\LINK_TIMER[9]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h08000808)) 
    LINK_TIMER_DONE_i_1
       (.I0(LINK_TIMER_DONE_i_2_n_0),
        .I1(\STATE[3]_i_3_n_0 ),
        .I2(LINK_TIMER_DONE_i_3_n_0),
        .I3(STATE[3]),
        .I4(\STATE[2]_i_5_n_0 ),
        .O(LINK_TIMER_DONE_i_1_n_0));
  LUT5 #(
    .INIT(32'h00001110)) 
    LINK_TIMER_DONE_i_2
       (.I0(START_LINK_TIMER_REG),
        .I1(out),
        .I2(LINK_TIMER_SATURATED),
        .I3(LINK_TIMER_DONE),
        .I4(START_LINK_TIMER_REG2),
        .O(LINK_TIMER_DONE_i_2_n_0));
  LUT6 #(
    .INIT(64'h44F4F4F444444444)) 
    LINK_TIMER_DONE_i_3
       (.I0(START_LINK_TIMER_REG_i_2_n_0),
        .I1(AN_ENABLE_INT),
        .I2(LINK_TIMER_DONE),
        .I3(RX_CONFIG_REG_NULL_reg_0),
        .I4(ABILITY_MATCH),
        .I5(\SGMII_SPEED[1]_i_2_n_0 ),
        .O(LINK_TIMER_DONE_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_DONE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_DONE_i_1_n_0),
        .Q(LINK_TIMER_DONE),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0004)) 
    LINK_TIMER_SATURATED_i_1
       (.I0(LINK_TIMER_SATURATED_i_2_n_0),
        .I1(LINK_TIMER_SATURATED_i_3_n_0),
        .I2(LINK_TIMER_SATURATED_i_4_n_0),
        .I3(LINK_TIMER_reg[9]),
        .O(LINK_TIMER_SATURATED_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    LINK_TIMER_SATURATED_i_2
       (.I0(link_timer_value_ch0[3]),
        .I1(LINK_TIMER_reg[3]),
        .I2(LINK_TIMER_reg[5]),
        .I3(link_timer_value_ch0[5]),
        .I4(LINK_TIMER_reg[4]),
        .I5(link_timer_value_ch0[4]),
        .O(LINK_TIMER_SATURATED_i_2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_i_3
       (.I0(link_timer_value_ch0[6]),
        .I1(LINK_TIMER_reg[6]),
        .I2(LINK_TIMER_reg[7]),
        .I3(link_timer_value_ch0[7]),
        .I4(LINK_TIMER_reg[8]),
        .I5(link_timer_value_ch0[8]),
        .O(LINK_TIMER_SATURATED_i_3_n_0));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    LINK_TIMER_SATURATED_i_4
       (.I0(LINK_TIMER_reg[1]),
        .I1(link_timer_value_ch0[1]),
        .I2(LINK_TIMER_reg[2]),
        .I3(link_timer_value_ch0[2]),
        .I4(link_timer_value_ch0[0]),
        .I5(LINK_TIMER_reg[0]),
        .O(LINK_TIMER_SATURATED_i_4_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_SATURATED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_SATURATED_COMB),
        .Q(LINK_TIMER_SATURATED),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[0] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[0]),
        .Q(LINK_TIMER_reg[0]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[1] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[1]),
        .Q(LINK_TIMER_reg[1]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[2] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[2]),
        .Q(LINK_TIMER_reg[2]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[3] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[3]),
        .Q(LINK_TIMER_reg[3]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[4] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[4]),
        .Q(LINK_TIMER_reg[4]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[5] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[5]),
        .Q(LINK_TIMER_reg[5]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[6] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(\LINK_TIMER[6]_i_1_n_0 ),
        .Q(LINK_TIMER_reg[6]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[7] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[7]),
        .Q(LINK_TIMER_reg[7]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[8] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[8]),
        .Q(LINK_TIMER_reg[8]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[9] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0__0[9]),
        .Q(LINK_TIMER_reg[9]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h5155)) 
    \MASK_RUDI_BUFERR_TIMER[0]_i_1 
       (.I0(MASK_RUDI_BUFERR_TIMER[0]),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[10]_i_1 
       (.I0(\plusOp_inferred__0/i__carry__0_n_14 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[11]_i_1 
       (.I0(\plusOp_inferred__0/i__carry__0_n_13 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_2 
       (.I0(\plusOp_inferred__0/i__carry__0_n_12 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h20000000)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_3 
       (.I0(\MASK_RUDI_BUFERR_TIMER[12]_i_4_n_0 ),
        .I1(\MASK_RUDI_BUFERR_TIMER[12]_i_5_n_0 ),
        .I2(MASK_RUDI_BUFERR_TIMER[3]),
        .I3(MASK_RUDI_BUFERR_TIMER[1]),
        .I4(MASK_RUDI_BUFERR_TIMER[8]),
        .O(\MASK_RUDI_BUFERR_TIMER_reg[3]_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_4 
       (.I0(MASK_RUDI_BUFERR_TIMER[10]),
        .I1(MASK_RUDI_BUFERR_TIMER[12]),
        .I2(MASK_RUDI_BUFERR_TIMER[0]),
        .I3(MASK_RUDI_BUFERR_TIMER[2]),
        .I4(MASK_RUDI_BUFERR_TIMER[7]),
        .I5(MASK_RUDI_BUFERR_TIMER[4]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_5 
       (.I0(MASK_RUDI_BUFERR_TIMER[6]),
        .I1(MASK_RUDI_BUFERR_TIMER[5]),
        .I2(MASK_RUDI_BUFERR_TIMER[11]),
        .I3(MASK_RUDI_BUFERR_TIMER[9]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[1]_i_1 
       (.I0(\plusOp_inferred__0/i__carry_n_15 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[2]_i_1 
       (.I0(\plusOp_inferred__0/i__carry_n_14 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[3]_i_1 
       (.I0(\plusOp_inferred__0/i__carry_n_13 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[4]_i_1 
       (.I0(\plusOp_inferred__0/i__carry_n_12 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[5]_i_1 
       (.I0(\plusOp_inferred__0/i__carry_n_11 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[6]_i_1 
       (.I0(\plusOp_inferred__0/i__carry_n_10 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[7]_i_1 
       (.I0(\plusOp_inferred__0/i__carry_n_9 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[8]_i_1 
       (.I0(\plusOp_inferred__0/i__carry_n_8 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'hA2AA)) 
    \MASK_RUDI_BUFERR_TIMER[9]_i_1 
       (.I0(\plusOp_inferred__0/i__carry__0_n_15 ),
        .I1(data_out),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .O(\MASK_RUDI_BUFERR_TIMER[9]_i_1_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[0] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[0]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[0]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[10] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[10]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[10]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[11] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[11]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[11]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[12] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[12]_i_2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[12]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[1] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[1]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[1]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[2] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[2]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[2]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[3] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[3]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[3]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[4] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[4]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[4]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[5] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[5]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[5]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[6] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[6]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[6]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[7] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[7]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[7]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[8] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[8]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[8]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[9] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER_reg[12]_1 ),
        .D(\MASK_RUDI_BUFERR_TIMER[9]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[9]),
        .S(out));
  LUT5 #(
    .INIT(32'h20FF2020)) 
    MASK_RUDI_BUFERR_i_1
       (.I0(data_out),
        .I1(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[0]_0 ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[3]_0 ),
        .I4(MASK_RUDI_BUFERR),
        .O(MASK_RUDI_BUFERR_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_BUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_BUFERR_i_1_n_0),
        .Q(MASK_RUDI_BUFERR),
        .R(out));
  LUT5 #(
    .INIT(32'hFFFBFFF0)) 
    MASK_RUDI_CLKCOR_i_1
       (.I0(RX_RUDI_INVALID),
        .I1(RX_RUDI_INVALID_REG),
        .I2(MASK_RUDI_CLKCOR_reg_0[1]),
        .I3(MASK_RUDI_CLKCOR_reg_0[0]),
        .I4(MASK_RUDI_CLKCOR),
        .O(MASK_RUDI_CLKCOR_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_CLKCOR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_CLKCOR_i_1_n_0),
        .Q(MASK_RUDI_CLKCOR),
        .R(RX_RUDI_INVALID_REG_reg_0));
  LUT6 #(
    .INIT(64'h2232222222222020)) 
    MR_AN_COMPLETE_i_1
       (.I0(MR_AN_COMPLETE),
        .I1(out),
        .I2(STATE[2]),
        .I3(STATE[3]),
        .I4(STATE[0]),
        .I5(STATE[1]),
        .O(MR_AN_COMPLETE_i_1_n_0));
  FDRE MR_AN_COMPLETE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_COMPLETE_i_1_n_0),
        .Q(MR_AN_COMPLETE),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    MR_AN_ENABLE_CHANGE_i_1
       (.I0(MR_AN_ENABLE_REG2),
        .I1(MR_AN_ENABLE_REG1),
        .O(MR_AN_ENABLE_CHANGE0));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_CHANGE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_CHANGE0),
        .Q(MR_AN_ENABLE_CHANGE),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(AN_ENABLE_INT),
        .Q(MR_AN_ENABLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_REG1),
        .Q(MR_AN_ENABLE_REG2),
        .R(out));
  LUT5 #(
    .INIT(32'h0000AE00)) 
    MR_LINK_STATUS_i_1
       (.I0(MR_LINK_STATUS),
        .I1(CLEAR_STATUS_REG1),
        .I2(CLEAR_STATUS_REG2),
        .I3(XMIT_DATA_INT),
        .I4(out),
        .O(MR_LINK_STATUS_i_1_n_0));
  FDRE MR_LINK_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_LINK_STATUS_i_1_n_0),
        .Q(MR_LINK_STATUS),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[11] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[10]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[13] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[12]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[15] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[14]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[16] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[15]),
        .Q(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [3]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_PAGE_RX_CLEAR_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CLEAR_PAGE_RECEIVED),
        .Q(MR_PAGE_RX_CLEAR_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_PAGE_RX_CLEAR_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_PAGE_RX_CLEAR_REG1),
        .Q(MR_PAGE_RX_CLEAR_REG2),
        .R(out));
  LUT5 #(
    .INIT(32'hEFAAAAAA)) 
    MR_PAGE_RX_SET_i_1
       (.I0(MR_PAGE_RX_SET0),
        .I1(MR_PAGE_RX_CLEAR_REG2),
        .I2(MR_PAGE_RX_CLEAR_REG1),
        .I3(START_LINK_TIMER_REG_i_2_n_0),
        .I4(MR_PAGE_RX_SET),
        .O(MR_PAGE_RX_SET_i_1_n_0));
  FDRE MR_PAGE_RX_SET_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_PAGE_RX_SET_i_1_n_0),
        .Q(MR_PAGE_RX_SET),
        .R(out));
  LUT5 #(
    .INIT(32'hF4FF4444)) 
    MR_REMOTE_FAULT_i_1
       (.I0(\MR_LP_ADV_ABILITY_INT_reg[16]_0 [3]),
        .I1(GENERATE_REMOTE_FAULT),
        .I2(CLEAR_STATUS_REG2),
        .I3(CLEAR_STATUS_REG1),
        .I4(status_vector_ch0[5]),
        .O(MR_REMOTE_FAULT_i_1_n_0));
  FDRE MR_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_REMOTE_FAULT_i_1_n_0),
        .Q(status_vector_ch0[5]),
        .R(out));
  LUT5 #(
    .INIT(32'hAE0C0C0C)) 
    MR_RESTART_AN_INT_i_1
       (.I0(START_LINK_TIMER_REG_i_2_n_0),
        .I1(MR_RESTART_AN_SET_REG1),
        .I2(MR_RESTART_AN_SET_REG2),
        .I3(AN_ENABLE_INT),
        .I4(MR_RESTART_AN_INT),
        .O(MR_RESTART_AN_INT_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_INT_i_1_n_0),
        .Q(MR_RESTART_AN_INT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RESTART_AN_REG),
        .Q(MR_RESTART_AN_SET_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_SET_REG1),
        .Q(MR_RESTART_AN_SET_REG2),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[0]),
        .Q(PREVIOUS_STATE[0]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[1]),
        .Q(PREVIOUS_STATE[1]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[2]),
        .Q(PREVIOUS_STATE[2]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[3]),
        .Q(PREVIOUS_STATE[3]),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    PULSE4096_i_1
       (.I0(TIMER4096_MSB_REG),
        .I1(TIMER4096_reg),
        .O(PULSE40960));
  FDRE #(
    .INIT(1'b0)) 
    PULSE4096_reg
       (.C(userclk),
        .CE(1'b1),
        .D(PULSE40960),
        .Q(PULSE4096),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RECEIVED_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RECEIVED_IDLE_reg_0),
        .Q(RECEIVED_IDLE),
        .R(out));
  FDRE RUDI_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[1]),
        .Q(status_vector_ch0[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_CONFIG_REG_NULL_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_REG_NULL_reg_1),
        .Q(RX_CONFIG_REG_NULL_reg_0),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[10]),
        .Q(\RX_CONFIG_REG_REG_reg[11]_0 [1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[11]),
        .Q(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[12]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[12] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[13]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[13] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[14] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[14]),
        .Q(p_0_in26_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[15]),
        .Q(p_0_in0_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[8]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[9]),
        .Q(\RX_CONFIG_REG_REG_reg[11]_0 [0]),
        .R(SR));
  LUT6 #(
    .INIT(64'h0D00000000000000)) 
    \RX_CONFIG_SNAPSHOT[15]_i_1 
       (.I0(\RX_CONFIG_SNAPSHOT[15]_i_2_n_0 ),
        .I1(\RX_CONFIG_SNAPSHOT[15]_i_3_n_0 ),
        .I2(ABILITY_MATCH),
        .I3(RX_CONFIG_VALID),
        .I4(ABILITY_MATCH_2),
        .I5(CONFIG_REG_MATCH),
        .O(RX_CONFIG_SNAPSHOT));
  LUT2 #(
    .INIT(4'h8)) 
    \RX_CONFIG_SNAPSHOT[15]_i_2 
       (.I0(STATE[0]),
        .I1(STATE[1]),
        .O(\RX_CONFIG_SNAPSHOT[15]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \RX_CONFIG_SNAPSHOT[15]_i_3 
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .O(\RX_CONFIG_SNAPSHOT[15]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[0]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[10]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[11]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[12]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[12] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[13]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[13] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[15]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[1]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[2]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[3]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[4]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[5]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[6]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[7]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[8]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[9]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(RX_IDLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE_REG1),
        .Q(RX_IDLE_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT5 #(
    .INIT(32'h000000AB)) 
    \RX_RUDI_INVALID_DELAY[0]_i_1 
       (.I0(RX_INVALID),
        .I1(XMIT_DATA),
        .I2(RXSYNC_STATUS),
        .I3(MASK_RUDI_BUFERR),
        .I4(MASK_RUDI_CLKCOR),
        .O(RX_RUDI_INVALID_DELAY0));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY0),
        .Q(RX_RUDI_INVALID_DELAY[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[0]),
        .Q(RX_RUDI_INVALID_DELAY[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_RUDI_INVALID_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID),
        .Q(RX_RUDI_INVALID_REG),
        .R(RX_RUDI_INVALID_REG_reg_0));
  FDRE SGMII_PHY_STATUS_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[15]),
        .Q(status_vector_ch0[1]),
        .R(out));
  LUT5 #(
    .INIT(32'h00200000)) 
    \SGMII_SPEED[1]_i_1 
       (.I0(\SGMII_SPEED[1]_i_2_n_0 ),
        .I1(PREVIOUS_STATE[2]),
        .I2(PREVIOUS_STATE[0]),
        .I3(PREVIOUS_STATE[3]),
        .I4(PREVIOUS_STATE[1]),
        .O(MR_PAGE_RX_SET0));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \SGMII_SPEED[1]_i_2 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[0]),
        .O(\SGMII_SPEED[1]_i_2_n_0 ));
  FDRE \SGMII_SPEED_reg[0] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[10]),
        .Q(status_vector_ch0[3]),
        .R(out));
  FDSE \SGMII_SPEED_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[11]),
        .Q(status_vector_ch0[4]),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER_REG),
        .Q(START_LINK_TIMER_REG2),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFF2F22FFFFFFFF)) 
    START_LINK_TIMER_REG_i_1
       (.I0(\STATE[2]_i_5_n_0 ),
        .I1(STATE[3]),
        .I2(START_LINK_TIMER_REG_i_2_n_0),
        .I3(AN_ENABLE_INT),
        .I4(START_LINK_TIMER_REG_i_3_n_0),
        .I5(\STATE[3]_i_3_n_0 ),
        .O(START_LINK_TIMER));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    START_LINK_TIMER_REG_i_2
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .O(START_LINK_TIMER_REG_i_2_n_0));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    START_LINK_TIMER_REG_i_3
       (.I0(STATE[0]),
        .I1(STATE[3]),
        .I2(STATE[2]),
        .I3(STATE[1]),
        .I4(\STATE[1]_i_4_n_0 ),
        .I5(LINK_TIMER_DONE),
        .O(START_LINK_TIMER_REG_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER),
        .Q(START_LINK_TIMER_REG),
        .R(out));
  LUT5 #(
    .INIT(32'h0000AAA2)) 
    \STATE[0]_i_1 
       (.I0(\STATE[3]_i_3_n_0 ),
        .I1(\STATE[0]_i_2_n_0 ),
        .I2(\STATE[0]_i_3_n_0 ),
        .I3(\STATE[0]_i_4_n_0 ),
        .I4(STATE[3]),
        .O(\STATE[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT5 #(
    .INIT(32'hEBAAEBFF)) 
    \STATE[0]_i_2 
       (.I0(\STATE[2]_i_3_n_0 ),
        .I1(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .I2(TOGGLE_RX),
        .I3(ABILITY_MATCH),
        .I4(STATE[0]),
        .O(\STATE[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h000000008B88B3B0)) 
    \STATE[0]_i_3 
       (.I0(\STATE[1]_i_4_n_0 ),
        .I1(STATE[2]),
        .I2(STATE[0]),
        .I3(AN_ENABLE_INT),
        .I4(LINK_TIMER_DONE),
        .I5(STATE[1]),
        .O(\STATE[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h000007CC00000000)) 
    \STATE[0]_i_4 
       (.I0(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I1(STATE[0]),
        .I2(RX_CONFIG_REG_NULL_reg_0),
        .I3(ABILITY_MATCH),
        .I4(STATE[2]),
        .I5(STATE[1]),
        .O(\STATE[0]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h0000AA2A)) 
    \STATE[1]_i_1 
       (.I0(\STATE[3]_i_3_n_0 ),
        .I1(\STATE[1]_i_2_n_0 ),
        .I2(\STATE[2]_i_3_n_0 ),
        .I3(\STATE[1]_i_3_n_0 ),
        .I4(STATE[3]),
        .O(\STATE[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF70700FFF)) 
    \STATE[1]_i_2 
       (.I0(\STATE[1]_i_4_n_0 ),
        .I1(\STATE[1]_i_5_n_0 ),
        .I2(STATE[0]),
        .I3(LINK_TIMER_DONE),
        .I4(STATE[1]),
        .I5(STATE[2]),
        .O(\STATE[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    \STATE[1]_i_3 
       (.I0(\STATE[1]_i_4_n_0 ),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .I3(IDLE_MATCH),
        .I4(LINK_TIMER_DONE),
        .I5(STATE[0]),
        .O(\STATE[1]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \STATE[1]_i_4 
       (.I0(ABILITY_MATCH),
        .I1(RX_CONFIG_REG_NULL_reg_0),
        .O(\STATE[1]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \STATE[1]_i_5 
       (.I0(ABILITY_MATCH),
        .I1(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .O(\STATE[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAAAAA02)) 
    \STATE[2]_i_1 
       (.I0(\STATE[3]_i_3_n_0 ),
        .I1(\STATE[2]_i_2_n_0 ),
        .I2(\STATE[2]_i_3_n_0 ),
        .I3(\STATE[2]_i_4_n_0 ),
        .I4(\STATE[2]_i_5_n_0 ),
        .I5(STATE[3]),
        .O(\STATE[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \STATE[2]_i_2 
       (.I0(\RX_CONFIG_REG_REG_reg[11]_0 [2]),
        .I1(TOGGLE_RX),
        .I2(ABILITY_MATCH),
        .O(\STATE[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT5 #(
    .INIT(32'hFF77F777)) 
    \STATE[2]_i_3 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(RX_CONFIG_REG_NULL_reg_0),
        .I3(ABILITY_MATCH),
        .I4(STATE[0]),
        .O(\STATE[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h0444)) 
    \STATE[2]_i_4 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(RX_CONFIG_REG_NULL_reg_0),
        .I3(ABILITY_MATCH),
        .O(\STATE[2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0040000000000000)) 
    \STATE[2]_i_5 
       (.I0(RX_CONFIG_REG_NULL_reg_0),
        .I1(STATE[0]),
        .I2(CONSISTENCY_MATCH),
        .I3(\STATE[2]_i_6_n_0 ),
        .I4(ABILITY_MATCH),
        .I5(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .O(\STATE[2]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \STATE[2]_i_6 
       (.I0(STATE[2]),
        .I1(STATE[1]),
        .O(\STATE[2]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \STATE[3]_i_1 
       (.I0(\STATE[3]_i_2_n_0 ),
        .I1(\STATE[3]_i_3_n_0 ),
        .I2(AN_SYNC_STATUS),
        .I3(AN_ENABLE_INT),
        .O(\STATE[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT5 #(
    .INIT(32'h00100011)) 
    \STATE[3]_i_2 
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .I4(AN_ENABLE_INT),
        .O(\STATE[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h000D0000)) 
    \STATE[3]_i_3 
       (.I0(XMIT_CONFIG_INT),
        .I1(\STATE[3]_i_4_n_0 ),
        .I2(MR_AN_ENABLE_CHANGE),
        .I3(MR_RESTART_AN_INT),
        .I4(AN_SYNC_STATUS),
        .O(\STATE[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT5 #(
    .INIT(32'hEEEEFFFE)) 
    \STATE[3]_i_4 
       (.I0(MASK_RUDI_CLKCOR),
        .I1(MASK_RUDI_BUFERR),
        .I2(RXSYNC_STATUS),
        .I3(XMIT_DATA),
        .I4(RX_INVALID),
        .O(\STATE[3]_i_4_n_0 ));
  FDRE \STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[0]_i_1_n_0 ),
        .Q(STATE[0]),
        .R(out));
  FDRE \STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[1]_i_1_n_0 ),
        .Q(STATE[1]),
        .R(out));
  FDRE \STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[2]_i_1_n_0 ),
        .Q(STATE[2]),
        .R(out));
  FDRE \STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[3]_i_1_n_0 ),
        .Q(STATE[3]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'hBFAA)) 
    SYNC_STATUS_HELD_i_1
       (.I0(RXSYNC_STATUS),
        .I1(LINK_TIMER_SATURATED),
        .I2(PULSE4096),
        .I3(SYNC_STATUS_HELD),
        .O(SYNC_STATUS_HELD_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_HELD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_HELD_i_1_n_0),
        .Q(SYNC_STATUS_HELD),
        .R(out));
  LUT1 #(
    .INIT(2'h1)) 
    \TIMER4096[0]_i_1 
       (.I0(\TIMER4096_reg_n_0_[0] ),
        .O(plusOp__0[0]));
  FDRE #(
    .INIT(1'b0)) 
    TIMER4096_MSB_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TIMER4096_reg),
        .Q(TIMER4096_MSB_REG),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[0]),
        .Q(\TIMER4096_reg_n_0_[0] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[10]),
        .Q(\TIMER4096_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[11]),
        .Q(TIMER4096_reg),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[1]),
        .Q(\TIMER4096_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[2]),
        .Q(\TIMER4096_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[3]),
        .Q(\TIMER4096_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[4]),
        .Q(\TIMER4096_reg_n_0_[4] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[5]),
        .Q(\TIMER4096_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[6]),
        .Q(\TIMER4096_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[7]),
        .Q(\TIMER4096_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[8]),
        .Q(\TIMER4096_reg_n_0_[8] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp__0[9]),
        .Q(\TIMER4096_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_RX_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET0),
        .D(Q[11]),
        .Q(TOGGLE_RX),
        .R(out));
  LUT6 #(
    .INIT(64'h5555554588888888)) 
    TOGGLE_TX_i_1
       (.I0(MR_PAGE_RX_SET0),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .I3(STATE[0]),
        .I4(STATE[3]),
        .I5(TOGGLE_TX),
        .O(TOGGLE_TX_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_TX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TOGGLE_TX_i_1_n_0),
        .Q(TOGGLE_TX),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    \TX_CONFIG_REG_INT[0]_i_1 
       (.I0(STATE[1]),
        .I1(\TX_CONFIG_REG_INT_reg[0]_0 ),
        .I2(STATE[2]),
        .O(\TX_CONFIG_REG_INT[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \TX_CONFIG_REG_INT[11]_i_1 
       (.I0(STATE[2]),
        .I1(TOGGLE_TX),
        .O(\TX_CONFIG_REG_INT[11]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h000B)) 
    \TX_CONFIG_REG_INT[13]_i_1 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[0]),
        .O(__16));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \TX_CONFIG_REG_INT[13]_i_2 
       (.I0(STATE[2]),
        .I1(\TX_CONFIG_REG_INT_reg[13]_0 ),
        .O(\TX_CONFIG_REG_INT[13]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT5 #(
    .INIT(32'hFAFE0200)) 
    \TX_CONFIG_REG_INT[14]_i_1 
       (.I0(STATE[0]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[1]),
        .I4(D[3]),
        .O(\TX_CONFIG_REG_INT[14]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[0] 
       (.C(userclk),
        .CE(__16),
        .D(\TX_CONFIG_REG_INT[0]_i_1_n_0 ),
        .Q(D[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[11] 
       (.C(userclk),
        .CE(__16),
        .D(\TX_CONFIG_REG_INT[11]_i_1_n_0 ),
        .Q(D[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[13] 
       (.C(userclk),
        .CE(__16),
        .D(\TX_CONFIG_REG_INT[13]_i_2_n_0 ),
        .Q(D[2]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[14]_i_1_n_0 ),
        .Q(D[3]),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFFFFFF0F002F20)) 
    XMIT_CONFIG_INT_i_1
       (.I0(XMIT_CONFIG_INT),
        .I1(XMIT_CONFIG_INT_i_2__0_n_0),
        .I2(START_LINK_TIMER_REG_i_2_n_0),
        .I3(AN_ENABLE_INT),
        .I4(XMIT_CONFIG_INT_i_3_n_0),
        .I5(out),
        .O(XMIT_CONFIG_INT_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    XMIT_CONFIG_INT_i_2__0
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .O(XMIT_CONFIG_INT_i_2__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    XMIT_CONFIG_INT_i_3
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[0]),
        .O(XMIT_CONFIG_INT_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_CONFIG_INT_i_1_n_0),
        .Q(XMIT_CONFIG_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT4 #(
    .INIT(16'h0180)) 
    XMIT_DATA_INT_i_1__0
       (.I0(STATE[2]),
        .I1(STATE[1]),
        .I2(STATE[0]),
        .I3(STATE[3]),
        .O(XMIT_DATA_INT0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_DATA_INT0),
        .Q(XMIT_DATA_INT),
        .R(out));
  CARRY8 plusOp__0_carry
       (.CI(\TIMER4096_reg_n_0_[0] ),
        .CI_TOP(1'b0),
        .CO({plusOp__0_carry_n_0,plusOp__0_carry_n_1,plusOp__0_carry_n_2,plusOp__0_carry_n_3,plusOp__0_carry_n_4,plusOp__0_carry_n_5,plusOp__0_carry_n_6,plusOp__0_carry_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O(plusOp__0[8:1]),
        .S({\TIMER4096_reg_n_0_[8] ,\TIMER4096_reg_n_0_[7] ,\TIMER4096_reg_n_0_[6] ,\TIMER4096_reg_n_0_[5] ,\TIMER4096_reg_n_0_[4] ,\TIMER4096_reg_n_0_[3] ,\TIMER4096_reg_n_0_[2] ,\TIMER4096_reg_n_0_[1] }));
  CARRY8 plusOp__0_carry__0
       (.CI(plusOp__0_carry_n_0),
        .CI_TOP(1'b0),
        .CO({NLW_plusOp__0_carry__0_CO_UNCONNECTED[7:2],plusOp__0_carry__0_n_6,plusOp__0_carry__0_n_7}),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp__0_carry__0_O_UNCONNECTED[7:3],plusOp__0[11:9]}),
        .S({1'b0,1'b0,1'b0,1'b0,1'b0,TIMER4096_reg,\TIMER4096_reg_n_0_[10] ,\TIMER4096_reg_n_0_[9] }));
  CARRY8 \plusOp_inferred__0/i__carry 
       (.CI(MASK_RUDI_BUFERR_TIMER[0]),
        .CI_TOP(1'b0),
        .CO({\plusOp_inferred__0/i__carry_n_0 ,\plusOp_inferred__0/i__carry_n_1 ,\plusOp_inferred__0/i__carry_n_2 ,\plusOp_inferred__0/i__carry_n_3 ,\plusOp_inferred__0/i__carry_n_4 ,\plusOp_inferred__0/i__carry_n_5 ,\plusOp_inferred__0/i__carry_n_6 ,\plusOp_inferred__0/i__carry_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\plusOp_inferred__0/i__carry_n_8 ,\plusOp_inferred__0/i__carry_n_9 ,\plusOp_inferred__0/i__carry_n_10 ,\plusOp_inferred__0/i__carry_n_11 ,\plusOp_inferred__0/i__carry_n_12 ,\plusOp_inferred__0/i__carry_n_13 ,\plusOp_inferred__0/i__carry_n_14 ,\plusOp_inferred__0/i__carry_n_15 }),
        .S(MASK_RUDI_BUFERR_TIMER[8:1]));
  CARRY8 \plusOp_inferred__0/i__carry__0 
       (.CI(\plusOp_inferred__0/i__carry_n_0 ),
        .CI_TOP(1'b0),
        .CO({\NLW_plusOp_inferred__0/i__carry__0_CO_UNCONNECTED [7:3],\plusOp_inferred__0/i__carry__0_n_5 ,\plusOp_inferred__0/i__carry__0_n_6 ,\plusOp_inferred__0/i__carry__0_n_7 }),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_plusOp_inferred__0/i__carry__0_O_UNCONNECTED [7:4],\plusOp_inferred__0/i__carry__0_n_12 ,\plusOp_inferred__0/i__carry__0_n_13 ,\plusOp_inferred__0/i__carry__0_n_14 ,\plusOp_inferred__0/i__carry__0_n_15 }),
        .S({1'b0,1'b0,1'b0,1'b0,MASK_RUDI_BUFERR_TIMER[12:9]}));
endmodule

(* ORIG_REF_NAME = "GPCS_PMA_GEN" *) 
module quadsgmii_0_TEST_GPCS_PMA_GEN
   (SR,
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg_0 ,
    status_vector_ch0,
    mdio_out_ch0,
    mdio_tri_ch0,
    ENCOMMAALIGN_reg,
    gmii_rx_er_ch0,
    D,
    POWERDOWN_CH0,
    an_interrupt_ch0,
    gmii_rx_dv_ch0,
    gmii_rxd_ch0,
    \USE_ROCKET_IO.TXDATA_reg[6]_0 ,
    \USE_ROCKET_IO.TXCHARISK_reg_0 ,
    SS,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_1 ,
    userclk,
    gmii_tx_er_ch0,
    gmii_tx_en_ch0,
    RXNOTINTABLE_USR,
    RXBUFERR,
    txbuferr,
    RXDISPERR_USR,
    rxrecclk,
    STATUS_VECTOR_0_PRE_reg_0,
    signal_detect,
    RESET_OUT,
    mdc_ch0,
    mdio_in_ch0,
    gmii_txd_ch0,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2]_0 ,
    MGT_RX_RESET,
    RESET_SYNC1,
    RESET_SYNC1_0,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    phyad_ch0,
    dcm_locked,
    RXDATA_USR,
    reset_done,
    link_timer_value_ch0);
  output [0:0]SR;
  output [0:0]\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_0 ;
  output [12:0]status_vector_ch0;
  output mdio_out_ch0;
  output mdio_tri_ch0;
  output ENCOMMAALIGN_reg;
  output gmii_rx_er_ch0;
  output [0:0]D;
  output POWERDOWN_CH0;
  output an_interrupt_ch0;
  output gmii_rx_dv_ch0;
  output [7:0]gmii_rxd_ch0;
  output [6:0]\USE_ROCKET_IO.TXDATA_reg[6]_0 ;
  output \USE_ROCKET_IO.TXCHARISK_reg_0 ;
  output [0:0]SS;
  output [0:0]\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ;
  output [0:0]\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_1 ;
  input userclk;
  input gmii_tx_er_ch0;
  input gmii_tx_en_ch0;
  input RXNOTINTABLE_USR;
  input RXBUFERR;
  input txbuferr;
  input RXDISPERR_USR;
  input rxrecclk;
  input STATUS_VECTOR_0_PRE_reg_0;
  input signal_detect;
  input RESET_OUT;
  input mdc_ch0;
  input mdio_in_ch0;
  input [7:0]gmii_txd_ch0;
  input [1:0]\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2]_0 ;
  input MGT_RX_RESET;
  input RESET_SYNC1;
  input RESET_SYNC1_0;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [4:0]phyad_ch0;
  input dcm_locked;
  input [7:0]RXDATA_USR;
  input reset_done;
  input [8:0]link_timer_value_ch0;

  wire AN_ENABLE_INT;
  wire [1:1]BASEX_REMOTE_FAULT_RSLVD;
  wire CLEAR_PAGE_RECEIVED;
  wire CLEAR_STATUS_REG;
  wire [0:0]D;
  wire DUPLEX_MODE_RSLVD_REG;
  wire ENCOMMAALIGN_reg;
  wire FALSE_NIT0;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_12 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_14 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_15 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_23 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_24 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_25 ;
  wire \HAS_MANAGEMENT.MDIO_n_0 ;
  wire \HAS_MANAGEMENT.MDIO_n_12 ;
  wire \HAS_MANAGEMENT.MDIO_n_13 ;
  wire \HAS_MANAGEMENT.MDIO_n_14 ;
  wire \HAS_MANAGEMENT.MDIO_n_19 ;
  wire \HAS_MANAGEMENT.MDIO_n_27 ;
  wire \HAS_MANAGEMENT.MDIO_n_28 ;
  wire \HAS_MANAGEMENT.MDIO_n_29 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_1 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_10 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_11 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_12 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_13 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_14 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_15 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_16 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_17 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_18 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_19 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_2 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_20 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_3 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_4 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_6 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_7 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_8 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_9 ;
  wire LOOPBACK;
  wire [16:11]LP_ADV_ABILITY;
  wire MGT_RX_RESET;
  wire MGT_RX_RESET_INT;
  wire MGT_TX_RESET_INT;
  wire MR_AN_COMPLETE;
  wire MR_LINK_STATUS;
  wire MR_PAGE_RX_SET;
  wire POWERDOWN_CH0;
  wire RECEIVE;
  wire RECEIVED_IDLE;
  (* async_reg = "true" *) wire RESET_INT;
  (* async_reg = "true" *) wire RESET_INT_PIPE;
  (* async_reg = "true" *) wire RESET_INT_PIPE_RXRECCLK;
  (* async_reg = "true" *) wire RESET_INT_RXRECCLK;
  wire RESET_OUT;
  wire RESET_REG_RXRECCLK;
  wire RESET_SYNC1;
  wire RESET_SYNC1_0;
  wire RESTART_AN_REG;
  wire RUNDISP_EN;
  wire RXBUFERR;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire RXCLKCORCNT_INT;
  wire [7:0]RXDATA_USR;
  wire RXDISPERR_INT;
  wire RXDISPERR_MOD;
  wire RXDISPERR_SRL1_out;
  wire RXDISPERR_USR;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXNOTINTABLE_SRL0_out;
  wire RXNOTINTABLE_USR;
  (* async_reg = "true" *) wire RXRECRESET;
  (* async_reg = "true" *) wire RXRECRESET_PIPE;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_1;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_2;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_3;
  wire RXSYNC_STATUS;
  wire [15:10]RX_CONFIG_REG;
  wire RX_CONFIG_REG_REG0;
  wire RX_CONFIG_VALID;
  wire RX_DATA_ERROR;
  wire RX_DV0;
  wire RX_ER0;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_12 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_15 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_18 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ;
  wire \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_RUDI_INVALID;
  wire S0;
  wire S2;
  wire SIGNAL_DETECT_MOD;
  wire SOFT_RESET;
  wire SOP_REG3;
  wire [0:0]SR;
  (* async_reg = "true" *) wire SRESET;
  (* async_reg = "true" *) wire SRESET_PIPE;
  wire [0:0]SS;
  wire STATUS_VECTOR_0_PRE;
  wire STATUS_VECTOR_0_PRE_reg_0;
  wire SYNC_SIGNAL_DETECT_n_0;
  wire SYNC_STATUS_REG;
  wire SYNC_STATUS_REG0;
  wire TOGGLE_RX;
  wire TXBUFERR_INT;
  wire \TXDATA[7]_i_2_n_0 ;
  wire [7:7]TXDATA_CH0;
  wire TX_EVEN;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_i_4_n_0 ;
  wire [0:0]\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ;
  wire [1:0]\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2]_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_4_n_0 ;
  wire [0:0]\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ;
  wire [0:0]\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_1 ;
  wire \USE_ROCKET_IO.TXCHARISK_reg_0 ;
  wire [6:0]\USE_ROCKET_IO.TXDATA_reg[6]_0 ;
  wire XMIT_CONFIG;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire an_interrupt_ch0;
  wire data_out;
  wire dcm_locked;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_er_ch0;
  wire [7:0]gmii_rxd_ch0;
  wire gmii_tx_en_ch0;
  wire gmii_tx_er_ch0;
  wire [7:0]gmii_txd_ch0;
  wire [8:0]link_timer_value_ch0;
  wire mdc_ch0;
  wire mdio_in_ch0;
  wire mdio_out_ch0;
  wire mdio_tri_ch0;
  wire p_0_out;
  wire p_1_out;
  wire p_3_out;
  wire p_6_out;
  wire [4:0]phyad_ch0;
  wire reset_done;
  wire reset_out;
  wire rxrecclk;
  wire signal_detect;
  wire [12:0]status_vector_ch0;
  wire txbuferr;
  wire userclk;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(RXDISPERR_MOD),
        .Q(RXDISPERR_SRL1_out));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(RXNOTINTABLE_INT),
        .Q(RXNOTINTABLE_SRL0_out));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXDISPERR_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_SRL1_out),
        .Q(status_vector_ch0[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXNOTINTABLE_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_SRL0_out),
        .Q(status_vector_ch0[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    DUPLEX_MODE_RSLVD_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LP_ADV_ABILITY[13]),
        .Q(DUPLEX_MODE_RSLVD_REG),
        .R(1'b0));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .S(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .S(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .R(p_1_out));
  quadsgmii_0_TEST_AUTO_NEG_176 \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION 
       (.AN_ENABLE_INT(AN_ENABLE_INT),
        .BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CLEAR_PAGE_RECEIVED(CLEAR_PAGE_RECEIVED),
        .CLEAR_STATUS_REG(CLEAR_STATUS_REG),
        .CONFIG_REG_MATCH_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_15 ),
        .D({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_23 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_24 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_25 }),
        .\MASK_RUDI_BUFERR_TIMER_reg[0]_0 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .\MASK_RUDI_BUFERR_TIMER_reg[12]_0 (POWERDOWN_CH0),
        .\MASK_RUDI_BUFERR_TIMER_reg[12]_1 (SYNC_SIGNAL_DETECT_n_0),
        .\MASK_RUDI_BUFERR_TIMER_reg[3]_0 (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ),
        .MASK_RUDI_CLKCOR_reg_0({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] }),
        .MR_AN_COMPLETE(MR_AN_COMPLETE),
        .MR_LINK_STATUS(MR_LINK_STATUS),
        .\MR_LP_ADV_ABILITY_INT_reg[16]_0 ({LP_ADV_ABILITY[16:15],LP_ADV_ABILITY[13],LP_ADV_ABILITY[11]}),
        .MR_PAGE_RX_SET(MR_PAGE_RX_SET),
        .Q({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_18 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 }),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RECEIVED_IDLE_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .RESTART_AN_REG(RESTART_AN_REG),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_CONFIG_REG_NULL_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_12 ),
        .RX_CONFIG_REG_NULL_reg_1(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ),
        .\RX_CONFIG_REG_REG_reg[11]_0 ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_14 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_15 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 }),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_RUDI_INVALID(RX_RUDI_INVALID),
        .RX_RUDI_INVALID_REG_reg_0(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .SR(RX_CONFIG_REG_REG0),
        .TOGGLE_RX(TOGGLE_RX),
        .\TX_CONFIG_REG_INT_reg[0]_0 (\HAS_MANAGEMENT.MDIO_n_29 ),
        .\TX_CONFIG_REG_INT_reg[13]_0 (\HAS_MANAGEMENT.MDIO_n_28 ),
        .XMIT_CONFIG_INT(XMIT_CONFIG_INT),
        .XMIT_DATA(XMIT_DATA),
        .XMIT_DATA_INT(XMIT_DATA_INT),
        .data_out(data_out),
        .link_timer_value_ch0(link_timer_value_ch0),
        .out(SRESET),
        .status_vector_ch0({status_vector_ch0[12],status_vector_ch0[10:7],status_vector_ch0[4]}),
        .userclk(userclk));
  quadsgmii_0_TEST_MANAGEMENT_177 \HAS_MANAGEMENT.MDIO 
       (.AN_ENABLE_INT(AN_ENABLE_INT),
        .\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 (\HAS_MANAGEMENT.MDIO_n_29 ),
        .\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 (\HAS_MANAGEMENT.MDIO_n_28 ),
        .CGBAD_reg(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .CLEAR_PAGE_RECEIVED(CLEAR_PAGE_RECEIVED),
        .CLEAR_STATUS_REG(CLEAR_STATUS_REG),
        .\CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 (\HAS_MANAGEMENT.MDIO_n_12 ),
        .\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 (\HAS_MANAGEMENT.MDIO_n_0 ),
        .\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 (\HAS_MANAGEMENT.MDIO_n_27 ),
        .\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 (POWERDOWN_CH0),
        .FALSE_NIT0(FALSE_NIT0),
        .FALSE_NIT_reg({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] }),
        .FALSE_NIT_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .FALSE_NIT_reg_1(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ),
        .\FSM_onehot_STATE_reg[2] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .I_REG_reg(\HAS_MANAGEMENT.MDIO_n_19 ),
        .LOOPBACK(LOOPBACK),
        .MR_AN_COMPLETE(MR_AN_COMPLETE),
        .MR_LINK_STATUS(MR_LINK_STATUS),
        .MR_PAGE_RX_SET(MR_PAGE_RX_SET),
        .Q(TX_EVEN),
        .RECEIVE(RECEIVE),
        .RESTART_AN_REG(RESTART_AN_REG),
        .RUNDISP_EN(RUNDISP_EN),
        .RXCLKCORCNT_INT(RXCLKCORCNT_INT),
        .RXDISPERR_INT(RXDISPERR_INT),
        .RXDISPERR_MOD(RXDISPERR_MOD),
        .RXEVEN0_out(RXEVEN0_out),
        .RXNOTINTABLE_INT(RXNOTINTABLE_INT),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_DATA_ERROR(RX_DATA_ERROR),
        .RX_DV0(RX_DV0),
        .RX_ER0(RX_ER0),
        .RX_ER_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_RUDI_INVALID(RX_RUDI_INVALID),
        .S0(S0),
        .S2(S2),
        .\SHIFT_REG_reg[15] ({LP_ADV_ABILITY[16:15],LP_ADV_ABILITY[13],LP_ADV_ABILITY[11]}),
        .SOFT_RESET(SOFT_RESET),
        .SOP_REG3(SOP_REG3),
        .S_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_12 ),
        .TOGGLE_RX(TOGGLE_RX),
        .\USE_ROCKET_IO.MGT_TX_RESET_INT_reg (\HAS_MANAGEMENT.MDIO_n_13 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg (\HAS_MANAGEMENT.MDIO_n_14 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_reg (SR),
        .\USE_ROCKET_IO.TXDATA_reg[7] (\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_0 ),
        .XMIT_CONFIG(XMIT_CONFIG),
        .XMIT_CONFIG_INT(XMIT_CONFIG_INT),
        .XMIT_CONFIG_INT_0(XMIT_CONFIG_INT_0),
        .XMIT_DATA(XMIT_DATA),
        .XMIT_DATA_INT(XMIT_DATA_INT),
        .an_interrupt_ch0(an_interrupt_ch0),
        .dcm_locked(dcm_locked),
        .mdc_ch0(mdc_ch0),
        .mdio_in_ch0(mdio_in_ch0),
        .mdio_out_ch0(mdio_out_ch0),
        .mdio_tri_ch0(mdio_tri_ch0),
        .out(SRESET),
        .p_3_out(p_3_out),
        .phyad_ch0(phyad_ch0),
        .reset_done(reset_done),
        .reset_out(reset_out),
        .status_vector_ch0(status_vector_ch0[12]),
        .userclk(userclk));
  quadsgmii_0_TEST_TX_178 \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER 
       (.\CODE_GRP_CNT_reg[0]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_6 ),
        .\CODE_GRP_reg[0]_0 (\HAS_MANAGEMENT.MDIO_n_27 ),
        .D({\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_1 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_2 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_3 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_4 }),
        .INSERT_IDLE_reg_0(\HAS_MANAGEMENT.MDIO_n_0 ),
        .LOOPBACK(LOOPBACK),
        .Q(TX_EVEN),
        .RXCHARISCOMMA_USR(RXCHARISCOMMA_USR),
        .RXCHARISK_USR(RXCHARISK_USR),
        .RXDATA_USR(RXDATA_USR),
        .\TX_CONFIG_reg[14]_0 ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_23 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_24 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_25 }),
        .\USE_QSGMII_DATA.TXCHARISK_reg_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_7 ),
        .\USE_QSGMII_DATA.TXCHARISK_reg_1 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_8 ),
        .\USE_QSGMII_DATA.TXDATA_reg[2]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_17 ),
        .\USE_QSGMII_DATA.TXDATA_reg[3]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_18 ),
        .\USE_QSGMII_DATA.TXDATA_reg[5]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_19 ),
        .\USE_QSGMII_DATA.TXDATA_reg[7]_0 ({\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_9 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_10 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_11 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_12 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_13 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_14 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_15 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_16 }),
        .\USE_QSGMII_DATA.TXDATA_reg[7]_1 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_20 ),
        .\USE_QSGMII_DATA.TXDATA_reg[7]_2 (\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_0 ),
        .XMIT_CONFIG(XMIT_CONFIG),
        .XMIT_CONFIG_INT(XMIT_CONFIG_INT_0),
        .XMIT_DATA(XMIT_DATA),
        .gmii_tx_en_ch0(gmii_tx_en_ch0),
        .gmii_tx_er_ch0(gmii_tx_er_ch0),
        .gmii_txd_ch0(gmii_txd_ch0),
        .userclk(userclk));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_6_out),
        .Q(RESET_INT_PIPE_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_3_out),
        .Q(RESET_INT_PIPE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE_RXRECCLK),
        .PRE(p_6_out),
        .Q(RESET_INT_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE),
        .PRE(p_3_out),
        .Q(RESET_INT));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT),
        .Q(SRESET_PIPE),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(SRESET_PIPE),
        .Q(SRESET),
        .S(RESET_INT));
  quadsgmii_0_TEST_reset_sync_block_179 \MGT_RESET.SYNC_ASYNC_RESET 
       (.RESET_OUT(RESET_OUT),
        .reset_out(reset_out),
        .userclk(userclk));
  quadsgmii_0_TEST_reset_sync_block_180 \MGT_RESET.SYNC_ASYNC_RESET_RECCLK 
       (.RESET_OUT(RESET_OUT),
        .reset_out(RESET_REG_RXRECCLK),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_reset_sync_block_181 \MGT_RESET.SYNC_SOFT_RESET_RECCLK 
       (.SOFT_RESET(SOFT_RESET),
        .dcm_locked(dcm_locked),
        .p_6_out(p_6_out),
        .reset_out(RESET_REG_RXRECCLK),
        .rxrecclk(rxrecclk));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT2 #(
    .INIT(4'hE)) 
    RESET_SYNC1_i_1
       (.I0(SR),
        .I1(MGT_RX_RESET),
        .O(SS));
  LUT2 #(
    .INIT(4'hE)) 
    RESET_SYNC1_i_1__0
       (.I0(SR),
        .I1(RESET_SYNC1),
        .O(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT2 #(
    .INIT(4'hE)) 
    RESET_SYNC1_i_1__1
       (.I0(SR),
        .I1(RESET_SYNC1_0),
        .O(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_1 ));
  quadsgmii_0_TEST_RX_182 \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK 
       (.BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CONFIG_REG_MATCH_reg({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_14 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_15 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 }),
        .FALSE_CARRIER_REG3_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .FALSE_CARRIER_reg_0(\HAS_MANAGEMENT.MDIO_n_19 ),
        .FALSE_NIT0(FALSE_NIT0),
        .I_REG_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .Q({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] }),
        .RECEIVE(RECEIVE),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RXCHARISK_REG1_reg_0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\RXD_reg[7]_0 (\HAS_MANAGEMENT.MDIO_n_0 ),
        .RXEVEN0_out(RXEVEN0_out),
        .RXNOTINTABLE_INT(RXNOTINTABLE_INT),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_CONFIG_REG_NULL_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_12 ),
        .\RX_CONFIG_REG_reg[10]_0 (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_15 ),
        .\RX_CONFIG_REG_reg[15]_0 ({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_18 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 }),
        .\RX_CONFIG_REG_reg[7]_0 ({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] }),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_CONFIG_VALID_INT_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ),
        .\RX_CONFIG_VALID_REG_reg[0]_0 (SR),
        .RX_DATA_ERROR(RX_DATA_ERROR),
        .RX_DV0(RX_DV0),
        .RX_ER0(RX_ER0),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_INVALID_reg_0(\HAS_MANAGEMENT.MDIO_n_12 ),
        .S0(S0),
        .S2(S2),
        .SOP_REG3(SOP_REG3),
        .SR(RX_CONFIG_REG_REG0),
        .SYNC_STATUS_REG0(SYNC_STATUS_REG0),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_12 ),
        .XMIT_DATA(XMIT_DATA),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0),
        .gmii_rx_er_ch0(gmii_rx_er_ch0),
        .gmii_rxd_ch0(gmii_rxd_ch0),
        .out(SRESET),
        .status_vector_ch0(status_vector_ch0[3:2]),
        .userclk(userclk));
  quadsgmii_0_TEST_SYNCHRONISE_183 \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION 
       (.ENCOMMAALIGN_reg_0(ENCOMMAALIGN_reg),
        .EVEN_reg_0(SR),
        .\FSM_onehot_STATE_reg[2]_0 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\FSM_onehot_STATE_reg[2]_1 (\HAS_MANAGEMENT.MDIO_n_14 ),
        .\GOOD_CGS_reg[1]_0 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .\GOOD_CGS_reg[1]_1 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .LOOPBACK(LOOPBACK),
        .\MGT_RESET.SRESET_reg (\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .RUNDISP_EN(RUNDISP_EN),
        .RXDISPERR_INT(RXDISPERR_INT),
        .RXEVEN0_out(RXEVEN0_out),
        .RXNOTINTABLE_INT(RXNOTINTABLE_INT),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .S2(S2),
        .SIGNAL_DETECT_MOD(SIGNAL_DETECT_MOD),
        .SYNC_STATUS_REG0(SYNC_STATUS_REG0),
        .out(SRESET),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    STATUS_VECTOR_0_PRE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\HAS_MANAGEMENT.MDIO_n_12 ),
        .Q(STATUS_VECTOR_0_PRE),
        .R(STATUS_VECTOR_0_PRE_reg_0));
  FDRE \STATUS_VECTOR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATUS_VECTOR_0_PRE),
        .Q(status_vector_ch0[0]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(DUPLEX_MODE_RSLVD_REG),
        .Q(status_vector_ch0[11]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_REG),
        .Q(status_vector_ch0[1]),
        .R(1'b0));
  quadsgmii_0_TEST_sync_block_184 SYNC_SIGNAL_DETECT
       (.\MASK_RUDI_BUFERR_TIMER_reg[12] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .\MASK_RUDI_BUFERR_TIMER_reg[12]_0 (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ),
        .SIGNAL_DETECT_MOD(SIGNAL_DETECT_MOD),
        .SIGNAL_DETECT_REG_reg(POWERDOWN_CH0),
        .data_out(data_out),
        .data_sync_reg6_0(SYNC_SIGNAL_DETECT_n_0),
        .signal_detect(signal_detect),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXSYNC_STATUS),
        .Q(SYNC_STATUS_REG),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hDF00)) 
    \TXDATA[7]_i_1 
       (.I0(D),
        .I1(\TXDATA[7]_i_2_n_0 ),
        .I2(\USE_ROCKET_IO.TXDATA_reg[6]_0 [5]),
        .I3(TXDATA_CH0),
        .O(\USE_ROCKET_IO.TXCHARISK_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \TXDATA[7]_i_2 
       (.I0(\USE_ROCKET_IO.TXDATA_reg[6]_0 [3]),
        .I1(\USE_ROCKET_IO.TXDATA_reg[6]_0 [0]),
        .I2(\USE_ROCKET_IO.TXDATA_reg[6]_0 [1]),
        .I3(\USE_ROCKET_IO.TXDATA_reg[6]_0 [6]),
        .I4(\USE_ROCKET_IO.TXDATA_reg[6]_0 [2]),
        .I5(\USE_ROCKET_IO.TXDATA_reg[6]_0 [4]),
        .O(\TXDATA[7]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_1 
       (.I0(RESET_INT),
        .I1(TXBUFERR_INT),
        .O(p_1_out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_2 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_4_n_0 ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .O(MGT_TX_RESET_INT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_3 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_4 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_4_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_TX_RESET_INT),
        .Q(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_0 ),
        .S(p_1_out));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RXBUFERR),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .R(RXCLKCORCNT_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_8 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_7 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2]_0 [0]),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .R(RXCLKCORCNT_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2]_0 [1]),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .R(RXCLKCORCNT_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_16 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_15 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_14 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_13 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_12 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_11 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_10 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_9 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDISPERR_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_USR),
        .Q(RXDISPERR_INT),
        .R(RXCLKCORCNT_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_USR),
        .Q(RXNOTINTABLE_INT),
        .R(RXCLKCORCNT_INT));
  LUT2 #(
    .INIT(4'hE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_1 
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .I1(RESET_INT),
        .O(p_0_out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2 
       (.I0(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ),
        .I1(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_4_n_0 ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .O(MGT_RX_RESET_INT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .O(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_4 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .O(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_4_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_RX_RESET_INT),
        .Q(SR),
        .S(p_0_out));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.TXBUFERR_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(txbuferr),
        .Q(TXBUFERR_INT),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_0 ));
  FDRE \USE_ROCKET_IO.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_6 ),
        .Q(D),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_0 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_4 ),
        .Q(\USE_ROCKET_IO.TXDATA_reg[6]_0 [0]),
        .R(1'b0));
  FDRE \USE_ROCKET_IO.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_3 ),
        .Q(\USE_ROCKET_IO.TXDATA_reg[6]_0 [1]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_17 ),
        .Q(\USE_ROCKET_IO.TXDATA_reg[6]_0 [2]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  FDSE \USE_ROCKET_IO.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_18 ),
        .Q(\USE_ROCKET_IO.TXDATA_reg[6]_0 [3]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_2 ),
        .Q(\USE_ROCKET_IO.TXDATA_reg[6]_0 [4]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_19 ),
        .Q(\USE_ROCKET_IO.TXDATA_reg[6]_0 [5]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_1 ),
        .Q(\USE_ROCKET_IO.TXDATA_reg[6]_0 [6]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_20 ),
        .Q(TXDATA_CH0),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(RXRECRESET));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b1),
        .O(RXRECRESET_PIPE));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_3));
endmodule

(* ORIG_REF_NAME = "GPCS_PMA_GEN" *) 
module quadsgmii_0_TEST_GPCS_PMA_GEN_83
   (POWERDOWN_CH1,
    status_vector_ch1,
    MGT_RX_RESET,
    mdio_out_ch1,
    mdio_tri_ch1,
    ENABLEALIGN,
    gmii_rxd_ch1,
    gmii_rx_er_ch1,
    TXCHARISK,
    TXDATA_CH1,
    an_interrupt_ch1,
    gmii_rx_dv_ch1,
    userclk,
    signal_detect,
    RESET_OUT,
    rxrecclk,
    mdc_ch1,
    mdio_in_ch1,
    gmii_txd_ch1,
    gmii_tx_er_ch1,
    gmii_tx_en_ch1,
    RXNOTINTABLE_USR,
    D,
    RXBUFSTATUS,
    txbuferr,
    RXDISPERR_USR,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    phyad_ch1,
    dcm_locked,
    RXDATA_USR,
    reset_done,
    link_timer_value_ch1,
    STATUS_VECTOR_0_PRE_reg_0);
  output POWERDOWN_CH1;
  output [12:0]status_vector_ch1;
  output MGT_RX_RESET;
  output mdio_out_ch1;
  output mdio_tri_ch1;
  output ENABLEALIGN;
  output [7:0]gmii_rxd_ch1;
  output gmii_rx_er_ch1;
  output TXCHARISK;
  output [7:0]TXDATA_CH1;
  output an_interrupt_ch1;
  output gmii_rx_dv_ch1;
  input userclk;
  input signal_detect;
  input RESET_OUT;
  input rxrecclk;
  input mdc_ch1;
  input mdio_in_ch1;
  input [7:0]gmii_txd_ch1;
  input gmii_tx_er_ch1;
  input gmii_tx_en_ch1;
  input RXNOTINTABLE_USR;
  input [1:0]D;
  input [0:0]RXBUFSTATUS;
  input txbuferr;
  input RXDISPERR_USR;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [4:0]phyad_ch1;
  input dcm_locked;
  input [7:0]RXDATA_USR;
  input reset_done;
  input [8:0]link_timer_value_ch1;
  input STATUS_VECTOR_0_PRE_reg_0;

  wire AN_ENABLE_INT;
  wire [1:1]BASEX_REMOTE_FAULT_RSLVD;
  wire CLEAR_PAGE_RECEIVED;
  wire CLEAR_STATUS_REG;
  wire [1:0]D;
  wire DUPLEX_MODE_RSLVD_REG;
  wire ENABLEALIGN;
  wire FALSE_NIT0;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_12 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_14 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_15 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_23 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_24 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_25 ;
  wire \HAS_MANAGEMENT.MDIO_n_0 ;
  wire \HAS_MANAGEMENT.MDIO_n_12 ;
  wire \HAS_MANAGEMENT.MDIO_n_13 ;
  wire \HAS_MANAGEMENT.MDIO_n_14 ;
  wire \HAS_MANAGEMENT.MDIO_n_19 ;
  wire \HAS_MANAGEMENT.MDIO_n_27 ;
  wire \HAS_MANAGEMENT.MDIO_n_28 ;
  wire \HAS_MANAGEMENT.MDIO_n_29 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_1 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_10 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_11 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_12 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_13 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_14 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_15 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_16 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_17 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_18 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_19 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_2 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_20 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_3 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_4 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_6 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_7 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_8 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_9 ;
  wire LOOPBACK;
  wire [16:11]LP_ADV_ABILITY;
  wire MGT_RX_RESET;
  wire MGT_RX_RESET_INT;
  wire MGT_TX_RESET_INT;
  wire MR_AN_COMPLETE;
  wire MR_LINK_STATUS;
  wire MR_PAGE_RX_SET;
  wire POWERDOWN_CH1;
  wire RECEIVE;
  wire RECEIVED_IDLE;
  (* async_reg = "true" *) wire RESET_INT;
  (* async_reg = "true" *) wire RESET_INT_PIPE;
  (* async_reg = "true" *) wire RESET_INT_PIPE_RXRECCLK;
  (* async_reg = "true" *) wire RESET_INT_RXRECCLK;
  wire RESET_OUT;
  wire RESET_REG_RXRECCLK;
  wire RESTART_AN_REG;
  wire RUNDISP_EN;
  wire [0:0]RXBUFSTATUS;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [7:0]RXDATA_USR;
  wire RXDISPERR_INT;
  wire RXDISPERR_MOD;
  wire RXDISPERR_SRL1_out;
  wire RXDISPERR_USR;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXNOTINTABLE_SRL0_out;
  wire RXNOTINTABLE_USR;
  (* async_reg = "true" *) wire RXRECRESET;
  (* async_reg = "true" *) wire RXRECRESET_PIPE;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_1;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_2;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_3;
  wire RXRUNDISP_INT;
  wire RXSYNC_STATUS;
  wire [15:10]RX_CONFIG_REG;
  wire RX_CONFIG_REG_REG0;
  wire RX_CONFIG_VALID;
  wire RX_DATA_ERROR;
  wire RX_DV0;
  wire RX_ER0;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ;
  wire \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_RUDI_INVALID;
  wire S0;
  wire S2;
  wire SIGNAL_DETECT_MOD;
  wire SOFT_RESET;
  wire SOP_REG3;
  (* async_reg = "true" *) wire SRESET;
  (* async_reg = "true" *) wire SRESET_PIPE;
  wire STATUS_VECTOR_0_PRE;
  wire STATUS_VECTOR_0_PRE_reg_0;
  wire SYNC_SIGNAL_DETECT_n_0;
  wire SYNC_STATUS_REG;
  wire SYNC_STATUS_REG0;
  wire TOGGLE_RX;
  wire TXBUFERR_INT;
  wire TXCHARISK;
  wire [7:0]TXDATA_CH1;
  wire TX_EVEN;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_i_2_n_0 ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2_n_0 ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ;
  wire XMIT_CONFIG;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire an_interrupt_ch1;
  wire data_out;
  wire dcm_locked;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_er_ch1;
  wire [7:0]gmii_rxd_ch1;
  wire gmii_tx_en_ch1;
  wire gmii_tx_er_ch1;
  wire [7:0]gmii_txd_ch1;
  wire [8:0]link_timer_value_ch1;
  wire mdc_ch1;
  wire mdio_in_ch1;
  wire mdio_out_ch1;
  wire mdio_tri_ch1;
  wire p_0_out;
  wire p_1_out;
  wire p_3_out;
  wire p_6_out;
  wire [4:0]phyad_ch1;
  wire reset_done;
  wire reset_out;
  wire rxrecclk;
  wire signal_detect;
  wire [12:0]status_vector_ch1;
  wire txbuferr;
  wire userclk;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(RXDISPERR_MOD),
        .Q(RXDISPERR_SRL1_out));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(RXNOTINTABLE_INT),
        .Q(RXNOTINTABLE_SRL0_out));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXDISPERR_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_SRL1_out),
        .Q(status_vector_ch1[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXNOTINTABLE_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_SRL0_out),
        .Q(status_vector_ch1[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    DUPLEX_MODE_RSLVD_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LP_ADV_ABILITY[13]),
        .Q(DUPLEX_MODE_RSLVD_REG),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[13]_i_1 
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .I1(RESET_INT),
        .O(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .S(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .R(p_0_out));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[13]_i_1 
       (.I0(RESET_INT),
        .I1(TXBUFERR_INT),
        .O(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .S(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .R(p_1_out));
  quadsgmii_0_TEST_AUTO_NEG_164 \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION 
       (.AN_ENABLE_INT(AN_ENABLE_INT),
        .BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CLEAR_PAGE_RECEIVED(CLEAR_PAGE_RECEIVED),
        .CLEAR_STATUS_REG(CLEAR_STATUS_REG),
        .CONFIG_REG_MATCH_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ),
        .D({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_23 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_24 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_25 }),
        .\MASK_RUDI_BUFERR_TIMER_reg[0]_0 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .\MASK_RUDI_BUFERR_TIMER_reg[12]_0 (POWERDOWN_CH1),
        .\MASK_RUDI_BUFERR_TIMER_reg[12]_1 (SYNC_SIGNAL_DETECT_n_0),
        .\MASK_RUDI_BUFERR_TIMER_reg[3]_0 (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ),
        .MASK_RUDI_CLKCOR_reg_0({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] }),
        .MR_AN_COMPLETE(MR_AN_COMPLETE),
        .MR_LINK_STATUS(MR_LINK_STATUS),
        .\MR_LP_ADV_ABILITY_INT_reg[16]_0 ({LP_ADV_ABILITY[16:15],LP_ADV_ABILITY[13],LP_ADV_ABILITY[11]}),
        .MR_PAGE_RX_SET(MR_PAGE_RX_SET),
        .Q({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 }),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RECEIVED_IDLE_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .RESTART_AN_REG(RESTART_AN_REG),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_CONFIG_REG_NULL_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_12 ),
        .RX_CONFIG_REG_NULL_reg_1(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .\RX_CONFIG_REG_REG_reg[11]_0 ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_14 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_15 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 }),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_RUDI_INVALID(RX_RUDI_INVALID),
        .RX_RUDI_INVALID_REG_reg_0(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .SR(RX_CONFIG_REG_REG0),
        .TOGGLE_RX(TOGGLE_RX),
        .\TX_CONFIG_REG_INT_reg[0]_0 (\HAS_MANAGEMENT.MDIO_n_29 ),
        .\TX_CONFIG_REG_INT_reg[13]_0 (\HAS_MANAGEMENT.MDIO_n_28 ),
        .XMIT_CONFIG_INT(XMIT_CONFIG_INT),
        .XMIT_DATA(XMIT_DATA),
        .XMIT_DATA_INT(XMIT_DATA_INT),
        .data_out(data_out),
        .link_timer_value_ch1(link_timer_value_ch1),
        .out(SRESET),
        .status_vector_ch1({status_vector_ch1[12],status_vector_ch1[10:7],status_vector_ch1[4]}),
        .userclk(userclk));
  quadsgmii_0_TEST_MANAGEMENT_165 \HAS_MANAGEMENT.MDIO 
       (.AN_ENABLE_INT(AN_ENABLE_INT),
        .\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 (\HAS_MANAGEMENT.MDIO_n_29 ),
        .\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 (\HAS_MANAGEMENT.MDIO_n_28 ),
        .CGBAD_reg(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .CLEAR_PAGE_RECEIVED(CLEAR_PAGE_RECEIVED),
        .CLEAR_STATUS_REG(CLEAR_STATUS_REG),
        .\CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 (\HAS_MANAGEMENT.MDIO_n_12 ),
        .\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 (\HAS_MANAGEMENT.MDIO_n_0 ),
        .\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 (\HAS_MANAGEMENT.MDIO_n_27 ),
        .\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 (POWERDOWN_CH1),
        .FALSE_NIT0(FALSE_NIT0),
        .FALSE_NIT_reg({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] }),
        .FALSE_NIT_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ),
        .FALSE_NIT_reg_1(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ),
        .\FSM_onehot_STATE_reg[2] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .I_REG_reg(\HAS_MANAGEMENT.MDIO_n_19 ),
        .LOOPBACK(LOOPBACK),
        .MR_AN_COMPLETE(MR_AN_COMPLETE),
        .MR_LINK_STATUS(MR_LINK_STATUS),
        .MR_PAGE_RX_SET(MR_PAGE_RX_SET),
        .Q(TX_EVEN),
        .RECEIVE(RECEIVE),
        .RESTART_AN_REG(RESTART_AN_REG),
        .RUNDISP_EN(RUNDISP_EN),
        .RXDISPERR_INT(RXDISPERR_INT),
        .RXDISPERR_MOD(RXDISPERR_MOD),
        .RXEVEN0_out(RXEVEN0_out),
        .RXNOTINTABLE_INT(RXNOTINTABLE_INT),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_DATA_ERROR(RX_DATA_ERROR),
        .RX_DV0(RX_DV0),
        .RX_ER0(RX_ER0),
        .RX_ER_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_RUDI_INVALID(RX_RUDI_INVALID),
        .S0(S0),
        .S2(S2),
        .\SHIFT_REG_reg[15] ({LP_ADV_ABILITY[16:15],LP_ADV_ABILITY[13],LP_ADV_ABILITY[11]}),
        .SOFT_RESET(SOFT_RESET),
        .SOP_REG3(SOP_REG3),
        .SR(RXRUNDISP_INT),
        .S_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .TOGGLE_RX(TOGGLE_RX),
        .\USE_ROCKET_IO.MGT_TX_RESET_INT_reg (\HAS_MANAGEMENT.MDIO_n_13 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg (\HAS_MANAGEMENT.MDIO_n_14 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] (MGT_RX_RESET),
        .\USE_ROCKET_IO.TXDATA_reg[7] (\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .XMIT_CONFIG(XMIT_CONFIG),
        .XMIT_CONFIG_INT(XMIT_CONFIG_INT),
        .XMIT_CONFIG_INT_0(XMIT_CONFIG_INT_0),
        .XMIT_DATA(XMIT_DATA),
        .XMIT_DATA_INT(XMIT_DATA_INT),
        .an_interrupt_ch1(an_interrupt_ch1),
        .dcm_locked(dcm_locked),
        .mdc_ch1(mdc_ch1),
        .mdio_in_ch1(mdio_in_ch1),
        .mdio_out_ch1(mdio_out_ch1),
        .mdio_tri_ch1(mdio_tri_ch1),
        .out(SRESET),
        .p_3_out(p_3_out),
        .phyad_ch1(phyad_ch1),
        .reset_done(reset_done),
        .reset_out(reset_out),
        .status_vector_ch1(status_vector_ch1[12]),
        .userclk(userclk));
  quadsgmii_0_TEST_TX_166 \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER 
       (.\CODE_GRP_CNT_reg[0]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_6 ),
        .\CODE_GRP_reg[0]_0 (\HAS_MANAGEMENT.MDIO_n_27 ),
        .D({\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_1 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_2 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_3 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_4 }),
        .INSERT_IDLE_reg_0(\HAS_MANAGEMENT.MDIO_n_0 ),
        .LOOPBACK(LOOPBACK),
        .Q(TX_EVEN),
        .RXCHARISCOMMA_USR(RXCHARISCOMMA_USR),
        .RXCHARISK_USR(RXCHARISK_USR),
        .RXDATA_USR(RXDATA_USR),
        .TRIGGER_T_reg_0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .\TX_CONFIG_reg[14]_0 ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_23 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_24 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_25 }),
        .\USE_QSGMII_DATA.TXCHARISK_reg_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_7 ),
        .\USE_QSGMII_DATA.TXCHARISK_reg_1 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_8 ),
        .\USE_QSGMII_DATA.TXDATA_reg[2]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_17 ),
        .\USE_QSGMII_DATA.TXDATA_reg[3]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_18 ),
        .\USE_QSGMII_DATA.TXDATA_reg[5]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_19 ),
        .\USE_QSGMII_DATA.TXDATA_reg[7]_0 ({\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_9 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_10 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_11 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_12 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_13 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_14 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_15 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_16 }),
        .\USE_QSGMII_DATA.TXDATA_reg[7]_1 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_20 ),
        .XMIT_CONFIG(XMIT_CONFIG),
        .XMIT_CONFIG_INT(XMIT_CONFIG_INT_0),
        .XMIT_DATA(XMIT_DATA),
        .gmii_tx_en_ch1(gmii_tx_en_ch1),
        .gmii_tx_er_ch1(gmii_tx_er_ch1),
        .gmii_txd_ch1(gmii_txd_ch1),
        .userclk(userclk));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_6_out),
        .Q(RESET_INT_PIPE_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_3_out),
        .Q(RESET_INT_PIPE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE_RXRECCLK),
        .PRE(p_6_out),
        .Q(RESET_INT_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE),
        .PRE(p_3_out),
        .Q(RESET_INT));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT),
        .Q(SRESET_PIPE),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(SRESET_PIPE),
        .Q(SRESET),
        .S(RESET_INT));
  quadsgmii_0_TEST_reset_sync_block_167 \MGT_RESET.SYNC_ASYNC_RESET 
       (.RESET_OUT(RESET_OUT),
        .reset_out(reset_out),
        .userclk(userclk));
  quadsgmii_0_TEST_reset_sync_block_168 \MGT_RESET.SYNC_ASYNC_RESET_RECCLK 
       (.RESET_OUT(RESET_OUT),
        .reset_out(RESET_REG_RXRECCLK),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_reset_sync_block_169 \MGT_RESET.SYNC_SOFT_RESET_RECCLK 
       (.SOFT_RESET(SOFT_RESET),
        .dcm_locked(dcm_locked),
        .p_6_out(p_6_out),
        .reset_out(RESET_REG_RXRECCLK),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_RX_170 \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK 
       (.BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CONFIG_REG_MATCH_reg({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_14 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_15 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 }),
        .FALSE_CARRIER_REG3_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ),
        .FALSE_CARRIER_reg_0(\HAS_MANAGEMENT.MDIO_n_19 ),
        .FALSE_NIT0(FALSE_NIT0),
        .I_REG_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .Q({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] }),
        .RECEIVE(RECEIVE),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RXCHARISK_REG1_reg_0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\RXD_reg[7]_0 (\HAS_MANAGEMENT.MDIO_n_0 ),
        .RXEVEN0_out(RXEVEN0_out),
        .RXNOTINTABLE_INT(RXNOTINTABLE_INT),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_CONFIG_REG_NULL_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_12 ),
        .\RX_CONFIG_REG_reg[10]_0 (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ),
        .\RX_CONFIG_REG_reg[15]_0 ({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 }),
        .\RX_CONFIG_REG_reg[7]_0 ({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] }),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_CONFIG_VALID_INT_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .\RX_CONFIG_VALID_REG_reg[0]_0 (MGT_RX_RESET),
        .RX_DATA_ERROR(RX_DATA_ERROR),
        .RX_DV0(RX_DV0),
        .RX_ER0(RX_ER0),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_INVALID_reg_0(\HAS_MANAGEMENT.MDIO_n_12 ),
        .S0(S0),
        .S2(S2),
        .SOP_REG3(SOP_REG3),
        .SR(RX_CONFIG_REG_REG0),
        .SYNC_STATUS_REG0(SYNC_STATUS_REG0),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .XMIT_DATA(XMIT_DATA),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1),
        .gmii_rx_er_ch1(gmii_rx_er_ch1),
        .gmii_rxd_ch1(gmii_rxd_ch1),
        .out(SRESET),
        .status_vector_ch1(status_vector_ch1[3:2]),
        .userclk(userclk));
  quadsgmii_0_TEST_SYNCHRONISE_171 \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION 
       (.ENABLEALIGN(ENABLEALIGN),
        .EVEN_reg_0(MGT_RX_RESET),
        .\FSM_onehot_STATE_reg[2]_0 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\FSM_onehot_STATE_reg[2]_1 (\HAS_MANAGEMENT.MDIO_n_14 ),
        .\GOOD_CGS_reg[1]_0 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .\GOOD_CGS_reg[1]_1 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .LOOPBACK(LOOPBACK),
        .\MGT_RESET.SRESET_reg (\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .RUNDISP_EN(RUNDISP_EN),
        .RXDISPERR_INT(RXDISPERR_INT),
        .RXEVEN0_out(RXEVEN0_out),
        .RXNOTINTABLE_INT(RXNOTINTABLE_INT),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .S2(S2),
        .SIGNAL_DETECT_MOD(SIGNAL_DETECT_MOD),
        .SYNC_STATUS_REG0(SYNC_STATUS_REG0),
        .out(SRESET),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    STATUS_VECTOR_0_PRE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\HAS_MANAGEMENT.MDIO_n_12 ),
        .Q(STATUS_VECTOR_0_PRE),
        .R(STATUS_VECTOR_0_PRE_reg_0));
  FDRE \STATUS_VECTOR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATUS_VECTOR_0_PRE),
        .Q(status_vector_ch1[0]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(DUPLEX_MODE_RSLVD_REG),
        .Q(status_vector_ch1[11]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_REG),
        .Q(status_vector_ch1[1]),
        .R(1'b0));
  quadsgmii_0_TEST_sync_block_172 SYNC_SIGNAL_DETECT
       (.\MASK_RUDI_BUFERR_TIMER_reg[12] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .\MASK_RUDI_BUFERR_TIMER_reg[12]_0 (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ),
        .SIGNAL_DETECT_MOD(SIGNAL_DETECT_MOD),
        .SIGNAL_DETECT_REG_reg(POWERDOWN_CH1),
        .data_out(data_out),
        .data_sync_reg6_0(SYNC_SIGNAL_DETECT_n_0),
        .signal_detect(signal_detect),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXSYNC_STATUS),
        .Q(SYNC_STATUS_REG),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_1 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_2_n_0 ),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .O(MGT_TX_RESET_INT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_2 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_3 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_TX_RESET_INT),
        .Q(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .S(p_1_out));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RXBUFSTATUS),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .R(RXRUNDISP_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_8 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_7 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .R(RXRUNDISP_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .R(RXRUNDISP_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_16 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_15 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_14 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_13 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_12 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_11 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_10 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_9 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDISPERR_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_USR),
        .Q(RXDISPERR_INT),
        .R(RXRUNDISP_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_USR),
        .Q(RXNOTINTABLE_INT),
        .R(RXRUNDISP_INT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_1 
       (.I0(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2_n_0 ),
        .I1(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .O(MGT_RX_RESET_INT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .O(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .O(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_RX_RESET_INT),
        .Q(MGT_RX_RESET),
        .S(p_0_out));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.TXBUFERR_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(txbuferr),
        .Q(TXBUFERR_INT),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ));
  FDRE \USE_ROCKET_IO.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_6 ),
        .Q(TXCHARISK),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_4 ),
        .Q(TXDATA_CH1[0]),
        .R(1'b0));
  FDRE \USE_ROCKET_IO.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_3 ),
        .Q(TXDATA_CH1[1]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_17 ),
        .Q(TXDATA_CH1[2]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  FDSE \USE_ROCKET_IO.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_18 ),
        .Q(TXDATA_CH1[3]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_2 ),
        .Q(TXDATA_CH1[4]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_19 ),
        .Q(TXDATA_CH1[5]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_1 ),
        .Q(TXDATA_CH1[6]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_20 ),
        .Q(TXDATA_CH1[7]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(RXRECRESET));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b1),
        .O(RXRECRESET_PIPE));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_3));
endmodule

(* ORIG_REF_NAME = "GPCS_PMA_GEN" *) 
module quadsgmii_0_TEST_GPCS_PMA_GEN_84
   (POWERDOWN_CH2,
    status_vector_ch2,
    MGT_RX_RESET,
    mdio_out_ch2,
    mdio_tri_ch2,
    ENABLEALIGN,
    gmii_rxd_ch2,
    gmii_rx_er_ch2,
    TXCHARISK,
    TXDATA_CH2,
    an_interrupt_ch2,
    gmii_rx_dv_ch2,
    userclk,
    signal_detect,
    RESET_OUT,
    rxrecclk,
    mdc_ch2,
    mdio_in_ch2,
    gmii_txd_ch2,
    gmii_tx_er_ch2,
    gmii_tx_en_ch2,
    RXNOTINTABLE_USR,
    D,
    RXBUFSTATUS,
    txbuferr,
    RXDISPERR_USR,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    phyad_ch2,
    dcm_locked,
    RXDATA_USR,
    reset_done,
    link_timer_value_ch2,
    STATUS_VECTOR_0_PRE_reg_0);
  output POWERDOWN_CH2;
  output [12:0]status_vector_ch2;
  output MGT_RX_RESET;
  output mdio_out_ch2;
  output mdio_tri_ch2;
  output ENABLEALIGN;
  output [7:0]gmii_rxd_ch2;
  output gmii_rx_er_ch2;
  output TXCHARISK;
  output [7:0]TXDATA_CH2;
  output an_interrupt_ch2;
  output gmii_rx_dv_ch2;
  input userclk;
  input signal_detect;
  input RESET_OUT;
  input rxrecclk;
  input mdc_ch2;
  input mdio_in_ch2;
  input [7:0]gmii_txd_ch2;
  input gmii_tx_er_ch2;
  input gmii_tx_en_ch2;
  input RXNOTINTABLE_USR;
  input [1:0]D;
  input [0:0]RXBUFSTATUS;
  input txbuferr;
  input RXDISPERR_USR;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [4:0]phyad_ch2;
  input dcm_locked;
  input [7:0]RXDATA_USR;
  input reset_done;
  input [8:0]link_timer_value_ch2;
  input STATUS_VECTOR_0_PRE_reg_0;

  wire AN_ENABLE_INT;
  wire [1:1]BASEX_REMOTE_FAULT_RSLVD;
  wire CLEAR_PAGE_RECEIVED;
  wire CLEAR_STATUS_REG;
  wire [1:0]D;
  wire DUPLEX_MODE_RSLVD_REG;
  wire ENABLEALIGN;
  wire FALSE_NIT0;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_12 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_14 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_15 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_23 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_24 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_25 ;
  wire \HAS_MANAGEMENT.MDIO_n_0 ;
  wire \HAS_MANAGEMENT.MDIO_n_12 ;
  wire \HAS_MANAGEMENT.MDIO_n_13 ;
  wire \HAS_MANAGEMENT.MDIO_n_14 ;
  wire \HAS_MANAGEMENT.MDIO_n_19 ;
  wire \HAS_MANAGEMENT.MDIO_n_27 ;
  wire \HAS_MANAGEMENT.MDIO_n_28 ;
  wire \HAS_MANAGEMENT.MDIO_n_29 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_1 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_10 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_11 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_12 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_13 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_14 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_15 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_16 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_17 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_18 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_19 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_2 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_20 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_3 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_4 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_6 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_7 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_8 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_9 ;
  wire LOOPBACK;
  wire [16:11]LP_ADV_ABILITY;
  wire MGT_RX_RESET;
  wire MGT_RX_RESET_INT;
  wire MGT_TX_RESET_INT;
  wire MR_AN_COMPLETE;
  wire MR_LINK_STATUS;
  wire MR_PAGE_RX_SET;
  wire POWERDOWN_CH2;
  wire RECEIVE;
  wire RECEIVED_IDLE;
  (* async_reg = "true" *) wire RESET_INT;
  (* async_reg = "true" *) wire RESET_INT_PIPE;
  (* async_reg = "true" *) wire RESET_INT_PIPE_RXRECCLK;
  (* async_reg = "true" *) wire RESET_INT_RXRECCLK;
  wire RESET_OUT;
  wire RESET_REG_RXRECCLK;
  wire RESTART_AN_REG;
  wire RUNDISP_EN;
  wire [0:0]RXBUFSTATUS;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [7:0]RXDATA_USR;
  wire RXDISPERR_INT;
  wire RXDISPERR_MOD;
  wire RXDISPERR_SRL1_out;
  wire RXDISPERR_USR;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXNOTINTABLE_SRL0_out;
  wire RXNOTINTABLE_USR;
  (* async_reg = "true" *) wire RXRECRESET;
  (* async_reg = "true" *) wire RXRECRESET_PIPE;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_1;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_2;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_3;
  wire RXRUNDISP_INT;
  wire RXSYNC_STATUS;
  wire [15:10]RX_CONFIG_REG;
  wire RX_CONFIG_REG_REG0;
  wire RX_CONFIG_VALID;
  wire RX_DATA_ERROR;
  wire RX_DV0;
  wire RX_ER0;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ;
  wire \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_RUDI_INVALID;
  wire S0;
  wire S2;
  wire SIGNAL_DETECT_MOD;
  wire SOFT_RESET;
  wire SOP_REG3;
  (* async_reg = "true" *) wire SRESET;
  (* async_reg = "true" *) wire SRESET_PIPE;
  wire STATUS_VECTOR_0_PRE;
  wire STATUS_VECTOR_0_PRE_reg_0;
  wire SYNC_SIGNAL_DETECT_n_0;
  wire SYNC_STATUS_REG;
  wire SYNC_STATUS_REG0;
  wire TOGGLE_RX;
  wire TXBUFERR_INT;
  wire TXCHARISK;
  wire [7:0]TXDATA_CH2;
  wire TX_EVEN;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_i_2_n_0 ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2_n_0 ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ;
  wire XMIT_CONFIG;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire an_interrupt_ch2;
  wire data_out;
  wire dcm_locked;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_er_ch2;
  wire [7:0]gmii_rxd_ch2;
  wire gmii_tx_en_ch2;
  wire gmii_tx_er_ch2;
  wire [7:0]gmii_txd_ch2;
  wire [8:0]link_timer_value_ch2;
  wire mdc_ch2;
  wire mdio_in_ch2;
  wire mdio_out_ch2;
  wire mdio_tri_ch2;
  wire p_0_out;
  wire p_1_out;
  wire p_3_out;
  wire p_6_out;
  wire [4:0]phyad_ch2;
  wire reset_done;
  wire reset_out;
  wire rxrecclk;
  wire signal_detect;
  wire [12:0]status_vector_ch2;
  wire txbuferr;
  wire userclk;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(RXDISPERR_MOD),
        .Q(RXDISPERR_SRL1_out));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(RXNOTINTABLE_INT),
        .Q(RXNOTINTABLE_SRL0_out));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXDISPERR_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_SRL1_out),
        .Q(status_vector_ch2[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXNOTINTABLE_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_SRL0_out),
        .Q(status_vector_ch2[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    DUPLEX_MODE_RSLVD_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LP_ADV_ABILITY[13]),
        .Q(DUPLEX_MODE_RSLVD_REG),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[13]_i_1__0 
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .I1(RESET_INT),
        .O(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .S(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .R(p_0_out));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[13]_i_1__0 
       (.I0(RESET_INT),
        .I1(TXBUFERR_INT),
        .O(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .S(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .R(p_1_out));
  quadsgmii_0_TEST_AUTO_NEG_152 \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION 
       (.AN_ENABLE_INT(AN_ENABLE_INT),
        .BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CLEAR_PAGE_RECEIVED(CLEAR_PAGE_RECEIVED),
        .CLEAR_STATUS_REG(CLEAR_STATUS_REG),
        .CONFIG_REG_MATCH_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ),
        .D({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_23 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_24 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_25 }),
        .\MASK_RUDI_BUFERR_TIMER_reg[0]_0 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .\MASK_RUDI_BUFERR_TIMER_reg[12]_0 (POWERDOWN_CH2),
        .\MASK_RUDI_BUFERR_TIMER_reg[12]_1 (SYNC_SIGNAL_DETECT_n_0),
        .\MASK_RUDI_BUFERR_TIMER_reg[3]_0 (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ),
        .MASK_RUDI_CLKCOR_reg_0({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] }),
        .MR_AN_COMPLETE(MR_AN_COMPLETE),
        .MR_LINK_STATUS(MR_LINK_STATUS),
        .\MR_LP_ADV_ABILITY_INT_reg[16]_0 ({LP_ADV_ABILITY[16:15],LP_ADV_ABILITY[13],LP_ADV_ABILITY[11]}),
        .MR_PAGE_RX_SET(MR_PAGE_RX_SET),
        .Q({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 }),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RECEIVED_IDLE_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .RESTART_AN_REG(RESTART_AN_REG),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_CONFIG_REG_NULL_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_12 ),
        .RX_CONFIG_REG_NULL_reg_1(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .\RX_CONFIG_REG_REG_reg[11]_0 ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_14 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_15 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 }),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_RUDI_INVALID(RX_RUDI_INVALID),
        .RX_RUDI_INVALID_REG_reg_0(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .SR(RX_CONFIG_REG_REG0),
        .TOGGLE_RX(TOGGLE_RX),
        .\TX_CONFIG_REG_INT_reg[0]_0 (\HAS_MANAGEMENT.MDIO_n_29 ),
        .\TX_CONFIG_REG_INT_reg[13]_0 (\HAS_MANAGEMENT.MDIO_n_28 ),
        .XMIT_CONFIG_INT(XMIT_CONFIG_INT),
        .XMIT_DATA(XMIT_DATA),
        .XMIT_DATA_INT(XMIT_DATA_INT),
        .data_out(data_out),
        .link_timer_value_ch2(link_timer_value_ch2),
        .out(SRESET),
        .status_vector_ch2({status_vector_ch2[12],status_vector_ch2[10:7],status_vector_ch2[4]}),
        .userclk(userclk));
  quadsgmii_0_TEST_MANAGEMENT_153 \HAS_MANAGEMENT.MDIO 
       (.AN_ENABLE_INT(AN_ENABLE_INT),
        .\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 (\HAS_MANAGEMENT.MDIO_n_29 ),
        .\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 (\HAS_MANAGEMENT.MDIO_n_28 ),
        .CGBAD_reg(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .CLEAR_PAGE_RECEIVED(CLEAR_PAGE_RECEIVED),
        .CLEAR_STATUS_REG(CLEAR_STATUS_REG),
        .\CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 (\HAS_MANAGEMENT.MDIO_n_12 ),
        .\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 (\HAS_MANAGEMENT.MDIO_n_0 ),
        .\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 (\HAS_MANAGEMENT.MDIO_n_27 ),
        .\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 (POWERDOWN_CH2),
        .FALSE_NIT0(FALSE_NIT0),
        .FALSE_NIT_reg({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] }),
        .FALSE_NIT_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ),
        .FALSE_NIT_reg_1(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ),
        .\FSM_onehot_STATE_reg[2] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .I_REG_reg(\HAS_MANAGEMENT.MDIO_n_19 ),
        .LOOPBACK(LOOPBACK),
        .MR_AN_COMPLETE(MR_AN_COMPLETE),
        .MR_LINK_STATUS(MR_LINK_STATUS),
        .MR_PAGE_RX_SET(MR_PAGE_RX_SET),
        .Q(TX_EVEN),
        .RECEIVE(RECEIVE),
        .RESTART_AN_REG(RESTART_AN_REG),
        .RUNDISP_EN(RUNDISP_EN),
        .RXDISPERR_INT(RXDISPERR_INT),
        .RXDISPERR_MOD(RXDISPERR_MOD),
        .RXEVEN0_out(RXEVEN0_out),
        .RXNOTINTABLE_INT(RXNOTINTABLE_INT),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_DATA_ERROR(RX_DATA_ERROR),
        .RX_DV0(RX_DV0),
        .RX_ER0(RX_ER0),
        .RX_ER_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_RUDI_INVALID(RX_RUDI_INVALID),
        .S0(S0),
        .S2(S2),
        .\SHIFT_REG_reg[15] ({LP_ADV_ABILITY[16:15],LP_ADV_ABILITY[13],LP_ADV_ABILITY[11]}),
        .SOFT_RESET(SOFT_RESET),
        .SOP_REG3(SOP_REG3),
        .SR(RXRUNDISP_INT),
        .S_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .TOGGLE_RX(TOGGLE_RX),
        .\USE_ROCKET_IO.MGT_TX_RESET_INT_reg (\HAS_MANAGEMENT.MDIO_n_13 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg (\HAS_MANAGEMENT.MDIO_n_14 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] (MGT_RX_RESET),
        .\USE_ROCKET_IO.TXDATA_reg[7] (\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .XMIT_CONFIG(XMIT_CONFIG),
        .XMIT_CONFIG_INT(XMIT_CONFIG_INT),
        .XMIT_CONFIG_INT_0(XMIT_CONFIG_INT_0),
        .XMIT_DATA(XMIT_DATA),
        .XMIT_DATA_INT(XMIT_DATA_INT),
        .an_interrupt_ch2(an_interrupt_ch2),
        .dcm_locked(dcm_locked),
        .mdc_ch2(mdc_ch2),
        .mdio_in_ch2(mdio_in_ch2),
        .mdio_out_ch2(mdio_out_ch2),
        .mdio_tri_ch2(mdio_tri_ch2),
        .out(SRESET),
        .p_3_out(p_3_out),
        .phyad_ch2(phyad_ch2),
        .reset_done(reset_done),
        .reset_out(reset_out),
        .status_vector_ch2(status_vector_ch2[12]),
        .userclk(userclk));
  quadsgmii_0_TEST_TX_154 \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER 
       (.\CODE_GRP_CNT_reg[0]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_6 ),
        .\CODE_GRP_reg[0]_0 (\HAS_MANAGEMENT.MDIO_n_27 ),
        .D({\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_1 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_2 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_3 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_4 }),
        .INSERT_IDLE_reg_0(\HAS_MANAGEMENT.MDIO_n_0 ),
        .LOOPBACK(LOOPBACK),
        .Q(TX_EVEN),
        .RXCHARISCOMMA_USR(RXCHARISCOMMA_USR),
        .RXCHARISK_USR(RXCHARISK_USR),
        .RXDATA_USR(RXDATA_USR),
        .TRIGGER_T_reg_0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .\TX_CONFIG_reg[14]_0 ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_23 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_24 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_25 }),
        .\USE_QSGMII_DATA.TXCHARISK_reg_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_7 ),
        .\USE_QSGMII_DATA.TXCHARISK_reg_1 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_8 ),
        .\USE_QSGMII_DATA.TXDATA_reg[2]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_17 ),
        .\USE_QSGMII_DATA.TXDATA_reg[3]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_18 ),
        .\USE_QSGMII_DATA.TXDATA_reg[5]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_19 ),
        .\USE_QSGMII_DATA.TXDATA_reg[7]_0 ({\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_9 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_10 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_11 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_12 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_13 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_14 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_15 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_16 }),
        .\USE_QSGMII_DATA.TXDATA_reg[7]_1 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_20 ),
        .XMIT_CONFIG(XMIT_CONFIG),
        .XMIT_CONFIG_INT(XMIT_CONFIG_INT_0),
        .XMIT_DATA(XMIT_DATA),
        .gmii_tx_en_ch2(gmii_tx_en_ch2),
        .gmii_tx_er_ch2(gmii_tx_er_ch2),
        .gmii_txd_ch2(gmii_txd_ch2),
        .userclk(userclk));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_6_out),
        .Q(RESET_INT_PIPE_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_3_out),
        .Q(RESET_INT_PIPE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE_RXRECCLK),
        .PRE(p_6_out),
        .Q(RESET_INT_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE),
        .PRE(p_3_out),
        .Q(RESET_INT));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT),
        .Q(SRESET_PIPE),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(SRESET_PIPE),
        .Q(SRESET),
        .S(RESET_INT));
  quadsgmii_0_TEST_reset_sync_block_155 \MGT_RESET.SYNC_ASYNC_RESET 
       (.RESET_OUT(RESET_OUT),
        .reset_out(reset_out),
        .userclk(userclk));
  quadsgmii_0_TEST_reset_sync_block_156 \MGT_RESET.SYNC_ASYNC_RESET_RECCLK 
       (.RESET_OUT(RESET_OUT),
        .reset_out(RESET_REG_RXRECCLK),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_reset_sync_block_157 \MGT_RESET.SYNC_SOFT_RESET_RECCLK 
       (.SOFT_RESET(SOFT_RESET),
        .dcm_locked(dcm_locked),
        .p_6_out(p_6_out),
        .reset_out(RESET_REG_RXRECCLK),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_RX_158 \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK 
       (.BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CONFIG_REG_MATCH_reg({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_14 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_15 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 }),
        .FALSE_CARRIER_REG3_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ),
        .FALSE_CARRIER_reg_0(\HAS_MANAGEMENT.MDIO_n_19 ),
        .FALSE_NIT0(FALSE_NIT0),
        .I_REG_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .Q({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] }),
        .RECEIVE(RECEIVE),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RXCHARISK_REG1_reg_0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\RXD_reg[7]_0 (\HAS_MANAGEMENT.MDIO_n_0 ),
        .RXEVEN0_out(RXEVEN0_out),
        .RXNOTINTABLE_INT(RXNOTINTABLE_INT),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_CONFIG_REG_NULL_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_12 ),
        .\RX_CONFIG_REG_reg[10]_0 (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ),
        .\RX_CONFIG_REG_reg[15]_0 ({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 }),
        .\RX_CONFIG_REG_reg[7]_0 ({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] }),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_CONFIG_VALID_INT_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .\RX_CONFIG_VALID_REG_reg[0]_0 (MGT_RX_RESET),
        .RX_DATA_ERROR(RX_DATA_ERROR),
        .RX_DV0(RX_DV0),
        .RX_ER0(RX_ER0),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_INVALID_reg_0(\HAS_MANAGEMENT.MDIO_n_12 ),
        .S0(S0),
        .S2(S2),
        .SOP_REG3(SOP_REG3),
        .SR(RX_CONFIG_REG_REG0),
        .SYNC_STATUS_REG0(SYNC_STATUS_REG0),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .XMIT_DATA(XMIT_DATA),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2),
        .gmii_rx_er_ch2(gmii_rx_er_ch2),
        .gmii_rxd_ch2(gmii_rxd_ch2),
        .out(SRESET),
        .status_vector_ch2(status_vector_ch2[3:2]),
        .userclk(userclk));
  quadsgmii_0_TEST_SYNCHRONISE_159 \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION 
       (.ENABLEALIGN(ENABLEALIGN),
        .EVEN_reg_0(MGT_RX_RESET),
        .\FSM_onehot_STATE_reg[2]_0 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\FSM_onehot_STATE_reg[2]_1 (\HAS_MANAGEMENT.MDIO_n_14 ),
        .\GOOD_CGS_reg[1]_0 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .\GOOD_CGS_reg[1]_1 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .LOOPBACK(LOOPBACK),
        .\MGT_RESET.SRESET_reg (\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .RUNDISP_EN(RUNDISP_EN),
        .RXDISPERR_INT(RXDISPERR_INT),
        .RXEVEN0_out(RXEVEN0_out),
        .RXNOTINTABLE_INT(RXNOTINTABLE_INT),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .S2(S2),
        .SIGNAL_DETECT_MOD(SIGNAL_DETECT_MOD),
        .SYNC_STATUS_REG0(SYNC_STATUS_REG0),
        .out(SRESET),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    STATUS_VECTOR_0_PRE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\HAS_MANAGEMENT.MDIO_n_12 ),
        .Q(STATUS_VECTOR_0_PRE),
        .R(STATUS_VECTOR_0_PRE_reg_0));
  FDRE \STATUS_VECTOR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATUS_VECTOR_0_PRE),
        .Q(status_vector_ch2[0]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(DUPLEX_MODE_RSLVD_REG),
        .Q(status_vector_ch2[11]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_REG),
        .Q(status_vector_ch2[1]),
        .R(1'b0));
  quadsgmii_0_TEST_sync_block_160 SYNC_SIGNAL_DETECT
       (.\MASK_RUDI_BUFERR_TIMER_reg[12] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .\MASK_RUDI_BUFERR_TIMER_reg[12]_0 (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ),
        .SIGNAL_DETECT_MOD(SIGNAL_DETECT_MOD),
        .SIGNAL_DETECT_REG_reg(POWERDOWN_CH2),
        .data_out(data_out),
        .data_sync_reg6_0(SYNC_SIGNAL_DETECT_n_0),
        .signal_detect(signal_detect),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXSYNC_STATUS),
        .Q(SYNC_STATUS_REG),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_1 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_2_n_0 ),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .O(MGT_TX_RESET_INT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_2 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_3 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_TX_RESET_INT),
        .Q(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .S(p_1_out));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RXBUFSTATUS),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .R(RXRUNDISP_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_8 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_7 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .R(RXRUNDISP_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .R(RXRUNDISP_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_16 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_15 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_14 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_13 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_12 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_11 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_10 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_9 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDISPERR_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_USR),
        .Q(RXDISPERR_INT),
        .R(RXRUNDISP_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_USR),
        .Q(RXNOTINTABLE_INT),
        .R(RXRUNDISP_INT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_1 
       (.I0(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2_n_0 ),
        .I1(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .O(MGT_RX_RESET_INT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .O(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .O(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_RX_RESET_INT),
        .Q(MGT_RX_RESET),
        .S(p_0_out));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.TXBUFERR_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(txbuferr),
        .Q(TXBUFERR_INT),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ));
  FDRE \USE_ROCKET_IO.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_6 ),
        .Q(TXCHARISK),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_4 ),
        .Q(TXDATA_CH2[0]),
        .R(1'b0));
  FDRE \USE_ROCKET_IO.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_3 ),
        .Q(TXDATA_CH2[1]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_17 ),
        .Q(TXDATA_CH2[2]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  FDSE \USE_ROCKET_IO.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_18 ),
        .Q(TXDATA_CH2[3]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_2 ),
        .Q(TXDATA_CH2[4]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_19 ),
        .Q(TXDATA_CH2[5]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_1 ),
        .Q(TXDATA_CH2[6]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_20 ),
        .Q(TXDATA_CH2[7]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(RXRECRESET));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b1),
        .O(RXRECRESET_PIPE));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_3));
endmodule

(* ORIG_REF_NAME = "GPCS_PMA_GEN" *) 
module quadsgmii_0_TEST_GPCS_PMA_GEN_85
   (POWERDOWN_CH3,
    data_sync_reg6,
    status_vector_ch3,
    MGT_RX_RESET,
    mdio_out_ch3,
    mdio_tri_ch3,
    ENABLEALIGN,
    gmii_rxd_ch3,
    gmii_rx_er_ch3,
    TXCHARISK,
    TXDATA_CH3,
    an_interrupt_ch3,
    gmii_rx_dv_ch3,
    userclk,
    reset_done,
    signal_detect,
    RESET_OUT,
    rxrecclk,
    mdc_ch3,
    mdio_in_ch3,
    gmii_txd_ch3,
    gmii_tx_er_ch3,
    gmii_tx_en_ch3,
    RXNOTINTABLE_USR,
    D,
    RXBUFSTATUS,
    txbuferr,
    RXDISPERR_USR,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    phyad_ch3,
    dcm_locked,
    RXDATA_USR,
    link_timer_value_ch3);
  output POWERDOWN_CH3;
  output data_sync_reg6;
  output [12:0]status_vector_ch3;
  output MGT_RX_RESET;
  output mdio_out_ch3;
  output mdio_tri_ch3;
  output ENABLEALIGN;
  output [7:0]gmii_rxd_ch3;
  output gmii_rx_er_ch3;
  output TXCHARISK;
  output [7:0]TXDATA_CH3;
  output an_interrupt_ch3;
  output gmii_rx_dv_ch3;
  input userclk;
  input reset_done;
  input signal_detect;
  input RESET_OUT;
  input rxrecclk;
  input mdc_ch3;
  input mdio_in_ch3;
  input [7:0]gmii_txd_ch3;
  input gmii_tx_er_ch3;
  input gmii_tx_en_ch3;
  input RXNOTINTABLE_USR;
  input [1:0]D;
  input [0:0]RXBUFSTATUS;
  input txbuferr;
  input RXDISPERR_USR;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [4:0]phyad_ch3;
  input dcm_locked;
  input [7:0]RXDATA_USR;
  input [8:0]link_timer_value_ch3;

  wire AN_ENABLE_INT;
  wire [1:1]BASEX_REMOTE_FAULT_RSLVD;
  wire CLEAR_PAGE_RECEIVED;
  wire CLEAR_STATUS_REG;
  wire [1:0]D;
  wire DUPLEX_MODE_RSLVD_REG;
  wire ENABLEALIGN;
  wire FALSE_NIT0;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_12 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_14 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_15 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_23 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_24 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_25 ;
  wire \HAS_MANAGEMENT.MDIO_n_0 ;
  wire \HAS_MANAGEMENT.MDIO_n_12 ;
  wire \HAS_MANAGEMENT.MDIO_n_13 ;
  wire \HAS_MANAGEMENT.MDIO_n_14 ;
  wire \HAS_MANAGEMENT.MDIO_n_19 ;
  wire \HAS_MANAGEMENT.MDIO_n_27 ;
  wire \HAS_MANAGEMENT.MDIO_n_28 ;
  wire \HAS_MANAGEMENT.MDIO_n_29 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_1 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_10 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_11 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_12 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_13 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_14 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_15 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_16 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_17 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_18 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_19 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_2 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_20 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_3 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_4 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_6 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_7 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_8 ;
  wire \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_9 ;
  wire LOOPBACK;
  wire [16:11]LP_ADV_ABILITY;
  wire MGT_RX_RESET;
  wire MGT_RX_RESET_INT;
  wire MGT_TX_RESET_INT;
  wire MR_AN_COMPLETE;
  wire MR_LINK_STATUS;
  wire MR_PAGE_RX_SET;
  wire POWERDOWN_CH3;
  wire RECEIVE;
  wire RECEIVED_IDLE;
  (* async_reg = "true" *) wire RESET_INT;
  (* async_reg = "true" *) wire RESET_INT_PIPE;
  (* async_reg = "true" *) wire RESET_INT_PIPE_RXRECCLK;
  (* async_reg = "true" *) wire RESET_INT_RXRECCLK;
  wire RESET_OUT;
  wire RESET_REG_RXRECCLK;
  wire RESTART_AN_REG;
  wire RUNDISP_EN;
  wire [0:0]RXBUFSTATUS;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [7:0]RXDATA_USR;
  wire RXDISPERR_INT;
  wire RXDISPERR_MOD;
  wire RXDISPERR_SRL1_out;
  wire RXDISPERR_USR;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXNOTINTABLE_SRL0_out;
  wire RXNOTINTABLE_USR;
  (* async_reg = "true" *) wire RXRECRESET;
  (* async_reg = "true" *) wire RXRECRESET_PIPE;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_1;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_2;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_3;
  wire RXRUNDISP_INT;
  wire RXSYNC_STATUS;
  wire [15:10]RX_CONFIG_REG;
  wire RX_CONFIG_REG_REG0;
  wire RX_CONFIG_VALID;
  wire RX_DATA_ERROR;
  wire RX_DV0;
  wire RX_ER0;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ;
  wire \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_RUDI_INVALID;
  wire S0;
  wire S2;
  wire SIGNAL_DETECT_MOD;
  wire SOFT_RESET;
  wire SOP_REG3;
  (* async_reg = "true" *) wire SRESET;
  (* async_reg = "true" *) wire SRESET_PIPE;
  wire STATUS_VECTOR_0_PRE;
  wire SYNC_SIGNAL_DETECT_n_0;
  wire SYNC_STATUS_REG;
  wire SYNC_STATUS_REG0;
  wire TOGGLE_RX;
  wire TXBUFERR_INT;
  wire TXCHARISK;
  wire [7:0]TXDATA_CH3;
  wire TX_EVEN;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_i_2_n_0 ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2_n_0 ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ;
  wire XMIT_CONFIG;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire an_interrupt_ch3;
  wire data_out;
  wire data_sync_reg6;
  wire dcm_locked;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_er_ch3;
  wire [7:0]gmii_rxd_ch3;
  wire gmii_tx_en_ch3;
  wire gmii_tx_er_ch3;
  wire [7:0]gmii_txd_ch3;
  wire [8:0]link_timer_value_ch3;
  wire mdc_ch3;
  wire mdio_in_ch3;
  wire mdio_out_ch3;
  wire mdio_tri_ch3;
  wire p_0_out;
  wire p_1_out;
  wire p_3_out;
  wire p_6_out;
  wire [4:0]phyad_ch3;
  wire reset_done;
  wire reset_out;
  wire rxrecclk;
  wire signal_detect;
  wire [12:0]status_vector_ch3;
  wire txbuferr;
  wire userclk;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(RXDISPERR_MOD),
        .Q(RXDISPERR_SRL1_out));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(RXNOTINTABLE_INT),
        .Q(RXNOTINTABLE_SRL0_out));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXDISPERR_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_SRL1_out),
        .Q(status_vector_ch3[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXNOTINTABLE_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_SRL0_out),
        .Q(status_vector_ch3[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    DUPLEX_MODE_RSLVD_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LP_ADV_ABILITY[13]),
        .Q(DUPLEX_MODE_RSLVD_REG),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[13]_i_1__1 
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .I1(RESET_INT),
        .O(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .S(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .R(p_0_out));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[13]_i_1__1 
       (.I0(RESET_INT),
        .I1(TXBUFERR_INT),
        .O(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .S(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .R(p_1_out));
  quadsgmii_0_TEST_AUTO_NEG \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION 
       (.AN_ENABLE_INT(AN_ENABLE_INT),
        .BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CLEAR_PAGE_RECEIVED(CLEAR_PAGE_RECEIVED),
        .CLEAR_STATUS_REG(CLEAR_STATUS_REG),
        .CONFIG_REG_MATCH_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ),
        .D({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_23 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_24 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_25 }),
        .\MASK_RUDI_BUFERR_TIMER_reg[0]_0 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .\MASK_RUDI_BUFERR_TIMER_reg[12]_0 (POWERDOWN_CH3),
        .\MASK_RUDI_BUFERR_TIMER_reg[12]_1 (SYNC_SIGNAL_DETECT_n_0),
        .\MASK_RUDI_BUFERR_TIMER_reg[3]_0 (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ),
        .MASK_RUDI_CLKCOR_reg_0({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] }),
        .MR_AN_COMPLETE(MR_AN_COMPLETE),
        .MR_LINK_STATUS(MR_LINK_STATUS),
        .\MR_LP_ADV_ABILITY_INT_reg[16]_0 ({LP_ADV_ABILITY[16:15],LP_ADV_ABILITY[13],LP_ADV_ABILITY[11]}),
        .MR_PAGE_RX_SET(MR_PAGE_RX_SET),
        .Q({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 }),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RECEIVED_IDLE_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .RESTART_AN_REG(RESTART_AN_REG),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_CONFIG_REG_NULL_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_12 ),
        .RX_CONFIG_REG_NULL_reg_1(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .\RX_CONFIG_REG_REG_reg[11]_0 ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_14 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_15 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 }),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_RUDI_INVALID(RX_RUDI_INVALID),
        .RX_RUDI_INVALID_REG_reg_0(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .SR(RX_CONFIG_REG_REG0),
        .TOGGLE_RX(TOGGLE_RX),
        .\TX_CONFIG_REG_INT_reg[0]_0 (\HAS_MANAGEMENT.MDIO_n_29 ),
        .\TX_CONFIG_REG_INT_reg[13]_0 (\HAS_MANAGEMENT.MDIO_n_28 ),
        .XMIT_CONFIG_INT(XMIT_CONFIG_INT),
        .XMIT_DATA(XMIT_DATA),
        .XMIT_DATA_INT(XMIT_DATA_INT),
        .data_out(data_out),
        .link_timer_value_ch3(link_timer_value_ch3),
        .out(SRESET),
        .status_vector_ch3({status_vector_ch3[12],status_vector_ch3[10:7],status_vector_ch3[4]}),
        .userclk(userclk));
  quadsgmii_0_TEST_MANAGEMENT \HAS_MANAGEMENT.MDIO 
       (.AN_ENABLE_INT(AN_ENABLE_INT),
        .\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 (\HAS_MANAGEMENT.MDIO_n_29 ),
        .\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 (\HAS_MANAGEMENT.MDIO_n_28 ),
        .CGBAD_reg(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .CLEAR_PAGE_RECEIVED(CLEAR_PAGE_RECEIVED),
        .CLEAR_STATUS_REG(CLEAR_STATUS_REG),
        .\CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 (\HAS_MANAGEMENT.MDIO_n_12 ),
        .\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 (\HAS_MANAGEMENT.MDIO_n_0 ),
        .\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 (\HAS_MANAGEMENT.MDIO_n_27 ),
        .\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 (POWERDOWN_CH3),
        .FALSE_NIT0(FALSE_NIT0),
        .FALSE_NIT_reg({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] }),
        .FALSE_NIT_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ),
        .FALSE_NIT_reg_1(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ),
        .\FSM_onehot_STATE_reg[2] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .I_REG_reg(\HAS_MANAGEMENT.MDIO_n_19 ),
        .LOOPBACK(LOOPBACK),
        .MR_AN_COMPLETE(MR_AN_COMPLETE),
        .MR_LINK_STATUS(MR_LINK_STATUS),
        .MR_PAGE_RX_SET(MR_PAGE_RX_SET),
        .Q(TX_EVEN),
        .RECEIVE(RECEIVE),
        .RESTART_AN_REG(RESTART_AN_REG),
        .RUNDISP_EN(RUNDISP_EN),
        .RXDISPERR_INT(RXDISPERR_INT),
        .RXDISPERR_MOD(RXDISPERR_MOD),
        .RXEVEN0_out(RXEVEN0_out),
        .RXNOTINTABLE_INT(RXNOTINTABLE_INT),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_DATA_ERROR(RX_DATA_ERROR),
        .RX_DV0(RX_DV0),
        .RX_ER0(RX_ER0),
        .RX_ER_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_RUDI_INVALID(RX_RUDI_INVALID),
        .S0(S0),
        .S2(S2),
        .\SHIFT_REG_reg[15] ({LP_ADV_ABILITY[16:15],LP_ADV_ABILITY[13],LP_ADV_ABILITY[11]}),
        .SOFT_RESET(SOFT_RESET),
        .SOP_REG3(SOP_REG3),
        .SR(RXRUNDISP_INT),
        .S_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .TOGGLE_RX(TOGGLE_RX),
        .\USE_ROCKET_IO.MGT_TX_RESET_INT_reg (\HAS_MANAGEMENT.MDIO_n_13 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg (\HAS_MANAGEMENT.MDIO_n_14 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] (MGT_RX_RESET),
        .\USE_ROCKET_IO.TXDATA_reg[7] (\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .XMIT_CONFIG(XMIT_CONFIG),
        .XMIT_CONFIG_INT(XMIT_CONFIG_INT),
        .XMIT_CONFIG_INT_0(XMIT_CONFIG_INT_0),
        .XMIT_DATA(XMIT_DATA),
        .XMIT_DATA_INT(XMIT_DATA_INT),
        .an_interrupt_ch3(an_interrupt_ch3),
        .dcm_locked(dcm_locked),
        .mdc_ch3(mdc_ch3),
        .mdio_in_ch3(mdio_in_ch3),
        .mdio_out_ch3(mdio_out_ch3),
        .mdio_tri_ch3(mdio_tri_ch3),
        .out(SRESET),
        .p_3_out(p_3_out),
        .phyad_ch3(phyad_ch3),
        .reset_done(reset_done),
        .reset_out(reset_out),
        .status_vector_ch3(status_vector_ch3[12]),
        .userclk(userclk));
  quadsgmii_0_TEST_TX \IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER 
       (.\CODE_GRP_CNT_reg[0]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_6 ),
        .\CODE_GRP_reg[0]_0 (\HAS_MANAGEMENT.MDIO_n_27 ),
        .D({\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_1 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_2 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_3 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_4 }),
        .INSERT_IDLE_reg_0(\HAS_MANAGEMENT.MDIO_n_0 ),
        .LOOPBACK(LOOPBACK),
        .Q(TX_EVEN),
        .RXCHARISCOMMA_USR(RXCHARISCOMMA_USR),
        .RXCHARISK_USR(RXCHARISK_USR),
        .RXDATA_USR(RXDATA_USR),
        .TRIGGER_T_reg_0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .\TX_CONFIG_reg[14]_0 ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_23 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_24 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_25 }),
        .\USE_QSGMII_DATA.TXCHARISK_reg_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_7 ),
        .\USE_QSGMII_DATA.TXCHARISK_reg_1 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_8 ),
        .\USE_QSGMII_DATA.TXDATA_reg[2]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_17 ),
        .\USE_QSGMII_DATA.TXDATA_reg[3]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_18 ),
        .\USE_QSGMII_DATA.TXDATA_reg[5]_0 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_19 ),
        .\USE_QSGMII_DATA.TXDATA_reg[7]_0 ({\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_9 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_10 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_11 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_12 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_13 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_14 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_15 ,\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_16 }),
        .\USE_QSGMII_DATA.TXDATA_reg[7]_1 (\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_20 ),
        .XMIT_CONFIG(XMIT_CONFIG),
        .XMIT_CONFIG_INT(XMIT_CONFIG_INT_0),
        .XMIT_DATA(XMIT_DATA),
        .gmii_tx_en_ch3(gmii_tx_en_ch3),
        .gmii_tx_er_ch3(gmii_tx_er_ch3),
        .gmii_txd_ch3(gmii_txd_ch3),
        .userclk(userclk));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_6_out),
        .Q(RESET_INT_PIPE_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_3_out),
        .Q(RESET_INT_PIPE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE_RXRECCLK),
        .PRE(p_6_out),
        .Q(RESET_INT_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE),
        .PRE(p_3_out),
        .Q(RESET_INT));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT),
        .Q(SRESET_PIPE),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(SRESET_PIPE),
        .Q(SRESET),
        .S(RESET_INT));
  quadsgmii_0_TEST_reset_sync_block \MGT_RESET.SYNC_ASYNC_RESET 
       (.RESET_OUT(RESET_OUT),
        .reset_out(reset_out),
        .userclk(userclk));
  quadsgmii_0_TEST_reset_sync_block_148 \MGT_RESET.SYNC_ASYNC_RESET_RECCLK 
       (.RESET_OUT(RESET_OUT),
        .reset_out(RESET_REG_RXRECCLK),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_reset_sync_block_149 \MGT_RESET.SYNC_SOFT_RESET_RECCLK 
       (.SOFT_RESET(SOFT_RESET),
        .dcm_locked(dcm_locked),
        .p_6_out(p_6_out),
        .reset_out(RESET_REG_RXRECCLK),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_RX \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK 
       (.BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CONFIG_REG_MATCH_reg({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_14 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_15 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 }),
        .FALSE_CARRIER_REG3_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ),
        .FALSE_CARRIER_reg_0(\HAS_MANAGEMENT.MDIO_n_19 ),
        .FALSE_NIT0(FALSE_NIT0),
        .I_REG_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .Q({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] }),
        .RECEIVE(RECEIVE),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RXCHARISK_REG1_reg_0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\RXD_reg[7]_0 (\HAS_MANAGEMENT.MDIO_n_0 ),
        .RXEVEN0_out(RXEVEN0_out),
        .RXNOTINTABLE_INT(RXNOTINTABLE_INT),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_CONFIG_REG_NULL_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_12 ),
        .\RX_CONFIG_REG_reg[10]_0 (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ),
        .\RX_CONFIG_REG_reg[15]_0 ({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 }),
        .\RX_CONFIG_REG_reg[7]_0 ({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] }),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_CONFIG_VALID_INT_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .\RX_CONFIG_VALID_REG_reg[0]_0 (MGT_RX_RESET),
        .RX_DATA_ERROR(RX_DATA_ERROR),
        .RX_DV0(RX_DV0),
        .RX_ER0(RX_ER0),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_INVALID_reg_0(\HAS_MANAGEMENT.MDIO_n_12 ),
        .S0(S0),
        .S2(S2),
        .SOP_REG3(SOP_REG3),
        .SR(RX_CONFIG_REG_REG0),
        .SYNC_STATUS_REG0(SYNC_STATUS_REG0),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .XMIT_DATA(XMIT_DATA),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3),
        .gmii_rx_er_ch3(gmii_rx_er_ch3),
        .gmii_rxd_ch3(gmii_rxd_ch3),
        .out(SRESET),
        .status_vector_ch3(status_vector_ch3[3:2]),
        .userclk(userclk));
  quadsgmii_0_TEST_SYNCHRONISE \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION 
       (.ENABLEALIGN(ENABLEALIGN),
        .EVEN_reg_0(MGT_RX_RESET),
        .\FSM_onehot_STATE_reg[2]_0 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\FSM_onehot_STATE_reg[2]_1 (\HAS_MANAGEMENT.MDIO_n_14 ),
        .\GOOD_CGS_reg[1]_0 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .\GOOD_CGS_reg[1]_1 (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .LOOPBACK(LOOPBACK),
        .\MGT_RESET.SRESET_reg (\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .RUNDISP_EN(RUNDISP_EN),
        .RXDISPERR_INT(RXDISPERR_INT),
        .RXEVEN0_out(RXEVEN0_out),
        .RXNOTINTABLE_INT(RXNOTINTABLE_INT),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .S2(S2),
        .SIGNAL_DETECT_MOD(SIGNAL_DETECT_MOD),
        .SYNC_STATUS_REG0(SYNC_STATUS_REG0),
        .out(SRESET),
        .userclk(userclk));
  LUT1 #(
    .INIT(2'h1)) 
    STATUS_VECTOR_0_PRE_i_1
       (.I0(reset_done),
        .O(data_sync_reg6));
  FDRE #(
    .INIT(1'b0)) 
    STATUS_VECTOR_0_PRE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\HAS_MANAGEMENT.MDIO_n_12 ),
        .Q(STATUS_VECTOR_0_PRE),
        .R(data_sync_reg6));
  FDRE \STATUS_VECTOR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATUS_VECTOR_0_PRE),
        .Q(status_vector_ch3[0]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(DUPLEX_MODE_RSLVD_REG),
        .Q(status_vector_ch3[11]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_REG),
        .Q(status_vector_ch3[1]),
        .R(1'b0));
  quadsgmii_0_TEST_sync_block SYNC_SIGNAL_DETECT
       (.\MASK_RUDI_BUFERR_TIMER_reg[12] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .\MASK_RUDI_BUFERR_TIMER_reg[12]_0 (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ),
        .SIGNAL_DETECT_MOD(SIGNAL_DETECT_MOD),
        .SIGNAL_DETECT_REG_reg(POWERDOWN_CH3),
        .data_out(data_out),
        .data_sync_reg6_0(SYNC_SIGNAL_DETECT_n_0),
        .signal_detect(signal_detect),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXSYNC_STATUS),
        .Q(SYNC_STATUS_REG),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_1 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_2_n_0 ),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .O(MGT_TX_RESET_INT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_2 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_3 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_TX_RESET_INT),
        .Q(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .S(p_1_out));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RXBUFSTATUS),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg_n_0_[1] ),
        .R(RXRUNDISP_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_8 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_7 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .R(RXRUNDISP_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .R(RXRUNDISP_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_16 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_15 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_14 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_13 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_12 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_11 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_10 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_9 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDISPERR_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_USR),
        .Q(RXDISPERR_INT),
        .R(RXRUNDISP_INT));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_USR),
        .Q(RXNOTINTABLE_INT),
        .R(RXRUNDISP_INT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_1 
       (.I0(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2_n_0 ),
        .I1(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .O(MGT_RX_RESET_INT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .O(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .O(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_RX_RESET_INT),
        .Q(MGT_RX_RESET),
        .S(p_0_out));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.TXBUFERR_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(txbuferr),
        .Q(TXBUFERR_INT),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ));
  FDRE \USE_ROCKET_IO.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_6 ),
        .Q(TXCHARISK),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_4 ),
        .Q(TXDATA_CH3[0]),
        .R(1'b0));
  FDRE \USE_ROCKET_IO.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_3 ),
        .Q(TXDATA_CH3[1]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_17 ),
        .Q(TXDATA_CH3[2]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  FDSE \USE_ROCKET_IO.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_18 ),
        .Q(TXDATA_CH3[3]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_2 ),
        .Q(TXDATA_CH3[4]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_19 ),
        .Q(TXDATA_CH3[5]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_1 ),
        .Q(TXDATA_CH3[6]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IS_2_5G_DISABLED_PRE_SHRINK.TRANSMITTER_n_20 ),
        .Q(TXDATA_CH3[7]),
        .S(\HAS_MANAGEMENT.MDIO_n_13 ));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(RXRECRESET));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b1),
        .O(RXRECRESET_PIPE));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_3));
endmodule

(* ORIG_REF_NAME = "MANAGEMENT" *) 
module quadsgmii_0_TEST_MANAGEMENT
   (\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ,
    AN_ENABLE_INT,
    LOOPBACK,
    SOFT_RESET,
    RUNDISP_EN,
    mdio_out_ch3,
    mdio_tri_ch3,
    CLEAR_PAGE_RECEIVED,
    CLEAR_STATUS_REG,
    RESTART_AN_REG,
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ,
    an_interrupt_ch3,
    \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ,
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ,
    S0,
    S2,
    FALSE_NIT0,
    RXDISPERR_MOD,
    I_REG_reg,
    RX_DV0,
    RX_RUDI_INVALID,
    RX_ER0,
    XMIT_DATA,
    XMIT_CONFIG,
    SR,
    p_3_out,
    \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ,
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ,
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ,
    out,
    userclk,
    MR_AN_COMPLETE,
    XMIT_DATA_INT,
    RXSYNC_STATUS,
    \SHIFT_REG_reg[15] ,
    \USE_ROCKET_IO.TXDATA_reg[7] ,
    Q,
    status_vector_ch3,
    \FSM_onehot_STATE_reg[2] ,
    RXDISPERR_INT,
    RXNOTINTABLE_INT,
    CGBAD_reg,
    RXEVEN0_out,
    S_reg,
    FALSE_NIT_reg,
    FALSE_NIT_reg_0,
    FALSE_NIT_reg_1,
    RX_IDLE,
    SOP_REG3,
    RX_INVALID,
    RX_ER_reg,
    RX_DATA_ERROR,
    RECEIVE,
    XMIT_CONFIG_INT,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ,
    phyad_ch3,
    MR_PAGE_RX_SET,
    TOGGLE_RX,
    dcm_locked,
    reset_out,
    XMIT_CONFIG_INT_0,
    MR_LINK_STATUS,
    reset_done,
    mdc_ch3,
    mdio_in_ch3);
  output \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ;
  output AN_ENABLE_INT;
  output LOOPBACK;
  output SOFT_RESET;
  output RUNDISP_EN;
  output mdio_out_ch3;
  output mdio_tri_ch3;
  output CLEAR_PAGE_RECEIVED;
  output CLEAR_STATUS_REG;
  output RESTART_AN_REG;
  output \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ;
  output an_interrupt_ch3;
  output \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ;
  output \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  output S0;
  output S2;
  output FALSE_NIT0;
  output RXDISPERR_MOD;
  output I_REG_reg;
  output RX_DV0;
  output RX_RUDI_INVALID;
  output RX_ER0;
  output XMIT_DATA;
  output XMIT_CONFIG;
  output [0:0]SR;
  output p_3_out;
  output \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ;
  output \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ;
  output \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ;
  input out;
  input userclk;
  input MR_AN_COMPLETE;
  input XMIT_DATA_INT;
  input RXSYNC_STATUS;
  input [3:0]\SHIFT_REG_reg[15] ;
  input \USE_ROCKET_IO.TXDATA_reg[7] ;
  input [0:0]Q;
  input [0:0]status_vector_ch3;
  input \FSM_onehot_STATE_reg[2] ;
  input RXDISPERR_INT;
  input RXNOTINTABLE_INT;
  input CGBAD_reg;
  input RXEVEN0_out;
  input S_reg;
  input [4:0]FALSE_NIT_reg;
  input FALSE_NIT_reg_0;
  input FALSE_NIT_reg_1;
  input RX_IDLE;
  input SOP_REG3;
  input RX_INVALID;
  input RX_ER_reg;
  input RX_DATA_ERROR;
  input RECEIVE;
  input XMIT_CONFIG_INT;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  input [4:0]phyad_ch3;
  input MR_PAGE_RX_SET;
  input TOGGLE_RX;
  input dcm_locked;
  input reset_out;
  input XMIT_CONFIG_INT_0;
  input MR_LINK_STATUS;
  input reset_done;
  input mdc_ch3;
  input mdio_in_ch3;

  wire AN_COMPLETE_REG1;
  wire AN_ENABLE_INT;
  wire \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ;
  wire \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ;
  wire CGBAD_reg;
  wire CLEAR_PAGE_RECEIVED;
  wire CLEAR_PAGE_REC_COMB;
  wire CLEAR_STATUS_REG;
  wire CLEAR_STATUS_REG_COMB;
  wire \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ;
  wire \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ;
  wire \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ;
  wire \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ;
  wire \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ;
  wire [14:0]DATA_OUT;
  wire FALSE_NIT0;
  wire FALSE_NIT_i_2__2_n_0;
  wire [4:0]FALSE_NIT_reg;
  wire FALSE_NIT_reg_0;
  wire FALSE_NIT_reg_1;
  wire \FSM_onehot_STATE_reg[2] ;
  wire I_REG_reg;
  wire LOOPBACK;
  wire LOOPBACK_REG;
  wire MDC_REG3;
  wire MDC_RISING_OUT;
  wire MDC_RISING_REG1;
  wire MDC_RISING_REG10;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_10 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_11 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_17 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_18 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_9 ;
  wire MDIO_IN_REG2;
  wire MDIO_IN_REG3;
  wire MDIO_IN__0;
  wire MR_AN_COMPLETE;
  wire MR_LINK_STATUS;
  wire MR_PAGE_RX_SET;
  wire [0:0]Q;
  wire \QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg_n_0 ;
  wire RECEIVE;
  wire RESTART_AN_REG;
  wire RUNDISP_EN;
  wire RUNDISP_EN_REG;
  wire RXDISPERR_INT;
  wire RXDISPERR_MOD;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXSYNC_STATUS;
  wire RX_DATA_ERROR;
  wire RX_DV0;
  wire RX_ER0;
  wire RX_ER_i_3__2_n_0;
  wire RX_ER_reg;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_RUDI_INVALID;
  wire S0;
  wire S2;
  wire [3:0]\SHIFT_REG_reg[15] ;
  wire SOFT_RESET;
  wire SOP_REG3;
  wire [0:0]SR;
  wire S_reg;
  wire TOGGLE_RX;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  wire \USE_ROCKET_IO.TXDATA_reg[7] ;
  wire XMIT_CONFIG;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire an_interrupt_ch3;
  wire data_out;
  wire dcm_locked;
  wire mdc_ch3;
  wire mdio_in_ch3;
  wire mdio_out_ch3;
  wire mdio_tri_ch3;
  wire out;
  wire p_2_out;
  wire p_3_out;
  wire [0:0]p_6_in;
  wire [5:5]p_9_in;
  wire [4:0]phyad_ch3;
  wire reset_done;
  wire reset_out;
  wire [0:0]status_vector_ch3;
  wire userclk;

  FDSE #(
    .INIT(1'b0)) 
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ),
        .Q(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ),
        .Q(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ),
        .S(out));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT4 #(
    .INIT(16'hFFF8)) 
    CGBAD_i_1__2
       (.I0(RXDISPERR_INT),
        .I1(RUNDISP_EN),
        .I2(RXNOTINTABLE_INT),
        .I3(CGBAD_reg),
        .O(S2));
  FDRE CLEAR_PAGE_RECEIVED_reg
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(CLEAR_PAGE_REC_COMB),
        .Q(CLEAR_PAGE_RECEIVED),
        .R(out));
  FDRE CLEAR_STATUS_REG_reg
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(CLEAR_STATUS_REG_COMB),
        .Q(CLEAR_STATUS_REG),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \CODE_GRP[6]_i_1__2 
       (.I0(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .I1(XMIT_CONFIG_INT_0),
        .O(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ));
  FDSE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[12]),
        .Q(AN_ENABLE_INT),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_10 ),
        .Q(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .R(1'b0));
  FDSE #(
    .INIT(1'b1)) 
    \CONFIG_REG_WITH_AN.ISOLATE_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[10]),
        .Q(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.LOOPBACK_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[14]),
        .Q(LOOPBACK),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_9 ),
        .Q(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.RESET_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_11 ),
        .Q(SOFT_RESET),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.RESTART_AN_REG_reg 
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(p_2_out),
        .Q(RESTART_AN_REG),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[5]),
        .Q(p_9_in),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR_i_1__2 
       (.I0(RUNDISP_EN),
        .I1(RXDISPERR_INT),
        .O(RXDISPERR_MOD));
  LUT6 #(
    .INIT(64'h8080808088808080)) 
    FALSE_CARRIER_i_3__2
       (.I0(RX_IDLE),
        .I1(RXSYNC_STATUS),
        .I2(XMIT_DATA_INT),
        .I3(p_9_in),
        .I4(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I5(AN_ENABLE_INT),
        .O(I_REG_reg));
  LUT2 #(
    .INIT(4'h2)) 
    FALSE_NIT_i_1__2
       (.I0(RXNOTINTABLE_INT),
        .I1(FALSE_NIT_i_2__2_n_0),
        .O(FALSE_NIT0));
  LUT6 #(
    .INIT(64'hC33E3EEBFFFEFEEB)) 
    FALSE_NIT_i_2__2
       (.I0(FALSE_NIT_reg_0),
        .I1(FALSE_NIT_reg[4]),
        .I2(RXDISPERR_MOD),
        .I3(FALSE_NIT_reg[0]),
        .I4(FALSE_NIT_reg[1]),
        .I5(FALSE_NIT_reg_1),
        .O(FALSE_NIT_i_2__2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFEAFFFFFFC0)) 
    \FSM_onehot_STATE[12]_i_3__2 
       (.I0(\FSM_onehot_STATE_reg[2] ),
        .I1(RXDISPERR_INT),
        .I2(RUNDISP_EN),
        .I3(RXNOTINTABLE_INT),
        .I4(CGBAD_reg),
        .I5(RXEVEN0_out),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \GEN_INTERRUPT_LOGIC.AN_COMPLETE_REG1_reg 
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(MR_AN_COMPLETE),
        .Q(AN_COMPLETE_REG1),
        .R(out));
  FDSE #(
    .INIT(1'b0)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_17 ),
        .Q(p_6_in),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_18 ),
        .Q(an_interrupt_ch3),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(data_out),
        .Q(MDC_REG3),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG10),
        .Q(MDC_RISING_REG1),
        .R(out));
  quadsgmii_0_TEST_MDIO_INTERFACE \MDIO_IF_ENABLE.MDIO_INTERFACE_1 
       (.AN_COMPLETE_REG1(AN_COMPLETE_REG1),
        .CLEAR_PAGE_REC_COMB(CLEAR_PAGE_REC_COMB),
        .CLEAR_STATUS_REG_COMB(CLEAR_STATUS_REG_COMB),
        .\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg (\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg (\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .\CONFIG_REG_WITH_AN.RESET_REG_reg (SOFT_RESET),
        .LOOPBACK_REG(LOOPBACK_REG),
        .MDC_RISING_OUT(MDC_RISING_OUT),
        .MDC_RISING_REG1(MDC_RISING_REG1),
        .MDC_RISING_REG3_reg_0(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_9 ),
        .MDC_RISING_REG3_reg_1(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_10 ),
        .MDC_RISING_REG3_reg_2(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_11 ),
        .MDIO_IN__0(MDIO_IN__0),
        .MR_AN_COMPLETE(MR_AN_COMPLETE),
        .MR_LINK_STATUS(MR_LINK_STATUS),
        .MR_PAGE_RX_SET(MR_PAGE_RX_SET),
        .Q({DATA_OUT[14],DATA_OUT[12],DATA_OUT[10],DATA_OUT[5],DATA_OUT[1:0]}),
        .RESTART_AN_REG(RESTART_AN_REG),
        .RUNDISP_EN_REG(RUNDISP_EN_REG),
        .\SHIFT_REG_reg[0]_0 (\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_17 ),
        .\SHIFT_REG_reg[0]_1 (RUNDISP_EN),
        .\SHIFT_REG_reg[10]_0 (\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .\SHIFT_REG_reg[12]_0 (AN_ENABLE_INT),
        .\SHIFT_REG_reg[14]_0 (LOOPBACK),
        .\SHIFT_REG_reg[15]_0 (\SHIFT_REG_reg[15] ),
        .\SHIFT_REG_reg[1]_0 (\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_18 ),
        .\SHIFT_REG_reg[1]_1 (\QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg_n_0 ),
        .TOGGLE_RX(TOGGLE_RX),
        .an_interrupt_ch3(an_interrupt_ch3),
        .mdio_out_ch3(mdio_out_ch3),
        .mdio_tri_ch3(mdio_tri_ch3),
        .out(out),
        .p_2_out(p_2_out),
        .p_6_in(p_6_in),
        .p_9_in(p_9_in),
        .phyad_ch3(phyad_ch3),
        .reset_done(reset_done),
        .status_vector_ch3(status_vector_ch3),
        .userclk(userclk));
  FDSE #(
    .INIT(1'b0)) 
    MDIO_IN_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDIO_IN_REG2),
        .Q(MDIO_IN_REG3),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    MDIO_IN_REG4_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDIO_IN_REG3),
        .Q(MDIO_IN__0),
        .S(out));
  LUT3 #(
    .INIT(8'hFB)) 
    \MGT_RESET.RESET_INT_PIPE_i_1__2 
       (.I0(SOFT_RESET),
        .I1(dcm_locked),
        .I2(reset_out),
        .O(p_3_out));
  FDSE #(
    .INIT(1'b1)) 
    \QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg 
       (.C(userclk),
        .CE(RUNDISP_EN_REG),
        .D(DATA_OUT[1]),
        .Q(\QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg_n_0 ),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \QSGMII_SPEC.RUNDISP_EN_REG_reg 
       (.C(userclk),
        .CE(RUNDISP_EN_REG),
        .D(DATA_OUT[0]),
        .Q(RUNDISP_EN),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    RX_DV_i_2__2
       (.I0(\CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ),
        .I1(SOP_REG3),
        .I2(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .I3(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .O(RX_DV0));
  LUT6 #(
    .INIT(64'h00000000000000F7)) 
    RX_ER_i_1__2
       (.I0(RX_ER_reg),
        .I1(RXSYNC_STATUS),
        .I2(RX_DATA_ERROR),
        .I3(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .I4(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .I5(RX_ER_i_3__2_n_0),
        .O(RX_ER0));
  LUT6 #(
    .INIT(64'h00BF00BF00BFFFFF)) 
    RX_ER_i_3__2
       (.I0(AN_ENABLE_INT),
        .I1(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I2(p_9_in),
        .I3(XMIT_DATA_INT),
        .I4(RECEIVE),
        .I5(RXSYNC_STATUS),
        .O(RX_ER_i_3__2_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAABBBBABBB)) 
    RX_RUDI_INVALID_REG_i_2__2
       (.I0(RX_INVALID),
        .I1(XMIT_DATA_INT),
        .I2(p_9_in),
        .I3(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I4(AN_ENABLE_INT),
        .I5(RXSYNC_STATUS),
        .O(RX_RUDI_INVALID));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT5 #(
    .INIT(32'hFF400000)) 
    STATUS_VECTOR_0_PRE_i_1__2
       (.I0(AN_ENABLE_INT),
        .I1(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I2(p_9_in),
        .I3(XMIT_DATA_INT),
        .I4(RXSYNC_STATUS),
        .O(\CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ));
  quadsgmii_0_TEST_sync_block_150 SYNC_MDC
       (.MDC_REG3(MDC_REG3),
        .MDC_RISING_REG10(MDC_RISING_REG10),
        .data_out(data_out),
        .mdc_ch3(mdc_ch3),
        .userclk(userclk));
  quadsgmii_0_TEST_sync_block_151 SYNC_MDIO_IN
       (.data_out(MDIO_IN_REG2),
        .mdio_in_ch3(mdio_in_ch3),
        .userclk(userclk));
  LUT6 #(
    .INIT(64'h0000000000800000)) 
    S_i_1__5
       (.I0(S_reg),
        .I1(FALSE_NIT_reg[1]),
        .I2(FALSE_NIT_reg[0]),
        .I3(FALSE_NIT_reg[2]),
        .I4(FALSE_NIT_reg[3]),
        .I5(S2),
        .O(S0));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__2 
       (.I0(LOOPBACK),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .O(SR));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \USE_ROCKET_IO.TXDATA[7]_i_1__2 
       (.I0(\USE_ROCKET_IO.TXDATA_reg[7] ),
        .I1(LOOPBACK),
        .I2(Q),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT4 #(
    .INIT(16'hAA2A)) 
    XMIT_CONFIG_INT_i_2__5
       (.I0(XMIT_CONFIG_INT),
        .I1(p_9_in),
        .I2(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I3(AN_ENABLE_INT),
        .O(XMIT_CONFIG));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT4 #(
    .INIT(16'hAAEA)) 
    XMIT_DATA_INT_i_1__5
       (.I0(XMIT_DATA_INT),
        .I1(p_9_in),
        .I2(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I3(AN_ENABLE_INT),
        .O(XMIT_DATA));
endmodule

(* ORIG_REF_NAME = "MANAGEMENT" *) 
module quadsgmii_0_TEST_MANAGEMENT_153
   (\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ,
    AN_ENABLE_INT,
    LOOPBACK,
    SOFT_RESET,
    RUNDISP_EN,
    mdio_out_ch2,
    mdio_tri_ch2,
    CLEAR_PAGE_RECEIVED,
    CLEAR_STATUS_REG,
    RESTART_AN_REG,
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ,
    an_interrupt_ch2,
    \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ,
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ,
    S0,
    S2,
    FALSE_NIT0,
    RXDISPERR_MOD,
    I_REG_reg,
    RX_DV0,
    RX_RUDI_INVALID,
    RX_ER0,
    XMIT_DATA,
    XMIT_CONFIG,
    SR,
    p_3_out,
    \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ,
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ,
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ,
    out,
    userclk,
    MR_AN_COMPLETE,
    XMIT_DATA_INT,
    RXSYNC_STATUS,
    \SHIFT_REG_reg[15] ,
    \USE_ROCKET_IO.TXDATA_reg[7] ,
    Q,
    status_vector_ch2,
    \FSM_onehot_STATE_reg[2] ,
    RXDISPERR_INT,
    RXNOTINTABLE_INT,
    CGBAD_reg,
    RXEVEN0_out,
    S_reg,
    FALSE_NIT_reg,
    FALSE_NIT_reg_0,
    FALSE_NIT_reg_1,
    RX_IDLE,
    SOP_REG3,
    RX_INVALID,
    RX_ER_reg,
    RX_DATA_ERROR,
    RECEIVE,
    XMIT_CONFIG_INT,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ,
    phyad_ch2,
    MR_PAGE_RX_SET,
    TOGGLE_RX,
    dcm_locked,
    reset_out,
    XMIT_CONFIG_INT_0,
    MR_LINK_STATUS,
    reset_done,
    mdc_ch2,
    mdio_in_ch2);
  output \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ;
  output AN_ENABLE_INT;
  output LOOPBACK;
  output SOFT_RESET;
  output RUNDISP_EN;
  output mdio_out_ch2;
  output mdio_tri_ch2;
  output CLEAR_PAGE_RECEIVED;
  output CLEAR_STATUS_REG;
  output RESTART_AN_REG;
  output \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ;
  output an_interrupt_ch2;
  output \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ;
  output \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  output S0;
  output S2;
  output FALSE_NIT0;
  output RXDISPERR_MOD;
  output I_REG_reg;
  output RX_DV0;
  output RX_RUDI_INVALID;
  output RX_ER0;
  output XMIT_DATA;
  output XMIT_CONFIG;
  output [0:0]SR;
  output p_3_out;
  output \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ;
  output \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ;
  output \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ;
  input out;
  input userclk;
  input MR_AN_COMPLETE;
  input XMIT_DATA_INT;
  input RXSYNC_STATUS;
  input [3:0]\SHIFT_REG_reg[15] ;
  input \USE_ROCKET_IO.TXDATA_reg[7] ;
  input [0:0]Q;
  input [0:0]status_vector_ch2;
  input \FSM_onehot_STATE_reg[2] ;
  input RXDISPERR_INT;
  input RXNOTINTABLE_INT;
  input CGBAD_reg;
  input RXEVEN0_out;
  input S_reg;
  input [4:0]FALSE_NIT_reg;
  input FALSE_NIT_reg_0;
  input FALSE_NIT_reg_1;
  input RX_IDLE;
  input SOP_REG3;
  input RX_INVALID;
  input RX_ER_reg;
  input RX_DATA_ERROR;
  input RECEIVE;
  input XMIT_CONFIG_INT;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  input [4:0]phyad_ch2;
  input MR_PAGE_RX_SET;
  input TOGGLE_RX;
  input dcm_locked;
  input reset_out;
  input XMIT_CONFIG_INT_0;
  input MR_LINK_STATUS;
  input reset_done;
  input mdc_ch2;
  input mdio_in_ch2;

  wire AN_COMPLETE_REG1;
  wire AN_ENABLE_INT;
  wire \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ;
  wire \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ;
  wire CGBAD_reg;
  wire CLEAR_PAGE_RECEIVED;
  wire CLEAR_PAGE_REC_COMB;
  wire CLEAR_STATUS_REG;
  wire CLEAR_STATUS_REG_COMB;
  wire \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ;
  wire \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ;
  wire \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ;
  wire \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ;
  wire \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ;
  wire [14:0]DATA_OUT;
  wire FALSE_NIT0;
  wire FALSE_NIT_i_2__1_n_0;
  wire [4:0]FALSE_NIT_reg;
  wire FALSE_NIT_reg_0;
  wire FALSE_NIT_reg_1;
  wire \FSM_onehot_STATE_reg[2] ;
  wire I_REG_reg;
  wire LOOPBACK;
  wire LOOPBACK_REG;
  wire MDC_REG3;
  wire MDC_RISING_OUT;
  wire MDC_RISING_REG1;
  wire MDC_RISING_REG10;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_10 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_11 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_17 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_18 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_9 ;
  wire MDIO_IN_REG2;
  wire MDIO_IN_REG3;
  wire MDIO_IN__0;
  wire MR_AN_COMPLETE;
  wire MR_LINK_STATUS;
  wire MR_PAGE_RX_SET;
  wire [0:0]Q;
  wire \QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg_n_0 ;
  wire RECEIVE;
  wire RESTART_AN_REG;
  wire RUNDISP_EN;
  wire RUNDISP_EN_REG;
  wire RXDISPERR_INT;
  wire RXDISPERR_MOD;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXSYNC_STATUS;
  wire RX_DATA_ERROR;
  wire RX_DV0;
  wire RX_ER0;
  wire RX_ER_i_3__1_n_0;
  wire RX_ER_reg;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_RUDI_INVALID;
  wire S0;
  wire S2;
  wire [3:0]\SHIFT_REG_reg[15] ;
  wire SOFT_RESET;
  wire SOP_REG3;
  wire [0:0]SR;
  wire S_reg;
  wire TOGGLE_RX;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  wire \USE_ROCKET_IO.TXDATA_reg[7] ;
  wire XMIT_CONFIG;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire an_interrupt_ch2;
  wire data_out;
  wire dcm_locked;
  wire mdc_ch2;
  wire mdio_in_ch2;
  wire mdio_out_ch2;
  wire mdio_tri_ch2;
  wire out;
  wire p_2_out;
  wire p_3_out;
  wire [0:0]p_6_in;
  wire [5:5]p_9_in;
  wire [4:0]phyad_ch2;
  wire reset_done;
  wire reset_out;
  wire [0:0]status_vector_ch2;
  wire userclk;

  FDSE #(
    .INIT(1'b0)) 
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ),
        .Q(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ),
        .Q(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ),
        .S(out));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT4 #(
    .INIT(16'hFFF8)) 
    CGBAD_i_1__1
       (.I0(RXDISPERR_INT),
        .I1(RUNDISP_EN),
        .I2(RXNOTINTABLE_INT),
        .I3(CGBAD_reg),
        .O(S2));
  FDRE CLEAR_PAGE_RECEIVED_reg
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(CLEAR_PAGE_REC_COMB),
        .Q(CLEAR_PAGE_RECEIVED),
        .R(out));
  FDRE CLEAR_STATUS_REG_reg
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(CLEAR_STATUS_REG_COMB),
        .Q(CLEAR_STATUS_REG),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \CODE_GRP[6]_i_1__1 
       (.I0(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .I1(XMIT_CONFIG_INT_0),
        .O(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ));
  FDSE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[12]),
        .Q(AN_ENABLE_INT),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_10 ),
        .Q(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .R(1'b0));
  FDSE #(
    .INIT(1'b1)) 
    \CONFIG_REG_WITH_AN.ISOLATE_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[10]),
        .Q(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.LOOPBACK_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[14]),
        .Q(LOOPBACK),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_9 ),
        .Q(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.RESET_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_11 ),
        .Q(SOFT_RESET),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.RESTART_AN_REG_reg 
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(p_2_out),
        .Q(RESTART_AN_REG),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[5]),
        .Q(p_9_in),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR_i_1__1 
       (.I0(RUNDISP_EN),
        .I1(RXDISPERR_INT),
        .O(RXDISPERR_MOD));
  LUT6 #(
    .INIT(64'h8080808088808080)) 
    FALSE_CARRIER_i_3__1
       (.I0(RX_IDLE),
        .I1(RXSYNC_STATUS),
        .I2(XMIT_DATA_INT),
        .I3(p_9_in),
        .I4(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I5(AN_ENABLE_INT),
        .O(I_REG_reg));
  LUT2 #(
    .INIT(4'h2)) 
    FALSE_NIT_i_1__1
       (.I0(RXNOTINTABLE_INT),
        .I1(FALSE_NIT_i_2__1_n_0),
        .O(FALSE_NIT0));
  LUT6 #(
    .INIT(64'hC33E3EEBFFFEFEEB)) 
    FALSE_NIT_i_2__1
       (.I0(FALSE_NIT_reg_0),
        .I1(FALSE_NIT_reg[4]),
        .I2(RXDISPERR_MOD),
        .I3(FALSE_NIT_reg[0]),
        .I4(FALSE_NIT_reg[1]),
        .I5(FALSE_NIT_reg_1),
        .O(FALSE_NIT_i_2__1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFEAFFFFFFC0)) 
    \FSM_onehot_STATE[12]_i_3__1 
       (.I0(\FSM_onehot_STATE_reg[2] ),
        .I1(RXDISPERR_INT),
        .I2(RUNDISP_EN),
        .I3(RXNOTINTABLE_INT),
        .I4(CGBAD_reg),
        .I5(RXEVEN0_out),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \GEN_INTERRUPT_LOGIC.AN_COMPLETE_REG1_reg 
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(MR_AN_COMPLETE),
        .Q(AN_COMPLETE_REG1),
        .R(out));
  FDSE #(
    .INIT(1'b0)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_17 ),
        .Q(p_6_in),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_18 ),
        .Q(an_interrupt_ch2),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(data_out),
        .Q(MDC_REG3),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG10),
        .Q(MDC_RISING_REG1),
        .R(out));
  quadsgmii_0_TEST_MDIO_INTERFACE_161 \MDIO_IF_ENABLE.MDIO_INTERFACE_1 
       (.AN_COMPLETE_REG1(AN_COMPLETE_REG1),
        .CLEAR_PAGE_REC_COMB(CLEAR_PAGE_REC_COMB),
        .CLEAR_STATUS_REG_COMB(CLEAR_STATUS_REG_COMB),
        .\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg (\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg (\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .\CONFIG_REG_WITH_AN.RESET_REG_reg (SOFT_RESET),
        .LOOPBACK_REG(LOOPBACK_REG),
        .MDC_RISING_OUT(MDC_RISING_OUT),
        .MDC_RISING_REG1(MDC_RISING_REG1),
        .MDC_RISING_REG3_reg_0(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_9 ),
        .MDC_RISING_REG3_reg_1(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_10 ),
        .MDC_RISING_REG3_reg_2(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_11 ),
        .MDIO_IN__0(MDIO_IN__0),
        .MR_AN_COMPLETE(MR_AN_COMPLETE),
        .MR_LINK_STATUS(MR_LINK_STATUS),
        .MR_PAGE_RX_SET(MR_PAGE_RX_SET),
        .Q({DATA_OUT[14],DATA_OUT[12],DATA_OUT[10],DATA_OUT[5],DATA_OUT[1:0]}),
        .RESTART_AN_REG(RESTART_AN_REG),
        .RUNDISP_EN_REG(RUNDISP_EN_REG),
        .\SHIFT_REG_reg[0]_0 (\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_17 ),
        .\SHIFT_REG_reg[0]_1 (RUNDISP_EN),
        .\SHIFT_REG_reg[10]_0 (\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .\SHIFT_REG_reg[12]_0 (AN_ENABLE_INT),
        .\SHIFT_REG_reg[14]_0 (LOOPBACK),
        .\SHIFT_REG_reg[15]_0 (\SHIFT_REG_reg[15] ),
        .\SHIFT_REG_reg[1]_0 (\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_18 ),
        .\SHIFT_REG_reg[1]_1 (\QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg_n_0 ),
        .TOGGLE_RX(TOGGLE_RX),
        .an_interrupt_ch2(an_interrupt_ch2),
        .mdio_out_ch2(mdio_out_ch2),
        .mdio_tri_ch2(mdio_tri_ch2),
        .out(out),
        .p_2_out(p_2_out),
        .p_6_in(p_6_in),
        .p_9_in(p_9_in),
        .phyad_ch2(phyad_ch2),
        .reset_done(reset_done),
        .status_vector_ch2(status_vector_ch2),
        .userclk(userclk));
  FDSE #(
    .INIT(1'b0)) 
    MDIO_IN_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDIO_IN_REG2),
        .Q(MDIO_IN_REG3),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    MDIO_IN_REG4_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDIO_IN_REG3),
        .Q(MDIO_IN__0),
        .S(out));
  LUT3 #(
    .INIT(8'hFB)) 
    \MGT_RESET.RESET_INT_PIPE_i_1__1 
       (.I0(SOFT_RESET),
        .I1(dcm_locked),
        .I2(reset_out),
        .O(p_3_out));
  FDSE #(
    .INIT(1'b1)) 
    \QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg 
       (.C(userclk),
        .CE(RUNDISP_EN_REG),
        .D(DATA_OUT[1]),
        .Q(\QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg_n_0 ),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \QSGMII_SPEC.RUNDISP_EN_REG_reg 
       (.C(userclk),
        .CE(RUNDISP_EN_REG),
        .D(DATA_OUT[0]),
        .Q(RUNDISP_EN),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    RX_DV_i_2__1
       (.I0(\CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ),
        .I1(SOP_REG3),
        .I2(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .I3(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .O(RX_DV0));
  LUT6 #(
    .INIT(64'h00000000000000F7)) 
    RX_ER_i_1__1
       (.I0(RX_ER_reg),
        .I1(RXSYNC_STATUS),
        .I2(RX_DATA_ERROR),
        .I3(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .I4(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .I5(RX_ER_i_3__1_n_0),
        .O(RX_ER0));
  LUT6 #(
    .INIT(64'h00BF00BF00BFFFFF)) 
    RX_ER_i_3__1
       (.I0(AN_ENABLE_INT),
        .I1(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I2(p_9_in),
        .I3(XMIT_DATA_INT),
        .I4(RECEIVE),
        .I5(RXSYNC_STATUS),
        .O(RX_ER_i_3__1_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAABBBBABBB)) 
    RX_RUDI_INVALID_REG_i_2__1
       (.I0(RX_INVALID),
        .I1(XMIT_DATA_INT),
        .I2(p_9_in),
        .I3(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I4(AN_ENABLE_INT),
        .I5(RXSYNC_STATUS),
        .O(RX_RUDI_INVALID));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT5 #(
    .INIT(32'hFF400000)) 
    STATUS_VECTOR_0_PRE_i_1__1
       (.I0(AN_ENABLE_INT),
        .I1(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I2(p_9_in),
        .I3(XMIT_DATA_INT),
        .I4(RXSYNC_STATUS),
        .O(\CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ));
  quadsgmii_0_TEST_sync_block_162 SYNC_MDC
       (.MDC_REG3(MDC_REG3),
        .MDC_RISING_REG10(MDC_RISING_REG10),
        .data_out(data_out),
        .mdc_ch2(mdc_ch2),
        .userclk(userclk));
  quadsgmii_0_TEST_sync_block_163 SYNC_MDIO_IN
       (.data_out(MDIO_IN_REG2),
        .mdio_in_ch2(mdio_in_ch2),
        .userclk(userclk));
  LUT6 #(
    .INIT(64'h0000000000800000)) 
    S_i_1__3
       (.I0(S_reg),
        .I1(FALSE_NIT_reg[1]),
        .I2(FALSE_NIT_reg[0]),
        .I3(FALSE_NIT_reg[2]),
        .I4(FALSE_NIT_reg[3]),
        .I5(S2),
        .O(S0));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__1 
       (.I0(LOOPBACK),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .O(SR));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \USE_ROCKET_IO.TXDATA[7]_i_1__1 
       (.I0(\USE_ROCKET_IO.TXDATA_reg[7] ),
        .I1(LOOPBACK),
        .I2(Q),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT4 #(
    .INIT(16'hAA2A)) 
    XMIT_CONFIG_INT_i_2__3
       (.I0(XMIT_CONFIG_INT),
        .I1(p_9_in),
        .I2(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I3(AN_ENABLE_INT),
        .O(XMIT_CONFIG));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT4 #(
    .INIT(16'hAAEA)) 
    XMIT_DATA_INT_i_1__3
       (.I0(XMIT_DATA_INT),
        .I1(p_9_in),
        .I2(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I3(AN_ENABLE_INT),
        .O(XMIT_DATA));
endmodule

(* ORIG_REF_NAME = "MANAGEMENT" *) 
module quadsgmii_0_TEST_MANAGEMENT_165
   (\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ,
    AN_ENABLE_INT,
    LOOPBACK,
    SOFT_RESET,
    RUNDISP_EN,
    mdio_out_ch1,
    mdio_tri_ch1,
    CLEAR_PAGE_RECEIVED,
    CLEAR_STATUS_REG,
    RESTART_AN_REG,
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ,
    an_interrupt_ch1,
    \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ,
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ,
    S0,
    S2,
    FALSE_NIT0,
    RXDISPERR_MOD,
    I_REG_reg,
    RX_DV0,
    RX_RUDI_INVALID,
    RX_ER0,
    XMIT_DATA,
    XMIT_CONFIG,
    SR,
    p_3_out,
    \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ,
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ,
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ,
    out,
    userclk,
    MR_AN_COMPLETE,
    XMIT_DATA_INT,
    RXSYNC_STATUS,
    \SHIFT_REG_reg[15] ,
    \USE_ROCKET_IO.TXDATA_reg[7] ,
    Q,
    status_vector_ch1,
    \FSM_onehot_STATE_reg[2] ,
    RXDISPERR_INT,
    RXNOTINTABLE_INT,
    CGBAD_reg,
    RXEVEN0_out,
    S_reg,
    FALSE_NIT_reg,
    FALSE_NIT_reg_0,
    FALSE_NIT_reg_1,
    RX_IDLE,
    SOP_REG3,
    RX_INVALID,
    RX_ER_reg,
    RX_DATA_ERROR,
    RECEIVE,
    XMIT_CONFIG_INT,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ,
    phyad_ch1,
    MR_PAGE_RX_SET,
    TOGGLE_RX,
    dcm_locked,
    reset_out,
    XMIT_CONFIG_INT_0,
    MR_LINK_STATUS,
    reset_done,
    mdc_ch1,
    mdio_in_ch1);
  output \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ;
  output AN_ENABLE_INT;
  output LOOPBACK;
  output SOFT_RESET;
  output RUNDISP_EN;
  output mdio_out_ch1;
  output mdio_tri_ch1;
  output CLEAR_PAGE_RECEIVED;
  output CLEAR_STATUS_REG;
  output RESTART_AN_REG;
  output \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ;
  output an_interrupt_ch1;
  output \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ;
  output \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  output S0;
  output S2;
  output FALSE_NIT0;
  output RXDISPERR_MOD;
  output I_REG_reg;
  output RX_DV0;
  output RX_RUDI_INVALID;
  output RX_ER0;
  output XMIT_DATA;
  output XMIT_CONFIG;
  output [0:0]SR;
  output p_3_out;
  output \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ;
  output \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ;
  output \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ;
  input out;
  input userclk;
  input MR_AN_COMPLETE;
  input XMIT_DATA_INT;
  input RXSYNC_STATUS;
  input [3:0]\SHIFT_REG_reg[15] ;
  input \USE_ROCKET_IO.TXDATA_reg[7] ;
  input [0:0]Q;
  input [0:0]status_vector_ch1;
  input \FSM_onehot_STATE_reg[2] ;
  input RXDISPERR_INT;
  input RXNOTINTABLE_INT;
  input CGBAD_reg;
  input RXEVEN0_out;
  input S_reg;
  input [4:0]FALSE_NIT_reg;
  input FALSE_NIT_reg_0;
  input FALSE_NIT_reg_1;
  input RX_IDLE;
  input SOP_REG3;
  input RX_INVALID;
  input RX_ER_reg;
  input RX_DATA_ERROR;
  input RECEIVE;
  input XMIT_CONFIG_INT;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  input [4:0]phyad_ch1;
  input MR_PAGE_RX_SET;
  input TOGGLE_RX;
  input dcm_locked;
  input reset_out;
  input XMIT_CONFIG_INT_0;
  input MR_LINK_STATUS;
  input reset_done;
  input mdc_ch1;
  input mdio_in_ch1;

  wire AN_COMPLETE_REG1;
  wire AN_ENABLE_INT;
  wire \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ;
  wire \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ;
  wire CGBAD_reg;
  wire CLEAR_PAGE_RECEIVED;
  wire CLEAR_PAGE_REC_COMB;
  wire CLEAR_STATUS_REG;
  wire CLEAR_STATUS_REG_COMB;
  wire \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ;
  wire \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ;
  wire \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ;
  wire \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ;
  wire \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ;
  wire [14:0]DATA_OUT;
  wire FALSE_NIT0;
  wire FALSE_NIT_i_2__0_n_0;
  wire [4:0]FALSE_NIT_reg;
  wire FALSE_NIT_reg_0;
  wire FALSE_NIT_reg_1;
  wire \FSM_onehot_STATE_reg[2] ;
  wire I_REG_reg;
  wire LOOPBACK;
  wire LOOPBACK_REG;
  wire MDC_REG3;
  wire MDC_RISING_OUT;
  wire MDC_RISING_REG1;
  wire MDC_RISING_REG10;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_10 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_11 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_17 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_18 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_9 ;
  wire MDIO_IN_REG2;
  wire MDIO_IN_REG3;
  wire MDIO_IN__0;
  wire MR_AN_COMPLETE;
  wire MR_LINK_STATUS;
  wire MR_PAGE_RX_SET;
  wire [0:0]Q;
  wire \QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg_n_0 ;
  wire RECEIVE;
  wire RESTART_AN_REG;
  wire RUNDISP_EN;
  wire RUNDISP_EN_REG;
  wire RXDISPERR_INT;
  wire RXDISPERR_MOD;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXSYNC_STATUS;
  wire RX_DATA_ERROR;
  wire RX_DV0;
  wire RX_ER0;
  wire RX_ER_i_3__0_n_0;
  wire RX_ER_reg;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_RUDI_INVALID;
  wire S0;
  wire S2;
  wire [3:0]\SHIFT_REG_reg[15] ;
  wire SOFT_RESET;
  wire SOP_REG3;
  wire [0:0]SR;
  wire S_reg;
  wire TOGGLE_RX;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  wire \USE_ROCKET_IO.TXDATA_reg[7] ;
  wire XMIT_CONFIG;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire an_interrupt_ch1;
  wire data_out;
  wire dcm_locked;
  wire mdc_ch1;
  wire mdio_in_ch1;
  wire mdio_out_ch1;
  wire mdio_tri_ch1;
  wire out;
  wire p_2_out;
  wire p_3_out;
  wire [0:0]p_6_in;
  wire [5:5]p_9_in;
  wire [4:0]phyad_ch1;
  wire reset_done;
  wire reset_out;
  wire [0:0]status_vector_ch1;
  wire userclk;

  FDSE #(
    .INIT(1'b0)) 
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ),
        .Q(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ),
        .Q(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ),
        .S(out));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT4 #(
    .INIT(16'hFFF8)) 
    CGBAD_i_1__0
       (.I0(RXDISPERR_INT),
        .I1(RUNDISP_EN),
        .I2(RXNOTINTABLE_INT),
        .I3(CGBAD_reg),
        .O(S2));
  FDRE CLEAR_PAGE_RECEIVED_reg
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(CLEAR_PAGE_REC_COMB),
        .Q(CLEAR_PAGE_RECEIVED),
        .R(out));
  FDRE CLEAR_STATUS_REG_reg
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(CLEAR_STATUS_REG_COMB),
        .Q(CLEAR_STATUS_REG),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \CODE_GRP[6]_i_1__0 
       (.I0(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .I1(XMIT_CONFIG_INT_0),
        .O(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ));
  FDSE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[12]),
        .Q(AN_ENABLE_INT),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_10 ),
        .Q(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .R(1'b0));
  FDSE #(
    .INIT(1'b1)) 
    \CONFIG_REG_WITH_AN.ISOLATE_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[10]),
        .Q(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.LOOPBACK_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[14]),
        .Q(LOOPBACK),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_9 ),
        .Q(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.RESET_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_11 ),
        .Q(SOFT_RESET),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.RESTART_AN_REG_reg 
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(p_2_out),
        .Q(RESTART_AN_REG),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[5]),
        .Q(p_9_in),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR_i_1__0 
       (.I0(RUNDISP_EN),
        .I1(RXDISPERR_INT),
        .O(RXDISPERR_MOD));
  LUT6 #(
    .INIT(64'h8080808088808080)) 
    FALSE_CARRIER_i_3__0
       (.I0(RX_IDLE),
        .I1(RXSYNC_STATUS),
        .I2(XMIT_DATA_INT),
        .I3(p_9_in),
        .I4(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I5(AN_ENABLE_INT),
        .O(I_REG_reg));
  LUT2 #(
    .INIT(4'h2)) 
    FALSE_NIT_i_1__0
       (.I0(RXNOTINTABLE_INT),
        .I1(FALSE_NIT_i_2__0_n_0),
        .O(FALSE_NIT0));
  LUT6 #(
    .INIT(64'hC33E3EEBFFFEFEEB)) 
    FALSE_NIT_i_2__0
       (.I0(FALSE_NIT_reg_0),
        .I1(FALSE_NIT_reg[4]),
        .I2(RXDISPERR_MOD),
        .I3(FALSE_NIT_reg[0]),
        .I4(FALSE_NIT_reg[1]),
        .I5(FALSE_NIT_reg_1),
        .O(FALSE_NIT_i_2__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFEAFFFFFFC0)) 
    \FSM_onehot_STATE[12]_i_3__0 
       (.I0(\FSM_onehot_STATE_reg[2] ),
        .I1(RXDISPERR_INT),
        .I2(RUNDISP_EN),
        .I3(RXNOTINTABLE_INT),
        .I4(CGBAD_reg),
        .I5(RXEVEN0_out),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \GEN_INTERRUPT_LOGIC.AN_COMPLETE_REG1_reg 
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(MR_AN_COMPLETE),
        .Q(AN_COMPLETE_REG1),
        .R(out));
  FDSE #(
    .INIT(1'b0)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_17 ),
        .Q(p_6_in),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_18 ),
        .Q(an_interrupt_ch1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(data_out),
        .Q(MDC_REG3),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG10),
        .Q(MDC_RISING_REG1),
        .R(out));
  quadsgmii_0_TEST_MDIO_INTERFACE_173 \MDIO_IF_ENABLE.MDIO_INTERFACE_1 
       (.AN_COMPLETE_REG1(AN_COMPLETE_REG1),
        .CLEAR_PAGE_REC_COMB(CLEAR_PAGE_REC_COMB),
        .CLEAR_STATUS_REG_COMB(CLEAR_STATUS_REG_COMB),
        .\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg (\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg (\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .\CONFIG_REG_WITH_AN.RESET_REG_reg (SOFT_RESET),
        .LOOPBACK_REG(LOOPBACK_REG),
        .MDC_RISING_OUT(MDC_RISING_OUT),
        .MDC_RISING_REG1(MDC_RISING_REG1),
        .MDC_RISING_REG3_reg_0(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_9 ),
        .MDC_RISING_REG3_reg_1(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_10 ),
        .MDC_RISING_REG3_reg_2(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_11 ),
        .MDIO_IN__0(MDIO_IN__0),
        .MR_AN_COMPLETE(MR_AN_COMPLETE),
        .MR_LINK_STATUS(MR_LINK_STATUS),
        .MR_PAGE_RX_SET(MR_PAGE_RX_SET),
        .Q({DATA_OUT[14],DATA_OUT[12],DATA_OUT[10],DATA_OUT[5],DATA_OUT[1:0]}),
        .RESTART_AN_REG(RESTART_AN_REG),
        .RUNDISP_EN_REG(RUNDISP_EN_REG),
        .\SHIFT_REG_reg[0]_0 (\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_17 ),
        .\SHIFT_REG_reg[0]_1 (RUNDISP_EN),
        .\SHIFT_REG_reg[10]_0 (\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .\SHIFT_REG_reg[12]_0 (AN_ENABLE_INT),
        .\SHIFT_REG_reg[14]_0 (LOOPBACK),
        .\SHIFT_REG_reg[15]_0 (\SHIFT_REG_reg[15] ),
        .\SHIFT_REG_reg[1]_0 (\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_18 ),
        .\SHIFT_REG_reg[1]_1 (\QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg_n_0 ),
        .TOGGLE_RX(TOGGLE_RX),
        .an_interrupt_ch1(an_interrupt_ch1),
        .mdio_out_ch1(mdio_out_ch1),
        .mdio_tri_ch1(mdio_tri_ch1),
        .out(out),
        .p_2_out(p_2_out),
        .p_6_in(p_6_in),
        .p_9_in(p_9_in),
        .phyad_ch1(phyad_ch1),
        .reset_done(reset_done),
        .status_vector_ch1(status_vector_ch1),
        .userclk(userclk));
  FDSE #(
    .INIT(1'b0)) 
    MDIO_IN_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDIO_IN_REG2),
        .Q(MDIO_IN_REG3),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    MDIO_IN_REG4_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDIO_IN_REG3),
        .Q(MDIO_IN__0),
        .S(out));
  LUT3 #(
    .INIT(8'hFB)) 
    \MGT_RESET.RESET_INT_PIPE_i_1__0 
       (.I0(SOFT_RESET),
        .I1(dcm_locked),
        .I2(reset_out),
        .O(p_3_out));
  FDSE #(
    .INIT(1'b1)) 
    \QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg 
       (.C(userclk),
        .CE(RUNDISP_EN_REG),
        .D(DATA_OUT[1]),
        .Q(\QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg_n_0 ),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \QSGMII_SPEC.RUNDISP_EN_REG_reg 
       (.C(userclk),
        .CE(RUNDISP_EN_REG),
        .D(DATA_OUT[0]),
        .Q(RUNDISP_EN),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    RX_DV_i_2__0
       (.I0(\CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ),
        .I1(SOP_REG3),
        .I2(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .I3(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .O(RX_DV0));
  LUT6 #(
    .INIT(64'h00000000000000F7)) 
    RX_ER_i_1__0
       (.I0(RX_ER_reg),
        .I1(RXSYNC_STATUS),
        .I2(RX_DATA_ERROR),
        .I3(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .I4(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .I5(RX_ER_i_3__0_n_0),
        .O(RX_ER0));
  LUT6 #(
    .INIT(64'h00BF00BF00BFFFFF)) 
    RX_ER_i_3__0
       (.I0(AN_ENABLE_INT),
        .I1(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I2(p_9_in),
        .I3(XMIT_DATA_INT),
        .I4(RECEIVE),
        .I5(RXSYNC_STATUS),
        .O(RX_ER_i_3__0_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAABBBBABBB)) 
    RX_RUDI_INVALID_REG_i_2__0
       (.I0(RX_INVALID),
        .I1(XMIT_DATA_INT),
        .I2(p_9_in),
        .I3(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I4(AN_ENABLE_INT),
        .I5(RXSYNC_STATUS),
        .O(RX_RUDI_INVALID));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT5 #(
    .INIT(32'hFF400000)) 
    STATUS_VECTOR_0_PRE_i_1__0
       (.I0(AN_ENABLE_INT),
        .I1(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I2(p_9_in),
        .I3(XMIT_DATA_INT),
        .I4(RXSYNC_STATUS),
        .O(\CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ));
  quadsgmii_0_TEST_sync_block_174 SYNC_MDC
       (.MDC_REG3(MDC_REG3),
        .MDC_RISING_REG10(MDC_RISING_REG10),
        .data_out(data_out),
        .mdc_ch1(mdc_ch1),
        .userclk(userclk));
  quadsgmii_0_TEST_sync_block_175 SYNC_MDIO_IN
       (.data_out(MDIO_IN_REG2),
        .mdio_in_ch1(mdio_in_ch1),
        .userclk(userclk));
  LUT6 #(
    .INIT(64'h0000000000800000)) 
    S_i_1__1
       (.I0(S_reg),
        .I1(FALSE_NIT_reg[1]),
        .I2(FALSE_NIT_reg[0]),
        .I3(FALSE_NIT_reg[2]),
        .I4(FALSE_NIT_reg[3]),
        .I5(S2),
        .O(S0));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__0 
       (.I0(LOOPBACK),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .O(SR));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \USE_ROCKET_IO.TXDATA[7]_i_1__0 
       (.I0(\USE_ROCKET_IO.TXDATA_reg[7] ),
        .I1(LOOPBACK),
        .I2(Q),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT4 #(
    .INIT(16'hAA2A)) 
    XMIT_CONFIG_INT_i_2__1
       (.I0(XMIT_CONFIG_INT),
        .I1(p_9_in),
        .I2(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I3(AN_ENABLE_INT),
        .O(XMIT_CONFIG));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT4 #(
    .INIT(16'hAAEA)) 
    XMIT_DATA_INT_i_1__1
       (.I0(XMIT_DATA_INT),
        .I1(p_9_in),
        .I2(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I3(AN_ENABLE_INT),
        .O(XMIT_DATA));
endmodule

(* ORIG_REF_NAME = "MANAGEMENT" *) 
module quadsgmii_0_TEST_MANAGEMENT_177
   (\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ,
    AN_ENABLE_INT,
    LOOPBACK,
    SOFT_RESET,
    RUNDISP_EN,
    mdio_out_ch0,
    mdio_tri_ch0,
    CLEAR_PAGE_RECEIVED,
    CLEAR_STATUS_REG,
    RESTART_AN_REG,
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ,
    an_interrupt_ch0,
    \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ,
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ,
    S0,
    S2,
    FALSE_NIT0,
    RXDISPERR_MOD,
    I_REG_reg,
    RX_DV0,
    RX_RUDI_INVALID,
    RX_ER0,
    XMIT_DATA,
    XMIT_CONFIG,
    RXCLKCORCNT_INT,
    p_3_out,
    \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ,
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ,
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ,
    out,
    userclk,
    MR_AN_COMPLETE,
    XMIT_DATA_INT,
    RXSYNC_STATUS,
    \SHIFT_REG_reg[15] ,
    \USE_ROCKET_IO.TXDATA_reg[7] ,
    Q,
    status_vector_ch0,
    \FSM_onehot_STATE_reg[2] ,
    RXDISPERR_INT,
    RXNOTINTABLE_INT,
    CGBAD_reg,
    RXEVEN0_out,
    S_reg,
    FALSE_NIT_reg,
    FALSE_NIT_reg_0,
    FALSE_NIT_reg_1,
    RX_IDLE,
    SOP_REG3,
    RX_INVALID,
    RX_ER_reg,
    RX_DATA_ERROR,
    RECEIVE,
    XMIT_CONFIG_INT,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_reg ,
    phyad_ch0,
    MR_PAGE_RX_SET,
    TOGGLE_RX,
    dcm_locked,
    reset_out,
    XMIT_CONFIG_INT_0,
    MR_LINK_STATUS,
    reset_done,
    mdc_ch0,
    mdio_in_ch0);
  output \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ;
  output AN_ENABLE_INT;
  output LOOPBACK;
  output SOFT_RESET;
  output RUNDISP_EN;
  output mdio_out_ch0;
  output mdio_tri_ch0;
  output CLEAR_PAGE_RECEIVED;
  output CLEAR_STATUS_REG;
  output RESTART_AN_REG;
  output \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ;
  output an_interrupt_ch0;
  output \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ;
  output \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  output S0;
  output S2;
  output FALSE_NIT0;
  output RXDISPERR_MOD;
  output I_REG_reg;
  output RX_DV0;
  output RX_RUDI_INVALID;
  output RX_ER0;
  output XMIT_DATA;
  output XMIT_CONFIG;
  output RXCLKCORCNT_INT;
  output p_3_out;
  output \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ;
  output \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ;
  output \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ;
  input out;
  input userclk;
  input MR_AN_COMPLETE;
  input XMIT_DATA_INT;
  input RXSYNC_STATUS;
  input [3:0]\SHIFT_REG_reg[15] ;
  input \USE_ROCKET_IO.TXDATA_reg[7] ;
  input [0:0]Q;
  input [0:0]status_vector_ch0;
  input \FSM_onehot_STATE_reg[2] ;
  input RXDISPERR_INT;
  input RXNOTINTABLE_INT;
  input CGBAD_reg;
  input RXEVEN0_out;
  input S_reg;
  input [4:0]FALSE_NIT_reg;
  input FALSE_NIT_reg_0;
  input FALSE_NIT_reg_1;
  input RX_IDLE;
  input SOP_REG3;
  input RX_INVALID;
  input RX_ER_reg;
  input RX_DATA_ERROR;
  input RECEIVE;
  input XMIT_CONFIG_INT;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_reg ;
  input [4:0]phyad_ch0;
  input MR_PAGE_RX_SET;
  input TOGGLE_RX;
  input dcm_locked;
  input reset_out;
  input XMIT_CONFIG_INT_0;
  input MR_LINK_STATUS;
  input reset_done;
  input mdc_ch0;
  input mdio_in_ch0;

  wire AN_COMPLETE_REG1;
  wire AN_ENABLE_INT;
  wire \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ;
  wire \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ;
  wire CGBAD_reg;
  wire CLEAR_PAGE_RECEIVED;
  wire CLEAR_PAGE_REC_COMB;
  wire CLEAR_STATUS_REG;
  wire CLEAR_STATUS_REG_COMB;
  wire \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ;
  wire \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ;
  wire \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ;
  wire \CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ;
  wire \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ;
  wire [14:0]DATA_OUT;
  wire FALSE_NIT0;
  wire FALSE_NIT_i_2_n_0;
  wire [4:0]FALSE_NIT_reg;
  wire FALSE_NIT_reg_0;
  wire FALSE_NIT_reg_1;
  wire \FSM_onehot_STATE_reg[2] ;
  wire I_REG_reg;
  wire LOOPBACK;
  wire LOOPBACK_REG;
  wire MDC_REG3;
  wire MDC_RISING_OUT;
  wire MDC_RISING_REG1;
  wire MDC_RISING_REG10;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_10 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_11 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_12 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_13 ;
  wire \MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_9 ;
  wire MDIO_IN_REG2;
  wire MDIO_IN_REG3;
  wire MDIO_IN__0;
  wire MR_AN_COMPLETE;
  wire MR_LINK_STATUS;
  wire MR_PAGE_RX_SET;
  wire [0:0]Q;
  wire \QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg_n_0 ;
  wire RECEIVE;
  wire RESTART_AN_REG;
  wire RUNDISP_EN;
  wire RUNDISP_EN_REG;
  wire RXCLKCORCNT_INT;
  wire RXDISPERR_INT;
  wire RXDISPERR_MOD;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXSYNC_STATUS;
  wire RX_DATA_ERROR;
  wire RX_DV0;
  wire RX_ER0;
  wire RX_ER_i_3_n_0;
  wire RX_ER_reg;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_RUDI_INVALID;
  wire S0;
  wire S2;
  wire [3:0]\SHIFT_REG_reg[15] ;
  wire SOFT_RESET;
  wire SOP_REG3;
  wire S_reg;
  wire TOGGLE_RX;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_reg ;
  wire \USE_ROCKET_IO.TXDATA_reg[7] ;
  wire XMIT_CONFIG;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire an_interrupt_ch0;
  wire data_out;
  wire dcm_locked;
  wire mdc_ch0;
  wire mdio_in_ch0;
  wire mdio_out_ch0;
  wire mdio_tri_ch0;
  wire out;
  wire p_2_out;
  wire p_3_out;
  wire [0:0]p_6_in;
  wire [5:5]p_9_in;
  wire [4:0]phyad_ch0;
  wire reset_done;
  wire reset_out;
  wire [0:0]status_vector_ch0;
  wire userclk;

  FDSE #(
    .INIT(1'b0)) 
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ),
        .Q(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[0]_0 ),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ),
        .Q(\AN_NP_TX_REG_WITH_AN.AN_NP_TX_REG_reg[13]_0 ),
        .S(out));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT4 #(
    .INIT(16'hFFF8)) 
    CGBAD_i_1
       (.I0(RXDISPERR_INT),
        .I1(RUNDISP_EN),
        .I2(RXNOTINTABLE_INT),
        .I3(CGBAD_reg),
        .O(S2));
  FDRE CLEAR_PAGE_RECEIVED_reg
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(CLEAR_PAGE_REC_COMB),
        .Q(CLEAR_PAGE_RECEIVED),
        .R(out));
  FDRE CLEAR_STATUS_REG_reg
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(CLEAR_STATUS_REG_COMB),
        .Q(CLEAR_STATUS_REG),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \CODE_GRP[6]_i_1 
       (.I0(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .I1(XMIT_CONFIG_INT_0),
        .O(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_1 ));
  FDSE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[12]),
        .Q(AN_ENABLE_INT),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_10 ),
        .Q(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .R(1'b0));
  FDSE #(
    .INIT(1'b1)) 
    \CONFIG_REG_WITH_AN.ISOLATE_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[10]),
        .Q(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.LOOPBACK_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[14]),
        .Q(LOOPBACK),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_9 ),
        .Q(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.RESET_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_11 ),
        .Q(SOFT_RESET),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.RESTART_AN_REG_reg 
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(p_2_out),
        .Q(RESTART_AN_REG),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_reg 
       (.C(userclk),
        .CE(LOOPBACK_REG),
        .D(DATA_OUT[5]),
        .Q(p_9_in),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR_i_1 
       (.I0(RUNDISP_EN),
        .I1(RXDISPERR_INT),
        .O(RXDISPERR_MOD));
  LUT6 #(
    .INIT(64'h8080808088808080)) 
    FALSE_CARRIER_i_3
       (.I0(RX_IDLE),
        .I1(RXSYNC_STATUS),
        .I2(XMIT_DATA_INT),
        .I3(p_9_in),
        .I4(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I5(AN_ENABLE_INT),
        .O(I_REG_reg));
  LUT2 #(
    .INIT(4'h2)) 
    FALSE_NIT_i_1
       (.I0(RXNOTINTABLE_INT),
        .I1(FALSE_NIT_i_2_n_0),
        .O(FALSE_NIT0));
  LUT6 #(
    .INIT(64'hC33E3EEBFFFEFEEB)) 
    FALSE_NIT_i_2
       (.I0(FALSE_NIT_reg_0),
        .I1(FALSE_NIT_reg[4]),
        .I2(RXDISPERR_MOD),
        .I3(FALSE_NIT_reg[0]),
        .I4(FALSE_NIT_reg[1]),
        .I5(FALSE_NIT_reg_1),
        .O(FALSE_NIT_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFEAFFFFFFC0)) 
    \FSM_onehot_STATE[12]_i_3 
       (.I0(\FSM_onehot_STATE_reg[2] ),
        .I1(RXDISPERR_INT),
        .I2(RUNDISP_EN),
        .I3(RXNOTINTABLE_INT),
        .I4(CGBAD_reg),
        .I5(RXEVEN0_out),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \GEN_INTERRUPT_LOGIC.AN_COMPLETE_REG1_reg 
       (.C(userclk),
        .CE(MDC_RISING_OUT),
        .D(MR_AN_COMPLETE),
        .Q(AN_COMPLETE_REG1),
        .R(out));
  FDSE #(
    .INIT(1'b0)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_12 ),
        .Q(p_6_in),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_13 ),
        .Q(an_interrupt_ch0),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(data_out),
        .Q(MDC_REG3),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG10),
        .Q(MDC_RISING_REG1),
        .R(out));
  quadsgmii_0_TEST_MDIO_INTERFACE_185 \MDIO_IF_ENABLE.MDIO_INTERFACE_1 
       (.AN_COMPLETE_REG1(AN_COMPLETE_REG1),
        .CLEAR_PAGE_REC_COMB(CLEAR_PAGE_REC_COMB),
        .CLEAR_STATUS_REG_COMB(CLEAR_STATUS_REG_COMB),
        .\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg (\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg (\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .\CONFIG_REG_WITH_AN.RESET_REG_reg (SOFT_RESET),
        .LOOPBACK_REG(LOOPBACK_REG),
        .MDC_RISING_OUT(MDC_RISING_OUT),
        .MDC_RISING_REG1(MDC_RISING_REG1),
        .MDC_RISING_REG3_reg_0(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_9 ),
        .MDC_RISING_REG3_reg_1(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_10 ),
        .MDC_RISING_REG3_reg_2(\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_11 ),
        .MDIO_IN__0(MDIO_IN__0),
        .MR_AN_COMPLETE(MR_AN_COMPLETE),
        .MR_LINK_STATUS(MR_LINK_STATUS),
        .MR_PAGE_RX_SET(MR_PAGE_RX_SET),
        .Q({DATA_OUT[14],DATA_OUT[12],DATA_OUT[10],DATA_OUT[5],DATA_OUT[1:0]}),
        .RESTART_AN_REG(RESTART_AN_REG),
        .RUNDISP_EN_REG(RUNDISP_EN_REG),
        .\SHIFT_REG_reg[0]_0 (\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_12 ),
        .\SHIFT_REG_reg[0]_1 (RUNDISP_EN),
        .\SHIFT_REG_reg[10]_0 (\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .\SHIFT_REG_reg[12]_0 (AN_ENABLE_INT),
        .\SHIFT_REG_reg[14]_0 (LOOPBACK),
        .\SHIFT_REG_reg[15]_0 (\SHIFT_REG_reg[15] ),
        .\SHIFT_REG_reg[1]_0 (\MDIO_IF_ENABLE.MDIO_INTERFACE_1_n_13 ),
        .\SHIFT_REG_reg[1]_1 (\QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg_n_0 ),
        .TOGGLE_RX(TOGGLE_RX),
        .an_interrupt_ch0(an_interrupt_ch0),
        .mdio_out_ch0(mdio_out_ch0),
        .mdio_tri_ch0(mdio_tri_ch0),
        .out(out),
        .p_2_out(p_2_out),
        .p_6_in(p_6_in),
        .p_9_in(p_9_in),
        .phyad_ch0(phyad_ch0),
        .reset_done(reset_done),
        .status_vector_ch0(status_vector_ch0),
        .userclk(userclk));
  FDSE #(
    .INIT(1'b0)) 
    MDIO_IN_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDIO_IN_REG2),
        .Q(MDIO_IN_REG3),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    MDIO_IN_REG4_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDIO_IN_REG3),
        .Q(MDIO_IN__0),
        .S(out));
  LUT3 #(
    .INIT(8'hFB)) 
    \MGT_RESET.RESET_INT_PIPE_i_1 
       (.I0(SOFT_RESET),
        .I1(dcm_locked),
        .I2(reset_out),
        .O(p_3_out));
  FDSE #(
    .INIT(1'b1)) 
    \QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg 
       (.C(userclk),
        .CE(RUNDISP_EN_REG),
        .D(DATA_OUT[1]),
        .Q(\QSGMII_SPEC.GT_CHANNEL_VALID_REG_reg_n_0 ),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    \QSGMII_SPEC.RUNDISP_EN_REG_reg 
       (.C(userclk),
        .CE(RUNDISP_EN_REG),
        .D(DATA_OUT[0]),
        .Q(RUNDISP_EN),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    RX_DV_i_2
       (.I0(\CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ),
        .I1(SOP_REG3),
        .I2(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .I3(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .O(RX_DV0));
  LUT6 #(
    .INIT(64'h00000000000000F7)) 
    RX_ER_i_1
       (.I0(RX_ER_reg),
        .I1(RXSYNC_STATUS),
        .I2(RX_DATA_ERROR),
        .I3(\CONFIG_REG_WITH_AN.ISOLATE_REG_reg_0 ),
        .I4(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg_0 ),
        .I5(RX_ER_i_3_n_0),
        .O(RX_ER0));
  LUT6 #(
    .INIT(64'h00BF00BF00BFFFFF)) 
    RX_ER_i_3
       (.I0(AN_ENABLE_INT),
        .I1(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I2(p_9_in),
        .I3(XMIT_DATA_INT),
        .I4(RECEIVE),
        .I5(RXSYNC_STATUS),
        .O(RX_ER_i_3_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAABBBBABBB)) 
    RX_RUDI_INVALID_REG_i_2
       (.I0(RX_INVALID),
        .I1(XMIT_DATA_INT),
        .I2(p_9_in),
        .I3(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I4(AN_ENABLE_INT),
        .I5(RXSYNC_STATUS),
        .O(RX_RUDI_INVALID));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT5 #(
    .INIT(32'hFF400000)) 
    STATUS_VECTOR_0_PRE_i_2
       (.I0(AN_ENABLE_INT),
        .I1(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I2(p_9_in),
        .I3(XMIT_DATA_INT),
        .I4(RXSYNC_STATUS),
        .O(\CONFIG_REG_WITH_AN.AN_ENABLE_REG_reg_0 ));
  quadsgmii_0_TEST_sync_block_186 SYNC_MDC
       (.MDC_REG3(MDC_REG3),
        .MDC_RISING_REG10(MDC_RISING_REG10),
        .data_out(data_out),
        .mdc_ch0(mdc_ch0),
        .userclk(userclk));
  quadsgmii_0_TEST_sync_block_187 SYNC_MDIO_IN
       (.data_out(MDIO_IN_REG2),
        .mdio_in_ch0(mdio_in_ch0),
        .userclk(userclk));
  LUT6 #(
    .INIT(64'h0000000000800000)) 
    S_i_1
       (.I0(S_reg),
        .I1(FALSE_NIT_reg[1]),
        .I2(FALSE_NIT_reg[0]),
        .I3(FALSE_NIT_reg[2]),
        .I4(FALSE_NIT_reg[3]),
        .I5(S2),
        .O(S0));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1 
       (.I0(LOOPBACK),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_reg ),
        .O(RXCLKCORCNT_INT));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \USE_ROCKET_IO.TXDATA[7]_i_1 
       (.I0(\USE_ROCKET_IO.TXDATA_reg[7] ),
        .I1(LOOPBACK),
        .I2(Q),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT4 #(
    .INIT(16'hAA2A)) 
    XMIT_CONFIG_INT_i_2
       (.I0(XMIT_CONFIG_INT),
        .I1(p_9_in),
        .I2(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I3(AN_ENABLE_INT),
        .O(XMIT_CONFIG));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'hAAEA)) 
    XMIT_DATA_INT_i_1
       (.I0(XMIT_DATA_INT),
        .I1(p_9_in),
        .I2(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg_n_0 ),
        .I3(AN_ENABLE_INT),
        .O(XMIT_DATA));
endmodule

(* ORIG_REF_NAME = "MDIO_INTERFACE" *) 
module quadsgmii_0_TEST_MDIO_INTERFACE
   (MDC_RISING_OUT,
    mdio_out_ch3,
    mdio_tri_ch3,
    Q,
    MDC_RISING_REG3_reg_0,
    MDC_RISING_REG3_reg_1,
    MDC_RISING_REG3_reg_2,
    p_2_out,
    LOOPBACK_REG,
    RUNDISP_EN_REG,
    CLEAR_PAGE_REC_COMB,
    CLEAR_STATUS_REG_COMB,
    \SHIFT_REG_reg[0]_0 ,
    \SHIFT_REG_reg[1]_0 ,
    out,
    MDC_RISING_REG1,
    userclk,
    MDIO_IN__0,
    \SHIFT_REG_reg[15]_0 ,
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ,
    \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ,
    \CONFIG_REG_WITH_AN.RESET_REG_reg ,
    MR_AN_COMPLETE,
    \SHIFT_REG_reg[14]_0 ,
    \SHIFT_REG_reg[12]_0 ,
    status_vector_ch3,
    RESTART_AN_REG,
    phyad_ch3,
    MR_PAGE_RX_SET,
    TOGGLE_RX,
    \SHIFT_REG_reg[10]_0 ,
    \SHIFT_REG_reg[1]_1 ,
    an_interrupt_ch3,
    MR_LINK_STATUS,
    reset_done,
    \SHIFT_REG_reg[0]_1 ,
    p_6_in,
    p_9_in,
    AN_COMPLETE_REG1);
  output MDC_RISING_OUT;
  output mdio_out_ch3;
  output mdio_tri_ch3;
  output [5:0]Q;
  output MDC_RISING_REG3_reg_0;
  output MDC_RISING_REG3_reg_1;
  output MDC_RISING_REG3_reg_2;
  output p_2_out;
  output LOOPBACK_REG;
  output RUNDISP_EN_REG;
  output CLEAR_PAGE_REC_COMB;
  output CLEAR_STATUS_REG_COMB;
  output \SHIFT_REG_reg[0]_0 ;
  output \SHIFT_REG_reg[1]_0 ;
  input out;
  input MDC_RISING_REG1;
  input userclk;
  input MDIO_IN__0;
  input [3:0]\SHIFT_REG_reg[15]_0 ;
  input \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ;
  input \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ;
  input \CONFIG_REG_WITH_AN.RESET_REG_reg ;
  input MR_AN_COMPLETE;
  input \SHIFT_REG_reg[14]_0 ;
  input \SHIFT_REG_reg[12]_0 ;
  input [0:0]status_vector_ch3;
  input RESTART_AN_REG;
  input [4:0]phyad_ch3;
  input MR_PAGE_RX_SET;
  input TOGGLE_RX;
  input \SHIFT_REG_reg[10]_0 ;
  input \SHIFT_REG_reg[1]_1 ;
  input an_interrupt_ch3;
  input MR_LINK_STATUS;
  input reset_done;
  input \SHIFT_REG_reg[0]_1 ;
  input [0:0]p_6_in;
  input [0:0]p_9_in;
  input AN_COMPLETE_REG1;

  wire ADDRESS_MATCH;
  wire ADDRESS_MATCH_COMB;
  wire ADDRESS_MATCH_i_1__2_n_0;
  wire ADDRESS_MATCH_i_3__2_n_0;
  wire ADDRESS_MATCH_reg_n_0;
  wire [0:0]ADDR_RD;
  wire [4:0]ADDR_WR;
  wire \ADDR_WR[4]_i_1__2_n_0 ;
  wire AN_COMPLETE_REG1;
  wire AN_INTERRUPT_ENABLE14_out;
  wire \BIT_COUNT[3]_i_3__2_n_0 ;
  wire BIT_COUNT__5;
  wire [3:0]BIT_COUNT_reg;
  wire CLEAR_PAGE_REC_COMB;
  wire CLEAR_STATUS_REG_COMB;
  wire \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ;
  wire \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ;
  wire \CONFIG_REG_WITH_AN.RESET_REG_reg ;
  wire \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__2_n_0 ;
  wire [15:2]DATA_OUT;
  wire \FSM_onehot_STATE[10]_i_1__6_n_0 ;
  wire \FSM_onehot_STATE[1]_i_1__5_n_0 ;
  wire \FSM_onehot_STATE[2]_i_1__5_n_0 ;
  wire \FSM_onehot_STATE[3]_i_1__6_n_0 ;
  wire \FSM_onehot_STATE[4]_i_1__6_n_0 ;
  wire \FSM_onehot_STATE[6]_i_1__6_n_0 ;
  wire \FSM_onehot_STATE[8]_i_1__5_n_0 ;
  wire \FSM_onehot_STATE[9]_i_1__5_n_0 ;
  wire \FSM_onehot_STATE_reg_n_0_[0] ;
  wire \FSM_onehot_STATE_reg_n_0_[10] ;
  wire \FSM_onehot_STATE_reg_n_0_[3] ;
  wire \FSM_onehot_STATE_reg_n_0_[4] ;
  wire \FSM_onehot_STATE_reg_n_0_[5] ;
  wire \FSM_onehot_STATE_reg_n_0_[6] ;
  wire \FSM_onehot_STATE_reg_n_0_[7] ;
  wire \FSM_onehot_STATE_reg_n_0_[8] ;
  wire \FSM_onehot_STATE_reg_n_0_[9] ;
  wire \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__2_n_0 ;
  wire LAST_DATA_SHIFT;
  wire LAST_DATA_SHIFT0;
  wire LOOPBACK_REG;
  wire MDC_RISING_OUT;
  wire MDC_RISING_REG1;
  wire MDC_RISING_REG1_0;
  wire MDC_RISING_REG2;
  wire MDC_RISING_REG3_reg_0;
  wire MDC_RISING_REG3_reg_1;
  wire MDC_RISING_REG3_reg_2;
  wire MDIO_IN__0;
  wire MDIO_OUT_i_1__2_n_0;
  wire MDIO_OUT_i_2__2_n_0;
  wire MDIO_OUT_i_3__2_n_0;
  wire MDIO_OUT_i_4__2_n_0;
  wire MDIO_TRI_i_1__2_n_0;
  wire MR_AN_COMPLETE;
  wire MR_LINK_STATUS;
  wire MR_PAGE_RX_SET;
  wire OPCODE;
  wire \OPCODE_reg_n_0_[0] ;
  wire \OPCODE_reg_n_0_[1] ;
  wire [5:0]Q;
  wire \QSGMII_SPEC.RUNDISP_EN_REG_i_2__2_n_0 ;
  wire RD;
  wire RD_i_1__2_n_0;
  wire RD_i_2__2_n_0;
  wire RESTART_AN_REG;
  wire RUNDISP_EN_REG;
  wire SHIFT_REG0;
  wire \SHIFT_REG[0]_i_1__2_n_0 ;
  wire \SHIFT_REG[0]_i_2__2_n_0 ;
  wire \SHIFT_REG[0]_i_3__2_n_0 ;
  wire \SHIFT_REG[10]_i_1__2_n_0 ;
  wire \SHIFT_REG[10]_i_2__2_n_0 ;
  wire \SHIFT_REG[11]_i_1__2_n_0 ;
  wire \SHIFT_REG[11]_i_2__2_n_0 ;
  wire \SHIFT_REG[12]_i_1__2_n_0 ;
  wire \SHIFT_REG[13]_i_1__2_n_0 ;
  wire \SHIFT_REG[14]_i_1__2_n_0 ;
  wire \SHIFT_REG[14]_i_2__2_n_0 ;
  wire \SHIFT_REG[15]_i_2__2_n_0 ;
  wire \SHIFT_REG[15]_i_3__2_n_0 ;
  wire \SHIFT_REG[15]_i_4__2_n_0 ;
  wire \SHIFT_REG[1]_i_1__2_n_0 ;
  wire \SHIFT_REG[1]_i_2__2_n_0 ;
  wire \SHIFT_REG[1]_i_3__2_n_0 ;
  wire \SHIFT_REG[2]_i_1__2_n_0 ;
  wire \SHIFT_REG[2]_i_2__2_n_0 ;
  wire \SHIFT_REG[3]_i_1__2_n_0 ;
  wire \SHIFT_REG[4]_i_1__2_n_0 ;
  wire \SHIFT_REG[4]_i_2__2_n_0 ;
  wire \SHIFT_REG[5]_i_1__2_n_0 ;
  wire \SHIFT_REG[5]_i_2__2_n_0 ;
  wire \SHIFT_REG[6]_i_1__2_n_0 ;
  wire \SHIFT_REG[7]_i_1__2_n_0 ;
  wire \SHIFT_REG[7]_i_2__2_n_0 ;
  wire \SHIFT_REG[8]_i_1__2_n_0 ;
  wire \SHIFT_REG[8]_i_2__2_n_0 ;
  wire \SHIFT_REG[9]_i_1__2_n_0 ;
  wire \SHIFT_REG_reg[0]_0 ;
  wire \SHIFT_REG_reg[0]_1 ;
  wire \SHIFT_REG_reg[10]_0 ;
  wire \SHIFT_REG_reg[12]_0 ;
  wire \SHIFT_REG_reg[14]_0 ;
  wire [3:0]\SHIFT_REG_reg[15]_0 ;
  wire \SHIFT_REG_reg[1]_0 ;
  wire \SHIFT_REG_reg[1]_1 ;
  wire \SHIFT_REG_reg_n_0_[13] ;
  wire \SHIFT_REG_reg_n_0_[4] ;
  wire \SHIFT_REG_reg_n_0_[6] ;
  wire \SHIFT_REG_reg_n_0_[7] ;
  wire TOGGLE_RX;
  wire WE;
  wire WE_i_1__2_n_0;
  wire an_interrupt_ch3;
  wire mdio_out_ch3;
  wire mdio_tri_ch3;
  wire out;
  wire [3:0]p_0_in;
  wire p_0_in11_in;
  wire p_2_out;
  wire [0:0]p_6_in;
  wire [0:0]p_9_in;
  wire [4:0]phyad_ch3;
  wire reset_done;
  wire [0:0]status_vector_ch3;
  wire userclk;

  LUT4 #(
    .INIT(16'hBF80)) 
    ADDRESS_MATCH_i_1__2
       (.I0(ADDRESS_MATCH_COMB),
        .I1(MDC_RISING_REG1),
        .I2(ADDRESS_MATCH),
        .I3(ADDRESS_MATCH_reg_n_0),
        .O(ADDRESS_MATCH_i_1__2_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAAEBAAAAEB)) 
    ADDRESS_MATCH_i_2__2
       (.I0(\SHIFT_REG[15]_i_3__2_n_0 ),
        .I1(DATA_OUT[2]),
        .I2(phyad_ch3[3]),
        .I3(phyad_ch3[4]),
        .I4(DATA_OUT[3]),
        .I5(ADDRESS_MATCH_i_3__2_n_0),
        .O(ADDRESS_MATCH_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ADDRESS_MATCH_i_3__2
       (.I0(phyad_ch3[0]),
        .I1(ADDR_RD),
        .I2(Q[1]),
        .I3(phyad_ch3[2]),
        .I4(Q[0]),
        .I5(phyad_ch3[1]),
        .O(ADDRESS_MATCH_i_3__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ADDRESS_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ADDRESS_MATCH_i_1__2_n_0),
        .Q(ADDRESS_MATCH_reg_n_0),
        .R(out));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \ADDR_WR[4]_i_1__2 
       (.I0(MDC_RISING_REG1),
        .I1(p_0_in11_in),
        .I2(BIT_COUNT_reg[3]),
        .I3(BIT_COUNT_reg[0]),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[2]),
        .O(\ADDR_WR[4]_i_1__2_n_0 ));
  FDRE \ADDR_WR_reg[0] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__2_n_0 ),
        .D(ADDR_RD),
        .Q(ADDR_WR[0]),
        .R(out));
  FDRE \ADDR_WR_reg[1] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__2_n_0 ),
        .D(Q[0]),
        .Q(ADDR_WR[1]),
        .R(out));
  FDRE \ADDR_WR_reg[2] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__2_n_0 ),
        .D(Q[1]),
        .Q(ADDR_WR[2]),
        .R(out));
  FDRE \ADDR_WR_reg[3] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__2_n_0 ),
        .D(DATA_OUT[2]),
        .Q(ADDR_WR[3]),
        .R(out));
  FDRE \ADDR_WR_reg[4] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__2_n_0 ),
        .D(DATA_OUT[3]),
        .Q(ADDR_WR[4]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT5 #(
    .INIT(32'hFFFF0015)) 
    \BIT_COUNT[0]_i_1__2 
       (.I0(BIT_COUNT_reg[0]),
        .I1(MDIO_OUT_i_2__2_n_0),
        .I2(ADDRESS_MATCH),
        .I3(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(p_0_in[0]));
  LUT6 #(
    .INIT(64'h0111000000000111)) 
    \BIT_COUNT[1]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I2(ADDRESS_MATCH),
        .I3(MDIO_OUT_i_2__2_n_0),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[0]),
        .O(p_0_in[1]));
  LUT4 #(
    .INIT(16'hFD57)) 
    \BIT_COUNT[2]_i_1__2 
       (.I0(\BIT_COUNT[3]_i_3__2_n_0 ),
        .I1(BIT_COUNT_reg[0]),
        .I2(BIT_COUNT_reg[1]),
        .I3(BIT_COUNT_reg[2]),
        .O(p_0_in[2]));
  LUT5 #(
    .INIT(32'hAAAAAAA2)) 
    \BIT_COUNT[3]_i_1__2 
       (.I0(MDC_RISING_REG1),
        .I1(MDIO_OUT_i_2__2_n_0),
        .I2(ADDRESS_MATCH),
        .I3(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(BIT_COUNT__5));
  LUT6 #(
    .INIT(64'hEEEEEEEBAAAAAAAA)) 
    \BIT_COUNT[3]_i_2__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(\BIT_COUNT[3]_i_3__2_n_0 ),
        .O(p_0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT4 #(
    .INIT(16'h0007)) 
    \BIT_COUNT[3]_i_3__2 
       (.I0(MDIO_OUT_i_2__2_n_0),
        .I1(ADDRESS_MATCH),
        .I2(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(\BIT_COUNT[3]_i_3__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[0] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[0]),
        .Q(BIT_COUNT_reg[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[1] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[1]),
        .Q(BIT_COUNT_reg[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[2] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[2]),
        .Q(BIT_COUNT_reg[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[3] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[3]),
        .Q(BIT_COUNT_reg[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000100000000000)) 
    CLEAR_PAGE_RECEIVED_i_1__2
       (.I0(ADDR_WR[3]),
        .I1(ADDR_WR[4]),
        .I2(RD),
        .I3(ADDR_WR[1]),
        .I4(ADDR_WR[0]),
        .I5(ADDR_WR[2]),
        .O(CLEAR_PAGE_REC_COMB));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    CLEAR_STATUS_REG_i_1__2
       (.I0(ADDR_WR[3]),
        .I1(ADDR_WR[4]),
        .I2(RD),
        .I3(ADDR_WR[0]),
        .I4(ADDR_WR[2]),
        .I5(ADDR_WR[1]),
        .O(CLEAR_STATUS_REG_COMB));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT5 #(
    .INIT(32'h00FD0020)) 
    \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_i_1__2 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__2_n_0 ),
        .I2(DATA_OUT[8]),
        .I3(out),
        .I4(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ),
        .O(MDC_RISING_REG3_reg_1));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT4 #(
    .INIT(16'hFF20)) 
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_i_1__2 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__2_n_0 ),
        .I2(DATA_OUT[11]),
        .I3(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ),
        .O(MDC_RISING_REG3_reg_0));
  LUT4 #(
    .INIT(16'hFF20)) 
    \CONFIG_REG_WITH_AN.RESET_REG_i_1__2 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__2_n_0 ),
        .I2(DATA_OUT[15]),
        .I3(\CONFIG_REG_WITH_AN.RESET_REG_reg ),
        .O(MDC_RISING_REG3_reg_2));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \CONFIG_REG_WITH_AN.RESTART_AN_REG_i_1__2 
       (.I0(DATA_OUT[9]),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__2_n_0 ),
        .O(p_2_out));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_1__2 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__2_n_0 ),
        .O(LOOPBACK_REG));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__2 
       (.I0(ADDR_WR[4]),
        .I1(ADDR_WR[3]),
        .I2(ADDR_WR[0]),
        .I3(WE),
        .I4(ADDR_WR[2]),
        .I5(ADDR_WR[1]),
        .O(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT5 #(
    .INIT(32'h00010000)) 
    \FSM_onehot_STATE[10]_i_1__6 
       (.I0(BIT_COUNT_reg[2]),
        .I1(BIT_COUNT_reg[1]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[3]),
        .I4(p_0_in11_in),
        .O(\FSM_onehot_STATE[10]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAAAAA)) 
    \FSM_onehot_STATE[1]_i_1__5 
       (.I0(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(ADDRESS_MATCH),
        .O(\FSM_onehot_STATE[1]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFE00000002)) 
    \FSM_onehot_STATE[2]_i_1__5 
       (.I0(ADDRESS_MATCH),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(p_0_in11_in),
        .O(\FSM_onehot_STATE[2]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_STATE[3]_i_1__6 
       (.I0(ADDR_RD),
        .I1(\FSM_onehot_STATE_reg_n_0_[6] ),
        .O(\FSM_onehot_STATE[3]_i_1__6_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \FSM_onehot_STATE[4]_i_1__6 
       (.I0(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I2(ADDR_RD),
        .O(\FSM_onehot_STATE[4]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \FSM_onehot_STATE[6]_i_1__6 
       (.I0(ADDR_RD),
        .I1(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[6] ),
        .O(\FSM_onehot_STATE[6]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAAAAA)) 
    \FSM_onehot_STATE[8]_i_1__5 
       (.I0(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[8]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \FSM_onehot_STATE[9]_i_1__5 
       (.I0(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I1(BIT_COUNT_reg[2]),
        .I2(BIT_COUNT_reg[1]),
        .I3(BIT_COUNT_reg[0]),
        .I4(BIT_COUNT_reg[3]),
        .O(\FSM_onehot_STATE[9]_i_1__5_n_0 ));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[0] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE_reg_n_0_[3] ),
        .Q(\FSM_onehot_STATE_reg_n_0_[0] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[10] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[10] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[1] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[1]_i_1__5_n_0 ),
        .Q(ADDRESS_MATCH),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[2] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[2]_i_1__5_n_0 ),
        .Q(p_0_in11_in),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[3] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[3]_i_1__6_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[3] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_STATE_reg[4] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[4]_i_1__6_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[4] ),
        .S(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[5] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE_reg_n_0_[9] ),
        .Q(\FSM_onehot_STATE_reg_n_0_[5] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[6] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[6]_i_1__6_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[6] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[7] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE_reg_n_0_[10] ),
        .Q(\FSM_onehot_STATE_reg_n_0_[7] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[8] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[8]_i_1__5_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[8] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[9] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[9]_i_1__5_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[9] ),
        .R(out));
  LUT6 #(
    .INIT(64'hFBFFFFFF08000000)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_1__2 
       (.I0(Q[0]),
        .I1(\GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__2_n_0 ),
        .I2(ADDR_WR[3]),
        .I3(ADDR_WR[4]),
        .I4(MDC_RISING_OUT),
        .I5(p_6_in),
        .O(\SHIFT_REG_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__2 
       (.I0(ADDR_WR[1]),
        .I1(ADDR_WR[2]),
        .I2(WE),
        .I3(ADDR_WR[0]),
        .O(\GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hB0B0F0B00000F000)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_INT_i_1__2 
       (.I0(Q[1]),
        .I1(AN_INTERRUPT_ENABLE14_out),
        .I2(p_6_in),
        .I3(MR_AN_COMPLETE),
        .I4(AN_COMPLETE_REG1),
        .I5(an_interrupt_ch3),
        .O(\SHIFT_REG_reg[1]_0 ));
  LUT4 #(
    .INIT(16'h2000)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_INT_i_2__2 
       (.I0(\GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__2_n_0 ),
        .I1(ADDR_WR[3]),
        .I2(ADDR_WR[4]),
        .I3(MDC_RISING_OUT),
        .O(AN_INTERRUPT_ENABLE14_out));
  LUT2 #(
    .INIT(4'h8)) 
    LAST_DATA_SHIFT_i_1__2
       (.I0(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I1(MDC_RISING_REG1_0),
        .O(LAST_DATA_SHIFT0));
  FDRE #(
    .INIT(1'b0)) 
    LAST_DATA_SHIFT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LAST_DATA_SHIFT0),
        .Q(LAST_DATA_SHIFT),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG1),
        .Q(MDC_RISING_REG1_0),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG1_0),
        .Q(MDC_RISING_REG2),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG2),
        .Q(MDC_RISING_OUT),
        .R(out));
  FDSE #(
    .INIT(1'b0)) 
    MDIO_IN_REG_reg
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(MDIO_IN__0),
        .Q(ADDR_RD),
        .S(out));
  LUT5 #(
    .INIT(32'hDDFDFFFC)) 
    MDIO_OUT_i_1__2
       (.I0(MDIO_OUT_i_2__2_n_0),
        .I1(MDIO_OUT_i_3__2_n_0),
        .I2(DATA_OUT[15]),
        .I3(MDIO_OUT_i_4__2_n_0),
        .I4(p_0_in11_in),
        .O(MDIO_OUT_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    MDIO_OUT_i_2__2
       (.I0(BIT_COUNT_reg[3]),
        .I1(BIT_COUNT_reg[0]),
        .I2(BIT_COUNT_reg[1]),
        .I3(BIT_COUNT_reg[2]),
        .O(MDIO_OUT_i_2__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT3 #(
    .INIT(8'hBF)) 
    MDIO_OUT_i_3__2
       (.I0(\OPCODE_reg_n_0_[0] ),
        .I1(\OPCODE_reg_n_0_[1] ),
        .I2(ADDRESS_MATCH_reg_n_0),
        .O(MDIO_OUT_i_3__2_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    MDIO_OUT_i_4__2
       (.I0(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(MDIO_OUT_i_4__2_n_0));
  FDSE MDIO_OUT_reg
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(MDIO_OUT_i_1__2_n_0),
        .Q(mdio_out_ch3),
        .S(out));
  LUT6 #(
    .INIT(64'hFFFFFFFF55550003)) 
    MDIO_TRI_i_1__2
       (.I0(MDIO_OUT_i_2__2_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I4(p_0_in11_in),
        .I5(MDIO_OUT_i_3__2_n_0),
        .O(MDIO_TRI_i_1__2_n_0));
  FDSE MDIO_TRI_reg
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(MDIO_TRI_i_1__2_n_0),
        .Q(mdio_tri_ch3),
        .S(out));
  LUT6 #(
    .INIT(64'h0000000000002000)) 
    \OPCODE[1]_i_1__2 
       (.I0(BIT_COUNT_reg[2]),
        .I1(BIT_COUNT_reg[3]),
        .I2(MDC_RISING_REG1),
        .I3(ADDRESS_MATCH),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[0]),
        .O(OPCODE));
  FDRE #(
    .INIT(1'b0)) 
    \OPCODE_reg[0] 
       (.C(userclk),
        .CE(OPCODE),
        .D(Q[0]),
        .Q(\OPCODE_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \OPCODE_reg[1] 
       (.C(userclk),
        .CE(OPCODE),
        .D(Q[1]),
        .Q(\OPCODE_reg_n_0_[1] ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00004000)) 
    \QSGMII_SPEC.RUNDISP_EN_REG_i_1__2 
       (.I0(ADDR_WR[3]),
        .I1(ADDR_WR[4]),
        .I2(MDC_RISING_OUT),
        .I3(ADDR_WR[1]),
        .I4(\QSGMII_SPEC.RUNDISP_EN_REG_i_2__2_n_0 ),
        .O(RUNDISP_EN_REG));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT3 #(
    .INIT(8'hFB)) 
    \QSGMII_SPEC.RUNDISP_EN_REG_i_2__2 
       (.I0(ADDR_WR[0]),
        .I1(WE),
        .I2(ADDR_WR[2]),
        .O(\QSGMII_SPEC.RUNDISP_EN_REG_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000004FF0400)) 
    RD_i_1__2
       (.I0(RD_i_2__2_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I2(MDIO_OUT_i_3__2_n_0),
        .I3(MDC_RISING_REG2),
        .I4(RD),
        .I5(out),
        .O(RD_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    RD_i_2__2
       (.I0(ADDRESS_MATCH_reg_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I2(\OPCODE_reg_n_0_[0] ),
        .I3(\OPCODE_reg_n_0_[1] ),
        .O(RD_i_2__2_n_0));
  FDRE RD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RD_i_1__2_n_0),
        .Q(RD),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h3808FFFF38080000)) 
    \SHIFT_REG[0]_i_1__2 
       (.I0(\SHIFT_REG[0]_i_2__2_n_0 ),
        .I1(Q[1]),
        .I2(DATA_OUT[3]),
        .I3(\SHIFT_REG[0]_i_3__2_n_0 ),
        .I4(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I5(ADDR_RD),
        .O(\SHIFT_REG[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \SHIFT_REG[0]_i_2__2 
       (.I0(Q[0]),
        .I1(DATA_OUT[2]),
        .O(\SHIFT_REG[0]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT5 #(
    .INIT(32'h00000AFC)) 
    \SHIFT_REG[0]_i_3__2 
       (.I0(\SHIFT_REG_reg[0]_1 ),
        .I1(p_6_in),
        .I2(ADDR_RD),
        .I3(Q[0]),
        .I4(DATA_OUT[2]),
        .O(\SHIFT_REG[0]_i_3__2_n_0 ));
  LUT5 #(
    .INIT(32'h01FF0100)) 
    \SHIFT_REG[10]_i_1__2 
       (.I0(DATA_OUT[2]),
        .I1(DATA_OUT[3]),
        .I2(\SHIFT_REG[10]_i_2__2_n_0 ),
        .I3(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I4(DATA_OUT[9]),
        .O(\SHIFT_REG[10]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFCF33FFCCFFDD)) 
    \SHIFT_REG[10]_i_2__2 
       (.I0(\SHIFT_REG_reg[10]_0 ),
        .I1(Q[0]),
        .I2(\SHIFT_REG_reg[15]_0 [0]),
        .I3(Q[1]),
        .I4(DATA_OUT[2]),
        .I5(ADDR_RD),
        .O(\SHIFT_REG[10]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h02FF0200)) 
    \SHIFT_REG[11]_i_1__2 
       (.I0(\SHIFT_REG[11]_i_2__2_n_0 ),
        .I1(DATA_OUT[2]),
        .I2(DATA_OUT[3]),
        .I3(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I4(Q[3]),
        .O(\SHIFT_REG[11]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h00000F000A0000FC)) 
    \SHIFT_REG[11]_i_2__2 
       (.I0(TOGGLE_RX),
        .I1(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ),
        .I2(DATA_OUT[2]),
        .I3(ADDR_RD),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(\SHIFT_REG[11]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hF444FFFFF4440000)) 
    \SHIFT_REG[12]_i_1__2 
       (.I0(\SHIFT_REG[14]_i_2__2_n_0 ),
        .I1(\SHIFT_REG_reg[15]_0 [1]),
        .I2(\SHIFT_REG_reg[12]_0 ),
        .I3(\SHIFT_REG[15]_i_3__2_n_0 ),
        .I4(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I5(DATA_OUT[11]),
        .O(\SHIFT_REG[12]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA2)) 
    \SHIFT_REG[13]_i_1__2 
       (.I0(Q[4]),
        .I1(p_0_in11_in),
        .I2(BIT_COUNT_reg[3]),
        .I3(BIT_COUNT_reg[0]),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[2]),
        .O(\SHIFT_REG[13]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hF444FFFFF4440000)) 
    \SHIFT_REG[14]_i_1__2 
       (.I0(\SHIFT_REG[14]_i_2__2_n_0 ),
        .I1(\SHIFT_REG_reg[15]_0 [2]),
        .I2(\SHIFT_REG[15]_i_3__2_n_0 ),
        .I3(\SHIFT_REG_reg[14]_0 ),
        .I4(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I5(\SHIFT_REG_reg_n_0_[13] ),
        .O(\SHIFT_REG[14]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT5 #(
    .INIT(32'hFFFFFBFF)) 
    \SHIFT_REG[14]_i_2__2 
       (.I0(DATA_OUT[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(ADDR_RD),
        .I4(DATA_OUT[2]),
        .O(\SHIFT_REG[14]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \SHIFT_REG[15]_i_1__2 
       (.I0(MDC_RISING_REG1),
        .I1(LAST_DATA_SHIFT),
        .O(SHIFT_REG0));
  LUT5 #(
    .INIT(32'hF8FFF800)) 
    \SHIFT_REG[15]_i_2__2 
       (.I0(\SHIFT_REG[15]_i_3__2_n_0 ),
        .I1(\CONFIG_REG_WITH_AN.RESET_REG_reg ),
        .I2(\SHIFT_REG[15]_i_4__2_n_0 ),
        .I3(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I4(Q[5]),
        .O(\SHIFT_REG[15]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \SHIFT_REG[15]_i_3__2 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(ADDR_RD),
        .I3(DATA_OUT[2]),
        .I4(DATA_OUT[3]),
        .O(\SHIFT_REG[15]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h0900080000000000)) 
    \SHIFT_REG[15]_i_4__2 
       (.I0(DATA_OUT[2]),
        .I1(Q[0]),
        .I2(DATA_OUT[3]),
        .I3(Q[1]),
        .I4(\SHIFT_REG_reg[15]_0 [3]),
        .I5(ADDR_RD),
        .O(\SHIFT_REG[15]_i_4__2_n_0 ));
  LUT5 #(
    .INIT(32'h0EFF0E00)) 
    \SHIFT_REG[1]_i_1__2 
       (.I0(\SHIFT_REG[1]_i_2__2_n_0 ),
        .I1(\SHIFT_REG[1]_i_3__2_n_0 ),
        .I2(ADDR_RD),
        .I3(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I4(Q[0]),
        .O(\SHIFT_REG[1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h000000000D080000)) 
    \SHIFT_REG[1]_i_2__2 
       (.I0(Q[0]),
        .I1(\SHIFT_REG_reg[1]_1 ),
        .I2(Q[1]),
        .I3(an_interrupt_ch3),
        .I4(DATA_OUT[3]),
        .I5(DATA_OUT[2]),
        .O(\SHIFT_REG[1]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT5 #(
    .INIT(32'h00000080)) 
    \SHIFT_REG[1]_i_3__2 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(MR_PAGE_RX_SET),
        .I3(DATA_OUT[3]),
        .I4(DATA_OUT[2]),
        .O(\SHIFT_REG[1]_i_3__2_n_0 ));
  LUT4 #(
    .INIT(16'h1F10)) 
    \SHIFT_REG[2]_i_1__2 
       (.I0(DATA_OUT[3]),
        .I1(\SHIFT_REG[2]_i_2__2_n_0 ),
        .I2(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I3(Q[1]),
        .O(\SHIFT_REG[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF00FFDFFFFF)) 
    \SHIFT_REG[2]_i_2__2 
       (.I0(MR_LINK_STATUS),
        .I1(Q[1]),
        .I2(reset_done),
        .I3(DATA_OUT[2]),
        .I4(ADDR_RD),
        .I5(Q[0]),
        .O(\SHIFT_REG[2]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000FFFF00100000)) 
    \SHIFT_REG[3]_i_1__2 
       (.I0(DATA_OUT[3]),
        .I1(Q[1]),
        .I2(ADDR_RD),
        .I3(Q[0]),
        .I4(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I5(DATA_OUT[2]),
        .O(\SHIFT_REG[3]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000FFFF00D50000)) 
    \SHIFT_REG[4]_i_1__2 
       (.I0(\SHIFT_REG[4]_i_2__2_n_0 ),
        .I1(status_vector_ch3),
        .I2(\SHIFT_REG[7]_i_2__2_n_0 ),
        .I3(Q[1]),
        .I4(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I5(DATA_OUT[3]),
        .O(\SHIFT_REG[4]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \SHIFT_REG[4]_i_2__2 
       (.I0(DATA_OUT[2]),
        .I1(ADDR_RD),
        .I2(Q[0]),
        .O(\SHIFT_REG[4]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFF000F088F000F0)) 
    \SHIFT_REG[5]_i_1__2 
       (.I0(\SHIFT_REG[7]_i_2__2_n_0 ),
        .I1(MR_AN_COMPLETE),
        .I2(\SHIFT_REG_reg_n_0_[4] ),
        .I3(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I4(\SHIFT_REG[8]_i_2__2_n_0 ),
        .I5(\SHIFT_REG[5]_i_2__2_n_0 ),
        .O(\SHIFT_REG[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT4 #(
    .INIT(16'h1110)) 
    \SHIFT_REG[5]_i_2__2 
       (.I0(DATA_OUT[2]),
        .I1(ADDR_RD),
        .I2(p_9_in),
        .I3(Q[0]),
        .O(\SHIFT_REG[5]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h020AFFFF020A0000)) 
    \SHIFT_REG[6]_i_1__2 
       (.I0(\SHIFT_REG[8]_i_2__2_n_0 ),
        .I1(Q[0]),
        .I2(DATA_OUT[2]),
        .I3(ADDR_RD),
        .I4(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I5(Q[2]),
        .O(\SHIFT_REG[6]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT5 #(
    .INIT(32'h222E2222)) 
    \SHIFT_REG[7]_i_1__2 
       (.I0(\SHIFT_REG_reg_n_0_[6] ),
        .I1(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I2(DATA_OUT[3]),
        .I3(Q[1]),
        .I4(\SHIFT_REG[7]_i_2__2_n_0 ),
        .O(\SHIFT_REG[7]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \SHIFT_REG[7]_i_2__2 
       (.I0(DATA_OUT[2]),
        .I1(ADDR_RD),
        .I2(Q[0]),
        .O(\SHIFT_REG[7]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h020AFFFF020A0000)) 
    \SHIFT_REG[8]_i_1__2 
       (.I0(\SHIFT_REG[8]_i_2__2_n_0 ),
        .I1(Q[0]),
        .I2(DATA_OUT[2]),
        .I3(ADDR_RD),
        .I4(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I5(\SHIFT_REG_reg_n_0_[7] ),
        .O(\SHIFT_REG[8]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \SHIFT_REG[8]_i_2__2 
       (.I0(Q[1]),
        .I1(DATA_OUT[3]),
        .O(\SHIFT_REG[8]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'h8F80)) 
    \SHIFT_REG[9]_i_1__2 
       (.I0(RESTART_AN_REG),
        .I1(\SHIFT_REG[15]_i_3__2_n_0 ),
        .I2(\FSM_onehot_STATE[10]_i_1__6_n_0 ),
        .I3(DATA_OUT[8]),
        .O(\SHIFT_REG[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[0] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[10] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[10]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[11] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[11]_i_1__2_n_0 ),
        .Q(DATA_OUT[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[12] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[12]_i_1__2_n_0 ),
        .Q(Q[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[13] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[13]_i_1__2_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[13] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[14] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[14]_i_1__2_n_0 ),
        .Q(Q[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[15] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[15]_i_2__2_n_0 ),
        .Q(DATA_OUT[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[1] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[2] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[2]_i_1__2_n_0 ),
        .Q(DATA_OUT[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[3] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[3]_i_1__2_n_0 ),
        .Q(DATA_OUT[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[4] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[4]_i_1__2_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[5] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[5]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[6] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[6]_i_1__2_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[7] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[7]_i_1__2_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[8] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[8]_i_1__2_n_0 ),
        .Q(DATA_OUT[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[9] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[9]_i_1__2_n_0 ),
        .Q(DATA_OUT[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0080FFFF00800000)) 
    WE_i_1__2
       (.I0(ADDRESS_MATCH_reg_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I2(\OPCODE_reg_n_0_[0] ),
        .I3(\OPCODE_reg_n_0_[1] ),
        .I4(MDC_RISING_REG2),
        .I5(WE),
        .O(WE_i_1__2_n_0));
  FDRE WE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(WE_i_1__2_n_0),
        .Q(WE),
        .R(out));
endmodule

(* ORIG_REF_NAME = "MDIO_INTERFACE" *) 
module quadsgmii_0_TEST_MDIO_INTERFACE_161
   (MDC_RISING_OUT,
    mdio_out_ch2,
    mdio_tri_ch2,
    Q,
    MDC_RISING_REG3_reg_0,
    MDC_RISING_REG3_reg_1,
    MDC_RISING_REG3_reg_2,
    p_2_out,
    LOOPBACK_REG,
    RUNDISP_EN_REG,
    CLEAR_PAGE_REC_COMB,
    CLEAR_STATUS_REG_COMB,
    \SHIFT_REG_reg[0]_0 ,
    \SHIFT_REG_reg[1]_0 ,
    out,
    MDC_RISING_REG1,
    userclk,
    MDIO_IN__0,
    \SHIFT_REG_reg[15]_0 ,
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ,
    \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ,
    \CONFIG_REG_WITH_AN.RESET_REG_reg ,
    MR_AN_COMPLETE,
    \SHIFT_REG_reg[14]_0 ,
    \SHIFT_REG_reg[12]_0 ,
    status_vector_ch2,
    RESTART_AN_REG,
    phyad_ch2,
    MR_PAGE_RX_SET,
    TOGGLE_RX,
    \SHIFT_REG_reg[10]_0 ,
    \SHIFT_REG_reg[1]_1 ,
    an_interrupt_ch2,
    MR_LINK_STATUS,
    reset_done,
    \SHIFT_REG_reg[0]_1 ,
    p_6_in,
    p_9_in,
    AN_COMPLETE_REG1);
  output MDC_RISING_OUT;
  output mdio_out_ch2;
  output mdio_tri_ch2;
  output [5:0]Q;
  output MDC_RISING_REG3_reg_0;
  output MDC_RISING_REG3_reg_1;
  output MDC_RISING_REG3_reg_2;
  output p_2_out;
  output LOOPBACK_REG;
  output RUNDISP_EN_REG;
  output CLEAR_PAGE_REC_COMB;
  output CLEAR_STATUS_REG_COMB;
  output \SHIFT_REG_reg[0]_0 ;
  output \SHIFT_REG_reg[1]_0 ;
  input out;
  input MDC_RISING_REG1;
  input userclk;
  input MDIO_IN__0;
  input [3:0]\SHIFT_REG_reg[15]_0 ;
  input \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ;
  input \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ;
  input \CONFIG_REG_WITH_AN.RESET_REG_reg ;
  input MR_AN_COMPLETE;
  input \SHIFT_REG_reg[14]_0 ;
  input \SHIFT_REG_reg[12]_0 ;
  input [0:0]status_vector_ch2;
  input RESTART_AN_REG;
  input [4:0]phyad_ch2;
  input MR_PAGE_RX_SET;
  input TOGGLE_RX;
  input \SHIFT_REG_reg[10]_0 ;
  input \SHIFT_REG_reg[1]_1 ;
  input an_interrupt_ch2;
  input MR_LINK_STATUS;
  input reset_done;
  input \SHIFT_REG_reg[0]_1 ;
  input [0:0]p_6_in;
  input [0:0]p_9_in;
  input AN_COMPLETE_REG1;

  wire ADDRESS_MATCH;
  wire ADDRESS_MATCH_COMB;
  wire ADDRESS_MATCH_i_1__1_n_0;
  wire ADDRESS_MATCH_i_3__1_n_0;
  wire ADDRESS_MATCH_reg_n_0;
  wire [0:0]ADDR_RD;
  wire [4:0]ADDR_WR;
  wire \ADDR_WR[4]_i_1__1_n_0 ;
  wire AN_COMPLETE_REG1;
  wire AN_INTERRUPT_ENABLE14_out;
  wire \BIT_COUNT[3]_i_3__1_n_0 ;
  wire BIT_COUNT__5;
  wire [3:0]BIT_COUNT_reg;
  wire CLEAR_PAGE_REC_COMB;
  wire CLEAR_STATUS_REG_COMB;
  wire \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ;
  wire \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ;
  wire \CONFIG_REG_WITH_AN.RESET_REG_reg ;
  wire \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__1_n_0 ;
  wire [15:2]DATA_OUT;
  wire \FSM_onehot_STATE[10]_i_1__5_n_0 ;
  wire \FSM_onehot_STATE[1]_i_1__3_n_0 ;
  wire \FSM_onehot_STATE[2]_i_1__3_n_0 ;
  wire \FSM_onehot_STATE[3]_i_1__4_n_0 ;
  wire \FSM_onehot_STATE[4]_i_1__4_n_0 ;
  wire \FSM_onehot_STATE[6]_i_1__5_n_0 ;
  wire \FSM_onehot_STATE[8]_i_1__3_n_0 ;
  wire \FSM_onehot_STATE[9]_i_1__3_n_0 ;
  wire \FSM_onehot_STATE_reg_n_0_[0] ;
  wire \FSM_onehot_STATE_reg_n_0_[10] ;
  wire \FSM_onehot_STATE_reg_n_0_[3] ;
  wire \FSM_onehot_STATE_reg_n_0_[4] ;
  wire \FSM_onehot_STATE_reg_n_0_[5] ;
  wire \FSM_onehot_STATE_reg_n_0_[6] ;
  wire \FSM_onehot_STATE_reg_n_0_[7] ;
  wire \FSM_onehot_STATE_reg_n_0_[8] ;
  wire \FSM_onehot_STATE_reg_n_0_[9] ;
  wire \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__1_n_0 ;
  wire LAST_DATA_SHIFT;
  wire LAST_DATA_SHIFT0;
  wire LOOPBACK_REG;
  wire MDC_RISING_OUT;
  wire MDC_RISING_REG1;
  wire MDC_RISING_REG1_0;
  wire MDC_RISING_REG2;
  wire MDC_RISING_REG3_reg_0;
  wire MDC_RISING_REG3_reg_1;
  wire MDC_RISING_REG3_reg_2;
  wire MDIO_IN__0;
  wire MDIO_OUT_i_1__1_n_0;
  wire MDIO_OUT_i_2__1_n_0;
  wire MDIO_OUT_i_3__1_n_0;
  wire MDIO_OUT_i_4__1_n_0;
  wire MDIO_TRI_i_1__1_n_0;
  wire MR_AN_COMPLETE;
  wire MR_LINK_STATUS;
  wire MR_PAGE_RX_SET;
  wire OPCODE;
  wire \OPCODE_reg_n_0_[0] ;
  wire \OPCODE_reg_n_0_[1] ;
  wire [5:0]Q;
  wire \QSGMII_SPEC.RUNDISP_EN_REG_i_2__1_n_0 ;
  wire RD;
  wire RD_i_1__1_n_0;
  wire RD_i_2__1_n_0;
  wire RESTART_AN_REG;
  wire RUNDISP_EN_REG;
  wire SHIFT_REG0;
  wire \SHIFT_REG[0]_i_1__1_n_0 ;
  wire \SHIFT_REG[0]_i_2__1_n_0 ;
  wire \SHIFT_REG[0]_i_3__1_n_0 ;
  wire \SHIFT_REG[10]_i_1__1_n_0 ;
  wire \SHIFT_REG[10]_i_2__1_n_0 ;
  wire \SHIFT_REG[11]_i_1__1_n_0 ;
  wire \SHIFT_REG[11]_i_2__1_n_0 ;
  wire \SHIFT_REG[12]_i_1__1_n_0 ;
  wire \SHIFT_REG[13]_i_1__1_n_0 ;
  wire \SHIFT_REG[14]_i_1__1_n_0 ;
  wire \SHIFT_REG[14]_i_2__1_n_0 ;
  wire \SHIFT_REG[15]_i_2__1_n_0 ;
  wire \SHIFT_REG[15]_i_3__1_n_0 ;
  wire \SHIFT_REG[15]_i_4__1_n_0 ;
  wire \SHIFT_REG[1]_i_1__1_n_0 ;
  wire \SHIFT_REG[1]_i_2__1_n_0 ;
  wire \SHIFT_REG[1]_i_3__1_n_0 ;
  wire \SHIFT_REG[2]_i_1__1_n_0 ;
  wire \SHIFT_REG[2]_i_2__1_n_0 ;
  wire \SHIFT_REG[3]_i_1__1_n_0 ;
  wire \SHIFT_REG[4]_i_1__1_n_0 ;
  wire \SHIFT_REG[4]_i_2__1_n_0 ;
  wire \SHIFT_REG[5]_i_1__1_n_0 ;
  wire \SHIFT_REG[5]_i_2__1_n_0 ;
  wire \SHIFT_REG[6]_i_1__1_n_0 ;
  wire \SHIFT_REG[7]_i_1__1_n_0 ;
  wire \SHIFT_REG[7]_i_2__1_n_0 ;
  wire \SHIFT_REG[8]_i_1__1_n_0 ;
  wire \SHIFT_REG[8]_i_2__1_n_0 ;
  wire \SHIFT_REG[9]_i_1__1_n_0 ;
  wire \SHIFT_REG_reg[0]_0 ;
  wire \SHIFT_REG_reg[0]_1 ;
  wire \SHIFT_REG_reg[10]_0 ;
  wire \SHIFT_REG_reg[12]_0 ;
  wire \SHIFT_REG_reg[14]_0 ;
  wire [3:0]\SHIFT_REG_reg[15]_0 ;
  wire \SHIFT_REG_reg[1]_0 ;
  wire \SHIFT_REG_reg[1]_1 ;
  wire \SHIFT_REG_reg_n_0_[13] ;
  wire \SHIFT_REG_reg_n_0_[4] ;
  wire \SHIFT_REG_reg_n_0_[6] ;
  wire \SHIFT_REG_reg_n_0_[7] ;
  wire TOGGLE_RX;
  wire WE;
  wire WE_i_1__1_n_0;
  wire an_interrupt_ch2;
  wire mdio_out_ch2;
  wire mdio_tri_ch2;
  wire out;
  wire [3:0]p_0_in;
  wire p_0_in11_in;
  wire p_2_out;
  wire [0:0]p_6_in;
  wire [0:0]p_9_in;
  wire [4:0]phyad_ch2;
  wire reset_done;
  wire [0:0]status_vector_ch2;
  wire userclk;

  LUT4 #(
    .INIT(16'hBF80)) 
    ADDRESS_MATCH_i_1__1
       (.I0(ADDRESS_MATCH_COMB),
        .I1(MDC_RISING_REG1),
        .I2(ADDRESS_MATCH),
        .I3(ADDRESS_MATCH_reg_n_0),
        .O(ADDRESS_MATCH_i_1__1_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAAEBAAAAEB)) 
    ADDRESS_MATCH_i_2__1
       (.I0(\SHIFT_REG[15]_i_3__1_n_0 ),
        .I1(DATA_OUT[2]),
        .I2(phyad_ch2[3]),
        .I3(phyad_ch2[4]),
        .I4(DATA_OUT[3]),
        .I5(ADDRESS_MATCH_i_3__1_n_0),
        .O(ADDRESS_MATCH_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ADDRESS_MATCH_i_3__1
       (.I0(phyad_ch2[0]),
        .I1(ADDR_RD),
        .I2(Q[1]),
        .I3(phyad_ch2[2]),
        .I4(Q[0]),
        .I5(phyad_ch2[1]),
        .O(ADDRESS_MATCH_i_3__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ADDRESS_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ADDRESS_MATCH_i_1__1_n_0),
        .Q(ADDRESS_MATCH_reg_n_0),
        .R(out));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \ADDR_WR[4]_i_1__1 
       (.I0(MDC_RISING_REG1),
        .I1(p_0_in11_in),
        .I2(BIT_COUNT_reg[3]),
        .I3(BIT_COUNT_reg[0]),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[2]),
        .O(\ADDR_WR[4]_i_1__1_n_0 ));
  FDRE \ADDR_WR_reg[0] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__1_n_0 ),
        .D(ADDR_RD),
        .Q(ADDR_WR[0]),
        .R(out));
  FDRE \ADDR_WR_reg[1] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__1_n_0 ),
        .D(Q[0]),
        .Q(ADDR_WR[1]),
        .R(out));
  FDRE \ADDR_WR_reg[2] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__1_n_0 ),
        .D(Q[1]),
        .Q(ADDR_WR[2]),
        .R(out));
  FDRE \ADDR_WR_reg[3] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__1_n_0 ),
        .D(DATA_OUT[2]),
        .Q(ADDR_WR[3]),
        .R(out));
  FDRE \ADDR_WR_reg[4] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__1_n_0 ),
        .D(DATA_OUT[3]),
        .Q(ADDR_WR[4]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT5 #(
    .INIT(32'hFFFF0015)) 
    \BIT_COUNT[0]_i_1__1 
       (.I0(BIT_COUNT_reg[0]),
        .I1(MDIO_OUT_i_2__1_n_0),
        .I2(ADDRESS_MATCH),
        .I3(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(p_0_in[0]));
  LUT6 #(
    .INIT(64'h0111000000000111)) 
    \BIT_COUNT[1]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I2(ADDRESS_MATCH),
        .I3(MDIO_OUT_i_2__1_n_0),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[0]),
        .O(p_0_in[1]));
  LUT4 #(
    .INIT(16'hFD57)) 
    \BIT_COUNT[2]_i_1__1 
       (.I0(\BIT_COUNT[3]_i_3__1_n_0 ),
        .I1(BIT_COUNT_reg[0]),
        .I2(BIT_COUNT_reg[1]),
        .I3(BIT_COUNT_reg[2]),
        .O(p_0_in[2]));
  LUT5 #(
    .INIT(32'hAAAAAAA2)) 
    \BIT_COUNT[3]_i_1__1 
       (.I0(MDC_RISING_REG1),
        .I1(MDIO_OUT_i_2__1_n_0),
        .I2(ADDRESS_MATCH),
        .I3(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(BIT_COUNT__5));
  LUT6 #(
    .INIT(64'hEEEEEEEBAAAAAAAA)) 
    \BIT_COUNT[3]_i_2__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(\BIT_COUNT[3]_i_3__1_n_0 ),
        .O(p_0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT4 #(
    .INIT(16'h0007)) 
    \BIT_COUNT[3]_i_3__1 
       (.I0(MDIO_OUT_i_2__1_n_0),
        .I1(ADDRESS_MATCH),
        .I2(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(\BIT_COUNT[3]_i_3__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[0] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[0]),
        .Q(BIT_COUNT_reg[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[1] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[1]),
        .Q(BIT_COUNT_reg[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[2] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[2]),
        .Q(BIT_COUNT_reg[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[3] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[3]),
        .Q(BIT_COUNT_reg[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000100000000000)) 
    CLEAR_PAGE_RECEIVED_i_1__1
       (.I0(ADDR_WR[3]),
        .I1(ADDR_WR[4]),
        .I2(RD),
        .I3(ADDR_WR[1]),
        .I4(ADDR_WR[0]),
        .I5(ADDR_WR[2]),
        .O(CLEAR_PAGE_REC_COMB));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    CLEAR_STATUS_REG_i_1__1
       (.I0(ADDR_WR[3]),
        .I1(ADDR_WR[4]),
        .I2(RD),
        .I3(ADDR_WR[0]),
        .I4(ADDR_WR[2]),
        .I5(ADDR_WR[1]),
        .O(CLEAR_STATUS_REG_COMB));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT5 #(
    .INIT(32'h00FD0020)) 
    \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_i_1__1 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__1_n_0 ),
        .I2(DATA_OUT[8]),
        .I3(out),
        .I4(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ),
        .O(MDC_RISING_REG3_reg_1));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT4 #(
    .INIT(16'hFF20)) 
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_i_1__1 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__1_n_0 ),
        .I2(DATA_OUT[11]),
        .I3(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ),
        .O(MDC_RISING_REG3_reg_0));
  LUT4 #(
    .INIT(16'hFF20)) 
    \CONFIG_REG_WITH_AN.RESET_REG_i_1__1 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__1_n_0 ),
        .I2(DATA_OUT[15]),
        .I3(\CONFIG_REG_WITH_AN.RESET_REG_reg ),
        .O(MDC_RISING_REG3_reg_2));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \CONFIG_REG_WITH_AN.RESTART_AN_REG_i_1__1 
       (.I0(DATA_OUT[9]),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__1_n_0 ),
        .O(p_2_out));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_1__1 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__1_n_0 ),
        .O(LOOPBACK_REG));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__1 
       (.I0(ADDR_WR[4]),
        .I1(ADDR_WR[3]),
        .I2(ADDR_WR[0]),
        .I3(WE),
        .I4(ADDR_WR[2]),
        .I5(ADDR_WR[1]),
        .O(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT5 #(
    .INIT(32'h00010000)) 
    \FSM_onehot_STATE[10]_i_1__5 
       (.I0(BIT_COUNT_reg[2]),
        .I1(BIT_COUNT_reg[1]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[3]),
        .I4(p_0_in11_in),
        .O(\FSM_onehot_STATE[10]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAAAAA)) 
    \FSM_onehot_STATE[1]_i_1__3 
       (.I0(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(ADDRESS_MATCH),
        .O(\FSM_onehot_STATE[1]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFE00000002)) 
    \FSM_onehot_STATE[2]_i_1__3 
       (.I0(ADDRESS_MATCH),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(p_0_in11_in),
        .O(\FSM_onehot_STATE[2]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_STATE[3]_i_1__4 
       (.I0(ADDR_RD),
        .I1(\FSM_onehot_STATE_reg_n_0_[6] ),
        .O(\FSM_onehot_STATE[3]_i_1__4_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \FSM_onehot_STATE[4]_i_1__4 
       (.I0(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I2(ADDR_RD),
        .O(\FSM_onehot_STATE[4]_i_1__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \FSM_onehot_STATE[6]_i_1__5 
       (.I0(ADDR_RD),
        .I1(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[6] ),
        .O(\FSM_onehot_STATE[6]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAAAAA)) 
    \FSM_onehot_STATE[8]_i_1__3 
       (.I0(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[8]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \FSM_onehot_STATE[9]_i_1__3 
       (.I0(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I1(BIT_COUNT_reg[2]),
        .I2(BIT_COUNT_reg[1]),
        .I3(BIT_COUNT_reg[0]),
        .I4(BIT_COUNT_reg[3]),
        .O(\FSM_onehot_STATE[9]_i_1__3_n_0 ));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[0] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE_reg_n_0_[3] ),
        .Q(\FSM_onehot_STATE_reg_n_0_[0] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[10] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[10] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[1] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[1]_i_1__3_n_0 ),
        .Q(ADDRESS_MATCH),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[2] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[2]_i_1__3_n_0 ),
        .Q(p_0_in11_in),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[3] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[3]_i_1__4_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[3] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_STATE_reg[4] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[4]_i_1__4_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[4] ),
        .S(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[5] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE_reg_n_0_[9] ),
        .Q(\FSM_onehot_STATE_reg_n_0_[5] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[6] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[6]_i_1__5_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[6] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[7] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE_reg_n_0_[10] ),
        .Q(\FSM_onehot_STATE_reg_n_0_[7] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[8] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[8]_i_1__3_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[8] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[9] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[9]_i_1__3_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[9] ),
        .R(out));
  LUT6 #(
    .INIT(64'hFBFFFFFF08000000)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_1__1 
       (.I0(Q[0]),
        .I1(\GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__1_n_0 ),
        .I2(ADDR_WR[3]),
        .I3(ADDR_WR[4]),
        .I4(MDC_RISING_OUT),
        .I5(p_6_in),
        .O(\SHIFT_REG_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__1 
       (.I0(ADDR_WR[1]),
        .I1(ADDR_WR[2]),
        .I2(WE),
        .I3(ADDR_WR[0]),
        .O(\GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hB0B0F0B00000F000)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_INT_i_1__1 
       (.I0(Q[1]),
        .I1(AN_INTERRUPT_ENABLE14_out),
        .I2(p_6_in),
        .I3(MR_AN_COMPLETE),
        .I4(AN_COMPLETE_REG1),
        .I5(an_interrupt_ch2),
        .O(\SHIFT_REG_reg[1]_0 ));
  LUT4 #(
    .INIT(16'h2000)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_INT_i_2__1 
       (.I0(\GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__1_n_0 ),
        .I1(ADDR_WR[3]),
        .I2(ADDR_WR[4]),
        .I3(MDC_RISING_OUT),
        .O(AN_INTERRUPT_ENABLE14_out));
  LUT2 #(
    .INIT(4'h8)) 
    LAST_DATA_SHIFT_i_1__1
       (.I0(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I1(MDC_RISING_REG1_0),
        .O(LAST_DATA_SHIFT0));
  FDRE #(
    .INIT(1'b0)) 
    LAST_DATA_SHIFT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LAST_DATA_SHIFT0),
        .Q(LAST_DATA_SHIFT),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG1),
        .Q(MDC_RISING_REG1_0),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG1_0),
        .Q(MDC_RISING_REG2),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG2),
        .Q(MDC_RISING_OUT),
        .R(out));
  FDSE #(
    .INIT(1'b0)) 
    MDIO_IN_REG_reg
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(MDIO_IN__0),
        .Q(ADDR_RD),
        .S(out));
  LUT5 #(
    .INIT(32'hDDFDFFFC)) 
    MDIO_OUT_i_1__1
       (.I0(MDIO_OUT_i_2__1_n_0),
        .I1(MDIO_OUT_i_3__1_n_0),
        .I2(DATA_OUT[15]),
        .I3(MDIO_OUT_i_4__1_n_0),
        .I4(p_0_in11_in),
        .O(MDIO_OUT_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    MDIO_OUT_i_2__1
       (.I0(BIT_COUNT_reg[3]),
        .I1(BIT_COUNT_reg[0]),
        .I2(BIT_COUNT_reg[1]),
        .I3(BIT_COUNT_reg[2]),
        .O(MDIO_OUT_i_2__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT3 #(
    .INIT(8'hBF)) 
    MDIO_OUT_i_3__1
       (.I0(\OPCODE_reg_n_0_[0] ),
        .I1(\OPCODE_reg_n_0_[1] ),
        .I2(ADDRESS_MATCH_reg_n_0),
        .O(MDIO_OUT_i_3__1_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    MDIO_OUT_i_4__1
       (.I0(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(MDIO_OUT_i_4__1_n_0));
  FDSE MDIO_OUT_reg
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(MDIO_OUT_i_1__1_n_0),
        .Q(mdio_out_ch2),
        .S(out));
  LUT6 #(
    .INIT(64'hFFFFFFFF55550003)) 
    MDIO_TRI_i_1__1
       (.I0(MDIO_OUT_i_2__1_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I4(p_0_in11_in),
        .I5(MDIO_OUT_i_3__1_n_0),
        .O(MDIO_TRI_i_1__1_n_0));
  FDSE MDIO_TRI_reg
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(MDIO_TRI_i_1__1_n_0),
        .Q(mdio_tri_ch2),
        .S(out));
  LUT6 #(
    .INIT(64'h0000000000002000)) 
    \OPCODE[1]_i_1__1 
       (.I0(BIT_COUNT_reg[2]),
        .I1(BIT_COUNT_reg[3]),
        .I2(MDC_RISING_REG1),
        .I3(ADDRESS_MATCH),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[0]),
        .O(OPCODE));
  FDRE #(
    .INIT(1'b0)) 
    \OPCODE_reg[0] 
       (.C(userclk),
        .CE(OPCODE),
        .D(Q[0]),
        .Q(\OPCODE_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \OPCODE_reg[1] 
       (.C(userclk),
        .CE(OPCODE),
        .D(Q[1]),
        .Q(\OPCODE_reg_n_0_[1] ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00004000)) 
    \QSGMII_SPEC.RUNDISP_EN_REG_i_1__1 
       (.I0(ADDR_WR[3]),
        .I1(ADDR_WR[4]),
        .I2(MDC_RISING_OUT),
        .I3(ADDR_WR[1]),
        .I4(\QSGMII_SPEC.RUNDISP_EN_REG_i_2__1_n_0 ),
        .O(RUNDISP_EN_REG));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT3 #(
    .INIT(8'hFB)) 
    \QSGMII_SPEC.RUNDISP_EN_REG_i_2__1 
       (.I0(ADDR_WR[0]),
        .I1(WE),
        .I2(ADDR_WR[2]),
        .O(\QSGMII_SPEC.RUNDISP_EN_REG_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000004FF0400)) 
    RD_i_1__1
       (.I0(RD_i_2__1_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I2(MDIO_OUT_i_3__1_n_0),
        .I3(MDC_RISING_REG2),
        .I4(RD),
        .I5(out),
        .O(RD_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    RD_i_2__1
       (.I0(ADDRESS_MATCH_reg_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I2(\OPCODE_reg_n_0_[0] ),
        .I3(\OPCODE_reg_n_0_[1] ),
        .O(RD_i_2__1_n_0));
  FDRE RD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RD_i_1__1_n_0),
        .Q(RD),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h3808FFFF38080000)) 
    \SHIFT_REG[0]_i_1__1 
       (.I0(\SHIFT_REG[0]_i_2__1_n_0 ),
        .I1(Q[1]),
        .I2(DATA_OUT[3]),
        .I3(\SHIFT_REG[0]_i_3__1_n_0 ),
        .I4(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I5(ADDR_RD),
        .O(\SHIFT_REG[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \SHIFT_REG[0]_i_2__1 
       (.I0(Q[0]),
        .I1(DATA_OUT[2]),
        .O(\SHIFT_REG[0]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT5 #(
    .INIT(32'h00000AFC)) 
    \SHIFT_REG[0]_i_3__1 
       (.I0(\SHIFT_REG_reg[0]_1 ),
        .I1(p_6_in),
        .I2(ADDR_RD),
        .I3(Q[0]),
        .I4(DATA_OUT[2]),
        .O(\SHIFT_REG[0]_i_3__1_n_0 ));
  LUT5 #(
    .INIT(32'h01FF0100)) 
    \SHIFT_REG[10]_i_1__1 
       (.I0(DATA_OUT[2]),
        .I1(DATA_OUT[3]),
        .I2(\SHIFT_REG[10]_i_2__1_n_0 ),
        .I3(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I4(DATA_OUT[9]),
        .O(\SHIFT_REG[10]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFCF33FFCCFFDD)) 
    \SHIFT_REG[10]_i_2__1 
       (.I0(\SHIFT_REG_reg[10]_0 ),
        .I1(Q[0]),
        .I2(\SHIFT_REG_reg[15]_0 [0]),
        .I3(Q[1]),
        .I4(DATA_OUT[2]),
        .I5(ADDR_RD),
        .O(\SHIFT_REG[10]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h02FF0200)) 
    \SHIFT_REG[11]_i_1__1 
       (.I0(\SHIFT_REG[11]_i_2__1_n_0 ),
        .I1(DATA_OUT[2]),
        .I2(DATA_OUT[3]),
        .I3(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I4(Q[3]),
        .O(\SHIFT_REG[11]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h00000F000A0000FC)) 
    \SHIFT_REG[11]_i_2__1 
       (.I0(TOGGLE_RX),
        .I1(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ),
        .I2(DATA_OUT[2]),
        .I3(ADDR_RD),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(\SHIFT_REG[11]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hF444FFFFF4440000)) 
    \SHIFT_REG[12]_i_1__1 
       (.I0(\SHIFT_REG[14]_i_2__1_n_0 ),
        .I1(\SHIFT_REG_reg[15]_0 [1]),
        .I2(\SHIFT_REG_reg[12]_0 ),
        .I3(\SHIFT_REG[15]_i_3__1_n_0 ),
        .I4(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I5(DATA_OUT[11]),
        .O(\SHIFT_REG[12]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA2)) 
    \SHIFT_REG[13]_i_1__1 
       (.I0(Q[4]),
        .I1(p_0_in11_in),
        .I2(BIT_COUNT_reg[3]),
        .I3(BIT_COUNT_reg[0]),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[2]),
        .O(\SHIFT_REG[13]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hF444FFFFF4440000)) 
    \SHIFT_REG[14]_i_1__1 
       (.I0(\SHIFT_REG[14]_i_2__1_n_0 ),
        .I1(\SHIFT_REG_reg[15]_0 [2]),
        .I2(\SHIFT_REG[15]_i_3__1_n_0 ),
        .I3(\SHIFT_REG_reg[14]_0 ),
        .I4(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I5(\SHIFT_REG_reg_n_0_[13] ),
        .O(\SHIFT_REG[14]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT5 #(
    .INIT(32'hFFFFFBFF)) 
    \SHIFT_REG[14]_i_2__1 
       (.I0(DATA_OUT[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(ADDR_RD),
        .I4(DATA_OUT[2]),
        .O(\SHIFT_REG[14]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \SHIFT_REG[15]_i_1__1 
       (.I0(MDC_RISING_REG1),
        .I1(LAST_DATA_SHIFT),
        .O(SHIFT_REG0));
  LUT5 #(
    .INIT(32'hF8FFF800)) 
    \SHIFT_REG[15]_i_2__1 
       (.I0(\SHIFT_REG[15]_i_3__1_n_0 ),
        .I1(\CONFIG_REG_WITH_AN.RESET_REG_reg ),
        .I2(\SHIFT_REG[15]_i_4__1_n_0 ),
        .I3(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I4(Q[5]),
        .O(\SHIFT_REG[15]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \SHIFT_REG[15]_i_3__1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(ADDR_RD),
        .I3(DATA_OUT[2]),
        .I4(DATA_OUT[3]),
        .O(\SHIFT_REG[15]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h0900080000000000)) 
    \SHIFT_REG[15]_i_4__1 
       (.I0(DATA_OUT[2]),
        .I1(Q[0]),
        .I2(DATA_OUT[3]),
        .I3(Q[1]),
        .I4(\SHIFT_REG_reg[15]_0 [3]),
        .I5(ADDR_RD),
        .O(\SHIFT_REG[15]_i_4__1_n_0 ));
  LUT5 #(
    .INIT(32'h0EFF0E00)) 
    \SHIFT_REG[1]_i_1__1 
       (.I0(\SHIFT_REG[1]_i_2__1_n_0 ),
        .I1(\SHIFT_REG[1]_i_3__1_n_0 ),
        .I2(ADDR_RD),
        .I3(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I4(Q[0]),
        .O(\SHIFT_REG[1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000D080000)) 
    \SHIFT_REG[1]_i_2__1 
       (.I0(Q[0]),
        .I1(\SHIFT_REG_reg[1]_1 ),
        .I2(Q[1]),
        .I3(an_interrupt_ch2),
        .I4(DATA_OUT[3]),
        .I5(DATA_OUT[2]),
        .O(\SHIFT_REG[1]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT5 #(
    .INIT(32'h00000080)) 
    \SHIFT_REG[1]_i_3__1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(MR_PAGE_RX_SET),
        .I3(DATA_OUT[3]),
        .I4(DATA_OUT[2]),
        .O(\SHIFT_REG[1]_i_3__1_n_0 ));
  LUT4 #(
    .INIT(16'h1F10)) 
    \SHIFT_REG[2]_i_1__1 
       (.I0(DATA_OUT[3]),
        .I1(\SHIFT_REG[2]_i_2__1_n_0 ),
        .I2(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I3(Q[1]),
        .O(\SHIFT_REG[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF00FFDFFFFF)) 
    \SHIFT_REG[2]_i_2__1 
       (.I0(MR_LINK_STATUS),
        .I1(Q[1]),
        .I2(reset_done),
        .I3(DATA_OUT[2]),
        .I4(ADDR_RD),
        .I5(Q[0]),
        .O(\SHIFT_REG[2]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000FFFF00100000)) 
    \SHIFT_REG[3]_i_1__1 
       (.I0(DATA_OUT[3]),
        .I1(Q[1]),
        .I2(ADDR_RD),
        .I3(Q[0]),
        .I4(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I5(DATA_OUT[2]),
        .O(\SHIFT_REG[3]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000FFFF00D50000)) 
    \SHIFT_REG[4]_i_1__1 
       (.I0(\SHIFT_REG[4]_i_2__1_n_0 ),
        .I1(status_vector_ch2),
        .I2(\SHIFT_REG[7]_i_2__1_n_0 ),
        .I3(Q[1]),
        .I4(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I5(DATA_OUT[3]),
        .O(\SHIFT_REG[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \SHIFT_REG[4]_i_2__1 
       (.I0(DATA_OUT[2]),
        .I1(ADDR_RD),
        .I2(Q[0]),
        .O(\SHIFT_REG[4]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFF000F088F000F0)) 
    \SHIFT_REG[5]_i_1__1 
       (.I0(\SHIFT_REG[7]_i_2__1_n_0 ),
        .I1(MR_AN_COMPLETE),
        .I2(\SHIFT_REG_reg_n_0_[4] ),
        .I3(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I4(\SHIFT_REG[8]_i_2__1_n_0 ),
        .I5(\SHIFT_REG[5]_i_2__1_n_0 ),
        .O(\SHIFT_REG[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT4 #(
    .INIT(16'h1110)) 
    \SHIFT_REG[5]_i_2__1 
       (.I0(DATA_OUT[2]),
        .I1(ADDR_RD),
        .I2(p_9_in),
        .I3(Q[0]),
        .O(\SHIFT_REG[5]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h020AFFFF020A0000)) 
    \SHIFT_REG[6]_i_1__1 
       (.I0(\SHIFT_REG[8]_i_2__1_n_0 ),
        .I1(Q[0]),
        .I2(DATA_OUT[2]),
        .I3(ADDR_RD),
        .I4(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I5(Q[2]),
        .O(\SHIFT_REG[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT5 #(
    .INIT(32'h222E2222)) 
    \SHIFT_REG[7]_i_1__1 
       (.I0(\SHIFT_REG_reg_n_0_[6] ),
        .I1(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I2(DATA_OUT[3]),
        .I3(Q[1]),
        .I4(\SHIFT_REG[7]_i_2__1_n_0 ),
        .O(\SHIFT_REG[7]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \SHIFT_REG[7]_i_2__1 
       (.I0(DATA_OUT[2]),
        .I1(ADDR_RD),
        .I2(Q[0]),
        .O(\SHIFT_REG[7]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h020AFFFF020A0000)) 
    \SHIFT_REG[8]_i_1__1 
       (.I0(\SHIFT_REG[8]_i_2__1_n_0 ),
        .I1(Q[0]),
        .I2(DATA_OUT[2]),
        .I3(ADDR_RD),
        .I4(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I5(\SHIFT_REG_reg_n_0_[7] ),
        .O(\SHIFT_REG[8]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \SHIFT_REG[8]_i_2__1 
       (.I0(Q[1]),
        .I1(DATA_OUT[3]),
        .O(\SHIFT_REG[8]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'h8F80)) 
    \SHIFT_REG[9]_i_1__1 
       (.I0(RESTART_AN_REG),
        .I1(\SHIFT_REG[15]_i_3__1_n_0 ),
        .I2(\FSM_onehot_STATE[10]_i_1__5_n_0 ),
        .I3(DATA_OUT[8]),
        .O(\SHIFT_REG[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[0] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[10] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[10]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[11] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[11]_i_1__1_n_0 ),
        .Q(DATA_OUT[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[12] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[12]_i_1__1_n_0 ),
        .Q(Q[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[13] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[13]_i_1__1_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[13] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[14] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[14]_i_1__1_n_0 ),
        .Q(Q[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[15] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[15]_i_2__1_n_0 ),
        .Q(DATA_OUT[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[1] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[2] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[2]_i_1__1_n_0 ),
        .Q(DATA_OUT[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[3] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[3]_i_1__1_n_0 ),
        .Q(DATA_OUT[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[4] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[4]_i_1__1_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[5] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[5]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[6] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[6]_i_1__1_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[7] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[7]_i_1__1_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[8] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[8]_i_1__1_n_0 ),
        .Q(DATA_OUT[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[9] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[9]_i_1__1_n_0 ),
        .Q(DATA_OUT[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0080FFFF00800000)) 
    WE_i_1__1
       (.I0(ADDRESS_MATCH_reg_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I2(\OPCODE_reg_n_0_[0] ),
        .I3(\OPCODE_reg_n_0_[1] ),
        .I4(MDC_RISING_REG2),
        .I5(WE),
        .O(WE_i_1__1_n_0));
  FDRE WE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(WE_i_1__1_n_0),
        .Q(WE),
        .R(out));
endmodule

(* ORIG_REF_NAME = "MDIO_INTERFACE" *) 
module quadsgmii_0_TEST_MDIO_INTERFACE_173
   (MDC_RISING_OUT,
    mdio_out_ch1,
    mdio_tri_ch1,
    Q,
    MDC_RISING_REG3_reg_0,
    MDC_RISING_REG3_reg_1,
    MDC_RISING_REG3_reg_2,
    p_2_out,
    LOOPBACK_REG,
    RUNDISP_EN_REG,
    CLEAR_PAGE_REC_COMB,
    CLEAR_STATUS_REG_COMB,
    \SHIFT_REG_reg[0]_0 ,
    \SHIFT_REG_reg[1]_0 ,
    out,
    MDC_RISING_REG1,
    userclk,
    MDIO_IN__0,
    \SHIFT_REG_reg[15]_0 ,
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ,
    \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ,
    \CONFIG_REG_WITH_AN.RESET_REG_reg ,
    MR_AN_COMPLETE,
    \SHIFT_REG_reg[14]_0 ,
    \SHIFT_REG_reg[12]_0 ,
    status_vector_ch1,
    RESTART_AN_REG,
    phyad_ch1,
    MR_PAGE_RX_SET,
    TOGGLE_RX,
    \SHIFT_REG_reg[10]_0 ,
    \SHIFT_REG_reg[1]_1 ,
    an_interrupt_ch1,
    MR_LINK_STATUS,
    reset_done,
    \SHIFT_REG_reg[0]_1 ,
    p_6_in,
    p_9_in,
    AN_COMPLETE_REG1);
  output MDC_RISING_OUT;
  output mdio_out_ch1;
  output mdio_tri_ch1;
  output [5:0]Q;
  output MDC_RISING_REG3_reg_0;
  output MDC_RISING_REG3_reg_1;
  output MDC_RISING_REG3_reg_2;
  output p_2_out;
  output LOOPBACK_REG;
  output RUNDISP_EN_REG;
  output CLEAR_PAGE_REC_COMB;
  output CLEAR_STATUS_REG_COMB;
  output \SHIFT_REG_reg[0]_0 ;
  output \SHIFT_REG_reg[1]_0 ;
  input out;
  input MDC_RISING_REG1;
  input userclk;
  input MDIO_IN__0;
  input [3:0]\SHIFT_REG_reg[15]_0 ;
  input \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ;
  input \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ;
  input \CONFIG_REG_WITH_AN.RESET_REG_reg ;
  input MR_AN_COMPLETE;
  input \SHIFT_REG_reg[14]_0 ;
  input \SHIFT_REG_reg[12]_0 ;
  input [0:0]status_vector_ch1;
  input RESTART_AN_REG;
  input [4:0]phyad_ch1;
  input MR_PAGE_RX_SET;
  input TOGGLE_RX;
  input \SHIFT_REG_reg[10]_0 ;
  input \SHIFT_REG_reg[1]_1 ;
  input an_interrupt_ch1;
  input MR_LINK_STATUS;
  input reset_done;
  input \SHIFT_REG_reg[0]_1 ;
  input [0:0]p_6_in;
  input [0:0]p_9_in;
  input AN_COMPLETE_REG1;

  wire ADDRESS_MATCH;
  wire ADDRESS_MATCH_COMB;
  wire ADDRESS_MATCH_i_1__0_n_0;
  wire ADDRESS_MATCH_i_3__0_n_0;
  wire ADDRESS_MATCH_reg_n_0;
  wire [0:0]ADDR_RD;
  wire [4:0]ADDR_WR;
  wire \ADDR_WR[4]_i_1__0_n_0 ;
  wire AN_COMPLETE_REG1;
  wire AN_INTERRUPT_ENABLE14_out;
  wire \BIT_COUNT[3]_i_3__0_n_0 ;
  wire BIT_COUNT__5;
  wire [3:0]BIT_COUNT_reg;
  wire CLEAR_PAGE_REC_COMB;
  wire CLEAR_STATUS_REG_COMB;
  wire \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ;
  wire \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ;
  wire \CONFIG_REG_WITH_AN.RESET_REG_reg ;
  wire \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__0_n_0 ;
  wire [15:2]DATA_OUT;
  wire \FSM_onehot_STATE[10]_i_1__4_n_0 ;
  wire \FSM_onehot_STATE[1]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[2]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[3]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[4]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[6]_i_1__4_n_0 ;
  wire \FSM_onehot_STATE[8]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[9]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE_reg_n_0_[0] ;
  wire \FSM_onehot_STATE_reg_n_0_[10] ;
  wire \FSM_onehot_STATE_reg_n_0_[3] ;
  wire \FSM_onehot_STATE_reg_n_0_[4] ;
  wire \FSM_onehot_STATE_reg_n_0_[5] ;
  wire \FSM_onehot_STATE_reg_n_0_[6] ;
  wire \FSM_onehot_STATE_reg_n_0_[7] ;
  wire \FSM_onehot_STATE_reg_n_0_[8] ;
  wire \FSM_onehot_STATE_reg_n_0_[9] ;
  wire \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__0_n_0 ;
  wire LAST_DATA_SHIFT;
  wire LAST_DATA_SHIFT0;
  wire LOOPBACK_REG;
  wire MDC_RISING_OUT;
  wire MDC_RISING_REG1;
  wire MDC_RISING_REG1_0;
  wire MDC_RISING_REG2;
  wire MDC_RISING_REG3_reg_0;
  wire MDC_RISING_REG3_reg_1;
  wire MDC_RISING_REG3_reg_2;
  wire MDIO_IN__0;
  wire MDIO_OUT_i_1__0_n_0;
  wire MDIO_OUT_i_2__0_n_0;
  wire MDIO_OUT_i_3__0_n_0;
  wire MDIO_OUT_i_4__0_n_0;
  wire MDIO_TRI_i_1__0_n_0;
  wire MR_AN_COMPLETE;
  wire MR_LINK_STATUS;
  wire MR_PAGE_RX_SET;
  wire OPCODE;
  wire \OPCODE_reg_n_0_[0] ;
  wire \OPCODE_reg_n_0_[1] ;
  wire [5:0]Q;
  wire \QSGMII_SPEC.RUNDISP_EN_REG_i_2__0_n_0 ;
  wire RD;
  wire RD_i_1__0_n_0;
  wire RD_i_2__0_n_0;
  wire RESTART_AN_REG;
  wire RUNDISP_EN_REG;
  wire SHIFT_REG0;
  wire \SHIFT_REG[0]_i_1__0_n_0 ;
  wire \SHIFT_REG[0]_i_2__0_n_0 ;
  wire \SHIFT_REG[0]_i_3__0_n_0 ;
  wire \SHIFT_REG[10]_i_1__0_n_0 ;
  wire \SHIFT_REG[10]_i_2__0_n_0 ;
  wire \SHIFT_REG[11]_i_1__0_n_0 ;
  wire \SHIFT_REG[11]_i_2__0_n_0 ;
  wire \SHIFT_REG[12]_i_1__0_n_0 ;
  wire \SHIFT_REG[13]_i_1__0_n_0 ;
  wire \SHIFT_REG[14]_i_1__0_n_0 ;
  wire \SHIFT_REG[14]_i_2__0_n_0 ;
  wire \SHIFT_REG[15]_i_2__0_n_0 ;
  wire \SHIFT_REG[15]_i_3__0_n_0 ;
  wire \SHIFT_REG[15]_i_4__0_n_0 ;
  wire \SHIFT_REG[1]_i_1__0_n_0 ;
  wire \SHIFT_REG[1]_i_2__0_n_0 ;
  wire \SHIFT_REG[1]_i_3__0_n_0 ;
  wire \SHIFT_REG[2]_i_1__0_n_0 ;
  wire \SHIFT_REG[2]_i_2__0_n_0 ;
  wire \SHIFT_REG[3]_i_1__0_n_0 ;
  wire \SHIFT_REG[4]_i_1__0_n_0 ;
  wire \SHIFT_REG[4]_i_2__0_n_0 ;
  wire \SHIFT_REG[5]_i_1__0_n_0 ;
  wire \SHIFT_REG[5]_i_2__0_n_0 ;
  wire \SHIFT_REG[6]_i_1__0_n_0 ;
  wire \SHIFT_REG[7]_i_1__0_n_0 ;
  wire \SHIFT_REG[7]_i_2__0_n_0 ;
  wire \SHIFT_REG[8]_i_1__0_n_0 ;
  wire \SHIFT_REG[8]_i_2__0_n_0 ;
  wire \SHIFT_REG[9]_i_1__0_n_0 ;
  wire \SHIFT_REG_reg[0]_0 ;
  wire \SHIFT_REG_reg[0]_1 ;
  wire \SHIFT_REG_reg[10]_0 ;
  wire \SHIFT_REG_reg[12]_0 ;
  wire \SHIFT_REG_reg[14]_0 ;
  wire [3:0]\SHIFT_REG_reg[15]_0 ;
  wire \SHIFT_REG_reg[1]_0 ;
  wire \SHIFT_REG_reg[1]_1 ;
  wire \SHIFT_REG_reg_n_0_[13] ;
  wire \SHIFT_REG_reg_n_0_[4] ;
  wire \SHIFT_REG_reg_n_0_[6] ;
  wire \SHIFT_REG_reg_n_0_[7] ;
  wire TOGGLE_RX;
  wire WE;
  wire WE_i_1__0_n_0;
  wire an_interrupt_ch1;
  wire mdio_out_ch1;
  wire mdio_tri_ch1;
  wire out;
  wire [3:0]p_0_in;
  wire p_0_in11_in;
  wire p_2_out;
  wire [0:0]p_6_in;
  wire [0:0]p_9_in;
  wire [4:0]phyad_ch1;
  wire reset_done;
  wire [0:0]status_vector_ch1;
  wire userclk;

  LUT4 #(
    .INIT(16'hBF80)) 
    ADDRESS_MATCH_i_1__0
       (.I0(ADDRESS_MATCH_COMB),
        .I1(MDC_RISING_REG1),
        .I2(ADDRESS_MATCH),
        .I3(ADDRESS_MATCH_reg_n_0),
        .O(ADDRESS_MATCH_i_1__0_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAAEBAAAAEB)) 
    ADDRESS_MATCH_i_2__0
       (.I0(\SHIFT_REG[15]_i_3__0_n_0 ),
        .I1(DATA_OUT[2]),
        .I2(phyad_ch1[3]),
        .I3(phyad_ch1[4]),
        .I4(DATA_OUT[3]),
        .I5(ADDRESS_MATCH_i_3__0_n_0),
        .O(ADDRESS_MATCH_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ADDRESS_MATCH_i_3__0
       (.I0(phyad_ch1[0]),
        .I1(ADDR_RD),
        .I2(Q[1]),
        .I3(phyad_ch1[2]),
        .I4(Q[0]),
        .I5(phyad_ch1[1]),
        .O(ADDRESS_MATCH_i_3__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ADDRESS_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ADDRESS_MATCH_i_1__0_n_0),
        .Q(ADDRESS_MATCH_reg_n_0),
        .R(out));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \ADDR_WR[4]_i_1__0 
       (.I0(MDC_RISING_REG1),
        .I1(p_0_in11_in),
        .I2(BIT_COUNT_reg[3]),
        .I3(BIT_COUNT_reg[0]),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[2]),
        .O(\ADDR_WR[4]_i_1__0_n_0 ));
  FDRE \ADDR_WR_reg[0] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__0_n_0 ),
        .D(ADDR_RD),
        .Q(ADDR_WR[0]),
        .R(out));
  FDRE \ADDR_WR_reg[1] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__0_n_0 ),
        .D(Q[0]),
        .Q(ADDR_WR[1]),
        .R(out));
  FDRE \ADDR_WR_reg[2] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__0_n_0 ),
        .D(Q[1]),
        .Q(ADDR_WR[2]),
        .R(out));
  FDRE \ADDR_WR_reg[3] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__0_n_0 ),
        .D(DATA_OUT[2]),
        .Q(ADDR_WR[3]),
        .R(out));
  FDRE \ADDR_WR_reg[4] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1__0_n_0 ),
        .D(DATA_OUT[3]),
        .Q(ADDR_WR[4]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT5 #(
    .INIT(32'hFFFF0015)) 
    \BIT_COUNT[0]_i_1__0 
       (.I0(BIT_COUNT_reg[0]),
        .I1(MDIO_OUT_i_2__0_n_0),
        .I2(ADDRESS_MATCH),
        .I3(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(p_0_in[0]));
  LUT6 #(
    .INIT(64'h0111000000000111)) 
    \BIT_COUNT[1]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I2(ADDRESS_MATCH),
        .I3(MDIO_OUT_i_2__0_n_0),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[0]),
        .O(p_0_in[1]));
  LUT4 #(
    .INIT(16'hFD57)) 
    \BIT_COUNT[2]_i_1__0 
       (.I0(\BIT_COUNT[3]_i_3__0_n_0 ),
        .I1(BIT_COUNT_reg[0]),
        .I2(BIT_COUNT_reg[1]),
        .I3(BIT_COUNT_reg[2]),
        .O(p_0_in[2]));
  LUT5 #(
    .INIT(32'hAAAAAAA2)) 
    \BIT_COUNT[3]_i_1__0 
       (.I0(MDC_RISING_REG1),
        .I1(MDIO_OUT_i_2__0_n_0),
        .I2(ADDRESS_MATCH),
        .I3(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(BIT_COUNT__5));
  LUT6 #(
    .INIT(64'hEEEEEEEBAAAAAAAA)) 
    \BIT_COUNT[3]_i_2__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(\BIT_COUNT[3]_i_3__0_n_0 ),
        .O(p_0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT4 #(
    .INIT(16'h0007)) 
    \BIT_COUNT[3]_i_3__0 
       (.I0(MDIO_OUT_i_2__0_n_0),
        .I1(ADDRESS_MATCH),
        .I2(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(\BIT_COUNT[3]_i_3__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[0] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[0]),
        .Q(BIT_COUNT_reg[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[1] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[1]),
        .Q(BIT_COUNT_reg[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[2] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[2]),
        .Q(BIT_COUNT_reg[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[3] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[3]),
        .Q(BIT_COUNT_reg[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000100000000000)) 
    CLEAR_PAGE_RECEIVED_i_1__0
       (.I0(ADDR_WR[3]),
        .I1(ADDR_WR[4]),
        .I2(RD),
        .I3(ADDR_WR[1]),
        .I4(ADDR_WR[0]),
        .I5(ADDR_WR[2]),
        .O(CLEAR_PAGE_REC_COMB));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    CLEAR_STATUS_REG_i_1__0
       (.I0(ADDR_WR[3]),
        .I1(ADDR_WR[4]),
        .I2(RD),
        .I3(ADDR_WR[0]),
        .I4(ADDR_WR[2]),
        .I5(ADDR_WR[1]),
        .O(CLEAR_STATUS_REG_COMB));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT5 #(
    .INIT(32'h00FD0020)) 
    \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_i_1__0 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__0_n_0 ),
        .I2(DATA_OUT[8]),
        .I3(out),
        .I4(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ),
        .O(MDC_RISING_REG3_reg_1));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT4 #(
    .INIT(16'hFF20)) 
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_i_1__0 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__0_n_0 ),
        .I2(DATA_OUT[11]),
        .I3(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ),
        .O(MDC_RISING_REG3_reg_0));
  LUT4 #(
    .INIT(16'hFF20)) 
    \CONFIG_REG_WITH_AN.RESET_REG_i_1__0 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__0_n_0 ),
        .I2(DATA_OUT[15]),
        .I3(\CONFIG_REG_WITH_AN.RESET_REG_reg ),
        .O(MDC_RISING_REG3_reg_2));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \CONFIG_REG_WITH_AN.RESTART_AN_REG_i_1__0 
       (.I0(DATA_OUT[9]),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__0_n_0 ),
        .O(p_2_out));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_1__0 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__0_n_0 ),
        .O(LOOPBACK_REG));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__0 
       (.I0(ADDR_WR[4]),
        .I1(ADDR_WR[3]),
        .I2(ADDR_WR[0]),
        .I3(WE),
        .I4(ADDR_WR[2]),
        .I5(ADDR_WR[1]),
        .O(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT5 #(
    .INIT(32'h00010000)) 
    \FSM_onehot_STATE[10]_i_1__4 
       (.I0(BIT_COUNT_reg[2]),
        .I1(BIT_COUNT_reg[1]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[3]),
        .I4(p_0_in11_in),
        .O(\FSM_onehot_STATE[10]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAAAAA)) 
    \FSM_onehot_STATE[1]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(ADDRESS_MATCH),
        .O(\FSM_onehot_STATE[1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFE00000002)) 
    \FSM_onehot_STATE[2]_i_1__1 
       (.I0(ADDRESS_MATCH),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(p_0_in11_in),
        .O(\FSM_onehot_STATE[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_STATE[3]_i_1__2 
       (.I0(ADDR_RD),
        .I1(\FSM_onehot_STATE_reg_n_0_[6] ),
        .O(\FSM_onehot_STATE[3]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \FSM_onehot_STATE[4]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I2(ADDR_RD),
        .O(\FSM_onehot_STATE[4]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \FSM_onehot_STATE[6]_i_1__4 
       (.I0(ADDR_RD),
        .I1(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[6] ),
        .O(\FSM_onehot_STATE[6]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAAAAA)) 
    \FSM_onehot_STATE[8]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[8]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \FSM_onehot_STATE[9]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I1(BIT_COUNT_reg[2]),
        .I2(BIT_COUNT_reg[1]),
        .I3(BIT_COUNT_reg[0]),
        .I4(BIT_COUNT_reg[3]),
        .O(\FSM_onehot_STATE[9]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[0] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE_reg_n_0_[3] ),
        .Q(\FSM_onehot_STATE_reg_n_0_[0] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[10] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[10] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[1] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[1]_i_1__1_n_0 ),
        .Q(ADDRESS_MATCH),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[2] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[2]_i_1__1_n_0 ),
        .Q(p_0_in11_in),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[3] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[3]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[3] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_STATE_reg[4] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[4]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[4] ),
        .S(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[5] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE_reg_n_0_[9] ),
        .Q(\FSM_onehot_STATE_reg_n_0_[5] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[6] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[6]_i_1__4_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[6] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[7] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE_reg_n_0_[10] ),
        .Q(\FSM_onehot_STATE_reg_n_0_[7] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[8] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[8]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[8] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[9] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[9]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[9] ),
        .R(out));
  LUT6 #(
    .INIT(64'hFBFFFFFF08000000)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_1__0 
       (.I0(Q[0]),
        .I1(\GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__0_n_0 ),
        .I2(ADDR_WR[3]),
        .I3(ADDR_WR[4]),
        .I4(MDC_RISING_OUT),
        .I5(p_6_in),
        .O(\SHIFT_REG_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__0 
       (.I0(ADDR_WR[1]),
        .I1(ADDR_WR[2]),
        .I2(WE),
        .I3(ADDR_WR[0]),
        .O(\GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hB0B0F0B00000F000)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_INT_i_1__0 
       (.I0(Q[1]),
        .I1(AN_INTERRUPT_ENABLE14_out),
        .I2(p_6_in),
        .I3(MR_AN_COMPLETE),
        .I4(AN_COMPLETE_REG1),
        .I5(an_interrupt_ch1),
        .O(\SHIFT_REG_reg[1]_0 ));
  LUT4 #(
    .INIT(16'h2000)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_INT_i_2__0 
       (.I0(\GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2__0_n_0 ),
        .I1(ADDR_WR[3]),
        .I2(ADDR_WR[4]),
        .I3(MDC_RISING_OUT),
        .O(AN_INTERRUPT_ENABLE14_out));
  LUT2 #(
    .INIT(4'h8)) 
    LAST_DATA_SHIFT_i_1__0
       (.I0(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I1(MDC_RISING_REG1_0),
        .O(LAST_DATA_SHIFT0));
  FDRE #(
    .INIT(1'b0)) 
    LAST_DATA_SHIFT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LAST_DATA_SHIFT0),
        .Q(LAST_DATA_SHIFT),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG1),
        .Q(MDC_RISING_REG1_0),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG1_0),
        .Q(MDC_RISING_REG2),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG2),
        .Q(MDC_RISING_OUT),
        .R(out));
  FDSE #(
    .INIT(1'b0)) 
    MDIO_IN_REG_reg
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(MDIO_IN__0),
        .Q(ADDR_RD),
        .S(out));
  LUT5 #(
    .INIT(32'hDDFDFFFC)) 
    MDIO_OUT_i_1__0
       (.I0(MDIO_OUT_i_2__0_n_0),
        .I1(MDIO_OUT_i_3__0_n_0),
        .I2(DATA_OUT[15]),
        .I3(MDIO_OUT_i_4__0_n_0),
        .I4(p_0_in11_in),
        .O(MDIO_OUT_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    MDIO_OUT_i_2__0
       (.I0(BIT_COUNT_reg[3]),
        .I1(BIT_COUNT_reg[0]),
        .I2(BIT_COUNT_reg[1]),
        .I3(BIT_COUNT_reg[2]),
        .O(MDIO_OUT_i_2__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT3 #(
    .INIT(8'hBF)) 
    MDIO_OUT_i_3__0
       (.I0(\OPCODE_reg_n_0_[0] ),
        .I1(\OPCODE_reg_n_0_[1] ),
        .I2(ADDRESS_MATCH_reg_n_0),
        .O(MDIO_OUT_i_3__0_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    MDIO_OUT_i_4__0
       (.I0(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(MDIO_OUT_i_4__0_n_0));
  FDSE MDIO_OUT_reg
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(MDIO_OUT_i_1__0_n_0),
        .Q(mdio_out_ch1),
        .S(out));
  LUT6 #(
    .INIT(64'hFFFFFFFF55550003)) 
    MDIO_TRI_i_1__0
       (.I0(MDIO_OUT_i_2__0_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I4(p_0_in11_in),
        .I5(MDIO_OUT_i_3__0_n_0),
        .O(MDIO_TRI_i_1__0_n_0));
  FDSE MDIO_TRI_reg
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(MDIO_TRI_i_1__0_n_0),
        .Q(mdio_tri_ch1),
        .S(out));
  LUT6 #(
    .INIT(64'h0000000000002000)) 
    \OPCODE[1]_i_1__0 
       (.I0(BIT_COUNT_reg[2]),
        .I1(BIT_COUNT_reg[3]),
        .I2(MDC_RISING_REG1),
        .I3(ADDRESS_MATCH),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[0]),
        .O(OPCODE));
  FDRE #(
    .INIT(1'b0)) 
    \OPCODE_reg[0] 
       (.C(userclk),
        .CE(OPCODE),
        .D(Q[0]),
        .Q(\OPCODE_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \OPCODE_reg[1] 
       (.C(userclk),
        .CE(OPCODE),
        .D(Q[1]),
        .Q(\OPCODE_reg_n_0_[1] ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00004000)) 
    \QSGMII_SPEC.RUNDISP_EN_REG_i_1__0 
       (.I0(ADDR_WR[3]),
        .I1(ADDR_WR[4]),
        .I2(MDC_RISING_OUT),
        .I3(ADDR_WR[1]),
        .I4(\QSGMII_SPEC.RUNDISP_EN_REG_i_2__0_n_0 ),
        .O(RUNDISP_EN_REG));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT3 #(
    .INIT(8'hFB)) 
    \QSGMII_SPEC.RUNDISP_EN_REG_i_2__0 
       (.I0(ADDR_WR[0]),
        .I1(WE),
        .I2(ADDR_WR[2]),
        .O(\QSGMII_SPEC.RUNDISP_EN_REG_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000004FF0400)) 
    RD_i_1__0
       (.I0(RD_i_2__0_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I2(MDIO_OUT_i_3__0_n_0),
        .I3(MDC_RISING_REG2),
        .I4(RD),
        .I5(out),
        .O(RD_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    RD_i_2__0
       (.I0(ADDRESS_MATCH_reg_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I2(\OPCODE_reg_n_0_[0] ),
        .I3(\OPCODE_reg_n_0_[1] ),
        .O(RD_i_2__0_n_0));
  FDRE RD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RD_i_1__0_n_0),
        .Q(RD),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h3808FFFF38080000)) 
    \SHIFT_REG[0]_i_1__0 
       (.I0(\SHIFT_REG[0]_i_2__0_n_0 ),
        .I1(Q[1]),
        .I2(DATA_OUT[3]),
        .I3(\SHIFT_REG[0]_i_3__0_n_0 ),
        .I4(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I5(ADDR_RD),
        .O(\SHIFT_REG[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \SHIFT_REG[0]_i_2__0 
       (.I0(Q[0]),
        .I1(DATA_OUT[2]),
        .O(\SHIFT_REG[0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT5 #(
    .INIT(32'h00000AFC)) 
    \SHIFT_REG[0]_i_3__0 
       (.I0(\SHIFT_REG_reg[0]_1 ),
        .I1(p_6_in),
        .I2(ADDR_RD),
        .I3(Q[0]),
        .I4(DATA_OUT[2]),
        .O(\SHIFT_REG[0]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h01FF0100)) 
    \SHIFT_REG[10]_i_1__0 
       (.I0(DATA_OUT[2]),
        .I1(DATA_OUT[3]),
        .I2(\SHIFT_REG[10]_i_2__0_n_0 ),
        .I3(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I4(DATA_OUT[9]),
        .O(\SHIFT_REG[10]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFCF33FFCCFFDD)) 
    \SHIFT_REG[10]_i_2__0 
       (.I0(\SHIFT_REG_reg[10]_0 ),
        .I1(Q[0]),
        .I2(\SHIFT_REG_reg[15]_0 [0]),
        .I3(Q[1]),
        .I4(DATA_OUT[2]),
        .I5(ADDR_RD),
        .O(\SHIFT_REG[10]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h02FF0200)) 
    \SHIFT_REG[11]_i_1__0 
       (.I0(\SHIFT_REG[11]_i_2__0_n_0 ),
        .I1(DATA_OUT[2]),
        .I2(DATA_OUT[3]),
        .I3(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I4(Q[3]),
        .O(\SHIFT_REG[11]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h00000F000A0000FC)) 
    \SHIFT_REG[11]_i_2__0 
       (.I0(TOGGLE_RX),
        .I1(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ),
        .I2(DATA_OUT[2]),
        .I3(ADDR_RD),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(\SHIFT_REG[11]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hF444FFFFF4440000)) 
    \SHIFT_REG[12]_i_1__0 
       (.I0(\SHIFT_REG[14]_i_2__0_n_0 ),
        .I1(\SHIFT_REG_reg[15]_0 [1]),
        .I2(\SHIFT_REG_reg[12]_0 ),
        .I3(\SHIFT_REG[15]_i_3__0_n_0 ),
        .I4(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I5(DATA_OUT[11]),
        .O(\SHIFT_REG[12]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA2)) 
    \SHIFT_REG[13]_i_1__0 
       (.I0(Q[4]),
        .I1(p_0_in11_in),
        .I2(BIT_COUNT_reg[3]),
        .I3(BIT_COUNT_reg[0]),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[2]),
        .O(\SHIFT_REG[13]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hF444FFFFF4440000)) 
    \SHIFT_REG[14]_i_1__0 
       (.I0(\SHIFT_REG[14]_i_2__0_n_0 ),
        .I1(\SHIFT_REG_reg[15]_0 [2]),
        .I2(\SHIFT_REG[15]_i_3__0_n_0 ),
        .I3(\SHIFT_REG_reg[14]_0 ),
        .I4(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I5(\SHIFT_REG_reg_n_0_[13] ),
        .O(\SHIFT_REG[14]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT5 #(
    .INIT(32'hFFFFFBFF)) 
    \SHIFT_REG[14]_i_2__0 
       (.I0(DATA_OUT[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(ADDR_RD),
        .I4(DATA_OUT[2]),
        .O(\SHIFT_REG[14]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \SHIFT_REG[15]_i_1__0 
       (.I0(MDC_RISING_REG1),
        .I1(LAST_DATA_SHIFT),
        .O(SHIFT_REG0));
  LUT5 #(
    .INIT(32'hF8FFF800)) 
    \SHIFT_REG[15]_i_2__0 
       (.I0(\SHIFT_REG[15]_i_3__0_n_0 ),
        .I1(\CONFIG_REG_WITH_AN.RESET_REG_reg ),
        .I2(\SHIFT_REG[15]_i_4__0_n_0 ),
        .I3(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I4(Q[5]),
        .O(\SHIFT_REG[15]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \SHIFT_REG[15]_i_3__0 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(ADDR_RD),
        .I3(DATA_OUT[2]),
        .I4(DATA_OUT[3]),
        .O(\SHIFT_REG[15]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0900080000000000)) 
    \SHIFT_REG[15]_i_4__0 
       (.I0(DATA_OUT[2]),
        .I1(Q[0]),
        .I2(DATA_OUT[3]),
        .I3(Q[1]),
        .I4(\SHIFT_REG_reg[15]_0 [3]),
        .I5(ADDR_RD),
        .O(\SHIFT_REG[15]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'h0EFF0E00)) 
    \SHIFT_REG[1]_i_1__0 
       (.I0(\SHIFT_REG[1]_i_2__0_n_0 ),
        .I1(\SHIFT_REG[1]_i_3__0_n_0 ),
        .I2(ADDR_RD),
        .I3(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I4(Q[0]),
        .O(\SHIFT_REG[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h000000000D080000)) 
    \SHIFT_REG[1]_i_2__0 
       (.I0(Q[0]),
        .I1(\SHIFT_REG_reg[1]_1 ),
        .I2(Q[1]),
        .I3(an_interrupt_ch1),
        .I4(DATA_OUT[3]),
        .I5(DATA_OUT[2]),
        .O(\SHIFT_REG[1]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT5 #(
    .INIT(32'h00000080)) 
    \SHIFT_REG[1]_i_3__0 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(MR_PAGE_RX_SET),
        .I3(DATA_OUT[3]),
        .I4(DATA_OUT[2]),
        .O(\SHIFT_REG[1]_i_3__0_n_0 ));
  LUT4 #(
    .INIT(16'h1F10)) 
    \SHIFT_REG[2]_i_1__0 
       (.I0(DATA_OUT[3]),
        .I1(\SHIFT_REG[2]_i_2__0_n_0 ),
        .I2(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I3(Q[1]),
        .O(\SHIFT_REG[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF00FFDFFFFF)) 
    \SHIFT_REG[2]_i_2__0 
       (.I0(MR_LINK_STATUS),
        .I1(Q[1]),
        .I2(reset_done),
        .I3(DATA_OUT[2]),
        .I4(ADDR_RD),
        .I5(Q[0]),
        .O(\SHIFT_REG[2]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000FFFF00100000)) 
    \SHIFT_REG[3]_i_1__0 
       (.I0(DATA_OUT[3]),
        .I1(Q[1]),
        .I2(ADDR_RD),
        .I3(Q[0]),
        .I4(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I5(DATA_OUT[2]),
        .O(\SHIFT_REG[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000FFFF00D50000)) 
    \SHIFT_REG[4]_i_1__0 
       (.I0(\SHIFT_REG[4]_i_2__0_n_0 ),
        .I1(status_vector_ch1),
        .I2(\SHIFT_REG[7]_i_2__0_n_0 ),
        .I3(Q[1]),
        .I4(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I5(DATA_OUT[3]),
        .O(\SHIFT_REG[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \SHIFT_REG[4]_i_2__0 
       (.I0(DATA_OUT[2]),
        .I1(ADDR_RD),
        .I2(Q[0]),
        .O(\SHIFT_REG[4]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFF000F088F000F0)) 
    \SHIFT_REG[5]_i_1__0 
       (.I0(\SHIFT_REG[7]_i_2__0_n_0 ),
        .I1(MR_AN_COMPLETE),
        .I2(\SHIFT_REG_reg_n_0_[4] ),
        .I3(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I4(\SHIFT_REG[8]_i_2__0_n_0 ),
        .I5(\SHIFT_REG[5]_i_2__0_n_0 ),
        .O(\SHIFT_REG[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT4 #(
    .INIT(16'h1110)) 
    \SHIFT_REG[5]_i_2__0 
       (.I0(DATA_OUT[2]),
        .I1(ADDR_RD),
        .I2(p_9_in),
        .I3(Q[0]),
        .O(\SHIFT_REG[5]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h020AFFFF020A0000)) 
    \SHIFT_REG[6]_i_1__0 
       (.I0(\SHIFT_REG[8]_i_2__0_n_0 ),
        .I1(Q[0]),
        .I2(DATA_OUT[2]),
        .I3(ADDR_RD),
        .I4(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I5(Q[2]),
        .O(\SHIFT_REG[6]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT5 #(
    .INIT(32'h222E2222)) 
    \SHIFT_REG[7]_i_1__0 
       (.I0(\SHIFT_REG_reg_n_0_[6] ),
        .I1(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I2(DATA_OUT[3]),
        .I3(Q[1]),
        .I4(\SHIFT_REG[7]_i_2__0_n_0 ),
        .O(\SHIFT_REG[7]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \SHIFT_REG[7]_i_2__0 
       (.I0(DATA_OUT[2]),
        .I1(ADDR_RD),
        .I2(Q[0]),
        .O(\SHIFT_REG[7]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h020AFFFF020A0000)) 
    \SHIFT_REG[8]_i_1__0 
       (.I0(\SHIFT_REG[8]_i_2__0_n_0 ),
        .I1(Q[0]),
        .I2(DATA_OUT[2]),
        .I3(ADDR_RD),
        .I4(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I5(\SHIFT_REG_reg_n_0_[7] ),
        .O(\SHIFT_REG[8]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \SHIFT_REG[8]_i_2__0 
       (.I0(Q[1]),
        .I1(DATA_OUT[3]),
        .O(\SHIFT_REG[8]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'h8F80)) 
    \SHIFT_REG[9]_i_1__0 
       (.I0(RESTART_AN_REG),
        .I1(\SHIFT_REG[15]_i_3__0_n_0 ),
        .I2(\FSM_onehot_STATE[10]_i_1__4_n_0 ),
        .I3(DATA_OUT[8]),
        .O(\SHIFT_REG[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[0] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[10] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[10]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[11] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[11]_i_1__0_n_0 ),
        .Q(DATA_OUT[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[12] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[12]_i_1__0_n_0 ),
        .Q(Q[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[13] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[13]_i_1__0_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[13] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[14] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[14]_i_1__0_n_0 ),
        .Q(Q[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[15] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[15]_i_2__0_n_0 ),
        .Q(DATA_OUT[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[1] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[2] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[2]_i_1__0_n_0 ),
        .Q(DATA_OUT[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[3] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[3]_i_1__0_n_0 ),
        .Q(DATA_OUT[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[4] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[4]_i_1__0_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[5] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[5]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[6] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[6]_i_1__0_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[7] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[7]_i_1__0_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[8] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[8]_i_1__0_n_0 ),
        .Q(DATA_OUT[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[9] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[9]_i_1__0_n_0 ),
        .Q(DATA_OUT[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0080FFFF00800000)) 
    WE_i_1__0
       (.I0(ADDRESS_MATCH_reg_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I2(\OPCODE_reg_n_0_[0] ),
        .I3(\OPCODE_reg_n_0_[1] ),
        .I4(MDC_RISING_REG2),
        .I5(WE),
        .O(WE_i_1__0_n_0));
  FDRE WE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(WE_i_1__0_n_0),
        .Q(WE),
        .R(out));
endmodule

(* ORIG_REF_NAME = "MDIO_INTERFACE" *) 
module quadsgmii_0_TEST_MDIO_INTERFACE_185
   (MDC_RISING_OUT,
    mdio_out_ch0,
    mdio_tri_ch0,
    Q,
    MDC_RISING_REG3_reg_0,
    MDC_RISING_REG3_reg_1,
    MDC_RISING_REG3_reg_2,
    \SHIFT_REG_reg[0]_0 ,
    \SHIFT_REG_reg[1]_0 ,
    p_2_out,
    LOOPBACK_REG,
    RUNDISP_EN_REG,
    CLEAR_PAGE_REC_COMB,
    CLEAR_STATUS_REG_COMB,
    out,
    MDC_RISING_REG1,
    userclk,
    MDIO_IN__0,
    \SHIFT_REG_reg[15]_0 ,
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ,
    \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ,
    \CONFIG_REG_WITH_AN.RESET_REG_reg ,
    p_6_in,
    MR_AN_COMPLETE,
    AN_COMPLETE_REG1,
    an_interrupt_ch0,
    \SHIFT_REG_reg[14]_0 ,
    \SHIFT_REG_reg[12]_0 ,
    status_vector_ch0,
    RESTART_AN_REG,
    phyad_ch0,
    MR_PAGE_RX_SET,
    TOGGLE_RX,
    \SHIFT_REG_reg[10]_0 ,
    \SHIFT_REG_reg[1]_1 ,
    MR_LINK_STATUS,
    reset_done,
    \SHIFT_REG_reg[0]_1 ,
    p_9_in);
  output MDC_RISING_OUT;
  output mdio_out_ch0;
  output mdio_tri_ch0;
  output [5:0]Q;
  output MDC_RISING_REG3_reg_0;
  output MDC_RISING_REG3_reg_1;
  output MDC_RISING_REG3_reg_2;
  output \SHIFT_REG_reg[0]_0 ;
  output \SHIFT_REG_reg[1]_0 ;
  output p_2_out;
  output LOOPBACK_REG;
  output RUNDISP_EN_REG;
  output CLEAR_PAGE_REC_COMB;
  output CLEAR_STATUS_REG_COMB;
  input out;
  input MDC_RISING_REG1;
  input userclk;
  input MDIO_IN__0;
  input [3:0]\SHIFT_REG_reg[15]_0 ;
  input \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ;
  input \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ;
  input \CONFIG_REG_WITH_AN.RESET_REG_reg ;
  input [0:0]p_6_in;
  input MR_AN_COMPLETE;
  input AN_COMPLETE_REG1;
  input an_interrupt_ch0;
  input \SHIFT_REG_reg[14]_0 ;
  input \SHIFT_REG_reg[12]_0 ;
  input [0:0]status_vector_ch0;
  input RESTART_AN_REG;
  input [4:0]phyad_ch0;
  input MR_PAGE_RX_SET;
  input TOGGLE_RX;
  input \SHIFT_REG_reg[10]_0 ;
  input \SHIFT_REG_reg[1]_1 ;
  input MR_LINK_STATUS;
  input reset_done;
  input \SHIFT_REG_reg[0]_1 ;
  input [0:0]p_9_in;

  wire ADDRESS_MATCH;
  wire ADDRESS_MATCH_COMB;
  wire ADDRESS_MATCH_i_1_n_0;
  wire ADDRESS_MATCH_i_3_n_0;
  wire ADDRESS_MATCH_reg_n_0;
  wire [0:0]ADDR_RD;
  wire [4:0]ADDR_WR;
  wire \ADDR_WR[4]_i_1_n_0 ;
  wire AN_COMPLETE_REG1;
  wire AN_INTERRUPT_ENABLE14_out;
  wire \BIT_COUNT[3]_i_3_n_0 ;
  wire BIT_COUNT__5;
  wire [3:0]BIT_COUNT_reg;
  wire CLEAR_PAGE_REC_COMB;
  wire CLEAR_STATUS_REG_COMB;
  wire \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ;
  wire \CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ;
  wire \CONFIG_REG_WITH_AN.RESET_REG_reg ;
  wire \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2_n_0 ;
  wire [15:2]DATA_OUT;
  wire \FSM_onehot_STATE[10]_i_1__3_n_0 ;
  wire \FSM_onehot_STATE[1]_i_1_n_0 ;
  wire \FSM_onehot_STATE[2]_i_1_n_0 ;
  wire \FSM_onehot_STATE[3]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[4]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[6]_i_1__3_n_0 ;
  wire \FSM_onehot_STATE[8]_i_1_n_0 ;
  wire \FSM_onehot_STATE[9]_i_1_n_0 ;
  wire \FSM_onehot_STATE_reg_n_0_[0] ;
  wire \FSM_onehot_STATE_reg_n_0_[10] ;
  wire \FSM_onehot_STATE_reg_n_0_[3] ;
  wire \FSM_onehot_STATE_reg_n_0_[4] ;
  wire \FSM_onehot_STATE_reg_n_0_[5] ;
  wire \FSM_onehot_STATE_reg_n_0_[6] ;
  wire \FSM_onehot_STATE_reg_n_0_[7] ;
  wire \FSM_onehot_STATE_reg_n_0_[8] ;
  wire \FSM_onehot_STATE_reg_n_0_[9] ;
  wire \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2_n_0 ;
  wire LAST_DATA_SHIFT;
  wire LAST_DATA_SHIFT0;
  wire LOOPBACK_REG;
  wire MDC_RISING_OUT;
  wire MDC_RISING_REG1;
  wire MDC_RISING_REG1_0;
  wire MDC_RISING_REG2;
  wire MDC_RISING_REG3_reg_0;
  wire MDC_RISING_REG3_reg_1;
  wire MDC_RISING_REG3_reg_2;
  wire MDIO_IN__0;
  wire MDIO_OUT_i_1_n_0;
  wire MDIO_OUT_i_2_n_0;
  wire MDIO_OUT_i_3_n_0;
  wire MDIO_OUT_i_4_n_0;
  wire MDIO_TRI_i_1_n_0;
  wire MR_AN_COMPLETE;
  wire MR_LINK_STATUS;
  wire MR_PAGE_RX_SET;
  wire OPCODE;
  wire \OPCODE_reg_n_0_[0] ;
  wire \OPCODE_reg_n_0_[1] ;
  wire [5:0]Q;
  wire \QSGMII_SPEC.RUNDISP_EN_REG_i_2_n_0 ;
  wire RD;
  wire RD_i_1_n_0;
  wire RD_i_2_n_0;
  wire RESTART_AN_REG;
  wire RUNDISP_EN_REG;
  wire SHIFT_REG0;
  wire \SHIFT_REG[0]_i_1_n_0 ;
  wire \SHIFT_REG[0]_i_2_n_0 ;
  wire \SHIFT_REG[0]_i_3_n_0 ;
  wire \SHIFT_REG[10]_i_1_n_0 ;
  wire \SHIFT_REG[10]_i_2_n_0 ;
  wire \SHIFT_REG[11]_i_1_n_0 ;
  wire \SHIFT_REG[11]_i_2_n_0 ;
  wire \SHIFT_REG[12]_i_1_n_0 ;
  wire \SHIFT_REG[13]_i_1_n_0 ;
  wire \SHIFT_REG[14]_i_1_n_0 ;
  wire \SHIFT_REG[14]_i_2_n_0 ;
  wire \SHIFT_REG[15]_i_2_n_0 ;
  wire \SHIFT_REG[15]_i_3_n_0 ;
  wire \SHIFT_REG[15]_i_4_n_0 ;
  wire \SHIFT_REG[1]_i_1_n_0 ;
  wire \SHIFT_REG[1]_i_2_n_0 ;
  wire \SHIFT_REG[1]_i_3_n_0 ;
  wire \SHIFT_REG[2]_i_1_n_0 ;
  wire \SHIFT_REG[2]_i_2_n_0 ;
  wire \SHIFT_REG[3]_i_1_n_0 ;
  wire \SHIFT_REG[4]_i_1_n_0 ;
  wire \SHIFT_REG[4]_i_2_n_0 ;
  wire \SHIFT_REG[5]_i_1_n_0 ;
  wire \SHIFT_REG[5]_i_2_n_0 ;
  wire \SHIFT_REG[6]_i_1_n_0 ;
  wire \SHIFT_REG[7]_i_1_n_0 ;
  wire \SHIFT_REG[7]_i_2_n_0 ;
  wire \SHIFT_REG[8]_i_1_n_0 ;
  wire \SHIFT_REG[8]_i_2_n_0 ;
  wire \SHIFT_REG[9]_i_1_n_0 ;
  wire \SHIFT_REG_reg[0]_0 ;
  wire \SHIFT_REG_reg[0]_1 ;
  wire \SHIFT_REG_reg[10]_0 ;
  wire \SHIFT_REG_reg[12]_0 ;
  wire \SHIFT_REG_reg[14]_0 ;
  wire [3:0]\SHIFT_REG_reg[15]_0 ;
  wire \SHIFT_REG_reg[1]_0 ;
  wire \SHIFT_REG_reg[1]_1 ;
  wire \SHIFT_REG_reg_n_0_[13] ;
  wire \SHIFT_REG_reg_n_0_[4] ;
  wire \SHIFT_REG_reg_n_0_[6] ;
  wire \SHIFT_REG_reg_n_0_[7] ;
  wire TOGGLE_RX;
  wire WE;
  wire WE_i_1_n_0;
  wire an_interrupt_ch0;
  wire mdio_out_ch0;
  wire mdio_tri_ch0;
  wire out;
  wire [3:0]p_0_in;
  wire p_0_in11_in;
  wire p_2_out;
  wire [0:0]p_6_in;
  wire [0:0]p_9_in;
  wire [4:0]phyad_ch0;
  wire reset_done;
  wire [0:0]status_vector_ch0;
  wire userclk;

  LUT4 #(
    .INIT(16'hBF80)) 
    ADDRESS_MATCH_i_1
       (.I0(ADDRESS_MATCH_COMB),
        .I1(MDC_RISING_REG1),
        .I2(ADDRESS_MATCH),
        .I3(ADDRESS_MATCH_reg_n_0),
        .O(ADDRESS_MATCH_i_1_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAAEBAAAAEB)) 
    ADDRESS_MATCH_i_2
       (.I0(\SHIFT_REG[15]_i_3_n_0 ),
        .I1(DATA_OUT[2]),
        .I2(phyad_ch0[3]),
        .I3(phyad_ch0[4]),
        .I4(DATA_OUT[3]),
        .I5(ADDRESS_MATCH_i_3_n_0),
        .O(ADDRESS_MATCH_COMB));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ADDRESS_MATCH_i_3
       (.I0(phyad_ch0[0]),
        .I1(ADDR_RD),
        .I2(Q[1]),
        .I3(phyad_ch0[2]),
        .I4(Q[0]),
        .I5(phyad_ch0[1]),
        .O(ADDRESS_MATCH_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ADDRESS_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ADDRESS_MATCH_i_1_n_0),
        .Q(ADDRESS_MATCH_reg_n_0),
        .R(out));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \ADDR_WR[4]_i_1 
       (.I0(MDC_RISING_REG1),
        .I1(p_0_in11_in),
        .I2(BIT_COUNT_reg[3]),
        .I3(BIT_COUNT_reg[0]),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[2]),
        .O(\ADDR_WR[4]_i_1_n_0 ));
  FDRE \ADDR_WR_reg[0] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1_n_0 ),
        .D(ADDR_RD),
        .Q(ADDR_WR[0]),
        .R(out));
  FDRE \ADDR_WR_reg[1] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1_n_0 ),
        .D(Q[0]),
        .Q(ADDR_WR[1]),
        .R(out));
  FDRE \ADDR_WR_reg[2] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1_n_0 ),
        .D(Q[1]),
        .Q(ADDR_WR[2]),
        .R(out));
  FDRE \ADDR_WR_reg[3] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1_n_0 ),
        .D(DATA_OUT[2]),
        .Q(ADDR_WR[3]),
        .R(out));
  FDRE \ADDR_WR_reg[4] 
       (.C(userclk),
        .CE(\ADDR_WR[4]_i_1_n_0 ),
        .D(DATA_OUT[3]),
        .Q(ADDR_WR[4]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT5 #(
    .INIT(32'hFFFF0015)) 
    \BIT_COUNT[0]_i_1 
       (.I0(BIT_COUNT_reg[0]),
        .I1(MDIO_OUT_i_2_n_0),
        .I2(ADDRESS_MATCH),
        .I3(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(p_0_in[0]));
  LUT6 #(
    .INIT(64'h0111000000000111)) 
    \BIT_COUNT[1]_i_1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I2(ADDRESS_MATCH),
        .I3(MDIO_OUT_i_2_n_0),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[0]),
        .O(p_0_in[1]));
  LUT4 #(
    .INIT(16'hFD57)) 
    \BIT_COUNT[2]_i_1 
       (.I0(\BIT_COUNT[3]_i_3_n_0 ),
        .I1(BIT_COUNT_reg[0]),
        .I2(BIT_COUNT_reg[1]),
        .I3(BIT_COUNT_reg[2]),
        .O(p_0_in[2]));
  LUT5 #(
    .INIT(32'hAAAAAAA2)) 
    \BIT_COUNT[3]_i_1 
       (.I0(MDC_RISING_REG1),
        .I1(MDIO_OUT_i_2_n_0),
        .I2(ADDRESS_MATCH),
        .I3(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(BIT_COUNT__5));
  LUT6 #(
    .INIT(64'hEEEEEEEBAAAAAAAA)) 
    \BIT_COUNT[3]_i_2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(\BIT_COUNT[3]_i_3_n_0 ),
        .O(p_0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'h0007)) 
    \BIT_COUNT[3]_i_3 
       (.I0(MDIO_OUT_i_2_n_0),
        .I1(ADDRESS_MATCH),
        .I2(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(\BIT_COUNT[3]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[0] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[0]),
        .Q(BIT_COUNT_reg[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[1] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[1]),
        .Q(BIT_COUNT_reg[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[2] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[2]),
        .Q(BIT_COUNT_reg[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \BIT_COUNT_reg[3] 
       (.C(userclk),
        .CE(BIT_COUNT__5),
        .D(p_0_in[3]),
        .Q(BIT_COUNT_reg[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000100000000000)) 
    CLEAR_PAGE_RECEIVED_i_1
       (.I0(ADDR_WR[3]),
        .I1(ADDR_WR[4]),
        .I2(RD),
        .I3(ADDR_WR[1]),
        .I4(ADDR_WR[0]),
        .I5(ADDR_WR[2]),
        .O(CLEAR_PAGE_REC_COMB));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    CLEAR_STATUS_REG_i_1
       (.I0(ADDR_WR[3]),
        .I1(ADDR_WR[4]),
        .I2(RD),
        .I3(ADDR_WR[0]),
        .I4(ADDR_WR[2]),
        .I5(ADDR_WR[1]),
        .O(CLEAR_STATUS_REG_COMB));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT5 #(
    .INIT(32'h00FD0020)) 
    \CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_i_1 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2_n_0 ),
        .I2(DATA_OUT[8]),
        .I3(out),
        .I4(\CONFIG_REG_WITH_AN.DUPLEX_MODE_REG_reg ),
        .O(MDC_RISING_REG3_reg_1));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT4 #(
    .INIT(16'hFF20)) 
    \CONFIG_REG_WITH_AN.POWERDOWN_REG_i_1 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2_n_0 ),
        .I2(DATA_OUT[11]),
        .I3(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ),
        .O(MDC_RISING_REG3_reg_0));
  LUT4 #(
    .INIT(16'hFF20)) 
    \CONFIG_REG_WITH_AN.RESET_REG_i_1 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2_n_0 ),
        .I2(DATA_OUT[15]),
        .I3(\CONFIG_REG_WITH_AN.RESET_REG_reg ),
        .O(MDC_RISING_REG3_reg_2));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \CONFIG_REG_WITH_AN.RESTART_AN_REG_i_1 
       (.I0(DATA_OUT[9]),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2_n_0 ),
        .O(p_2_out));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_1 
       (.I0(MDC_RISING_OUT),
        .I1(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2_n_0 ),
        .O(LOOPBACK_REG));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    \CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2 
       (.I0(ADDR_WR[4]),
        .I1(ADDR_WR[3]),
        .I2(ADDR_WR[0]),
        .I3(WE),
        .I4(ADDR_WR[2]),
        .I5(ADDR_WR[1]),
        .O(\CONFIG_REG_WITH_AN.UNIDIRECTIONAL_ENABLE_REG_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT5 #(
    .INIT(32'h00010000)) 
    \FSM_onehot_STATE[10]_i_1__3 
       (.I0(BIT_COUNT_reg[2]),
        .I1(BIT_COUNT_reg[1]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[3]),
        .I4(p_0_in11_in),
        .O(\FSM_onehot_STATE[10]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAAAAA)) 
    \FSM_onehot_STATE[1]_i_1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(ADDRESS_MATCH),
        .O(\FSM_onehot_STATE[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFE00000002)) 
    \FSM_onehot_STATE[2]_i_1 
       (.I0(ADDRESS_MATCH),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(p_0_in11_in),
        .O(\FSM_onehot_STATE[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_STATE[3]_i_1__0 
       (.I0(ADDR_RD),
        .I1(\FSM_onehot_STATE_reg_n_0_[6] ),
        .O(\FSM_onehot_STATE[3]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \FSM_onehot_STATE[4]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I2(ADDR_RD),
        .O(\FSM_onehot_STATE[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \FSM_onehot_STATE[6]_i_1__3 
       (.I0(ADDR_RD),
        .I1(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[6] ),
        .O(\FSM_onehot_STATE[6]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAAAAA)) 
    \FSM_onehot_STATE[8]_i_1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I1(BIT_COUNT_reg[3]),
        .I2(BIT_COUNT_reg[0]),
        .I3(BIT_COUNT_reg[1]),
        .I4(BIT_COUNT_reg[2]),
        .I5(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[8]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \FSM_onehot_STATE[9]_i_1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I1(BIT_COUNT_reg[2]),
        .I2(BIT_COUNT_reg[1]),
        .I3(BIT_COUNT_reg[0]),
        .I4(BIT_COUNT_reg[3]),
        .O(\FSM_onehot_STATE[9]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[0] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE_reg_n_0_[3] ),
        .Q(\FSM_onehot_STATE_reg_n_0_[0] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[10] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[10] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[1] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[1]_i_1_n_0 ),
        .Q(ADDRESS_MATCH),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[2] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[2]_i_1_n_0 ),
        .Q(p_0_in11_in),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[3] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[3]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[3] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_STATE_reg[4] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[4]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[4] ),
        .S(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[5] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE_reg_n_0_[9] ),
        .Q(\FSM_onehot_STATE_reg_n_0_[5] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[6] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[6]_i_1__3_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[6] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[7] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE_reg_n_0_[10] ),
        .Q(\FSM_onehot_STATE_reg_n_0_[7] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[8] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[8]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[8] ),
        .R(out));
  (* FSM_ENCODED_STATES = "opcode_2:00000000001,ld_phyad:00000000010,opcode_1:00000001000,data_3:00000100000,wait_for_start:00001000000,idle_or_preamble:00000010000,ta_2:00010000000,data_2:01000000000,ta_1:10000000000,data_1:00100000000,ld_regad:00000000100" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[9] 
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(\FSM_onehot_STATE[9]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[9] ),
        .R(out));
  LUT6 #(
    .INIT(64'hFBFFFFFF08000000)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_1 
       (.I0(Q[0]),
        .I1(\GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2_n_0 ),
        .I2(ADDR_WR[3]),
        .I3(ADDR_WR[4]),
        .I4(MDC_RISING_OUT),
        .I5(p_6_in),
        .O(\SHIFT_REG_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2 
       (.I0(ADDR_WR[1]),
        .I1(ADDR_WR[2]),
        .I2(WE),
        .I3(ADDR_WR[0]),
        .O(\GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB0B0F0B00000F000)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_INT_i_1 
       (.I0(Q[1]),
        .I1(AN_INTERRUPT_ENABLE14_out),
        .I2(p_6_in),
        .I3(MR_AN_COMPLETE),
        .I4(AN_COMPLETE_REG1),
        .I5(an_interrupt_ch0),
        .O(\SHIFT_REG_reg[1]_0 ));
  LUT4 #(
    .INIT(16'h2000)) 
    \GEN_INTERRUPT_LOGIC.AN_INTERRUPT_INT_i_2 
       (.I0(\GEN_INTERRUPT_LOGIC.AN_INTERRUPT_ENABLE_i_2_n_0 ),
        .I1(ADDR_WR[3]),
        .I2(ADDR_WR[4]),
        .I3(MDC_RISING_OUT),
        .O(AN_INTERRUPT_ENABLE14_out));
  LUT2 #(
    .INIT(4'h8)) 
    LAST_DATA_SHIFT_i_1
       (.I0(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I1(MDC_RISING_REG1_0),
        .O(LAST_DATA_SHIFT0));
  FDRE #(
    .INIT(1'b0)) 
    LAST_DATA_SHIFT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LAST_DATA_SHIFT0),
        .Q(LAST_DATA_SHIFT),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG1),
        .Q(MDC_RISING_REG1_0),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG1_0),
        .Q(MDC_RISING_REG2),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MDC_RISING_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MDC_RISING_REG2),
        .Q(MDC_RISING_OUT),
        .R(out));
  FDSE #(
    .INIT(1'b0)) 
    MDIO_IN_REG_reg
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(MDIO_IN__0),
        .Q(ADDR_RD),
        .S(out));
  LUT5 #(
    .INIT(32'hDDFDFFFC)) 
    MDIO_OUT_i_1
       (.I0(MDIO_OUT_i_2_n_0),
        .I1(MDIO_OUT_i_3_n_0),
        .I2(DATA_OUT[15]),
        .I3(MDIO_OUT_i_4_n_0),
        .I4(p_0_in11_in),
        .O(MDIO_OUT_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    MDIO_OUT_i_2
       (.I0(BIT_COUNT_reg[3]),
        .I1(BIT_COUNT_reg[0]),
        .I2(BIT_COUNT_reg[1]),
        .I3(BIT_COUNT_reg[2]),
        .O(MDIO_OUT_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hBF)) 
    MDIO_OUT_i_3
       (.I0(\OPCODE_reg_n_0_[0] ),
        .I1(\OPCODE_reg_n_0_[1] ),
        .I2(ADDRESS_MATCH_reg_n_0),
        .O(MDIO_OUT_i_3_n_0));
  LUT3 #(
    .INIT(8'h01)) 
    MDIO_OUT_i_4
       (.I0(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[7] ),
        .O(MDIO_OUT_i_4_n_0));
  FDSE MDIO_OUT_reg
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(MDIO_OUT_i_1_n_0),
        .Q(mdio_out_ch0),
        .S(out));
  LUT6 #(
    .INIT(64'hFFFFFFFF55550003)) 
    MDIO_TRI_i_1
       (.I0(MDIO_OUT_i_2_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[7] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I4(p_0_in11_in),
        .I5(MDIO_OUT_i_3_n_0),
        .O(MDIO_TRI_i_1_n_0));
  FDSE MDIO_TRI_reg
       (.C(userclk),
        .CE(MDC_RISING_REG1),
        .D(MDIO_TRI_i_1_n_0),
        .Q(mdio_tri_ch0),
        .S(out));
  LUT6 #(
    .INIT(64'h0000000000002000)) 
    \OPCODE[1]_i_1 
       (.I0(BIT_COUNT_reg[2]),
        .I1(BIT_COUNT_reg[3]),
        .I2(MDC_RISING_REG1),
        .I3(ADDRESS_MATCH),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[0]),
        .O(OPCODE));
  FDRE #(
    .INIT(1'b0)) 
    \OPCODE_reg[0] 
       (.C(userclk),
        .CE(OPCODE),
        .D(Q[0]),
        .Q(\OPCODE_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \OPCODE_reg[1] 
       (.C(userclk),
        .CE(OPCODE),
        .D(Q[1]),
        .Q(\OPCODE_reg_n_0_[1] ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00004000)) 
    \QSGMII_SPEC.RUNDISP_EN_REG_i_1 
       (.I0(ADDR_WR[3]),
        .I1(ADDR_WR[4]),
        .I2(MDC_RISING_OUT),
        .I3(ADDR_WR[1]),
        .I4(\QSGMII_SPEC.RUNDISP_EN_REG_i_2_n_0 ),
        .O(RUNDISP_EN_REG));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT3 #(
    .INIT(8'hFB)) 
    \QSGMII_SPEC.RUNDISP_EN_REG_i_2 
       (.I0(ADDR_WR[0]),
        .I1(WE),
        .I2(ADDR_WR[2]),
        .O(\QSGMII_SPEC.RUNDISP_EN_REG_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000004FF0400)) 
    RD_i_1
       (.I0(RD_i_2_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I2(MDIO_OUT_i_3_n_0),
        .I3(MDC_RISING_REG2),
        .I4(RD),
        .I5(out),
        .O(RD_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    RD_i_2
       (.I0(ADDRESS_MATCH_reg_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I2(\OPCODE_reg_n_0_[0] ),
        .I3(\OPCODE_reg_n_0_[1] ),
        .O(RD_i_2_n_0));
  FDRE RD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RD_i_1_n_0),
        .Q(RD),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h3808FFFF38080000)) 
    \SHIFT_REG[0]_i_1 
       (.I0(\SHIFT_REG[0]_i_2_n_0 ),
        .I1(Q[1]),
        .I2(DATA_OUT[3]),
        .I3(\SHIFT_REG[0]_i_3_n_0 ),
        .I4(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I5(ADDR_RD),
        .O(\SHIFT_REG[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \SHIFT_REG[0]_i_2 
       (.I0(Q[0]),
        .I1(DATA_OUT[2]),
        .O(\SHIFT_REG[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT5 #(
    .INIT(32'h00000AFC)) 
    \SHIFT_REG[0]_i_3 
       (.I0(\SHIFT_REG_reg[0]_1 ),
        .I1(p_6_in),
        .I2(ADDR_RD),
        .I3(Q[0]),
        .I4(DATA_OUT[2]),
        .O(\SHIFT_REG[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h01FF0100)) 
    \SHIFT_REG[10]_i_1 
       (.I0(DATA_OUT[2]),
        .I1(DATA_OUT[3]),
        .I2(\SHIFT_REG[10]_i_2_n_0 ),
        .I3(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I4(DATA_OUT[9]),
        .O(\SHIFT_REG[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFCF33FFCCFFDD)) 
    \SHIFT_REG[10]_i_2 
       (.I0(\SHIFT_REG_reg[10]_0 ),
        .I1(Q[0]),
        .I2(\SHIFT_REG_reg[15]_0 [0]),
        .I3(Q[1]),
        .I4(DATA_OUT[2]),
        .I5(ADDR_RD),
        .O(\SHIFT_REG[10]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h02FF0200)) 
    \SHIFT_REG[11]_i_1 
       (.I0(\SHIFT_REG[11]_i_2_n_0 ),
        .I1(DATA_OUT[2]),
        .I2(DATA_OUT[3]),
        .I3(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I4(Q[3]),
        .O(\SHIFT_REG[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000F000A0000FC)) 
    \SHIFT_REG[11]_i_2 
       (.I0(TOGGLE_RX),
        .I1(\CONFIG_REG_WITH_AN.POWERDOWN_REG_reg ),
        .I2(DATA_OUT[2]),
        .I3(ADDR_RD),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(\SHIFT_REG[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF444FFFFF4440000)) 
    \SHIFT_REG[12]_i_1 
       (.I0(\SHIFT_REG[14]_i_2_n_0 ),
        .I1(\SHIFT_REG_reg[15]_0 [1]),
        .I2(\SHIFT_REG_reg[12]_0 ),
        .I3(\SHIFT_REG[15]_i_3_n_0 ),
        .I4(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I5(DATA_OUT[11]),
        .O(\SHIFT_REG[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA2)) 
    \SHIFT_REG[13]_i_1 
       (.I0(Q[4]),
        .I1(p_0_in11_in),
        .I2(BIT_COUNT_reg[3]),
        .I3(BIT_COUNT_reg[0]),
        .I4(BIT_COUNT_reg[1]),
        .I5(BIT_COUNT_reg[2]),
        .O(\SHIFT_REG[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF444FFFFF4440000)) 
    \SHIFT_REG[14]_i_1 
       (.I0(\SHIFT_REG[14]_i_2_n_0 ),
        .I1(\SHIFT_REG_reg[15]_0 [2]),
        .I2(\SHIFT_REG[15]_i_3_n_0 ),
        .I3(\SHIFT_REG_reg[14]_0 ),
        .I4(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I5(\SHIFT_REG_reg_n_0_[13] ),
        .O(\SHIFT_REG[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT5 #(
    .INIT(32'hFFFFFBFF)) 
    \SHIFT_REG[14]_i_2 
       (.I0(DATA_OUT[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(ADDR_RD),
        .I4(DATA_OUT[2]),
        .O(\SHIFT_REG[14]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \SHIFT_REG[15]_i_1 
       (.I0(MDC_RISING_REG1),
        .I1(LAST_DATA_SHIFT),
        .O(SHIFT_REG0));
  LUT5 #(
    .INIT(32'hF8FFF800)) 
    \SHIFT_REG[15]_i_2 
       (.I0(\SHIFT_REG[15]_i_3_n_0 ),
        .I1(\CONFIG_REG_WITH_AN.RESET_REG_reg ),
        .I2(\SHIFT_REG[15]_i_4_n_0 ),
        .I3(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I4(Q[5]),
        .O(\SHIFT_REG[15]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \SHIFT_REG[15]_i_3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(ADDR_RD),
        .I3(DATA_OUT[2]),
        .I4(DATA_OUT[3]),
        .O(\SHIFT_REG[15]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0900080000000000)) 
    \SHIFT_REG[15]_i_4 
       (.I0(DATA_OUT[2]),
        .I1(Q[0]),
        .I2(DATA_OUT[3]),
        .I3(Q[1]),
        .I4(\SHIFT_REG_reg[15]_0 [3]),
        .I5(ADDR_RD),
        .O(\SHIFT_REG[15]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h0EFF0E00)) 
    \SHIFT_REG[1]_i_1 
       (.I0(\SHIFT_REG[1]_i_2_n_0 ),
        .I1(\SHIFT_REG[1]_i_3_n_0 ),
        .I2(ADDR_RD),
        .I3(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I4(Q[0]),
        .O(\SHIFT_REG[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000D080000)) 
    \SHIFT_REG[1]_i_2 
       (.I0(Q[0]),
        .I1(\SHIFT_REG_reg[1]_1 ),
        .I2(Q[1]),
        .I3(an_interrupt_ch0),
        .I4(DATA_OUT[3]),
        .I5(DATA_OUT[2]),
        .O(\SHIFT_REG[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT5 #(
    .INIT(32'h00000080)) 
    \SHIFT_REG[1]_i_3 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(MR_PAGE_RX_SET),
        .I3(DATA_OUT[3]),
        .I4(DATA_OUT[2]),
        .O(\SHIFT_REG[1]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h1F10)) 
    \SHIFT_REG[2]_i_1 
       (.I0(DATA_OUT[3]),
        .I1(\SHIFT_REG[2]_i_2_n_0 ),
        .I2(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I3(Q[1]),
        .O(\SHIFT_REG[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF00FFDFFFFF)) 
    \SHIFT_REG[2]_i_2 
       (.I0(MR_LINK_STATUS),
        .I1(Q[1]),
        .I2(reset_done),
        .I3(DATA_OUT[2]),
        .I4(ADDR_RD),
        .I5(Q[0]),
        .O(\SHIFT_REG[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000FFFF00100000)) 
    \SHIFT_REG[3]_i_1 
       (.I0(DATA_OUT[3]),
        .I1(Q[1]),
        .I2(ADDR_RD),
        .I3(Q[0]),
        .I4(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I5(DATA_OUT[2]),
        .O(\SHIFT_REG[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000FFFF00D50000)) 
    \SHIFT_REG[4]_i_1 
       (.I0(\SHIFT_REG[4]_i_2_n_0 ),
        .I1(status_vector_ch0),
        .I2(\SHIFT_REG[7]_i_2_n_0 ),
        .I3(Q[1]),
        .I4(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I5(DATA_OUT[3]),
        .O(\SHIFT_REG[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \SHIFT_REG[4]_i_2 
       (.I0(DATA_OUT[2]),
        .I1(ADDR_RD),
        .I2(Q[0]),
        .O(\SHIFT_REG[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFF000F088F000F0)) 
    \SHIFT_REG[5]_i_1 
       (.I0(\SHIFT_REG[7]_i_2_n_0 ),
        .I1(MR_AN_COMPLETE),
        .I2(\SHIFT_REG_reg_n_0_[4] ),
        .I3(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I4(\SHIFT_REG[8]_i_2_n_0 ),
        .I5(\SHIFT_REG[5]_i_2_n_0 ),
        .O(\SHIFT_REG[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT4 #(
    .INIT(16'h1110)) 
    \SHIFT_REG[5]_i_2 
       (.I0(DATA_OUT[2]),
        .I1(ADDR_RD),
        .I2(p_9_in),
        .I3(Q[0]),
        .O(\SHIFT_REG[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h020AFFFF020A0000)) 
    \SHIFT_REG[6]_i_1 
       (.I0(\SHIFT_REG[8]_i_2_n_0 ),
        .I1(Q[0]),
        .I2(DATA_OUT[2]),
        .I3(ADDR_RD),
        .I4(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I5(Q[2]),
        .O(\SHIFT_REG[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT5 #(
    .INIT(32'h222E2222)) 
    \SHIFT_REG[7]_i_1 
       (.I0(\SHIFT_REG_reg_n_0_[6] ),
        .I1(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I2(DATA_OUT[3]),
        .I3(Q[1]),
        .I4(\SHIFT_REG[7]_i_2_n_0 ),
        .O(\SHIFT_REG[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \SHIFT_REG[7]_i_2 
       (.I0(DATA_OUT[2]),
        .I1(ADDR_RD),
        .I2(Q[0]),
        .O(\SHIFT_REG[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h020AFFFF020A0000)) 
    \SHIFT_REG[8]_i_1 
       (.I0(\SHIFT_REG[8]_i_2_n_0 ),
        .I1(Q[0]),
        .I2(DATA_OUT[2]),
        .I3(ADDR_RD),
        .I4(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I5(\SHIFT_REG_reg_n_0_[7] ),
        .O(\SHIFT_REG[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \SHIFT_REG[8]_i_2 
       (.I0(Q[1]),
        .I1(DATA_OUT[3]),
        .O(\SHIFT_REG[8]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h8F80)) 
    \SHIFT_REG[9]_i_1 
       (.I0(RESTART_AN_REG),
        .I1(\SHIFT_REG[15]_i_3_n_0 ),
        .I2(\FSM_onehot_STATE[10]_i_1__3_n_0 ),
        .I3(DATA_OUT[8]),
        .O(\SHIFT_REG[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[0] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[10] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[10]_i_1_n_0 ),
        .Q(Q[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[11] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[11]_i_1_n_0 ),
        .Q(DATA_OUT[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[12] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[12]_i_1_n_0 ),
        .Q(Q[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[13] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[13]_i_1_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[13] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[14] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[14]_i_1_n_0 ),
        .Q(Q[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[15] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[15]_i_2_n_0 ),
        .Q(DATA_OUT[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[1] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[2] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[2]_i_1_n_0 ),
        .Q(DATA_OUT[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[3] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[3]_i_1_n_0 ),
        .Q(DATA_OUT[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[4] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[4]_i_1_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[5] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[5]_i_1_n_0 ),
        .Q(Q[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[6] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[6]_i_1_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[7] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[7]_i_1_n_0 ),
        .Q(\SHIFT_REG_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[8] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[8]_i_1_n_0 ),
        .Q(DATA_OUT[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SHIFT_REG_reg[9] 
       (.C(userclk),
        .CE(SHIFT_REG0),
        .D(\SHIFT_REG[9]_i_1_n_0 ),
        .Q(DATA_OUT[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0080FFFF00800000)) 
    WE_i_1
       (.I0(ADDRESS_MATCH_reg_n_0),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I2(\OPCODE_reg_n_0_[0] ),
        .I3(\OPCODE_reg_n_0_[1] ),
        .I4(MDC_RISING_REG2),
        .I5(WE),
        .O(WE_i_1_n_0));
  FDRE WE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(WE_i_1_n_0),
        .Q(WE),
        .R(out));
endmodule

(* ORIG_REF_NAME = "QSGMII_GEN" *) 
module quadsgmii_0_TEST_QSGMII_GEN
   (MGT_TX_RESET,
    MGT_RX_RESET,
    powerdown,
    txcharisk,
    txdata,
    enablealign,
    status_vector_ch0,
    mdio_out_ch0,
    mdio_tri_ch0,
    gmii_rxd_ch0,
    gmii_rx_er_ch0,
    an_interrupt_ch0,
    gmii_rx_dv_ch0,
    status_vector_ch1,
    mdio_out_ch1,
    mdio_tri_ch1,
    gmii_rxd_ch1,
    gmii_rx_er_ch1,
    an_interrupt_ch1,
    gmii_rx_dv_ch1,
    status_vector_ch2,
    mdio_out_ch2,
    mdio_tri_ch2,
    gmii_rxd_ch2,
    gmii_rx_er_ch2,
    an_interrupt_ch2,
    gmii_rx_dv_ch2,
    status_vector_ch3,
    mdio_out_ch3,
    mdio_tri_ch3,
    gmii_rxd_ch3,
    gmii_rx_er_ch3,
    an_interrupt_ch3,
    gmii_rx_dv_ch3,
    userclk,
    rxrecclk,
    reset,
    rxchariscomma,
    rxdata,
    rxcharisk,
    rxdisperr,
    rxnotintable,
    signal_detect,
    mdc_ch0,
    mdio_in_ch0,
    gmii_txd_ch0,
    gmii_tx_er_ch0,
    gmii_tx_en_ch0,
    txbuferr,
    phyad_ch0,
    dcm_locked,
    reset_done,
    link_timer_value_ch0,
    mdc_ch1,
    mdio_in_ch1,
    gmii_txd_ch1,
    gmii_tx_er_ch1,
    gmii_tx_en_ch1,
    phyad_ch1,
    link_timer_value_ch1,
    mdc_ch2,
    mdio_in_ch2,
    gmii_txd_ch2,
    gmii_tx_er_ch2,
    gmii_tx_en_ch2,
    phyad_ch2,
    link_timer_value_ch2,
    mdc_ch3,
    mdio_in_ch3,
    gmii_txd_ch3,
    gmii_tx_er_ch3,
    gmii_tx_en_ch3,
    phyad_ch3,
    link_timer_value_ch3);
  output MGT_TX_RESET;
  output MGT_RX_RESET;
  output powerdown;
  output [3:0]txcharisk;
  output [31:0]txdata;
  output enablealign;
  output [12:0]status_vector_ch0;
  output mdio_out_ch0;
  output mdio_tri_ch0;
  output [7:0]gmii_rxd_ch0;
  output gmii_rx_er_ch0;
  output an_interrupt_ch0;
  output gmii_rx_dv_ch0;
  output [12:0]status_vector_ch1;
  output mdio_out_ch1;
  output mdio_tri_ch1;
  output [7:0]gmii_rxd_ch1;
  output gmii_rx_er_ch1;
  output an_interrupt_ch1;
  output gmii_rx_dv_ch1;
  output [12:0]status_vector_ch2;
  output mdio_out_ch2;
  output mdio_tri_ch2;
  output [7:0]gmii_rxd_ch2;
  output gmii_rx_er_ch2;
  output an_interrupt_ch2;
  output gmii_rx_dv_ch2;
  output [12:0]status_vector_ch3;
  output mdio_out_ch3;
  output mdio_tri_ch3;
  output [7:0]gmii_rxd_ch3;
  output gmii_rx_er_ch3;
  output an_interrupt_ch3;
  output gmii_rx_dv_ch3;
  input userclk;
  input rxrecclk;
  input reset;
  input [3:0]rxchariscomma;
  input [31:0]rxdata;
  input [3:0]rxcharisk;
  input [3:0]rxdisperr;
  input [3:0]rxnotintable;
  input signal_detect;
  input mdc_ch0;
  input mdio_in_ch0;
  input [7:0]gmii_txd_ch0;
  input gmii_tx_er_ch0;
  input gmii_tx_en_ch0;
  input txbuferr;
  input [4:0]phyad_ch0;
  input dcm_locked;
  input reset_done;
  input [8:0]link_timer_value_ch0;
  input mdc_ch1;
  input mdio_in_ch1;
  input [7:0]gmii_txd_ch1;
  input gmii_tx_er_ch1;
  input gmii_tx_en_ch1;
  input [4:0]phyad_ch1;
  input [8:0]link_timer_value_ch1;
  input mdc_ch2;
  input mdio_in_ch2;
  input [7:0]gmii_txd_ch2;
  input gmii_tx_er_ch2;
  input gmii_tx_en_ch2;
  input [4:0]phyad_ch2;
  input [8:0]link_timer_value_ch2;
  input mdc_ch3;
  input mdio_in_ch3;
  input [7:0]gmii_txd_ch3;
  input gmii_tx_er_ch3;
  input gmii_tx_en_ch3;
  input [4:0]phyad_ch3;
  input [8:0]link_timer_value_ch3;

  wire ENABLEALIGN_CH0;
  wire ENABLEALIGN_CH1;
  wire ENABLEALIGN_CH2;
  wire ENABLEALIGN_CH3;
  wire GPCS_PMA_GEN_i0_n_38;
  wire GPCS_PMA_GEN_i3_n_1;
  wire MGT_RX_RESET;
  wire MGT_RX_RESET_REG1;
  wire MGT_RX_RESET_REG2;
  wire MGT_RX_RESET_REG3;
  wire MGT_TX_RESET;
  wire POWERDOWN_CH0;
  wire POWERDOWN_CH1;
  wire POWERDOWN_CH2;
  wire POWERDOWN_CH3;
  wire RESET_PRI;
  wire RXBUFERR;
  wire [1:1]RXBUFSTATUS_CH1;
  wire [1:1]RXBUFSTATUS_CH2;
  wire [1:1]RXBUFSTATUS_CH3;
  wire RXCHARISCOMMA_CH0_ELB;
  wire RXCHARISCOMMA_CH1_ELB;
  wire RXCHARISCOMMA_CH2_ELB;
  wire RXCHARISCOMMA_CH3_ELB;
  wire RXCHARISK_CH0_ELB;
  wire RXCHARISK_CH1_ELB;
  wire RXCHARISK_CH2_ELB;
  wire RXCHARISK_CH3_ELB;
  wire [2:0]RXCLKCORCNT_CH0;
  wire [2:0]RXCLKCORCNT_CH1;
  wire [2:0]RXCLKCORCNT_CH2;
  wire [2:0]RXCLKCORCNT_CH3;
  wire [7:0]RXDATA_CH0_ELB;
  wire [7:0]RXDATA_CH1_ELB;
  wire [7:0]RXDATA_CH2_ELB;
  wire [7:0]RXDATA_CH3_ELB;
  wire [7:0]RXDATA_USR;
  wire RXDISPERR_CH0_ELB;
  wire RXDISPERR_CH1_ELB;
  wire RXDISPERR_CH2_ELB;
  wire RXDISPERR_CH3_ELB;
  wire RXNOTINTABLE_CH0_ELB;
  wire RXNOTINTABLE_CH1_ELB;
  wire RXNOTINTABLE_CH2_ELB;
  wire RXNOTINTABLE_CH3_ELB;
  wire RXRESET_REC0;
  wire RXRESET_REC1;
  wire RXRESET_REC2;
  wire RXRESET_REC3;
  wire \RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_0 ;
  wire \RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_1 ;
  wire \RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_2 ;
  wire \RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_3 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_0 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_1 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_11 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_12 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_13 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_14 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_2 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_3 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_7 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_8 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_9 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_0 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_1 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_11 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_12 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_13 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_14 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_2 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_3 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_7 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_8 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_9 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_0 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_1 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_11 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_12 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_13 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_14 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_2 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_3 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_7 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_8 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_9 ;
  wire TXCHARISK_CH0;
  wire TXCHARISK_CH1;
  wire TXCHARISK_CH2;
  wire TXCHARISK_CH3;
  wire [6:0]TXDATA_CH0;
  wire [7:0]TXDATA_CH1;
  wire [7:0]TXDATA_CH2;
  wire [7:0]TXDATA_CH3;
  wire an_interrupt_ch0;
  wire an_interrupt_ch1;
  wire an_interrupt_ch2;
  wire an_interrupt_ch3;
  wire dcm_locked;
  wire enablealign;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_ch3;
  wire [7:0]gmii_rxd_ch0;
  wire [7:0]gmii_rxd_ch1;
  wire [7:0]gmii_rxd_ch2;
  wire [7:0]gmii_rxd_ch3;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch3;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch3;
  wire [7:0]gmii_txd_ch0;
  wire [7:0]gmii_txd_ch1;
  wire [7:0]gmii_txd_ch2;
  wire [7:0]gmii_txd_ch3;
  wire [8:0]link_timer_value_ch0;
  wire [8:0]link_timer_value_ch1;
  wire [8:0]link_timer_value_ch2;
  wire [8:0]link_timer_value_ch3;
  wire mdc_ch0;
  wire mdc_ch1;
  wire mdc_ch2;
  wire mdc_ch3;
  wire mdio_in_ch0;
  wire mdio_in_ch1;
  wire mdio_in_ch2;
  wire mdio_in_ch3;
  wire mdio_out_ch0;
  wire mdio_out_ch1;
  wire mdio_out_ch2;
  wire mdio_out_ch3;
  wire mdio_tri_ch0;
  wire mdio_tri_ch1;
  wire mdio_tri_ch2;
  wire mdio_tri_ch3;
  wire [4:0]phyad_ch0;
  wire [4:0]phyad_ch1;
  wire [4:0]phyad_ch2;
  wire [4:0]phyad_ch3;
  wire powerdown;
  wire reset;
  wire reset_done;
  wire reset_in0_out;
  wire reset_in1_out;
  wire reset_in2_out;
  wire [3:0]rxchariscomma;
  wire [3:0]rxcharisk;
  wire [31:0]rxdata;
  wire [3:0]rxdisperr;
  wire [3:0]rxnotintable;
  wire rxrecclk;
  wire signal_detect;
  wire [12:0]status_vector_ch0;
  wire [12:0]status_vector_ch1;
  wire [12:0]status_vector_ch2;
  wire [12:0]status_vector_ch3;
  wire txbuferr;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire userclk;

  quadsgmii_0_TEST_AGGREGATOR AGGREGATOR_I
       (.D({TXCHARISK_CH3,TXCHARISK_CH2,TXCHARISK_CH1,TXCHARISK_CH0}),
        .ENABLEALIGN(ENABLEALIGN_CH3),
        .ENABLEALIGN_reg_0(ENABLEALIGN_CH0),
        .ENABLEALIGN_reg_1(ENABLEALIGN_CH1),
        .ENABLEALIGN_reg_2(ENABLEALIGN_CH2),
        .MGT_TX_RESET(MGT_TX_RESET),
        .POWERDOWN_CH0(POWERDOWN_CH0),
        .POWERDOWN_CH1(POWERDOWN_CH1),
        .POWERDOWN_CH2(POWERDOWN_CH2),
        .POWERDOWN_CH3(POWERDOWN_CH3),
        .TXDATA_CH0(TXDATA_CH0),
        .TXDATA_CH1(TXDATA_CH1),
        .TXDATA_CH2(TXDATA_CH2),
        .TXDATA_CH3(TXDATA_CH3),
        .\TXDATA_reg[7]_0 (GPCS_PMA_GEN_i0_n_38),
        .enablealign(enablealign),
        .powerdown(powerdown),
        .txcharisk(txcharisk),
        .txdata(txdata),
        .userclk(userclk));
  quadsgmii_0_TEST_ALIGNER ALIGNER_I
       (.Q({RXCHARISCOMMA_CH3_ELB,RXCHARISCOMMA_CH2_ELB,RXCHARISCOMMA_CH1_ELB,RXCHARISCOMMA_CH0_ELB}),
        .RESET_OUT(RXRESET_REC0),
        .\RXCHARISK_ALIGNED_reg[3]_0 ({RXCHARISK_CH3_ELB,RXCHARISK_CH2_ELB,RXCHARISK_CH1_ELB,RXCHARISK_CH0_ELB}),
        .\RXDATA_ALIGNED_reg[31]_0 ({RXDATA_CH3_ELB,RXDATA_CH2_ELB,RXDATA_CH1_ELB,RXDATA_CH0_ELB}),
        .\RXDISPERR_ALIGNED_reg[3]_0 ({RXDISPERR_CH3_ELB,RXDISPERR_CH2_ELB,RXDISPERR_CH1_ELB,RXDISPERR_CH0_ELB}),
        .\RXNOTINTABLE_ALIGNED_reg[3]_0 ({RXNOTINTABLE_CH3_ELB,RXNOTINTABLE_CH2_ELB,RXNOTINTABLE_CH1_ELB,RXNOTINTABLE_CH0_ELB}),
        .rxchariscomma(rxchariscomma),
        .rxcharisk(rxcharisk),
        .rxdata(rxdata),
        .rxdisperr(rxdisperr),
        .rxnotintable(rxnotintable),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_GPCS_PMA_GEN GPCS_PMA_GEN_i0
       (.D(TXCHARISK_CH0),
        .ENCOMMAALIGN_reg(ENABLEALIGN_CH0),
        .MGT_RX_RESET(MGT_RX_RESET_REG1),
        .POWERDOWN_CH0(POWERDOWN_CH0),
        .RESET_OUT(RESET_PRI),
        .RESET_SYNC1(MGT_RX_RESET_REG2),
        .RESET_SYNC1_0(MGT_RX_RESET_REG3),
        .RXBUFERR(RXBUFERR),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_0 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_1 ),
        .RXDATA_USR(RXDATA_USR),
        .RXDISPERR_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_2 ),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_3 ),
        .SR(MGT_RX_RESET),
        .SS(reset_in2_out),
        .STATUS_VECTOR_0_PRE_reg_0(GPCS_PMA_GEN_i3_n_1),
        .\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_0 (MGT_TX_RESET),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2]_0 ({RXCLKCORCNT_CH0[2],RXCLKCORCNT_CH0[0]}),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 (reset_in1_out),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_1 (reset_in0_out),
        .\USE_ROCKET_IO.TXCHARISK_reg_0 (GPCS_PMA_GEN_i0_n_38),
        .\USE_ROCKET_IO.TXDATA_reg[6]_0 (TXDATA_CH0),
        .an_interrupt_ch0(an_interrupt_ch0),
        .dcm_locked(dcm_locked),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0),
        .gmii_rx_er_ch0(gmii_rx_er_ch0),
        .gmii_rxd_ch0(gmii_rxd_ch0),
        .gmii_tx_en_ch0(gmii_tx_en_ch0),
        .gmii_tx_er_ch0(gmii_tx_er_ch0),
        .gmii_txd_ch0(gmii_txd_ch0),
        .link_timer_value_ch0(link_timer_value_ch0),
        .mdc_ch0(mdc_ch0),
        .mdio_in_ch0(mdio_in_ch0),
        .mdio_out_ch0(mdio_out_ch0),
        .mdio_tri_ch0(mdio_tri_ch0),
        .phyad_ch0(phyad_ch0),
        .reset_done(reset_done),
        .rxrecclk(rxrecclk),
        .signal_detect(signal_detect),
        .status_vector_ch0(status_vector_ch0),
        .txbuferr(txbuferr),
        .userclk(userclk));
  quadsgmii_0_TEST_GPCS_PMA_GEN_83 GPCS_PMA_GEN_i1
       (.D({RXCLKCORCNT_CH1[2],RXCLKCORCNT_CH1[0]}),
        .ENABLEALIGN(ENABLEALIGN_CH1),
        .MGT_RX_RESET(MGT_RX_RESET_REG1),
        .POWERDOWN_CH1(POWERDOWN_CH1),
        .RESET_OUT(RESET_PRI),
        .RXBUFSTATUS(RXBUFSTATUS_CH1),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_0 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_1 ),
        .RXDATA_USR({\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_7 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_8 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_9 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_10 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_11 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_12 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_13 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_14 }),
        .RXDISPERR_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_2 ),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_3 ),
        .STATUS_VECTOR_0_PRE_reg_0(GPCS_PMA_GEN_i3_n_1),
        .TXCHARISK(TXCHARISK_CH1),
        .TXDATA_CH1(TXDATA_CH1),
        .an_interrupt_ch1(an_interrupt_ch1),
        .dcm_locked(dcm_locked),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1),
        .gmii_rx_er_ch1(gmii_rx_er_ch1),
        .gmii_rxd_ch1(gmii_rxd_ch1),
        .gmii_tx_en_ch1(gmii_tx_en_ch1),
        .gmii_tx_er_ch1(gmii_tx_er_ch1),
        .gmii_txd_ch1(gmii_txd_ch1),
        .link_timer_value_ch1(link_timer_value_ch1),
        .mdc_ch1(mdc_ch1),
        .mdio_in_ch1(mdio_in_ch1),
        .mdio_out_ch1(mdio_out_ch1),
        .mdio_tri_ch1(mdio_tri_ch1),
        .phyad_ch1(phyad_ch1),
        .reset_done(reset_done),
        .rxrecclk(rxrecclk),
        .signal_detect(signal_detect),
        .status_vector_ch1(status_vector_ch1),
        .txbuferr(txbuferr),
        .userclk(userclk));
  quadsgmii_0_TEST_GPCS_PMA_GEN_84 GPCS_PMA_GEN_i2
       (.D({RXCLKCORCNT_CH2[2],RXCLKCORCNT_CH2[0]}),
        .ENABLEALIGN(ENABLEALIGN_CH2),
        .MGT_RX_RESET(MGT_RX_RESET_REG2),
        .POWERDOWN_CH2(POWERDOWN_CH2),
        .RESET_OUT(RESET_PRI),
        .RXBUFSTATUS(RXBUFSTATUS_CH2),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_0 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_1 ),
        .RXDATA_USR({\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_7 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_8 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_9 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_10 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_11 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_12 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_13 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_14 }),
        .RXDISPERR_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_2 ),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_3 ),
        .STATUS_VECTOR_0_PRE_reg_0(GPCS_PMA_GEN_i3_n_1),
        .TXCHARISK(TXCHARISK_CH2),
        .TXDATA_CH2(TXDATA_CH2),
        .an_interrupt_ch2(an_interrupt_ch2),
        .dcm_locked(dcm_locked),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2),
        .gmii_rx_er_ch2(gmii_rx_er_ch2),
        .gmii_rxd_ch2(gmii_rxd_ch2),
        .gmii_tx_en_ch2(gmii_tx_en_ch2),
        .gmii_tx_er_ch2(gmii_tx_er_ch2),
        .gmii_txd_ch2(gmii_txd_ch2),
        .link_timer_value_ch2(link_timer_value_ch2),
        .mdc_ch2(mdc_ch2),
        .mdio_in_ch2(mdio_in_ch2),
        .mdio_out_ch2(mdio_out_ch2),
        .mdio_tri_ch2(mdio_tri_ch2),
        .phyad_ch2(phyad_ch2),
        .reset_done(reset_done),
        .rxrecclk(rxrecclk),
        .signal_detect(signal_detect),
        .status_vector_ch2(status_vector_ch2),
        .txbuferr(txbuferr),
        .userclk(userclk));
  quadsgmii_0_TEST_GPCS_PMA_GEN_85 GPCS_PMA_GEN_i3
       (.D({RXCLKCORCNT_CH3[2],RXCLKCORCNT_CH3[0]}),
        .ENABLEALIGN(ENABLEALIGN_CH3),
        .MGT_RX_RESET(MGT_RX_RESET_REG3),
        .POWERDOWN_CH3(POWERDOWN_CH3),
        .RESET_OUT(RESET_PRI),
        .RXBUFSTATUS(RXBUFSTATUS_CH3),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_0 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_1 ),
        .RXDATA_USR({\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_7 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_8 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_9 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_10 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_11 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_12 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_13 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_14 }),
        .RXDISPERR_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_2 ),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_3 ),
        .TXCHARISK(TXCHARISK_CH3),
        .TXDATA_CH3(TXDATA_CH3),
        .an_interrupt_ch3(an_interrupt_ch3),
        .data_sync_reg6(GPCS_PMA_GEN_i3_n_1),
        .dcm_locked(dcm_locked),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3),
        .gmii_rx_er_ch3(gmii_rx_er_ch3),
        .gmii_rxd_ch3(gmii_rxd_ch3),
        .gmii_tx_en_ch3(gmii_tx_en_ch3),
        .gmii_tx_er_ch3(gmii_tx_er_ch3),
        .gmii_txd_ch3(gmii_txd_ch3),
        .link_timer_value_ch3(link_timer_value_ch3),
        .mdc_ch3(mdc_ch3),
        .mdio_in_ch3(mdio_in_ch3),
        .mdio_out_ch3(mdio_out_ch3),
        .mdio_tri_ch3(mdio_tri_ch3),
        .phyad_ch3(phyad_ch3),
        .reset_done(reset_done),
        .rxrecclk(rxrecclk),
        .signal_detect(signal_detect),
        .status_vector_ch3(status_vector_ch3),
        .txbuferr(txbuferr),
        .userclk(userclk));
  quadsgmii_0_TEST_QSGMII_RX_ELASTIC_BUFFER \RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0 
       (.D({RXCHARISCOMMA_CH0_ELB,RXCHARISK_CH0_ELB,RXDISPERR_CH0_ELB,RXNOTINTABLE_CH0_ELB,RXDATA_CH0_ELB}),
        .Q(RXDATA_USR),
        .RESET_IN(MGT_RX_RESET),
        .RESET_OUT(RXRESET_REC0),
        .RXBUFERR(RXBUFERR),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_0 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_1 ),
        .\RXCLKCORCNT_reg[2]_0 ({RXCLKCORCNT_CH0[2],RXCLKCORCNT_CH0[0]}),
        .RXDISPERR_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_2 ),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_3 ),
        .rxrecclk(rxrecclk),
        .userclk(userclk));
  quadsgmii_0_TEST_QSGMII_RX_ELASTIC_BUFFER_86 \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1 
       (.D({RXCLKCORCNT_CH1[2],RXCLKCORCNT_CH1[0]}),
        .MGT_RX_RESET(MGT_RX_RESET_REG1),
        .Q({\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_7 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_8 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_9 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_10 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_11 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_12 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_13 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_14 }),
        .RESET_IN(MGT_RX_RESET),
        .RESET_OUT(RXRESET_REC1),
        .RXBUFSTATUS(RXBUFSTATUS_CH1),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_0 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_1 ),
        .RXDISPERR_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_2 ),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_3 ),
        .SS(reset_in2_out),
        .\WR_DATA_REG1_reg[12]_0 ({RXCHARISCOMMA_CH1_ELB,RXCHARISK_CH1_ELB,RXDISPERR_CH1_ELB,RXNOTINTABLE_CH1_ELB,RXDATA_CH1_ELB}),
        .rxrecclk(rxrecclk),
        .userclk(userclk));
  quadsgmii_0_TEST_QSGMII_RX_ELASTIC_BUFFER_87 \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2 
       (.D({RXCLKCORCNT_CH2[2],RXCLKCORCNT_CH2[0]}),
        .MGT_RX_RESET(MGT_RX_RESET_REG2),
        .Q({\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_7 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_8 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_9 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_10 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_11 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_12 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_13 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_14 }),
        .RESET_IN(MGT_RX_RESET),
        .RESET_OUT(RXRESET_REC2),
        .RXBUFSTATUS(RXBUFSTATUS_CH2),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_0 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_1 ),
        .RXDISPERR_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_2 ),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_3 ),
        .SS(reset_in1_out),
        .\WR_DATA_REG1_reg[12]_0 ({RXCHARISCOMMA_CH2_ELB,RXCHARISK_CH2_ELB,RXDISPERR_CH2_ELB,RXNOTINTABLE_CH2_ELB,RXDATA_CH2_ELB}),
        .rxrecclk(rxrecclk),
        .userclk(userclk));
  quadsgmii_0_TEST_QSGMII_RX_ELASTIC_BUFFER_88 \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3 
       (.D({RXCLKCORCNT_CH3[2],RXCLKCORCNT_CH3[0]}),
        .MGT_RX_RESET(MGT_RX_RESET_REG3),
        .Q({\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_7 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_8 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_9 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_10 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_11 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_12 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_13 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_14 }),
        .RESET_OUT(RXRESET_REC3),
        .RXBUFSTATUS(RXBUFSTATUS_CH3),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_0 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_1 ),
        .RXDISPERR_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_2 ),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_3 ),
        .SR(MGT_RX_RESET),
        .SS(reset_in0_out),
        .\WR_DATA_REG1_reg[12]_0 ({RXCHARISCOMMA_CH3_ELB,RXCHARISK_CH3_ELB,RXDISPERR_CH3_ELB,RXNOTINTABLE_CH3_ELB,RXDATA_CH3_ELB}),
        .rxrecclk(rxrecclk),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_reset_sync reclock_reset
       (.RESET_OUT(RESET_PRI),
        .reset(reset),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_reset_sync_89 reclock_rxreset0
       (.RESET_OUT(RXRESET_REC0),
        .SR(MGT_RX_RESET),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_reset_sync_90 reclock_rxreset1
       (.RESET_OUT(RXRESET_REC1),
        .SS(reset_in2_out),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_reset_sync_91 reclock_rxreset2
       (.RESET_OUT(RXRESET_REC2),
        .RESET_SYNC1_0(reset_in1_out),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_reset_sync_92 reclock_rxreset3
       (.RESET_OUT(RXRESET_REC3),
        .RESET_SYNC1_0(reset_in0_out),
        .rxrecclk(rxrecclk));
endmodule

(* ORIG_REF_NAME = "QSGMII_RX_ELASTIC_BUFFER" *) 
module quadsgmii_0_TEST_QSGMII_RX_ELASTIC_BUFFER
   (RXCHARISCOMMA_USR,
    RXCHARISK_USR,
    RXDISPERR_USR,
    RXNOTINTABLE_USR,
    \RXCLKCORCNT_reg[2]_0 ,
    RXBUFERR,
    Q,
    userclk,
    rxrecclk,
    RESET_IN,
    RESET_OUT,
    D);
  output RXCHARISCOMMA_USR;
  output RXCHARISK_USR;
  output RXDISPERR_USR;
  output RXNOTINTABLE_USR;
  output [1:0]\RXCLKCORCNT_reg[2]_0 ;
  output RXBUFERR;
  output [7:0]Q;
  input userclk;
  input rxrecclk;
  input RESET_IN;
  input RESET_OUT;
  input [11:0]D;

  wire [5:0]BIN_TO_GRAY;
  wire [11:0]D;
  wire D5P6_WR_REG;
  wire D5P6_WR_REG_i_2_n_0;
  wire DATA_IN;
  wire DATA_OUT;
  wire EVEN;
  wire EVEN_i_1_n_0;
  wire \GEN_FIFO[0].RD_DATA_reg_n_0_[0] ;
  wire \GEN_FIFO[10].RD_DATA_reg_n_0_[10] ;
  wire \GEN_FIFO[11].RD_DATA_reg_n_0_[11] ;
  wire \GEN_FIFO[12].RD_DATA_reg_n_0_[12] ;
  wire \GEN_FIFO[13].RD_DATA_reg_n_0_[13] ;
  wire \GEN_FIFO[1].RD_DATA_reg_n_0_[1] ;
  wire \GEN_FIFO[25].RD_DATA_reg_n_0_[25] ;
  wire \GEN_FIFO[26].RD_DATA_reg_n_0_[26] ;
  wire \GEN_FIFO[27].RD_DATA_reg_n_0_[27] ;
  wire \GEN_FIFO[28].RD_DATA_reg ;
  wire \GEN_FIFO[2].RD_DATA_reg_n_0_[2] ;
  wire \GEN_FIFO[3].RD_DATA_reg_n_0_[3] ;
  wire \GEN_FIFO[4].RD_DATA_reg_n_0_[4] ;
  wire \GEN_FIFO[5].RD_DATA_reg_n_0_[5] ;
  wire \GEN_FIFO[6].RD_DATA_reg_n_0_[6] ;
  wire \GEN_FIFO[7].RD_DATA_reg_n_0_[7] ;
  wire \GEN_FIFO[9].RD_DATA_reg_n_0_[9] ;
  wire [5:0]GRAY_TO_BIN;
  wire I1_DETECTED_WR;
  wire I1_DETECTED_WR_REG;
  wire I1_DETECTED_WR_REG_i_2_n_0;
  wire INSERT_IDLE;
  wire INSERT_IDLE_i_1__3_n_0;
  wire K28P5_WR_REG;
  wire K28P5_WR_REG_i_2_n_0;
  wire [7:0]Q;
  wire [6:0]RD_ADDR;
  wire [6:0]RD_ADDR_GRAY;
  wire \RD_ADDR_GRAY[0]_i_1_n_0 ;
  wire \RD_ADDR_GRAY[1]_i_1_n_0 ;
  wire \RD_ADDR_GRAY[2]_i_1_n_0 ;
  wire \RD_ADDR_GRAY[3]_i_1_n_0 ;
  wire \RD_ADDR_GRAY[4]_i_1_n_0 ;
  wire \RD_ADDR_GRAY[5]_i_1_n_0 ;
  wire [6:0]RD_ADDR_PLUS1;
  wire \RD_ADDR_PLUS2[6]_i_2_n_0 ;
  wire \RD_ADDR_PLUS2_reg_n_0_[0] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[2] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[6] ;
  wire RD_DATA_RAM_0;
  wire RD_DATA_RAM_1;
  wire RD_DATA_RAM_10;
  wire RD_DATA_RAM_11;
  wire RD_DATA_RAM_12;
  wire RD_DATA_RAM_13;
  wire RD_DATA_RAM_16;
  wire RD_DATA_RAM_17;
  wire RD_DATA_RAM_18;
  wire RD_DATA_RAM_19;
  wire RD_DATA_RAM_2;
  wire RD_DATA_RAM_20;
  wire RD_DATA_RAM_21;
  wire RD_DATA_RAM_22;
  wire RD_DATA_RAM_23;
  wire RD_DATA_RAM_25;
  wire RD_DATA_RAM_26;
  wire RD_DATA_RAM_27;
  wire RD_DATA_RAM_28;
  wire RD_DATA_RAM_3;
  wire RD_DATA_RAM_4;
  wire RD_DATA_RAM_5;
  wire RD_DATA_RAM_6;
  wire RD_DATA_RAM_7;
  wire RD_DATA_RAM_9;
  wire [28:0]RD_DATA_REG;
  wire RD_ENABLE;
  wire RD_ENABLE_i_10_n_0;
  wire RD_ENABLE_i_1_n_0;
  wire RD_ENABLE_i_2_n_0;
  wire RD_ENABLE_i_3_n_0;
  wire RD_ENABLE_i_4_n_0;
  wire RD_ENABLE_i_5_n_0;
  wire RD_ENABLE_i_6_n_0;
  wire RD_ENABLE_i_7_n_0;
  wire RD_ENABLE_i_8_n_0;
  wire RD_ENABLE_i_9_n_0;
  wire [6:0]RD_OCCUPANCY;
  wire [6:0]RD_OCCUPANCY01_out;
  wire \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_1 ;
  wire \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ;
  wire \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 ;
  wire REMOVE_IDLE;
  wire REMOVE_IDLE_i_1_n_0;
  wire REMOVE_IDLE_i_2_n_0;
  wire RESET_IN;
  wire RESET_OUT;
  wire RXBUFERR;
  wire RXBUFERR_i_1_n_0;
  wire RXBUFERR_i_2_n_0;
  wire RXBUFERR_i_3_n_0;
  wire RXBUFERR_i_4_n_0;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISCOMMA_USR_i_1_n_0;
  wire RXCHARISK_USR;
  wire RXCHARISK_USR_i_1_n_0;
  wire \RXCLKCORCNT[0]_i_1_n_0 ;
  wire \RXCLKCORCNT[2]_i_1_n_0 ;
  wire [1:0]\RXCLKCORCNT_reg[2]_0 ;
  wire \RXDATA_USR[0]_i_1_n_0 ;
  wire \RXDATA_USR[1]_i_1_n_0 ;
  wire \RXDATA_USR[2]_i_1_n_0 ;
  wire \RXDATA_USR[3]_i_1_n_0 ;
  wire \RXDATA_USR[4]_i_1_n_0 ;
  wire \RXDATA_USR[5]_i_1_n_0 ;
  wire \RXDATA_USR[6]_i_1_n_0 ;
  wire \RXDATA_USR[7]_i_1_n_0 ;
  wire RXDISPERR_USR;
  wire RXDISPERR_USR_i_1_n_0;
  wire RXNOTINTABLE_USR;
  wire RXNOTINTABLE_USR_i_1_n_0;
  wire WE;
  wire [6:0]WR_ADDR;
  wire \WR_ADDR_GRAY_reg_n_0_[0] ;
  wire \WR_ADDR_GRAY_reg_n_0_[1] ;
  wire \WR_ADDR_GRAY_reg_n_0_[2] ;
  wire \WR_ADDR_GRAY_reg_n_0_[3] ;
  wire \WR_ADDR_GRAY_reg_n_0_[4] ;
  wire \WR_ADDR_GRAY_reg_n_0_[5] ;
  wire [6:0]WR_ADDR_PLUS1;
  wire \WR_ADDR_PLUS2[6]_i_2_n_0 ;
  wire \WR_ADDR_PLUS2_reg_n_0_[0] ;
  wire \WR_ADDR_PLUS2_reg_n_0_[6] ;
  wire [12:9]WR_DATA_REG1;
  wire \WR_DATA_REG1_reg_n_0_[0] ;
  wire \WR_DATA_REG1_reg_n_0_[1] ;
  wire \WR_DATA_REG1_reg_n_0_[2] ;
  wire \WR_DATA_REG1_reg_n_0_[3] ;
  wire \WR_DATA_REG1_reg_n_0_[4] ;
  wire \WR_DATA_REG1_reg_n_0_[5] ;
  wire \WR_DATA_REG1_reg_n_0_[6] ;
  wire \WR_DATA_REG1_reg_n_0_[7] ;
  wire [12:0]WR_DATA_REG2;
  wire \WR_DATA_reg_n_0_[0] ;
  wire \WR_DATA_reg_n_0_[10] ;
  wire \WR_DATA_reg_n_0_[11] ;
  wire \WR_DATA_reg_n_0_[12] ;
  wire \WR_DATA_reg_n_0_[13] ;
  wire \WR_DATA_reg_n_0_[16] ;
  wire \WR_DATA_reg_n_0_[17] ;
  wire \WR_DATA_reg_n_0_[18] ;
  wire \WR_DATA_reg_n_0_[19] ;
  wire \WR_DATA_reg_n_0_[1] ;
  wire \WR_DATA_reg_n_0_[20] ;
  wire \WR_DATA_reg_n_0_[21] ;
  wire \WR_DATA_reg_n_0_[22] ;
  wire \WR_DATA_reg_n_0_[23] ;
  wire \WR_DATA_reg_n_0_[25] ;
  wire \WR_DATA_reg_n_0_[26] ;
  wire \WR_DATA_reg_n_0_[27] ;
  wire \WR_DATA_reg_n_0_[28] ;
  wire \WR_DATA_reg_n_0_[2] ;
  wire \WR_DATA_reg_n_0_[3] ;
  wire \WR_DATA_reg_n_0_[4] ;
  wire \WR_DATA_reg_n_0_[5] ;
  wire \WR_DATA_reg_n_0_[6] ;
  wire \WR_DATA_reg_n_0_[7] ;
  wire \WR_DATA_reg_n_0_[9] ;
  wire WR_ENABLE_i_1_n_0;
  wire WR_ENABLE_i_2_n_0;
  wire [6:1]WR_OCCUPANCY;
  wire [6:1]WR_OCCUPANCY00_out;
  wire WR_TOGGLE;
  wire WR_TOGGLE_i_1_n_0;
  wire insert_idle_reg;
  wire p_0_in6_in;
  wire p_0_out;
  wire p_17_in;
  wire p_1_in;
  wire p_1_in18_in;
  wire p_1_in5_in;
  wire [7:0]p_2_in;
  wire p_2_in21_in;
  wire p_2_in7_in;
  wire p_2_out;
  wire p_3_in;
  wire p_3_in24_in;
  wire p_3_in9_in;
  wire p_3_out;
  wire p_4_in;
  wire p_4_in11_in;
  wire p_4_out;
  wire p_5_in;
  wire p_5_in13_in;
  wire p_5_out;
  wire p_8_in;
  wire p_9_in;
  wire [6:0]plusOp;
  wire [6:0]plusOp__0;
  wire rxrecclk;
  wire userclk;
  wire \NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[10].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[26].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ;

  LUT5 #(
    .INIT(32'h10000004)) 
    D5P6_WR_REG_i_1
       (.I0(D5P6_WR_REG_i_2_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[4] ),
        .I2(\WR_DATA_REG1_reg_n_0_[2] ),
        .I3(\WR_DATA_REG1_reg_n_0_[0] ),
        .I4(\WR_DATA_REG1_reg_n_0_[7] ),
        .O(p_8_in));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    D5P6_WR_REG_i_2
       (.I0(\WR_DATA_REG1_reg_n_0_[6] ),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[5] ),
        .I3(p_0_in6_in),
        .I4(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(D5P6_WR_REG_i_2_n_0));
  FDRE D5P6_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_8_in),
        .Q(D5P6_WR_REG),
        .R(RESET_OUT));
  LUT1 #(
    .INIT(2'h1)) 
    EVEN_i_1
       (.I0(EVEN),
        .O(EVEN_i_1_n_0));
  FDSE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1_n_0),
        .Q(EVEN),
        .S(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[0].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[0] ),
        .DPO(RD_DATA_RAM_0),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[0].RD_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_0),
        .Q(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[10].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[10] ),
        .DPO(RD_DATA_RAM_10),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[10].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[10].RD_DATA_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_10),
        .Q(\GEN_FIFO[10].RD_DATA_reg_n_0_[10] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[11].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[11] ),
        .DPO(RD_DATA_RAM_11),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[11].RD_DATA_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_11),
        .Q(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[12].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[12] ),
        .DPO(RD_DATA_RAM_12),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[12].RD_DATA_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_12),
        .Q(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[13].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[13] ),
        .DPO(RD_DATA_RAM_13),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[13].RD_DATA_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_13),
        .Q(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[16].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[16] ),
        .DPO(RD_DATA_RAM_16),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[16].RD_DATA_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_16),
        .Q(p_2_in[0]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[17].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[17] ),
        .DPO(RD_DATA_RAM_17),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[17].RD_DATA_reg[17] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_17),
        .Q(p_2_in[1]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[18].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[18] ),
        .DPO(RD_DATA_RAM_18),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[18].RD_DATA_reg[18] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_18),
        .Q(p_2_in[2]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[19].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[19] ),
        .DPO(RD_DATA_RAM_19),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[19].RD_DATA_reg[19] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_19),
        .Q(p_2_in[3]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[1].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[1] ),
        .DPO(RD_DATA_RAM_1),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[1].RD_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_1),
        .Q(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[20].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[20] ),
        .DPO(RD_DATA_RAM_20),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[20].RD_DATA_reg[20] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_20),
        .Q(p_2_in[4]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[21].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[21] ),
        .DPO(RD_DATA_RAM_21),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[21].RD_DATA_reg[21] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_21),
        .Q(p_2_in[5]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[22].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[22] ),
        .DPO(RD_DATA_RAM_22),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[22].RD_DATA_reg[22] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_22),
        .Q(p_2_in[6]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[23].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[23] ),
        .DPO(RD_DATA_RAM_23),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[23].RD_DATA_reg[23] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_23),
        .Q(p_2_in[7]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[25].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[25] ),
        .DPO(RD_DATA_RAM_25),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[25].RD_DATA_reg[25] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_25),
        .Q(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[26].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[26] ),
        .DPO(RD_DATA_RAM_26),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[26].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[26].RD_DATA_reg[26] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_26),
        .Q(\GEN_FIFO[26].RD_DATA_reg_n_0_[26] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[27].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[27] ),
        .DPO(RD_DATA_RAM_27),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[27].RD_DATA_reg[27] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_27),
        .Q(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[28].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[28] ),
        .DPO(RD_DATA_RAM_28),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[28].RD_DATA_reg[28] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_28),
        .Q(\GEN_FIFO[28].RD_DATA_reg ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[2].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[2] ),
        .DPO(RD_DATA_RAM_2),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[2].RD_DATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_2),
        .Q(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[3].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[3] ),
        .DPO(RD_DATA_RAM_3),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[3].RD_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_3),
        .Q(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[4].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[4] ),
        .DPO(RD_DATA_RAM_4),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[4].RD_DATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_4),
        .Q(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[5].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[5] ),
        .DPO(RD_DATA_RAM_5),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[5].RD_DATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_5),
        .Q(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[6].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[6] ),
        .DPO(RD_DATA_RAM_6),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[6].RD_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_6),
        .Q(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[7].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[7] ),
        .DPO(RD_DATA_RAM_7),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[7].RD_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_7),
        .Q(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[9].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[9] ),
        .DPO(RD_DATA_RAM_9),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[9].RD_DATA_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_9),
        .Q(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .R(RESET_IN));
  LUT4 #(
    .INIT(16'h8F88)) 
    I1_DETECTED_WR_REG_i_1
       (.I0(p_8_in),
        .I1(K28P5_WR_REG),
        .I2(I1_DETECTED_WR_REG_i_2_n_0),
        .I3(D5P6_WR_REG),
        .O(I1_DETECTED_WR));
  (* SOFT_HLUTNM = "soft_lutpair326" *) 
  LUT4 #(
    .INIT(16'hFFFD)) 
    I1_DETECTED_WR_REG_i_2
       (.I0(\WR_DATA_REG1_reg_n_0_[3] ),
        .I1(\WR_DATA_REG1_reg_n_0_[0] ),
        .I2(\WR_DATA_REG1_reg_n_0_[1] ),
        .I3(K28P5_WR_REG_i_2_n_0),
        .O(I1_DETECTED_WR_REG_i_2_n_0));
  FDRE I1_DETECTED_WR_REG_reg
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(I1_DETECTED_WR),
        .Q(I1_DETECTED_WR_REG),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'h0000000000000040)) 
    INSERT_IDLE_i_1__3
       (.I0(RESET_IN),
        .I1(EVEN),
        .I2(RD_ENABLE_i_2_n_0),
        .I3(RD_ENABLE_i_3_n_0),
        .I4(RD_OCCUPANCY[6]),
        .I5(RD_ENABLE_i_4_n_0),
        .O(INSERT_IDLE_i_1__3_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__3_n_0),
        .Q(INSERT_IDLE),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair326" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    K28P5_WR_REG_i_1
       (.I0(K28P5_WR_REG_i_2_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[0] ),
        .I3(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(p_9_in));
  LUT6 #(
    .INIT(64'hDFFFFFFFFFFFFFFF)) 
    K28P5_WR_REG_i_2
       (.I0(\WR_DATA_REG1_reg_n_0_[2] ),
        .I1(\WR_DATA_REG1_reg_n_0_[6] ),
        .I2(\WR_DATA_REG1_reg_n_0_[7] ),
        .I3(\WR_DATA_REG1_reg_n_0_[4] ),
        .I4(\WR_DATA_REG1_reg_n_0_[5] ),
        .I5(p_0_in6_in),
        .O(K28P5_WR_REG_i_2_n_0));
  FDRE K28P5_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_9_in),
        .Q(K28P5_WR_REG),
        .R(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair336" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[0]_i_1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .O(\RD_ADDR_GRAY[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair337" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[1]_i_1 
       (.I0(p_1_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(\RD_ADDR_GRAY[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair337" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[2]_i_1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(p_3_in),
        .O(\RD_ADDR_GRAY[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair339" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[3]_i_1 
       (.I0(p_3_in),
        .I1(p_4_in),
        .O(\RD_ADDR_GRAY[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair339" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[4]_i_1 
       (.I0(p_4_in),
        .I1(p_5_in),
        .O(\RD_ADDR_GRAY[4]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[5]_i_1 
       (.I0(p_5_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .O(\RD_ADDR_GRAY[5]_i_1_n_0 ));
  FDRE \RD_ADDR_GRAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[0]_i_1_n_0 ),
        .Q(RD_ADDR_GRAY[0]),
        .R(RESET_IN));
  FDRE \RD_ADDR_GRAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[1]_i_1_n_0 ),
        .Q(RD_ADDR_GRAY[1]),
        .R(RESET_IN));
  FDRE \RD_ADDR_GRAY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[2]_i_1_n_0 ),
        .Q(RD_ADDR_GRAY[2]),
        .R(RESET_IN));
  FDRE \RD_ADDR_GRAY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[3]_i_1_n_0 ),
        .Q(RD_ADDR_GRAY[3]),
        .R(RESET_IN));
  FDRE \RD_ADDR_GRAY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[4]_i_1_n_0 ),
        .Q(RD_ADDR_GRAY[4]),
        .R(RESET_IN));
  FDRE \RD_ADDR_GRAY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[5]_i_1_n_0 ),
        .Q(RD_ADDR_GRAY[5]),
        .R(RESET_IN));
  FDRE \RD_ADDR_GRAY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_GRAY[6]),
        .R(RESET_IN));
  FDSE \RD_ADDR_PLUS1_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(RD_ADDR_PLUS1[0]),
        .S(RESET_IN));
  FDRE \RD_ADDR_PLUS1_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_1_in),
        .Q(RD_ADDR_PLUS1[1]),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS1_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .Q(RD_ADDR_PLUS1[2]),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS1_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_3_in),
        .Q(RD_ADDR_PLUS1[3]),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS1_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_4_in),
        .Q(RD_ADDR_PLUS1[4]),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS1_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_5_in),
        .Q(RD_ADDR_PLUS1[5]),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS1_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_PLUS1[6]),
        .R(RESET_IN));
  (* SOFT_HLUTNM = "soft_lutpair336" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \RD_ADDR_PLUS2[0]_i_1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair328" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \RD_ADDR_PLUS2[2]_i_1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair324" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \RD_ADDR_PLUS2[3]_i_1 
       (.I0(p_3_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in),
        .I3(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair324" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \RD_ADDR_PLUS2[4]_i_1 
       (.I0(p_4_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I2(p_1_in),
        .I3(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I4(p_3_in),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \RD_ADDR_PLUS2[5]_i_1 
       (.I0(p_5_in),
        .I1(p_3_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in),
        .I4(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I5(p_4_in),
        .O(plusOp[5]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \RD_ADDR_PLUS2[6]_i_1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .I1(p_4_in),
        .I2(\RD_ADDR_PLUS2[6]_i_2_n_0 ),
        .I3(p_3_in),
        .I4(p_5_in),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair328" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \RD_ADDR_PLUS2[6]_i_2 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .O(\RD_ADDR_PLUS2[6]_i_2_n_0 ));
  FDRE \RD_ADDR_PLUS2_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[0]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .R(RESET_IN));
  FDSE \RD_ADDR_PLUS2_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_GRAY[0]_i_1_n_0 ),
        .Q(p_1_in),
        .S(RESET_IN));
  FDRE \RD_ADDR_PLUS2_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[2]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS2_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[3]),
        .Q(p_3_in),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS2_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[4]),
        .Q(p_4_in),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS2_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[5]),
        .Q(p_5_in),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS2_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[6]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[0]),
        .Q(RD_ADDR[0]),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[1]),
        .Q(RD_ADDR[1]),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[2]),
        .Q(RD_ADDR[2]),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[3]),
        .Q(RD_ADDR[3]),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[4]),
        .Q(RD_ADDR[4]),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[5]),
        .Q(RD_ADDR[5]),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[6]),
        .Q(RD_ADDR[6]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .Q(RD_DATA_REG[0]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[10] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[10].RD_DATA_reg_n_0_[10] ),
        .Q(RD_DATA_REG[10]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[11] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .Q(RD_DATA_REG[11]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[12] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .Q(RD_DATA_REG[12]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[13] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .Q(RD_DATA_REG[13]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[16] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[0]),
        .Q(RD_DATA_REG[16]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[17] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[1]),
        .Q(RD_DATA_REG[17]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[18] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[2]),
        .Q(RD_DATA_REG[18]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[19] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[3]),
        .Q(RD_DATA_REG[19]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .Q(RD_DATA_REG[1]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[20] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[4]),
        .Q(RD_DATA_REG[20]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[21] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[5]),
        .Q(RD_DATA_REG[21]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[22] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[6]),
        .Q(RD_DATA_REG[22]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[23] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[7]),
        .Q(RD_DATA_REG[23]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[25] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .Q(RD_DATA_REG[25]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[26] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[26].RD_DATA_reg_n_0_[26] ),
        .Q(RD_DATA_REG[26]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[27] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .Q(RD_DATA_REG[27]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[28] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[28].RD_DATA_reg ),
        .Q(RD_DATA_REG[28]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .Q(RD_DATA_REG[2]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .Q(RD_DATA_REG[3]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .Q(RD_DATA_REG[4]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .Q(RD_DATA_REG[5]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .Q(RD_DATA_REG[6]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[7] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .Q(RD_DATA_REG[7]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[9] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .Q(RD_DATA_REG[9]),
        .R(RESET_IN));
  LUT6 #(
    .INIT(64'h4444444444444404)) 
    RD_ENABLE_i_1
       (.I0(RESET_IN),
        .I1(EVEN),
        .I2(RD_ENABLE_i_2_n_0),
        .I3(RD_ENABLE_i_3_n_0),
        .I4(RD_OCCUPANCY[6]),
        .I5(RD_ENABLE_i_4_n_0),
        .O(RD_ENABLE_i_1_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    RD_ENABLE_i_10
       (.I0(p_2_in[6]),
        .I1(p_2_in[1]),
        .I2(p_2_in[5]),
        .I3(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I4(p_2_in[3]),
        .O(RD_ENABLE_i_10_n_0));
  LUT6 #(
    .INIT(64'h00000180FFFFFFFF)) 
    RD_ENABLE_i_2
       (.I0(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .I1(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I2(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I3(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .I4(RD_ENABLE_i_5_n_0),
        .I5(RD_ENABLE_i_6_n_0),
        .O(RD_ENABLE_i_2_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    RD_ENABLE_i_3
       (.I0(RD_OCCUPANCY[3]),
        .I1(RD_OCCUPANCY[2]),
        .I2(RD_OCCUPANCY[5]),
        .I3(RD_OCCUPANCY[4]),
        .I4(RD_OCCUPANCY[0]),
        .I5(RD_OCCUPANCY[1]),
        .O(RD_ENABLE_i_3_n_0));
  LUT6 #(
    .INIT(64'hBFFF0000BFFFBFFF)) 
    RD_ENABLE_i_4
       (.I0(RD_ENABLE_i_7_n_0),
        .I1(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .I2(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .I3(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I4(RD_ENABLE_i_8_n_0),
        .I5(RD_ENABLE_i_9_n_0),
        .O(RD_ENABLE_i_4_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    RD_ENABLE_i_5
       (.I0(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .I1(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I2(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I3(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I4(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .O(RD_ENABLE_i_5_n_0));
  LUT5 #(
    .INIT(32'hFFFEBFFF)) 
    RD_ENABLE_i_6
       (.I0(RD_ENABLE_i_10_n_0),
        .I1(p_2_in[2]),
        .I2(p_2_in[7]),
        .I3(p_2_in[0]),
        .I4(p_2_in[4]),
        .O(RD_ENABLE_i_6_n_0));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    RD_ENABLE_i_7
       (.I0(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I1(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I2(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I3(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .I4(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I5(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .O(RD_ENABLE_i_7_n_0));
  LUT6 #(
    .INIT(64'hFFFF7FFFFFFFFFFF)) 
    RD_ENABLE_i_8
       (.I0(p_2_in[4]),
        .I1(p_2_in[7]),
        .I2(p_2_in[3]),
        .I3(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I4(p_2_in[0]),
        .I5(p_2_in[5]),
        .O(RD_ENABLE_i_8_n_0));
  LUT3 #(
    .INIT(8'h02)) 
    RD_ENABLE_i_9
       (.I0(p_2_in[2]),
        .I1(p_2_in[6]),
        .I2(p_2_in[1]),
        .O(RD_ENABLE_i_9_n_0));
  FDRE RD_ENABLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RD_ENABLE_i_1_n_0),
        .Q(RD_ENABLE),
        .R(1'b0));
  FDRE \RD_OCCUPANCY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[0]),
        .Q(RD_OCCUPANCY[0]),
        .R(RESET_IN));
  FDRE \RD_OCCUPANCY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[1]),
        .Q(RD_OCCUPANCY[1]),
        .R(RESET_IN));
  FDRE \RD_OCCUPANCY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[2]),
        .Q(RD_OCCUPANCY[2]),
        .R(RESET_IN));
  FDRE \RD_OCCUPANCY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[3]),
        .Q(RD_OCCUPANCY[3]),
        .R(RESET_IN));
  FDRE \RD_OCCUPANCY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[4]),
        .Q(RD_OCCUPANCY[4]),
        .R(RESET_IN));
  FDRE \RD_OCCUPANCY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[5]),
        .Q(RD_OCCUPANCY[5]),
        .R(RESET_IN));
  FDSE \RD_OCCUPANCY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[6]),
        .Q(RD_OCCUPANCY[6]),
        .S(RESET_IN));
  quadsgmii_0_TEST_qsgmii_sync_block_134 \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[0]),
        .data_out(\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_135 \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[1:0]),
        .S({\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_1 }),
        .\WR_OCCUPANCY[6]_i_8_0 (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .\WR_OCCUPANCY[6]_i_8_1 (p_17_in),
        .\WR_OCCUPANCY[6]_i_8_2 (p_1_in18_in),
        .\WR_OCCUPANCY[6]_i_8_3 (p_3_in24_in),
        .\WR_OCCUPANCY_reg[6] (\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_2_in21_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[1]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_136 \RECLOCK_RD_ADDRGRAY[2].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[2]),
        .data_out(p_3_in24_in),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_137 \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[2]),
        .S(\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ),
        .\WR_OCCUPANCY_reg[6] (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .\WR_OCCUPANCY_reg[6]_0 (p_17_in),
        .\WR_OCCUPANCY_reg[6]_1 (p_1_in18_in),
        .\WR_OCCUPANCY_reg[6]_2 (p_3_in24_in),
        .data_out(p_2_in21_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[3]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_138 \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[3]),
        .S(\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ),
        .\WR_OCCUPANCY_reg[6] (p_17_in),
        .\WR_OCCUPANCY_reg[6]_0 (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .\WR_OCCUPANCY_reg[6]_1 (p_2_in21_in),
        .data_out(p_1_in18_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[4]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_139 \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[4]),
        .S(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ),
        .\WR_OCCUPANCY_reg[6] (p_17_in),
        .\WR_OCCUPANCY_reg[6]_0 (p_1_in18_in),
        .data_out(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg1_0(RD_ADDR_GRAY[5]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_140 \RECLOCK_RD_ADDRGRAY[6].SYNC_RD_ADDRGRAY 
       (.D(WR_OCCUPANCY00_out),
        .Q(WR_ADDR),
        .S({\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_1 }),
        .\WR_OCCUPANCY_reg[6] (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_out(p_17_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[6]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_141 \RECLOCK_WR_ADDRGRAY[0].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[0]),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .data_out(p_0_out),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_142 \RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY 
       (.D(RD_OCCUPANCY01_out),
        .DI({GRAY_TO_BIN[5:2],GRAY_TO_BIN[0]}),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(RD_ADDR[1:0]),
        .\RD_OCCUPANCY_reg[6] (p_3_out),
        .\RD_OCCUPANCY_reg[6]_0 (p_5_out),
        .\RD_OCCUPANCY_reg[6]_1 (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_2 (p_4_out),
        .\RD_OCCUPANCY_reg[6]_3 (p_2_out),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 ,\RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 }),
        .data_out(p_0_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[1] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_143 \RECLOCK_WR_ADDRGRAY[2].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .\RD_OCCUPANCY_reg[6] (p_4_out),
        .\RD_OCCUPANCY_reg[6]_0 (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_1 (p_5_out),
        .\RD_OCCUPANCY_reg[6]_2 (p_3_out),
        .data_out(p_2_out),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_144 \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[3]),
        .Q(RD_ADDR[2]),
        .\RD_OCCUPANCY_reg[6] (p_5_out),
        .\RD_OCCUPANCY_reg[6]_0 (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_1 (p_4_out),
        .\RD_OCCUPANCY_reg[6]_2 (p_2_out),
        .S(\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ),
        .data_out(p_3_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[3] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_145 \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[4]),
        .Q(RD_ADDR[3]),
        .\RD_OCCUPANCY_reg[6] (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_0 (p_5_out),
        .\RD_OCCUPANCY_reg[6]_1 (p_3_out),
        .S(\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ),
        .data_out(p_4_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[4] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_146 \RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[5]),
        .Q(RD_ADDR[4]),
        .\RD_OCCUPANCY_reg[6] (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_0 (p_4_out),
        .S(\RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY_n_0 ),
        .data_out(p_5_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[5] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_147 \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY 
       (.Q(RD_ADDR[6:5]),
        .\RD_OCCUPANCY_reg[6] (p_5_out),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 }),
        .data_out(DATA_OUT),
        .data_sync_reg1_0(DATA_IN),
        .userclk(userclk));
  LUT6 #(
    .INIT(64'h0000FFFF00800000)) 
    REMOVE_IDLE_i_1
       (.I0(I1_DETECTED_WR),
        .I1(WR_OCCUPANCY[6]),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE_i_2_n_0),
        .I4(WR_TOGGLE),
        .I5(REMOVE_IDLE),
        .O(REMOVE_IDLE_i_1_n_0));
  LUT5 #(
    .INIT(32'h00000001)) 
    REMOVE_IDLE_i_2
       (.I0(WR_OCCUPANCY[1]),
        .I1(WR_OCCUPANCY[5]),
        .I2(WR_OCCUPANCY[3]),
        .I3(WR_OCCUPANCY[2]),
        .I4(WR_OCCUPANCY[4]),
        .O(REMOVE_IDLE_i_2_n_0));
  FDRE REMOVE_IDLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(REMOVE_IDLE_i_1_n_0),
        .Q(REMOVE_IDLE),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFA800)) 
    RXBUFERR_i_1
       (.I0(RXBUFERR_i_2_n_0),
        .I1(RD_OCCUPANCY[1]),
        .I2(RD_OCCUPANCY[0]),
        .I3(RD_OCCUPANCY[6]),
        .I4(RXBUFERR_i_3_n_0),
        .I5(RXBUFERR),
        .O(RXBUFERR_i_1_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    RXBUFERR_i_2
       (.I0(RD_OCCUPANCY[4]),
        .I1(RD_OCCUPANCY[5]),
        .I2(RD_OCCUPANCY[2]),
        .I3(RD_OCCUPANCY[3]),
        .O(RXBUFERR_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    RXBUFERR_i_3
       (.I0(RD_OCCUPANCY[4]),
        .I1(RD_OCCUPANCY[5]),
        .I2(RD_OCCUPANCY[2]),
        .I3(RD_OCCUPANCY[3]),
        .I4(RD_OCCUPANCY[6]),
        .I5(RXBUFERR_i_4_n_0),
        .O(RXBUFERR_i_3_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    RXBUFERR_i_4
       (.I0(RD_OCCUPANCY[1]),
        .I1(RD_OCCUPANCY[0]),
        .O(RXBUFERR_i_4_n_0));
  FDRE RXBUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXBUFERR_i_1_n_0),
        .Q(RXBUFERR),
        .R(RESET_IN));
  (* SOFT_HLUTNM = "soft_lutpair329" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISCOMMA_USR_i_1
       (.I0(RD_DATA_REG[28]),
        .I1(EVEN),
        .I2(RD_DATA_REG[12]),
        .O(RXCHARISCOMMA_USR_i_1_n_0));
  FDRE RXCHARISCOMMA_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISCOMMA_USR_i_1_n_0),
        .Q(RXCHARISCOMMA_USR),
        .R(RESET_IN));
  (* SOFT_HLUTNM = "soft_lutpair330" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISK_USR_i_1
       (.I0(RD_DATA_REG[27]),
        .I1(EVEN),
        .I2(RD_DATA_REG[11]),
        .O(RXCHARISK_USR_i_1_n_0));
  FDRE RXCHARISK_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISK_USR_i_1_n_0),
        .Q(RXCHARISK_USR),
        .R(RESET_IN));
  LUT3 #(
    .INIT(8'hBA)) 
    \RXCLKCORCNT[0]_i_1 
       (.I0(insert_idle_reg),
        .I1(\RXCLKCORCNT_reg[2]_0 [0]),
        .I2(RD_DATA_REG[13]),
        .O(\RXCLKCORCNT[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h4044)) 
    \RXCLKCORCNT[2]_i_1 
       (.I0(RESET_IN),
        .I1(insert_idle_reg),
        .I2(\RXCLKCORCNT_reg[2]_0 [0]),
        .I3(RD_DATA_REG[13]),
        .O(\RXCLKCORCNT[2]_i_1_n_0 ));
  FDRE \RXCLKCORCNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[0]_i_1_n_0 ),
        .Q(\RXCLKCORCNT_reg[2]_0 [0]),
        .R(RESET_IN));
  FDRE \RXCLKCORCNT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[2]_i_1_n_0 ),
        .Q(\RXCLKCORCNT_reg[2]_0 [1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair333" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[0]_i_1 
       (.I0(RD_DATA_REG[16]),
        .I1(EVEN),
        .I2(RD_DATA_REG[0]),
        .O(\RXDATA_USR[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair334" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[1]_i_1 
       (.I0(RD_DATA_REG[17]),
        .I1(EVEN),
        .I2(RD_DATA_REG[1]),
        .O(\RXDATA_USR[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair334" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[2]_i_1 
       (.I0(RD_DATA_REG[18]),
        .I1(EVEN),
        .I2(RD_DATA_REG[2]),
        .O(\RXDATA_USR[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair333" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[3]_i_1 
       (.I0(RD_DATA_REG[19]),
        .I1(EVEN),
        .I2(RD_DATA_REG[3]),
        .O(\RXDATA_USR[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair329" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[4]_i_1 
       (.I0(RD_DATA_REG[20]),
        .I1(EVEN),
        .I2(RD_DATA_REG[4]),
        .O(\RXDATA_USR[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair332" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[5]_i_1 
       (.I0(RD_DATA_REG[21]),
        .I1(EVEN),
        .I2(RD_DATA_REG[5]),
        .O(\RXDATA_USR[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair332" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[6]_i_1 
       (.I0(RD_DATA_REG[22]),
        .I1(EVEN),
        .I2(RD_DATA_REG[6]),
        .O(\RXDATA_USR[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair331" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[7]_i_1 
       (.I0(RD_DATA_REG[23]),
        .I1(EVEN),
        .I2(RD_DATA_REG[7]),
        .O(\RXDATA_USR[7]_i_1_n_0 ));
  FDRE \RXDATA_USR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[4]_i_1_n_0 ),
        .Q(Q[4]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[5]_i_1_n_0 ),
        .Q(Q[5]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[6]_i_1_n_0 ),
        .Q(Q[6]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[7]_i_1_n_0 ),
        .Q(Q[7]),
        .R(RESET_IN));
  (* SOFT_HLUTNM = "soft_lutpair331" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXDISPERR_USR_i_1
       (.I0(RD_DATA_REG[26]),
        .I1(EVEN),
        .I2(RD_DATA_REG[10]),
        .O(RXDISPERR_USR_i_1_n_0));
  FDRE RXDISPERR_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_USR_i_1_n_0),
        .Q(RXDISPERR_USR),
        .R(RESET_IN));
  (* SOFT_HLUTNM = "soft_lutpair330" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXNOTINTABLE_USR_i_1
       (.I0(RD_DATA_REG[25]),
        .I1(EVEN),
        .I2(RD_DATA_REG[9]),
        .O(RXNOTINTABLE_USR_i_1_n_0));
  FDRE RXNOTINTABLE_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_USR_i_1_n_0),
        .Q(RXNOTINTABLE_USR),
        .R(RESET_IN));
  (* SOFT_HLUTNM = "soft_lutpair335" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[0]_i_1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .O(BIN_TO_GRAY[0]));
  (* SOFT_HLUTNM = "soft_lutpair338" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[1]_i_1 
       (.I0(p_1_in5_in),
        .I1(p_2_in7_in),
        .O(BIN_TO_GRAY[1]));
  (* SOFT_HLUTNM = "soft_lutpair338" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[2]_i_1 
       (.I0(p_2_in7_in),
        .I1(p_3_in9_in),
        .O(BIN_TO_GRAY[2]));
  (* SOFT_HLUTNM = "soft_lutpair340" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[3]_i_1 
       (.I0(p_3_in9_in),
        .I1(p_4_in11_in),
        .O(BIN_TO_GRAY[3]));
  (* SOFT_HLUTNM = "soft_lutpair340" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[4]_i_1 
       (.I0(p_4_in11_in),
        .I1(p_5_in13_in),
        .O(BIN_TO_GRAY[4]));
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[5]_i_1 
       (.I0(p_5_in13_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .O(BIN_TO_GRAY[5]));
  FDSE \WR_ADDR_GRAY_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[0]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[3]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[4]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[5]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[5] ),
        .S(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(DATA_IN),
        .S(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(WR_ADDR_PLUS1[0]),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_1_in5_in),
        .Q(WR_ADDR_PLUS1[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_2_in7_in),
        .Q(WR_ADDR_PLUS1[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_3_in9_in),
        .Q(WR_ADDR_PLUS1[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_4_in11_in),
        .Q(WR_ADDR_PLUS1[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_5_in13_in),
        .Q(WR_ADDR_PLUS1[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(WR_ADDR_PLUS1[6]),
        .S(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair335" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \WR_ADDR_PLUS2[0]_i_1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair327" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \WR_ADDR_PLUS2[2]_i_1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .I2(p_2_in7_in),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair323" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \WR_ADDR_PLUS2[3]_i_1 
       (.I0(p_3_in9_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in5_in),
        .I3(p_2_in7_in),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair323" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[4]_i_1 
       (.I0(p_4_in11_in),
        .I1(p_2_in7_in),
        .I2(p_1_in5_in),
        .I3(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I4(p_3_in9_in),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \WR_ADDR_PLUS2[5]_i_1 
       (.I0(p_5_in13_in),
        .I1(p_3_in9_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in5_in),
        .I4(p_2_in7_in),
        .I5(p_4_in11_in),
        .O(plusOp__0[5]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[6]_i_1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .I1(p_4_in11_in),
        .I2(\WR_ADDR_PLUS2[6]_i_2_n_0 ),
        .I3(p_3_in9_in),
        .I4(p_5_in13_in),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair327" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \WR_ADDR_PLUS2[6]_i_2 
       (.I0(p_2_in7_in),
        .I1(p_1_in5_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(\WR_ADDR_PLUS2[6]_i_2_n_0 ));
  FDRE \WR_ADDR_PLUS2_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[0]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(BIN_TO_GRAY[0]),
        .Q(p_1_in5_in),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[2]),
        .Q(p_2_in7_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[3]),
        .Q(p_3_in9_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[4]),
        .Q(p_4_in11_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[5]),
        .Q(p_5_in13_in),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[6]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[0]),
        .Q(WR_ADDR[0]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[1]),
        .Q(WR_ADDR[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[2]),
        .Q(WR_ADDR[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[3]),
        .Q(WR_ADDR[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[4]),
        .Q(WR_ADDR[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[5]),
        .Q(WR_ADDR[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[6]),
        .Q(WR_ADDR[6]),
        .S(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\WR_DATA_REG1_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[10] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[9]),
        .Q(WR_DATA_REG1[10]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[10]),
        .Q(p_0_in6_in),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[11]),
        .Q(WR_DATA_REG1[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\WR_DATA_REG1_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(\WR_DATA_REG1_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(\WR_DATA_REG1_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[4]),
        .Q(\WR_DATA_REG1_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[5]),
        .Q(\WR_DATA_REG1_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[6]),
        .Q(\WR_DATA_REG1_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[7]),
        .Q(\WR_DATA_REG1_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[8]),
        .Q(WR_DATA_REG1[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(WR_DATA_REG2[0]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[10] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[10]),
        .Q(WR_DATA_REG2[10]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in6_in),
        .Q(WR_DATA_REG2[11]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[12]),
        .Q(WR_DATA_REG2[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(WR_DATA_REG2[1]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(WR_DATA_REG2[2]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(WR_DATA_REG2[3]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(WR_DATA_REG2[4]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(WR_DATA_REG2[5]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(WR_DATA_REG2[6]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(WR_DATA_REG2[7]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[9]),
        .Q(WR_DATA_REG2[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[0] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(\WR_DATA_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[10] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[10]),
        .Q(\WR_DATA_reg_n_0_[10] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[11] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(p_0_in6_in),
        .Q(\WR_DATA_reg_n_0_[11] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[12] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[12]),
        .Q(\WR_DATA_reg_n_0_[12] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[13] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(REMOVE_IDLE),
        .Q(\WR_DATA_reg_n_0_[13] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[16] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[0]),
        .Q(\WR_DATA_reg_n_0_[16] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[17] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[1]),
        .Q(\WR_DATA_reg_n_0_[17] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[18] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[2]),
        .Q(\WR_DATA_reg_n_0_[18] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[19] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[3]),
        .Q(\WR_DATA_reg_n_0_[19] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[1] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(\WR_DATA_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[20] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[4]),
        .Q(\WR_DATA_reg_n_0_[20] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[21] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[5]),
        .Q(\WR_DATA_reg_n_0_[21] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[22] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[6]),
        .Q(\WR_DATA_reg_n_0_[22] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[23] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[7]),
        .Q(\WR_DATA_reg_n_0_[23] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[25] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[9]),
        .Q(\WR_DATA_reg_n_0_[25] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[26] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[10]),
        .Q(\WR_DATA_reg_n_0_[26] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[27] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[11]),
        .Q(\WR_DATA_reg_n_0_[27] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[28] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[12]),
        .Q(\WR_DATA_reg_n_0_[28] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[2] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(\WR_DATA_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[3] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(\WR_DATA_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[4] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(\WR_DATA_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[5] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(\WR_DATA_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[6] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(\WR_DATA_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[7] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(\WR_DATA_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[9] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[9]),
        .Q(\WR_DATA_reg_n_0_[9] ),
        .R(RESET_OUT));
  LUT4 #(
    .INIT(16'h4044)) 
    WR_ENABLE_i_1
       (.I0(RESET_OUT),
        .I1(WR_TOGGLE),
        .I2(WR_ENABLE_i_2_n_0),
        .I3(I1_DETECTED_WR),
        .O(WR_ENABLE_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair325" *) 
  LUT5 #(
    .INIT(32'hFFBFFFFF)) 
    WR_ENABLE_i_2
       (.I0(REMOVE_IDLE_i_2_n_0),
        .I1(WR_TOGGLE),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE),
        .I4(WR_OCCUPANCY[6]),
        .O(WR_ENABLE_i_2_n_0));
  FDRE WR_ENABLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_ENABLE_i_1_n_0),
        .Q(WE),
        .R(1'b0));
  FDRE \WR_OCCUPANCY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[1]),
        .Q(WR_OCCUPANCY[1]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[2]),
        .Q(WR_OCCUPANCY[2]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[3]),
        .Q(WR_OCCUPANCY[3]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[4]),
        .Q(WR_OCCUPANCY[4]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[5]),
        .Q(WR_OCCUPANCY[5]),
        .R(RESET_OUT));
  FDSE \WR_OCCUPANCY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[6]),
        .Q(WR_OCCUPANCY[6]),
        .S(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair325" *) 
  LUT1 #(
    .INIT(2'h1)) 
    WR_TOGGLE_i_1
       (.I0(WR_TOGGLE),
        .O(WR_TOGGLE_i_1_n_0));
  FDSE WR_TOGGLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_TOGGLE_i_1_n_0),
        .Q(WR_TOGGLE),
        .S(RESET_OUT));
  FDRE insert_idle_reg_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE),
        .Q(insert_idle_reg),
        .R(RESET_IN));
endmodule

(* ORIG_REF_NAME = "QSGMII_RX_ELASTIC_BUFFER" *) 
module quadsgmii_0_TEST_QSGMII_RX_ELASTIC_BUFFER_86
   (RXCHARISCOMMA_USR,
    RXCHARISK_USR,
    RXDISPERR_USR,
    RXNOTINTABLE_USR,
    D,
    RXBUFSTATUS,
    Q,
    userclk,
    rxrecclk,
    SS,
    RESET_OUT,
    \WR_DATA_REG1_reg[12]_0 ,
    RESET_IN,
    MGT_RX_RESET);
  output RXCHARISCOMMA_USR;
  output RXCHARISK_USR;
  output RXDISPERR_USR;
  output RXNOTINTABLE_USR;
  output [1:0]D;
  output [0:0]RXBUFSTATUS;
  output [7:0]Q;
  input userclk;
  input rxrecclk;
  input [0:0]SS;
  input RESET_OUT;
  input [11:0]\WR_DATA_REG1_reg[12]_0 ;
  input RESET_IN;
  input MGT_RX_RESET;

  wire [5:0]BIN_TO_GRAY;
  wire [1:0]D;
  wire D5P6_WR_REG;
  wire D5P6_WR_REG_i_2__0_n_0;
  wire DATA_IN;
  wire DATA_OUT;
  wire EVEN;
  wire EVEN_i_1__0_n_0;
  wire \GEN_FIFO[0].RD_DATA_reg_n_0_[0] ;
  wire \GEN_FIFO[10].RD_DATA_reg_n_0_[10] ;
  wire \GEN_FIFO[11].RD_DATA_reg_n_0_[11] ;
  wire \GEN_FIFO[12].RD_DATA_reg_n_0_[12] ;
  wire \GEN_FIFO[13].RD_DATA_reg_n_0_[13] ;
  wire \GEN_FIFO[1].RD_DATA_reg_n_0_[1] ;
  wire \GEN_FIFO[25].RD_DATA_reg_n_0_[25] ;
  wire \GEN_FIFO[26].RD_DATA_reg_n_0_[26] ;
  wire \GEN_FIFO[27].RD_DATA_reg_n_0_[27] ;
  wire \GEN_FIFO[28].RD_DATA_reg ;
  wire \GEN_FIFO[2].RD_DATA_reg_n_0_[2] ;
  wire \GEN_FIFO[3].RD_DATA_reg_n_0_[3] ;
  wire \GEN_FIFO[4].RD_DATA_reg_n_0_[4] ;
  wire \GEN_FIFO[5].RD_DATA_reg_n_0_[5] ;
  wire \GEN_FIFO[6].RD_DATA_reg_n_0_[6] ;
  wire \GEN_FIFO[7].RD_DATA_reg_n_0_[7] ;
  wire \GEN_FIFO[9].RD_DATA_reg_n_0_[9] ;
  wire [5:0]GRAY_TO_BIN;
  wire I1_DETECTED_WR;
  wire I1_DETECTED_WR_REG;
  wire I1_DETECTED_WR_REG_i_2__0_n_0;
  wire INSERT_IDLE;
  wire INSERT_IDLE_i_1__4_n_0;
  wire K28P5_WR_REG;
  wire K28P5_WR_REG_i_2__0_n_0;
  wire MGT_RX_RESET;
  wire [7:0]Q;
  wire [6:0]RD_ADDR;
  wire [6:0]RD_ADDR_GRAY;
  wire \RD_ADDR_GRAY[0]_i_1__0_n_0 ;
  wire \RD_ADDR_GRAY[1]_i_1__0_n_0 ;
  wire \RD_ADDR_GRAY[2]_i_1__0_n_0 ;
  wire \RD_ADDR_GRAY[3]_i_1__0_n_0 ;
  wire \RD_ADDR_GRAY[4]_i_1__0_n_0 ;
  wire \RD_ADDR_GRAY[5]_i_1__0_n_0 ;
  wire [6:0]RD_ADDR_PLUS1;
  wire \RD_ADDR_PLUS2[6]_i_2__0_n_0 ;
  wire \RD_ADDR_PLUS2_reg_n_0_[0] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[2] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[6] ;
  wire RD_DATA_RAM_0;
  wire RD_DATA_RAM_1;
  wire RD_DATA_RAM_10;
  wire RD_DATA_RAM_11;
  wire RD_DATA_RAM_12;
  wire RD_DATA_RAM_13;
  wire RD_DATA_RAM_16;
  wire RD_DATA_RAM_17;
  wire RD_DATA_RAM_18;
  wire RD_DATA_RAM_19;
  wire RD_DATA_RAM_2;
  wire RD_DATA_RAM_20;
  wire RD_DATA_RAM_21;
  wire RD_DATA_RAM_22;
  wire RD_DATA_RAM_23;
  wire RD_DATA_RAM_25;
  wire RD_DATA_RAM_26;
  wire RD_DATA_RAM_27;
  wire RD_DATA_RAM_28;
  wire RD_DATA_RAM_3;
  wire RD_DATA_RAM_4;
  wire RD_DATA_RAM_5;
  wire RD_DATA_RAM_6;
  wire RD_DATA_RAM_7;
  wire RD_DATA_RAM_9;
  wire [28:0]RD_DATA_REG;
  wire RD_ENABLE;
  wire RD_ENABLE_i_10__0_n_0;
  wire RD_ENABLE_i_1__0_n_0;
  wire RD_ENABLE_i_2__0_n_0;
  wire RD_ENABLE_i_3__0_n_0;
  wire RD_ENABLE_i_4__0_n_0;
  wire RD_ENABLE_i_5__0_n_0;
  wire RD_ENABLE_i_6__0_n_0;
  wire RD_ENABLE_i_7__0_n_0;
  wire RD_ENABLE_i_8__0_n_0;
  wire RD_ENABLE_i_9__0_n_0;
  wire [6:0]RD_OCCUPANCY;
  wire [6:0]RD_OCCUPANCY01_out;
  wire \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_1 ;
  wire \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ;
  wire \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 ;
  wire REMOVE_IDLE;
  wire REMOVE_IDLE_i_1__0_n_0;
  wire REMOVE_IDLE_i_2__0_n_0;
  wire RESET_IN;
  wire RESET_OUT;
  wire RXBUFERR_i_1__0_n_0;
  wire RXBUFERR_i_2__0_n_0;
  wire RXBUFERR_i_3__0_n_0;
  wire RXBUFERR_i_4__0_n_0;
  wire [0:0]RXBUFSTATUS;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISCOMMA_USR_i_1__0_n_0;
  wire RXCHARISK_USR;
  wire RXCHARISK_USR_i_1__0_n_0;
  wire \RXCLKCORCNT[0]_i_1__0_n_0 ;
  wire \RXCLKCORCNT[2]_i_1__0_n_0 ;
  wire \RXDATA_USR[0]_i_1__0_n_0 ;
  wire \RXDATA_USR[1]_i_1__0_n_0 ;
  wire \RXDATA_USR[2]_i_1__0_n_0 ;
  wire \RXDATA_USR[3]_i_1__0_n_0 ;
  wire \RXDATA_USR[4]_i_1__0_n_0 ;
  wire \RXDATA_USR[5]_i_1__0_n_0 ;
  wire \RXDATA_USR[6]_i_1__0_n_0 ;
  wire \RXDATA_USR[7]_i_1__0_n_0 ;
  wire RXDISPERR_USR;
  wire RXDISPERR_USR_i_1__0_n_0;
  wire RXNOTINTABLE_USR;
  wire RXNOTINTABLE_USR_i_1__0_n_0;
  wire [0:0]SS;
  wire WE;
  wire [6:0]WR_ADDR;
  wire \WR_ADDR_GRAY_reg_n_0_[0] ;
  wire \WR_ADDR_GRAY_reg_n_0_[1] ;
  wire \WR_ADDR_GRAY_reg_n_0_[2] ;
  wire \WR_ADDR_GRAY_reg_n_0_[3] ;
  wire \WR_ADDR_GRAY_reg_n_0_[4] ;
  wire \WR_ADDR_GRAY_reg_n_0_[5] ;
  wire [6:0]WR_ADDR_PLUS1;
  wire \WR_ADDR_PLUS2[6]_i_2__0_n_0 ;
  wire \WR_ADDR_PLUS2_reg_n_0_[0] ;
  wire \WR_ADDR_PLUS2_reg_n_0_[6] ;
  wire [12:9]WR_DATA_REG1;
  wire [11:0]\WR_DATA_REG1_reg[12]_0 ;
  wire \WR_DATA_REG1_reg_n_0_[0] ;
  wire \WR_DATA_REG1_reg_n_0_[1] ;
  wire \WR_DATA_REG1_reg_n_0_[2] ;
  wire \WR_DATA_REG1_reg_n_0_[3] ;
  wire \WR_DATA_REG1_reg_n_0_[4] ;
  wire \WR_DATA_REG1_reg_n_0_[5] ;
  wire \WR_DATA_REG1_reg_n_0_[6] ;
  wire \WR_DATA_REG1_reg_n_0_[7] ;
  wire [12:0]WR_DATA_REG2;
  wire \WR_DATA_reg_n_0_[0] ;
  wire \WR_DATA_reg_n_0_[10] ;
  wire \WR_DATA_reg_n_0_[11] ;
  wire \WR_DATA_reg_n_0_[12] ;
  wire \WR_DATA_reg_n_0_[13] ;
  wire \WR_DATA_reg_n_0_[16] ;
  wire \WR_DATA_reg_n_0_[17] ;
  wire \WR_DATA_reg_n_0_[18] ;
  wire \WR_DATA_reg_n_0_[19] ;
  wire \WR_DATA_reg_n_0_[1] ;
  wire \WR_DATA_reg_n_0_[20] ;
  wire \WR_DATA_reg_n_0_[21] ;
  wire \WR_DATA_reg_n_0_[22] ;
  wire \WR_DATA_reg_n_0_[23] ;
  wire \WR_DATA_reg_n_0_[25] ;
  wire \WR_DATA_reg_n_0_[26] ;
  wire \WR_DATA_reg_n_0_[27] ;
  wire \WR_DATA_reg_n_0_[28] ;
  wire \WR_DATA_reg_n_0_[2] ;
  wire \WR_DATA_reg_n_0_[3] ;
  wire \WR_DATA_reg_n_0_[4] ;
  wire \WR_DATA_reg_n_0_[5] ;
  wire \WR_DATA_reg_n_0_[6] ;
  wire \WR_DATA_reg_n_0_[7] ;
  wire \WR_DATA_reg_n_0_[9] ;
  wire WR_ENABLE_i_1__0_n_0;
  wire WR_ENABLE_i_2__0_n_0;
  wire [6:1]WR_OCCUPANCY;
  wire [6:1]WR_OCCUPANCY00_out;
  wire WR_TOGGLE;
  wire WR_TOGGLE_i_1__0_n_0;
  wire insert_idle_reg;
  wire p_0_in6_in;
  wire p_0_out;
  wire p_17_in;
  wire p_1_in;
  wire p_1_in18_in;
  wire p_1_in5_in;
  wire [7:0]p_2_in;
  wire p_2_in21_in;
  wire p_2_in7_in;
  wire p_2_out;
  wire p_3_in;
  wire p_3_in24_in;
  wire p_3_in9_in;
  wire p_3_out;
  wire p_4_in;
  wire p_4_in11_in;
  wire p_4_out;
  wire p_5_in;
  wire p_5_in13_in;
  wire p_5_out;
  wire p_8_in;
  wire p_9_in;
  wire [6:0]plusOp;
  wire [6:0]plusOp__0;
  wire rxrecclk;
  wire userclk;
  wire \NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[10].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[26].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ;

  LUT5 #(
    .INIT(32'h10000004)) 
    D5P6_WR_REG_i_1__0
       (.I0(D5P6_WR_REG_i_2__0_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[4] ),
        .I2(\WR_DATA_REG1_reg_n_0_[2] ),
        .I3(\WR_DATA_REG1_reg_n_0_[0] ),
        .I4(\WR_DATA_REG1_reg_n_0_[7] ),
        .O(p_8_in));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    D5P6_WR_REG_i_2__0
       (.I0(\WR_DATA_REG1_reg_n_0_[6] ),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[5] ),
        .I3(p_0_in6_in),
        .I4(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(D5P6_WR_REG_i_2__0_n_0));
  FDRE D5P6_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_8_in),
        .Q(D5P6_WR_REG),
        .R(RESET_OUT));
  LUT1 #(
    .INIT(2'h1)) 
    EVEN_i_1__0
       (.I0(EVEN),
        .O(EVEN_i_1__0_n_0));
  FDSE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__0_n_0),
        .Q(EVEN),
        .S(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[0].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[0] ),
        .DPO(RD_DATA_RAM_0),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[0].RD_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_0),
        .Q(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[10].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[10] ),
        .DPO(RD_DATA_RAM_10),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[10].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[10].RD_DATA_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_10),
        .Q(\GEN_FIFO[10].RD_DATA_reg_n_0_[10] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[11].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[11] ),
        .DPO(RD_DATA_RAM_11),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[11].RD_DATA_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_11),
        .Q(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[12].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[12] ),
        .DPO(RD_DATA_RAM_12),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[12].RD_DATA_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_12),
        .Q(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[13].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[13] ),
        .DPO(RD_DATA_RAM_13),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[13].RD_DATA_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_13),
        .Q(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[16].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[16] ),
        .DPO(RD_DATA_RAM_16),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[16].RD_DATA_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_16),
        .Q(p_2_in[0]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[17].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[17] ),
        .DPO(RD_DATA_RAM_17),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[17].RD_DATA_reg[17] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_17),
        .Q(p_2_in[1]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[18].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[18] ),
        .DPO(RD_DATA_RAM_18),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[18].RD_DATA_reg[18] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_18),
        .Q(p_2_in[2]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[19].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[19] ),
        .DPO(RD_DATA_RAM_19),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[19].RD_DATA_reg[19] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_19),
        .Q(p_2_in[3]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[1].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[1] ),
        .DPO(RD_DATA_RAM_1),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[1].RD_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_1),
        .Q(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[20].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[20] ),
        .DPO(RD_DATA_RAM_20),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[20].RD_DATA_reg[20] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_20),
        .Q(p_2_in[4]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[21].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[21] ),
        .DPO(RD_DATA_RAM_21),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[21].RD_DATA_reg[21] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_21),
        .Q(p_2_in[5]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[22].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[22] ),
        .DPO(RD_DATA_RAM_22),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[22].RD_DATA_reg[22] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_22),
        .Q(p_2_in[6]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[23].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[23] ),
        .DPO(RD_DATA_RAM_23),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[23].RD_DATA_reg[23] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_23),
        .Q(p_2_in[7]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[25].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[25] ),
        .DPO(RD_DATA_RAM_25),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[25].RD_DATA_reg[25] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_25),
        .Q(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[26].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[26] ),
        .DPO(RD_DATA_RAM_26),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[26].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[26].RD_DATA_reg[26] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_26),
        .Q(\GEN_FIFO[26].RD_DATA_reg_n_0_[26] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[27].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[27] ),
        .DPO(RD_DATA_RAM_27),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[27].RD_DATA_reg[27] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_27),
        .Q(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[28].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[28] ),
        .DPO(RD_DATA_RAM_28),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[28].RD_DATA_reg[28] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_28),
        .Q(\GEN_FIFO[28].RD_DATA_reg ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[2].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[2] ),
        .DPO(RD_DATA_RAM_2),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[2].RD_DATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_2),
        .Q(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[3].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[3] ),
        .DPO(RD_DATA_RAM_3),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[3].RD_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_3),
        .Q(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[4].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[4] ),
        .DPO(RD_DATA_RAM_4),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[4].RD_DATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_4),
        .Q(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[5].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[5] ),
        .DPO(RD_DATA_RAM_5),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[5].RD_DATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_5),
        .Q(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[6].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[6] ),
        .DPO(RD_DATA_RAM_6),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[6].RD_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_6),
        .Q(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[7].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[7] ),
        .DPO(RD_DATA_RAM_7),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[7].RD_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_7),
        .Q(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[9].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[9] ),
        .DPO(RD_DATA_RAM_9),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[9].RD_DATA_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_9),
        .Q(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .R(SS));
  LUT4 #(
    .INIT(16'h8F88)) 
    I1_DETECTED_WR_REG_i_1__0
       (.I0(p_8_in),
        .I1(K28P5_WR_REG),
        .I2(I1_DETECTED_WR_REG_i_2__0_n_0),
        .I3(D5P6_WR_REG),
        .O(I1_DETECTED_WR));
  (* SOFT_HLUTNM = "soft_lutpair344" *) 
  LUT4 #(
    .INIT(16'hFFFD)) 
    I1_DETECTED_WR_REG_i_2__0
       (.I0(\WR_DATA_REG1_reg_n_0_[3] ),
        .I1(\WR_DATA_REG1_reg_n_0_[0] ),
        .I2(\WR_DATA_REG1_reg_n_0_[1] ),
        .I3(K28P5_WR_REG_i_2__0_n_0),
        .O(I1_DETECTED_WR_REG_i_2__0_n_0));
  FDRE I1_DETECTED_WR_REG_reg
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(I1_DETECTED_WR),
        .Q(I1_DETECTED_WR_REG),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'h0000000000000040)) 
    INSERT_IDLE_i_1__4
       (.I0(SS),
        .I1(EVEN),
        .I2(RD_ENABLE_i_2__0_n_0),
        .I3(RD_ENABLE_i_3__0_n_0),
        .I4(RD_OCCUPANCY[6]),
        .I5(RD_ENABLE_i_4__0_n_0),
        .O(INSERT_IDLE_i_1__4_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__4_n_0),
        .Q(INSERT_IDLE),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair344" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    K28P5_WR_REG_i_1__0
       (.I0(K28P5_WR_REG_i_2__0_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[0] ),
        .I3(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(p_9_in));
  LUT6 #(
    .INIT(64'hDFFFFFFFFFFFFFFF)) 
    K28P5_WR_REG_i_2__0
       (.I0(\WR_DATA_REG1_reg_n_0_[2] ),
        .I1(\WR_DATA_REG1_reg_n_0_[6] ),
        .I2(\WR_DATA_REG1_reg_n_0_[7] ),
        .I3(\WR_DATA_REG1_reg_n_0_[4] ),
        .I4(\WR_DATA_REG1_reg_n_0_[5] ),
        .I5(p_0_in6_in),
        .O(K28P5_WR_REG_i_2__0_n_0));
  FDRE K28P5_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_9_in),
        .Q(K28P5_WR_REG),
        .R(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair353" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[0]_i_1__0 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .O(\RD_ADDR_GRAY[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair355" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[1]_i_1__0 
       (.I0(p_1_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(\RD_ADDR_GRAY[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair355" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[2]_i_1__0 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(p_3_in),
        .O(\RD_ADDR_GRAY[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair357" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[3]_i_1__0 
       (.I0(p_3_in),
        .I1(p_4_in),
        .O(\RD_ADDR_GRAY[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair357" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[4]_i_1__0 
       (.I0(p_4_in),
        .I1(p_5_in),
        .O(\RD_ADDR_GRAY[4]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[5]_i_1__0 
       (.I0(p_5_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .O(\RD_ADDR_GRAY[5]_i_1__0_n_0 ));
  FDRE \RD_ADDR_GRAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[0]_i_1__0_n_0 ),
        .Q(RD_ADDR_GRAY[0]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[1]_i_1__0_n_0 ),
        .Q(RD_ADDR_GRAY[1]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[2]_i_1__0_n_0 ),
        .Q(RD_ADDR_GRAY[2]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[3]_i_1__0_n_0 ),
        .Q(RD_ADDR_GRAY[3]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[4]_i_1__0_n_0 ),
        .Q(RD_ADDR_GRAY[4]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[5]_i_1__0_n_0 ),
        .Q(RD_ADDR_GRAY[5]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_GRAY[6]),
        .R(SS));
  FDSE \RD_ADDR_PLUS1_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(RD_ADDR_PLUS1[0]),
        .S(SS));
  FDRE \RD_ADDR_PLUS1_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_1_in),
        .Q(RD_ADDR_PLUS1[1]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .Q(RD_ADDR_PLUS1[2]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_3_in),
        .Q(RD_ADDR_PLUS1[3]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_4_in),
        .Q(RD_ADDR_PLUS1[4]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_5_in),
        .Q(RD_ADDR_PLUS1[5]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_PLUS1[6]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair353" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \RD_ADDR_PLUS2[0]_i_1__0 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair347" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \RD_ADDR_PLUS2[2]_i_1__0 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair343" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \RD_ADDR_PLUS2[3]_i_1__0 
       (.I0(p_3_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in),
        .I3(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair343" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \RD_ADDR_PLUS2[4]_i_1__0 
       (.I0(p_4_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I2(p_1_in),
        .I3(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I4(p_3_in),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \RD_ADDR_PLUS2[5]_i_1__0 
       (.I0(p_5_in),
        .I1(p_3_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in),
        .I4(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I5(p_4_in),
        .O(plusOp[5]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \RD_ADDR_PLUS2[6]_i_1__0 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .I1(p_4_in),
        .I2(\RD_ADDR_PLUS2[6]_i_2__0_n_0 ),
        .I3(p_3_in),
        .I4(p_5_in),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair347" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \RD_ADDR_PLUS2[6]_i_2__0 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .O(\RD_ADDR_PLUS2[6]_i_2__0_n_0 ));
  FDRE \RD_ADDR_PLUS2_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[0]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .R(SS));
  FDSE \RD_ADDR_PLUS2_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_GRAY[0]_i_1__0_n_0 ),
        .Q(p_1_in),
        .S(SS));
  FDRE \RD_ADDR_PLUS2_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[2]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[3]),
        .Q(p_3_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[4]),
        .Q(p_4_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[5]),
        .Q(p_5_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[6]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .R(SS));
  FDRE \RD_ADDR_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[0]),
        .Q(RD_ADDR[0]),
        .R(SS));
  FDRE \RD_ADDR_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[1]),
        .Q(RD_ADDR[1]),
        .R(SS));
  FDRE \RD_ADDR_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[2]),
        .Q(RD_ADDR[2]),
        .R(SS));
  FDRE \RD_ADDR_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[3]),
        .Q(RD_ADDR[3]),
        .R(SS));
  FDRE \RD_ADDR_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[4]),
        .Q(RD_ADDR[4]),
        .R(SS));
  FDRE \RD_ADDR_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[5]),
        .Q(RD_ADDR[5]),
        .R(SS));
  FDRE \RD_ADDR_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[6]),
        .Q(RD_ADDR[6]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .Q(RD_DATA_REG[0]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[10] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[10].RD_DATA_reg_n_0_[10] ),
        .Q(RD_DATA_REG[10]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[11] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .Q(RD_DATA_REG[11]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[12] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .Q(RD_DATA_REG[12]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[13] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .Q(RD_DATA_REG[13]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[16] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[0]),
        .Q(RD_DATA_REG[16]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[17] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[1]),
        .Q(RD_DATA_REG[17]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[18] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[2]),
        .Q(RD_DATA_REG[18]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[19] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[3]),
        .Q(RD_DATA_REG[19]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .Q(RD_DATA_REG[1]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[20] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[4]),
        .Q(RD_DATA_REG[20]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[21] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[5]),
        .Q(RD_DATA_REG[21]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[22] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[6]),
        .Q(RD_DATA_REG[22]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[23] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[7]),
        .Q(RD_DATA_REG[23]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[25] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .Q(RD_DATA_REG[25]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[26] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[26].RD_DATA_reg_n_0_[26] ),
        .Q(RD_DATA_REG[26]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[27] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .Q(RD_DATA_REG[27]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[28] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[28].RD_DATA_reg ),
        .Q(RD_DATA_REG[28]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .Q(RD_DATA_REG[2]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .Q(RD_DATA_REG[3]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .Q(RD_DATA_REG[4]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .Q(RD_DATA_REG[5]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .Q(RD_DATA_REG[6]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[7] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .Q(RD_DATA_REG[7]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[9] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .Q(RD_DATA_REG[9]),
        .R(SS));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    RD_ENABLE_i_10__0
       (.I0(p_2_in[6]),
        .I1(p_2_in[1]),
        .I2(p_2_in[5]),
        .I3(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I4(p_2_in[3]),
        .O(RD_ENABLE_i_10__0_n_0));
  LUT6 #(
    .INIT(64'h4444444444444404)) 
    RD_ENABLE_i_1__0
       (.I0(SS),
        .I1(EVEN),
        .I2(RD_ENABLE_i_2__0_n_0),
        .I3(RD_ENABLE_i_3__0_n_0),
        .I4(RD_OCCUPANCY[6]),
        .I5(RD_ENABLE_i_4__0_n_0),
        .O(RD_ENABLE_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h00000180FFFFFFFF)) 
    RD_ENABLE_i_2__0
       (.I0(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .I1(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I2(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I3(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .I4(RD_ENABLE_i_5__0_n_0),
        .I5(RD_ENABLE_i_6__0_n_0),
        .O(RD_ENABLE_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    RD_ENABLE_i_3__0
       (.I0(RD_OCCUPANCY[3]),
        .I1(RD_OCCUPANCY[2]),
        .I2(RD_OCCUPANCY[5]),
        .I3(RD_OCCUPANCY[4]),
        .I4(RD_OCCUPANCY[0]),
        .I5(RD_OCCUPANCY[1]),
        .O(RD_ENABLE_i_3__0_n_0));
  LUT6 #(
    .INIT(64'hBFFF0000BFFFBFFF)) 
    RD_ENABLE_i_4__0
       (.I0(RD_ENABLE_i_7__0_n_0),
        .I1(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .I2(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .I3(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I4(RD_ENABLE_i_8__0_n_0),
        .I5(RD_ENABLE_i_9__0_n_0),
        .O(RD_ENABLE_i_4__0_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    RD_ENABLE_i_5__0
       (.I0(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .I1(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I2(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I3(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I4(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .O(RD_ENABLE_i_5__0_n_0));
  LUT5 #(
    .INIT(32'hFFFEBFFF)) 
    RD_ENABLE_i_6__0
       (.I0(RD_ENABLE_i_10__0_n_0),
        .I1(p_2_in[2]),
        .I2(p_2_in[7]),
        .I3(p_2_in[0]),
        .I4(p_2_in[4]),
        .O(RD_ENABLE_i_6__0_n_0));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    RD_ENABLE_i_7__0
       (.I0(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I1(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I2(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I3(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .I4(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I5(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .O(RD_ENABLE_i_7__0_n_0));
  LUT6 #(
    .INIT(64'hFFFF7FFFFFFFFFFF)) 
    RD_ENABLE_i_8__0
       (.I0(p_2_in[4]),
        .I1(p_2_in[7]),
        .I2(p_2_in[3]),
        .I3(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I4(p_2_in[0]),
        .I5(p_2_in[5]),
        .O(RD_ENABLE_i_8__0_n_0));
  LUT3 #(
    .INIT(8'h02)) 
    RD_ENABLE_i_9__0
       (.I0(p_2_in[2]),
        .I1(p_2_in[6]),
        .I2(p_2_in[1]),
        .O(RD_ENABLE_i_9__0_n_0));
  FDRE RD_ENABLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RD_ENABLE_i_1__0_n_0),
        .Q(RD_ENABLE),
        .R(1'b0));
  FDRE \RD_OCCUPANCY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[0]),
        .Q(RD_OCCUPANCY[0]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[1]),
        .Q(RD_OCCUPANCY[1]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[2]),
        .Q(RD_OCCUPANCY[2]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[3]),
        .Q(RD_OCCUPANCY[3]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[4]),
        .Q(RD_OCCUPANCY[4]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[5]),
        .Q(RD_OCCUPANCY[5]),
        .R(SS));
  FDSE \RD_OCCUPANCY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[6]),
        .Q(RD_OCCUPANCY[6]),
        .S(SS));
  quadsgmii_0_TEST_qsgmii_sync_block_120 \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[0]),
        .data_out(\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_121 \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[1:0]),
        .S({\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_1 }),
        .\WR_OCCUPANCY[6]_i_8__0_0 (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .\WR_OCCUPANCY[6]_i_8__0_1 (p_17_in),
        .\WR_OCCUPANCY[6]_i_8__0_2 (p_1_in18_in),
        .\WR_OCCUPANCY[6]_i_8__0_3 (p_3_in24_in),
        .\WR_OCCUPANCY_reg[6] (\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_2_in21_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[1]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_122 \RECLOCK_RD_ADDRGRAY[2].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[2]),
        .data_out(p_3_in24_in),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_123 \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[2]),
        .S(\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ),
        .\WR_OCCUPANCY_reg[6] (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .\WR_OCCUPANCY_reg[6]_0 (p_17_in),
        .\WR_OCCUPANCY_reg[6]_1 (p_1_in18_in),
        .\WR_OCCUPANCY_reg[6]_2 (p_3_in24_in),
        .data_out(p_2_in21_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[3]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_124 \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[3]),
        .S(\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ),
        .\WR_OCCUPANCY_reg[6] (p_17_in),
        .\WR_OCCUPANCY_reg[6]_0 (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .\WR_OCCUPANCY_reg[6]_1 (p_2_in21_in),
        .data_out(p_1_in18_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[4]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_125 \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[4]),
        .S(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ),
        .\WR_OCCUPANCY_reg[6] (p_17_in),
        .\WR_OCCUPANCY_reg[6]_0 (p_1_in18_in),
        .data_out(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg1_0(RD_ADDR_GRAY[5]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_126 \RECLOCK_RD_ADDRGRAY[6].SYNC_RD_ADDRGRAY 
       (.D(WR_OCCUPANCY00_out),
        .Q(WR_ADDR),
        .S({\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_1 }),
        .\WR_OCCUPANCY_reg[6] (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_out(p_17_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[6]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_127 \RECLOCK_WR_ADDRGRAY[0].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[0]),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .data_out(p_0_out),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_128 \RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY 
       (.D(RD_OCCUPANCY01_out),
        .DI({GRAY_TO_BIN[5:2],GRAY_TO_BIN[0]}),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(RD_ADDR[1:0]),
        .\RD_OCCUPANCY_reg[6] (p_3_out),
        .\RD_OCCUPANCY_reg[6]_0 (p_5_out),
        .\RD_OCCUPANCY_reg[6]_1 (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_2 (p_4_out),
        .\RD_OCCUPANCY_reg[6]_3 (p_2_out),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 ,\RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 }),
        .data_out(p_0_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[1] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_129 \RECLOCK_WR_ADDRGRAY[2].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .\RD_OCCUPANCY_reg[6] (p_4_out),
        .\RD_OCCUPANCY_reg[6]_0 (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_1 (p_5_out),
        .\RD_OCCUPANCY_reg[6]_2 (p_3_out),
        .data_out(p_2_out),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_130 \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[3]),
        .Q(RD_ADDR[2]),
        .\RD_OCCUPANCY_reg[6] (p_5_out),
        .\RD_OCCUPANCY_reg[6]_0 (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_1 (p_4_out),
        .\RD_OCCUPANCY_reg[6]_2 (p_2_out),
        .S(\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ),
        .data_out(p_3_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[3] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_131 \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[4]),
        .Q(RD_ADDR[3]),
        .\RD_OCCUPANCY_reg[6] (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_0 (p_5_out),
        .\RD_OCCUPANCY_reg[6]_1 (p_3_out),
        .S(\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ),
        .data_out(p_4_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[4] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_132 \RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[5]),
        .Q(RD_ADDR[4]),
        .\RD_OCCUPANCY_reg[6] (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_0 (p_4_out),
        .S(\RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY_n_0 ),
        .data_out(p_5_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[5] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_133 \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY 
       (.Q(RD_ADDR[6:5]),
        .\RD_OCCUPANCY_reg[6] (p_5_out),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 }),
        .data_out(DATA_OUT),
        .data_sync_reg1_0(DATA_IN),
        .userclk(userclk));
  LUT6 #(
    .INIT(64'h0000FFFF00800000)) 
    REMOVE_IDLE_i_1__0
       (.I0(I1_DETECTED_WR),
        .I1(WR_OCCUPANCY[6]),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE_i_2__0_n_0),
        .I4(WR_TOGGLE),
        .I5(REMOVE_IDLE),
        .O(REMOVE_IDLE_i_1__0_n_0));
  LUT5 #(
    .INIT(32'h00000001)) 
    REMOVE_IDLE_i_2__0
       (.I0(WR_OCCUPANCY[1]),
        .I1(WR_OCCUPANCY[5]),
        .I2(WR_OCCUPANCY[3]),
        .I3(WR_OCCUPANCY[2]),
        .I4(WR_OCCUPANCY[4]),
        .O(REMOVE_IDLE_i_2__0_n_0));
  FDRE REMOVE_IDLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(REMOVE_IDLE_i_1__0_n_0),
        .Q(REMOVE_IDLE),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFA800)) 
    RXBUFERR_i_1__0
       (.I0(RXBUFERR_i_2__0_n_0),
        .I1(RD_OCCUPANCY[1]),
        .I2(RD_OCCUPANCY[0]),
        .I3(RD_OCCUPANCY[6]),
        .I4(RXBUFERR_i_3__0_n_0),
        .I5(RXBUFSTATUS),
        .O(RXBUFERR_i_1__0_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    RXBUFERR_i_2__0
       (.I0(RD_OCCUPANCY[4]),
        .I1(RD_OCCUPANCY[5]),
        .I2(RD_OCCUPANCY[2]),
        .I3(RD_OCCUPANCY[3]),
        .O(RXBUFERR_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    RXBUFERR_i_3__0
       (.I0(RD_OCCUPANCY[4]),
        .I1(RD_OCCUPANCY[5]),
        .I2(RD_OCCUPANCY[2]),
        .I3(RD_OCCUPANCY[3]),
        .I4(RD_OCCUPANCY[6]),
        .I5(RXBUFERR_i_4__0_n_0),
        .O(RXBUFERR_i_3__0_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    RXBUFERR_i_4__0
       (.I0(RD_OCCUPANCY[1]),
        .I1(RD_OCCUPANCY[0]),
        .O(RXBUFERR_i_4__0_n_0));
  FDRE RXBUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXBUFERR_i_1__0_n_0),
        .Q(RXBUFSTATUS),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair345" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISCOMMA_USR_i_1__0
       (.I0(RD_DATA_REG[28]),
        .I1(EVEN),
        .I2(RD_DATA_REG[12]),
        .O(RXCHARISCOMMA_USR_i_1__0_n_0));
  FDRE RXCHARISCOMMA_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISCOMMA_USR_i_1__0_n_0),
        .Q(RXCHARISCOMMA_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair348" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISK_USR_i_1__0
       (.I0(RD_DATA_REG[27]),
        .I1(EVEN),
        .I2(RD_DATA_REG[11]),
        .O(RXCHARISK_USR_i_1__0_n_0));
  FDRE RXCHARISK_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISK_USR_i_1__0_n_0),
        .Q(RXCHARISK_USR),
        .R(SS));
  LUT3 #(
    .INIT(8'hBA)) 
    \RXCLKCORCNT[0]_i_1__0 
       (.I0(insert_idle_reg),
        .I1(D[0]),
        .I2(RD_DATA_REG[13]),
        .O(\RXCLKCORCNT[0]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h10001010)) 
    \RXCLKCORCNT[2]_i_1__0 
       (.I0(RESET_IN),
        .I1(MGT_RX_RESET),
        .I2(insert_idle_reg),
        .I3(D[0]),
        .I4(RD_DATA_REG[13]),
        .O(\RXCLKCORCNT[2]_i_1__0_n_0 ));
  FDRE \RXCLKCORCNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[0]_i_1__0_n_0 ),
        .Q(D[0]),
        .R(SS));
  FDRE \RXCLKCORCNT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[2]_i_1__0_n_0 ),
        .Q(D[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair351" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[0]_i_1__0 
       (.I0(RD_DATA_REG[16]),
        .I1(EVEN),
        .I2(RD_DATA_REG[0]),
        .O(\RXDATA_USR[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair352" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[1]_i_1__0 
       (.I0(RD_DATA_REG[17]),
        .I1(EVEN),
        .I2(RD_DATA_REG[1]),
        .O(\RXDATA_USR[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair352" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[2]_i_1__0 
       (.I0(RD_DATA_REG[18]),
        .I1(EVEN),
        .I2(RD_DATA_REG[2]),
        .O(\RXDATA_USR[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair351" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[3]_i_1__0 
       (.I0(RD_DATA_REG[19]),
        .I1(EVEN),
        .I2(RD_DATA_REG[3]),
        .O(\RXDATA_USR[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair345" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[4]_i_1__0 
       (.I0(RD_DATA_REG[20]),
        .I1(EVEN),
        .I2(RD_DATA_REG[4]),
        .O(\RXDATA_USR[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair350" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[5]_i_1__0 
       (.I0(RD_DATA_REG[21]),
        .I1(EVEN),
        .I2(RD_DATA_REG[5]),
        .O(\RXDATA_USR[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair350" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[6]_i_1__0 
       (.I0(RD_DATA_REG[22]),
        .I1(EVEN),
        .I2(RD_DATA_REG[6]),
        .O(\RXDATA_USR[6]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair349" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[7]_i_1__0 
       (.I0(RD_DATA_REG[23]),
        .I1(EVEN),
        .I2(RD_DATA_REG[7]),
        .O(\RXDATA_USR[7]_i_1__0_n_0 ));
  FDRE \RXDATA_USR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .R(SS));
  FDRE \RXDATA_USR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(SS));
  FDRE \RXDATA_USR_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(SS));
  FDRE \RXDATA_USR_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(SS));
  FDRE \RXDATA_USR_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[4]_i_1__0_n_0 ),
        .Q(Q[4]),
        .R(SS));
  FDRE \RXDATA_USR_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[5]_i_1__0_n_0 ),
        .Q(Q[5]),
        .R(SS));
  FDRE \RXDATA_USR_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[6]_i_1__0_n_0 ),
        .Q(Q[6]),
        .R(SS));
  FDRE \RXDATA_USR_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[7]_i_1__0_n_0 ),
        .Q(Q[7]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair349" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXDISPERR_USR_i_1__0
       (.I0(RD_DATA_REG[26]),
        .I1(EVEN),
        .I2(RD_DATA_REG[10]),
        .O(RXDISPERR_USR_i_1__0_n_0));
  FDRE RXDISPERR_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_USR_i_1__0_n_0),
        .Q(RXDISPERR_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair348" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXNOTINTABLE_USR_i_1__0
       (.I0(RD_DATA_REG[25]),
        .I1(EVEN),
        .I2(RD_DATA_REG[9]),
        .O(RXNOTINTABLE_USR_i_1__0_n_0));
  FDRE RXNOTINTABLE_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_USR_i_1__0_n_0),
        .Q(RXNOTINTABLE_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair354" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[0]_i_1__0 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .O(BIN_TO_GRAY[0]));
  (* SOFT_HLUTNM = "soft_lutpair356" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[1]_i_1__0 
       (.I0(p_1_in5_in),
        .I1(p_2_in7_in),
        .O(BIN_TO_GRAY[1]));
  (* SOFT_HLUTNM = "soft_lutpair356" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[2]_i_1__0 
       (.I0(p_2_in7_in),
        .I1(p_3_in9_in),
        .O(BIN_TO_GRAY[2]));
  (* SOFT_HLUTNM = "soft_lutpair358" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[3]_i_1__0 
       (.I0(p_3_in9_in),
        .I1(p_4_in11_in),
        .O(BIN_TO_GRAY[3]));
  (* SOFT_HLUTNM = "soft_lutpair358" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[4]_i_1__0 
       (.I0(p_4_in11_in),
        .I1(p_5_in13_in),
        .O(BIN_TO_GRAY[4]));
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[5]_i_1__0 
       (.I0(p_5_in13_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .O(BIN_TO_GRAY[5]));
  FDSE \WR_ADDR_GRAY_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[0]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[3]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[4]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[5]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[5] ),
        .S(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(DATA_IN),
        .S(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(WR_ADDR_PLUS1[0]),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_1_in5_in),
        .Q(WR_ADDR_PLUS1[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_2_in7_in),
        .Q(WR_ADDR_PLUS1[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_3_in9_in),
        .Q(WR_ADDR_PLUS1[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_4_in11_in),
        .Q(WR_ADDR_PLUS1[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_5_in13_in),
        .Q(WR_ADDR_PLUS1[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(WR_ADDR_PLUS1[6]),
        .S(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair354" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \WR_ADDR_PLUS2[0]_i_1__0 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair346" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \WR_ADDR_PLUS2[2]_i_1__0 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .I2(p_2_in7_in),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair341" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \WR_ADDR_PLUS2[3]_i_1__0 
       (.I0(p_3_in9_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in5_in),
        .I3(p_2_in7_in),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair341" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[4]_i_1__0 
       (.I0(p_4_in11_in),
        .I1(p_2_in7_in),
        .I2(p_1_in5_in),
        .I3(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I4(p_3_in9_in),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \WR_ADDR_PLUS2[5]_i_1__0 
       (.I0(p_5_in13_in),
        .I1(p_3_in9_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in5_in),
        .I4(p_2_in7_in),
        .I5(p_4_in11_in),
        .O(plusOp__0[5]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[6]_i_1__0 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .I1(p_4_in11_in),
        .I2(\WR_ADDR_PLUS2[6]_i_2__0_n_0 ),
        .I3(p_3_in9_in),
        .I4(p_5_in13_in),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair346" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \WR_ADDR_PLUS2[6]_i_2__0 
       (.I0(p_2_in7_in),
        .I1(p_1_in5_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(\WR_ADDR_PLUS2[6]_i_2__0_n_0 ));
  FDRE \WR_ADDR_PLUS2_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[0]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(BIN_TO_GRAY[0]),
        .Q(p_1_in5_in),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[2]),
        .Q(p_2_in7_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[3]),
        .Q(p_3_in9_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[4]),
        .Q(p_4_in11_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[5]),
        .Q(p_5_in13_in),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[6]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[0]),
        .Q(WR_ADDR[0]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[1]),
        .Q(WR_ADDR[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[2]),
        .Q(WR_ADDR[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[3]),
        .Q(WR_ADDR[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[4]),
        .Q(WR_ADDR[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[5]),
        .Q(WR_ADDR[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[6]),
        .Q(WR_ADDR[6]),
        .S(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [0]),
        .Q(\WR_DATA_REG1_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[10] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [9]),
        .Q(WR_DATA_REG1[10]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [10]),
        .Q(p_0_in6_in),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [11]),
        .Q(WR_DATA_REG1[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [1]),
        .Q(\WR_DATA_REG1_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [2]),
        .Q(\WR_DATA_REG1_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [3]),
        .Q(\WR_DATA_REG1_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [4]),
        .Q(\WR_DATA_REG1_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [5]),
        .Q(\WR_DATA_REG1_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [6]),
        .Q(\WR_DATA_REG1_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [7]),
        .Q(\WR_DATA_REG1_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [8]),
        .Q(WR_DATA_REG1[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(WR_DATA_REG2[0]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[10] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[10]),
        .Q(WR_DATA_REG2[10]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in6_in),
        .Q(WR_DATA_REG2[11]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[12]),
        .Q(WR_DATA_REG2[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(WR_DATA_REG2[1]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(WR_DATA_REG2[2]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(WR_DATA_REG2[3]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(WR_DATA_REG2[4]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(WR_DATA_REG2[5]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(WR_DATA_REG2[6]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(WR_DATA_REG2[7]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[9]),
        .Q(WR_DATA_REG2[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[0] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(\WR_DATA_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[10] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[10]),
        .Q(\WR_DATA_reg_n_0_[10] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[11] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(p_0_in6_in),
        .Q(\WR_DATA_reg_n_0_[11] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[12] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[12]),
        .Q(\WR_DATA_reg_n_0_[12] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[13] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(REMOVE_IDLE),
        .Q(\WR_DATA_reg_n_0_[13] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[16] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[0]),
        .Q(\WR_DATA_reg_n_0_[16] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[17] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[1]),
        .Q(\WR_DATA_reg_n_0_[17] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[18] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[2]),
        .Q(\WR_DATA_reg_n_0_[18] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[19] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[3]),
        .Q(\WR_DATA_reg_n_0_[19] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[1] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(\WR_DATA_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[20] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[4]),
        .Q(\WR_DATA_reg_n_0_[20] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[21] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[5]),
        .Q(\WR_DATA_reg_n_0_[21] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[22] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[6]),
        .Q(\WR_DATA_reg_n_0_[22] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[23] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[7]),
        .Q(\WR_DATA_reg_n_0_[23] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[25] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[9]),
        .Q(\WR_DATA_reg_n_0_[25] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[26] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[10]),
        .Q(\WR_DATA_reg_n_0_[26] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[27] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[11]),
        .Q(\WR_DATA_reg_n_0_[27] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[28] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[12]),
        .Q(\WR_DATA_reg_n_0_[28] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[2] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(\WR_DATA_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[3] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(\WR_DATA_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[4] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(\WR_DATA_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[5] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(\WR_DATA_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[6] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(\WR_DATA_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[7] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(\WR_DATA_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[9] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[9]),
        .Q(\WR_DATA_reg_n_0_[9] ),
        .R(RESET_OUT));
  LUT4 #(
    .INIT(16'h4044)) 
    WR_ENABLE_i_1__0
       (.I0(RESET_OUT),
        .I1(WR_TOGGLE),
        .I2(WR_ENABLE_i_2__0_n_0),
        .I3(I1_DETECTED_WR),
        .O(WR_ENABLE_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair342" *) 
  LUT5 #(
    .INIT(32'hFFBFFFFF)) 
    WR_ENABLE_i_2__0
       (.I0(REMOVE_IDLE_i_2__0_n_0),
        .I1(WR_TOGGLE),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE),
        .I4(WR_OCCUPANCY[6]),
        .O(WR_ENABLE_i_2__0_n_0));
  FDRE WR_ENABLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_ENABLE_i_1__0_n_0),
        .Q(WE),
        .R(1'b0));
  FDRE \WR_OCCUPANCY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[1]),
        .Q(WR_OCCUPANCY[1]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[2]),
        .Q(WR_OCCUPANCY[2]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[3]),
        .Q(WR_OCCUPANCY[3]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[4]),
        .Q(WR_OCCUPANCY[4]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[5]),
        .Q(WR_OCCUPANCY[5]),
        .R(RESET_OUT));
  FDSE \WR_OCCUPANCY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[6]),
        .Q(WR_OCCUPANCY[6]),
        .S(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair342" *) 
  LUT1 #(
    .INIT(2'h1)) 
    WR_TOGGLE_i_1__0
       (.I0(WR_TOGGLE),
        .O(WR_TOGGLE_i_1__0_n_0));
  FDSE WR_TOGGLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_TOGGLE_i_1__0_n_0),
        .Q(WR_TOGGLE),
        .S(RESET_OUT));
  FDRE insert_idle_reg_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE),
        .Q(insert_idle_reg),
        .R(SS));
endmodule

(* ORIG_REF_NAME = "QSGMII_RX_ELASTIC_BUFFER" *) 
module quadsgmii_0_TEST_QSGMII_RX_ELASTIC_BUFFER_87
   (RXCHARISCOMMA_USR,
    RXCHARISK_USR,
    RXDISPERR_USR,
    RXNOTINTABLE_USR,
    D,
    RXBUFSTATUS,
    Q,
    userclk,
    rxrecclk,
    SS,
    RESET_OUT,
    \WR_DATA_REG1_reg[12]_0 ,
    RESET_IN,
    MGT_RX_RESET);
  output RXCHARISCOMMA_USR;
  output RXCHARISK_USR;
  output RXDISPERR_USR;
  output RXNOTINTABLE_USR;
  output [1:0]D;
  output [0:0]RXBUFSTATUS;
  output [7:0]Q;
  input userclk;
  input rxrecclk;
  input [0:0]SS;
  input RESET_OUT;
  input [11:0]\WR_DATA_REG1_reg[12]_0 ;
  input RESET_IN;
  input MGT_RX_RESET;

  wire [5:0]BIN_TO_GRAY;
  wire [1:0]D;
  wire D5P6_WR_REG;
  wire D5P6_WR_REG_i_2__1_n_0;
  wire DATA_IN;
  wire DATA_OUT;
  wire EVEN;
  wire EVEN_i_1__1_n_0;
  wire \GEN_FIFO[0].RD_DATA_reg_n_0_[0] ;
  wire \GEN_FIFO[10].RD_DATA_reg_n_0_[10] ;
  wire \GEN_FIFO[11].RD_DATA_reg_n_0_[11] ;
  wire \GEN_FIFO[12].RD_DATA_reg_n_0_[12] ;
  wire \GEN_FIFO[13].RD_DATA_reg_n_0_[13] ;
  wire \GEN_FIFO[1].RD_DATA_reg_n_0_[1] ;
  wire \GEN_FIFO[25].RD_DATA_reg_n_0_[25] ;
  wire \GEN_FIFO[26].RD_DATA_reg_n_0_[26] ;
  wire \GEN_FIFO[27].RD_DATA_reg_n_0_[27] ;
  wire \GEN_FIFO[28].RD_DATA_reg ;
  wire \GEN_FIFO[2].RD_DATA_reg_n_0_[2] ;
  wire \GEN_FIFO[3].RD_DATA_reg_n_0_[3] ;
  wire \GEN_FIFO[4].RD_DATA_reg_n_0_[4] ;
  wire \GEN_FIFO[5].RD_DATA_reg_n_0_[5] ;
  wire \GEN_FIFO[6].RD_DATA_reg_n_0_[6] ;
  wire \GEN_FIFO[7].RD_DATA_reg_n_0_[7] ;
  wire \GEN_FIFO[9].RD_DATA_reg_n_0_[9] ;
  wire [5:0]GRAY_TO_BIN;
  wire I1_DETECTED_WR;
  wire I1_DETECTED_WR_REG;
  wire I1_DETECTED_WR_REG_i_2__1_n_0;
  wire INSERT_IDLE;
  wire INSERT_IDLE_i_1__5_n_0;
  wire K28P5_WR_REG;
  wire K28P5_WR_REG_i_2__1_n_0;
  wire MGT_RX_RESET;
  wire [7:0]Q;
  wire [6:0]RD_ADDR;
  wire [6:0]RD_ADDR_GRAY;
  wire \RD_ADDR_GRAY[0]_i_1__1_n_0 ;
  wire \RD_ADDR_GRAY[1]_i_1__1_n_0 ;
  wire \RD_ADDR_GRAY[2]_i_1__1_n_0 ;
  wire \RD_ADDR_GRAY[3]_i_1__1_n_0 ;
  wire \RD_ADDR_GRAY[4]_i_1__1_n_0 ;
  wire \RD_ADDR_GRAY[5]_i_1__1_n_0 ;
  wire [6:0]RD_ADDR_PLUS1;
  wire \RD_ADDR_PLUS2[6]_i_2__1_n_0 ;
  wire \RD_ADDR_PLUS2_reg_n_0_[0] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[2] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[6] ;
  wire RD_DATA_RAM_0;
  wire RD_DATA_RAM_1;
  wire RD_DATA_RAM_10;
  wire RD_DATA_RAM_11;
  wire RD_DATA_RAM_12;
  wire RD_DATA_RAM_13;
  wire RD_DATA_RAM_16;
  wire RD_DATA_RAM_17;
  wire RD_DATA_RAM_18;
  wire RD_DATA_RAM_19;
  wire RD_DATA_RAM_2;
  wire RD_DATA_RAM_20;
  wire RD_DATA_RAM_21;
  wire RD_DATA_RAM_22;
  wire RD_DATA_RAM_23;
  wire RD_DATA_RAM_25;
  wire RD_DATA_RAM_26;
  wire RD_DATA_RAM_27;
  wire RD_DATA_RAM_28;
  wire RD_DATA_RAM_3;
  wire RD_DATA_RAM_4;
  wire RD_DATA_RAM_5;
  wire RD_DATA_RAM_6;
  wire RD_DATA_RAM_7;
  wire RD_DATA_RAM_9;
  wire [28:0]RD_DATA_REG;
  wire RD_ENABLE;
  wire RD_ENABLE_i_10__1_n_0;
  wire RD_ENABLE_i_1__1_n_0;
  wire RD_ENABLE_i_2__1_n_0;
  wire RD_ENABLE_i_3__1_n_0;
  wire RD_ENABLE_i_4__1_n_0;
  wire RD_ENABLE_i_5__1_n_0;
  wire RD_ENABLE_i_6__1_n_0;
  wire RD_ENABLE_i_7__1_n_0;
  wire RD_ENABLE_i_8__1_n_0;
  wire RD_ENABLE_i_9__1_n_0;
  wire [6:0]RD_OCCUPANCY;
  wire [6:0]RD_OCCUPANCY01_out;
  wire \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_1 ;
  wire \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ;
  wire \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 ;
  wire REMOVE_IDLE;
  wire REMOVE_IDLE_i_1__1_n_0;
  wire REMOVE_IDLE_i_2__1_n_0;
  wire RESET_IN;
  wire RESET_OUT;
  wire RXBUFERR_i_1__1_n_0;
  wire RXBUFERR_i_2__1_n_0;
  wire RXBUFERR_i_3__1_n_0;
  wire RXBUFERR_i_4__1_n_0;
  wire [0:0]RXBUFSTATUS;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISCOMMA_USR_i_1__1_n_0;
  wire RXCHARISK_USR;
  wire RXCHARISK_USR_i_1__1_n_0;
  wire \RXCLKCORCNT[0]_i_1__1_n_0 ;
  wire \RXCLKCORCNT[2]_i_1__1_n_0 ;
  wire \RXDATA_USR[0]_i_1__1_n_0 ;
  wire \RXDATA_USR[1]_i_1__1_n_0 ;
  wire \RXDATA_USR[2]_i_1__1_n_0 ;
  wire \RXDATA_USR[3]_i_1__1_n_0 ;
  wire \RXDATA_USR[4]_i_1__1_n_0 ;
  wire \RXDATA_USR[5]_i_1__1_n_0 ;
  wire \RXDATA_USR[6]_i_1__1_n_0 ;
  wire \RXDATA_USR[7]_i_1__1_n_0 ;
  wire RXDISPERR_USR;
  wire RXDISPERR_USR_i_1__1_n_0;
  wire RXNOTINTABLE_USR;
  wire RXNOTINTABLE_USR_i_1__1_n_0;
  wire [0:0]SS;
  wire WE;
  wire [6:0]WR_ADDR;
  wire \WR_ADDR_GRAY_reg_n_0_[0] ;
  wire \WR_ADDR_GRAY_reg_n_0_[1] ;
  wire \WR_ADDR_GRAY_reg_n_0_[2] ;
  wire \WR_ADDR_GRAY_reg_n_0_[3] ;
  wire \WR_ADDR_GRAY_reg_n_0_[4] ;
  wire \WR_ADDR_GRAY_reg_n_0_[5] ;
  wire [6:0]WR_ADDR_PLUS1;
  wire \WR_ADDR_PLUS2[6]_i_2__1_n_0 ;
  wire \WR_ADDR_PLUS2_reg_n_0_[0] ;
  wire \WR_ADDR_PLUS2_reg_n_0_[6] ;
  wire [12:9]WR_DATA_REG1;
  wire [11:0]\WR_DATA_REG1_reg[12]_0 ;
  wire \WR_DATA_REG1_reg_n_0_[0] ;
  wire \WR_DATA_REG1_reg_n_0_[1] ;
  wire \WR_DATA_REG1_reg_n_0_[2] ;
  wire \WR_DATA_REG1_reg_n_0_[3] ;
  wire \WR_DATA_REG1_reg_n_0_[4] ;
  wire \WR_DATA_REG1_reg_n_0_[5] ;
  wire \WR_DATA_REG1_reg_n_0_[6] ;
  wire \WR_DATA_REG1_reg_n_0_[7] ;
  wire [12:0]WR_DATA_REG2;
  wire \WR_DATA_reg_n_0_[0] ;
  wire \WR_DATA_reg_n_0_[10] ;
  wire \WR_DATA_reg_n_0_[11] ;
  wire \WR_DATA_reg_n_0_[12] ;
  wire \WR_DATA_reg_n_0_[13] ;
  wire \WR_DATA_reg_n_0_[16] ;
  wire \WR_DATA_reg_n_0_[17] ;
  wire \WR_DATA_reg_n_0_[18] ;
  wire \WR_DATA_reg_n_0_[19] ;
  wire \WR_DATA_reg_n_0_[1] ;
  wire \WR_DATA_reg_n_0_[20] ;
  wire \WR_DATA_reg_n_0_[21] ;
  wire \WR_DATA_reg_n_0_[22] ;
  wire \WR_DATA_reg_n_0_[23] ;
  wire \WR_DATA_reg_n_0_[25] ;
  wire \WR_DATA_reg_n_0_[26] ;
  wire \WR_DATA_reg_n_0_[27] ;
  wire \WR_DATA_reg_n_0_[28] ;
  wire \WR_DATA_reg_n_0_[2] ;
  wire \WR_DATA_reg_n_0_[3] ;
  wire \WR_DATA_reg_n_0_[4] ;
  wire \WR_DATA_reg_n_0_[5] ;
  wire \WR_DATA_reg_n_0_[6] ;
  wire \WR_DATA_reg_n_0_[7] ;
  wire \WR_DATA_reg_n_0_[9] ;
  wire WR_ENABLE_i_1__1_n_0;
  wire WR_ENABLE_i_2__1_n_0;
  wire [6:1]WR_OCCUPANCY;
  wire [6:1]WR_OCCUPANCY00_out;
  wire WR_TOGGLE;
  wire WR_TOGGLE_i_1__1_n_0;
  wire insert_idle_reg;
  wire p_0_in6_in;
  wire p_0_out;
  wire p_17_in;
  wire p_1_in;
  wire p_1_in18_in;
  wire p_1_in5_in;
  wire [7:0]p_2_in;
  wire p_2_in21_in;
  wire p_2_in7_in;
  wire p_2_out;
  wire p_3_in;
  wire p_3_in24_in;
  wire p_3_in9_in;
  wire p_3_out;
  wire p_4_in;
  wire p_4_in11_in;
  wire p_4_out;
  wire p_5_in;
  wire p_5_in13_in;
  wire p_5_out;
  wire p_8_in;
  wire p_9_in;
  wire [6:0]plusOp;
  wire [6:0]plusOp__0;
  wire rxrecclk;
  wire userclk;
  wire \NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[10].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[26].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ;

  LUT5 #(
    .INIT(32'h10000004)) 
    D5P6_WR_REG_i_1__1
       (.I0(D5P6_WR_REG_i_2__1_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[4] ),
        .I2(\WR_DATA_REG1_reg_n_0_[2] ),
        .I3(\WR_DATA_REG1_reg_n_0_[0] ),
        .I4(\WR_DATA_REG1_reg_n_0_[7] ),
        .O(p_8_in));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    D5P6_WR_REG_i_2__1
       (.I0(\WR_DATA_REG1_reg_n_0_[6] ),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[5] ),
        .I3(p_0_in6_in),
        .I4(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(D5P6_WR_REG_i_2__1_n_0));
  FDRE D5P6_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_8_in),
        .Q(D5P6_WR_REG),
        .R(RESET_OUT));
  LUT1 #(
    .INIT(2'h1)) 
    EVEN_i_1__1
       (.I0(EVEN),
        .O(EVEN_i_1__1_n_0));
  FDSE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__1_n_0),
        .Q(EVEN),
        .S(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[0].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[0] ),
        .DPO(RD_DATA_RAM_0),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[0].RD_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_0),
        .Q(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[10].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[10] ),
        .DPO(RD_DATA_RAM_10),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[10].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[10].RD_DATA_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_10),
        .Q(\GEN_FIFO[10].RD_DATA_reg_n_0_[10] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[11].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[11] ),
        .DPO(RD_DATA_RAM_11),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[11].RD_DATA_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_11),
        .Q(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[12].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[12] ),
        .DPO(RD_DATA_RAM_12),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[12].RD_DATA_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_12),
        .Q(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[13].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[13] ),
        .DPO(RD_DATA_RAM_13),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[13].RD_DATA_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_13),
        .Q(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[16].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[16] ),
        .DPO(RD_DATA_RAM_16),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[16].RD_DATA_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_16),
        .Q(p_2_in[0]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[17].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[17] ),
        .DPO(RD_DATA_RAM_17),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[17].RD_DATA_reg[17] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_17),
        .Q(p_2_in[1]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[18].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[18] ),
        .DPO(RD_DATA_RAM_18),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[18].RD_DATA_reg[18] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_18),
        .Q(p_2_in[2]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[19].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[19] ),
        .DPO(RD_DATA_RAM_19),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[19].RD_DATA_reg[19] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_19),
        .Q(p_2_in[3]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[1].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[1] ),
        .DPO(RD_DATA_RAM_1),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[1].RD_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_1),
        .Q(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[20].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[20] ),
        .DPO(RD_DATA_RAM_20),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[20].RD_DATA_reg[20] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_20),
        .Q(p_2_in[4]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[21].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[21] ),
        .DPO(RD_DATA_RAM_21),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[21].RD_DATA_reg[21] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_21),
        .Q(p_2_in[5]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[22].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[22] ),
        .DPO(RD_DATA_RAM_22),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[22].RD_DATA_reg[22] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_22),
        .Q(p_2_in[6]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[23].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[23] ),
        .DPO(RD_DATA_RAM_23),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[23].RD_DATA_reg[23] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_23),
        .Q(p_2_in[7]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[25].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[25] ),
        .DPO(RD_DATA_RAM_25),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[25].RD_DATA_reg[25] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_25),
        .Q(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[26].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[26] ),
        .DPO(RD_DATA_RAM_26),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[26].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[26].RD_DATA_reg[26] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_26),
        .Q(\GEN_FIFO[26].RD_DATA_reg_n_0_[26] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[27].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[27] ),
        .DPO(RD_DATA_RAM_27),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[27].RD_DATA_reg[27] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_27),
        .Q(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[28].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[28] ),
        .DPO(RD_DATA_RAM_28),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[28].RD_DATA_reg[28] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_28),
        .Q(\GEN_FIFO[28].RD_DATA_reg ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[2].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[2] ),
        .DPO(RD_DATA_RAM_2),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[2].RD_DATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_2),
        .Q(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[3].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[3] ),
        .DPO(RD_DATA_RAM_3),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[3].RD_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_3),
        .Q(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[4].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[4] ),
        .DPO(RD_DATA_RAM_4),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[4].RD_DATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_4),
        .Q(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[5].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[5] ),
        .DPO(RD_DATA_RAM_5),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[5].RD_DATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_5),
        .Q(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[6].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[6] ),
        .DPO(RD_DATA_RAM_6),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[6].RD_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_6),
        .Q(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[7].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[7] ),
        .DPO(RD_DATA_RAM_7),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[7].RD_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_7),
        .Q(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[9].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[9] ),
        .DPO(RD_DATA_RAM_9),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[9].RD_DATA_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_9),
        .Q(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .R(SS));
  LUT4 #(
    .INIT(16'h8F88)) 
    I1_DETECTED_WR_REG_i_1__1
       (.I0(p_8_in),
        .I1(K28P5_WR_REG),
        .I2(I1_DETECTED_WR_REG_i_2__1_n_0),
        .I3(D5P6_WR_REG),
        .O(I1_DETECTED_WR));
  (* SOFT_HLUTNM = "soft_lutpair362" *) 
  LUT4 #(
    .INIT(16'hFFFD)) 
    I1_DETECTED_WR_REG_i_2__1
       (.I0(\WR_DATA_REG1_reg_n_0_[3] ),
        .I1(\WR_DATA_REG1_reg_n_0_[0] ),
        .I2(\WR_DATA_REG1_reg_n_0_[1] ),
        .I3(K28P5_WR_REG_i_2__1_n_0),
        .O(I1_DETECTED_WR_REG_i_2__1_n_0));
  FDRE I1_DETECTED_WR_REG_reg
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(I1_DETECTED_WR),
        .Q(I1_DETECTED_WR_REG),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'h0000000000000040)) 
    INSERT_IDLE_i_1__5
       (.I0(SS),
        .I1(EVEN),
        .I2(RD_ENABLE_i_2__1_n_0),
        .I3(RD_ENABLE_i_3__1_n_0),
        .I4(RD_OCCUPANCY[6]),
        .I5(RD_ENABLE_i_4__1_n_0),
        .O(INSERT_IDLE_i_1__5_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__5_n_0),
        .Q(INSERT_IDLE),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair362" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    K28P5_WR_REG_i_1__1
       (.I0(K28P5_WR_REG_i_2__1_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[0] ),
        .I3(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(p_9_in));
  LUT6 #(
    .INIT(64'hDFFFFFFFFFFFFFFF)) 
    K28P5_WR_REG_i_2__1
       (.I0(\WR_DATA_REG1_reg_n_0_[2] ),
        .I1(\WR_DATA_REG1_reg_n_0_[6] ),
        .I2(\WR_DATA_REG1_reg_n_0_[7] ),
        .I3(\WR_DATA_REG1_reg_n_0_[4] ),
        .I4(\WR_DATA_REG1_reg_n_0_[5] ),
        .I5(p_0_in6_in),
        .O(K28P5_WR_REG_i_2__1_n_0));
  FDRE K28P5_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_9_in),
        .Q(K28P5_WR_REG),
        .R(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair371" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[0]_i_1__1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .O(\RD_ADDR_GRAY[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair373" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[1]_i_1__1 
       (.I0(p_1_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(\RD_ADDR_GRAY[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair373" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[2]_i_1__1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(p_3_in),
        .O(\RD_ADDR_GRAY[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair375" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[3]_i_1__1 
       (.I0(p_3_in),
        .I1(p_4_in),
        .O(\RD_ADDR_GRAY[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair375" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[4]_i_1__1 
       (.I0(p_4_in),
        .I1(p_5_in),
        .O(\RD_ADDR_GRAY[4]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[5]_i_1__1 
       (.I0(p_5_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .O(\RD_ADDR_GRAY[5]_i_1__1_n_0 ));
  FDRE \RD_ADDR_GRAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[0]_i_1__1_n_0 ),
        .Q(RD_ADDR_GRAY[0]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[1]_i_1__1_n_0 ),
        .Q(RD_ADDR_GRAY[1]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[2]_i_1__1_n_0 ),
        .Q(RD_ADDR_GRAY[2]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[3]_i_1__1_n_0 ),
        .Q(RD_ADDR_GRAY[3]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[4]_i_1__1_n_0 ),
        .Q(RD_ADDR_GRAY[4]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[5]_i_1__1_n_0 ),
        .Q(RD_ADDR_GRAY[5]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_GRAY[6]),
        .R(SS));
  FDSE \RD_ADDR_PLUS1_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(RD_ADDR_PLUS1[0]),
        .S(SS));
  FDRE \RD_ADDR_PLUS1_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_1_in),
        .Q(RD_ADDR_PLUS1[1]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .Q(RD_ADDR_PLUS1[2]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_3_in),
        .Q(RD_ADDR_PLUS1[3]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_4_in),
        .Q(RD_ADDR_PLUS1[4]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_5_in),
        .Q(RD_ADDR_PLUS1[5]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_PLUS1[6]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair371" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \RD_ADDR_PLUS2[0]_i_1__1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair365" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \RD_ADDR_PLUS2[2]_i_1__1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair361" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \RD_ADDR_PLUS2[3]_i_1__1 
       (.I0(p_3_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in),
        .I3(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair361" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \RD_ADDR_PLUS2[4]_i_1__1 
       (.I0(p_4_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I2(p_1_in),
        .I3(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I4(p_3_in),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \RD_ADDR_PLUS2[5]_i_1__1 
       (.I0(p_5_in),
        .I1(p_3_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in),
        .I4(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I5(p_4_in),
        .O(plusOp[5]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \RD_ADDR_PLUS2[6]_i_1__1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .I1(p_4_in),
        .I2(\RD_ADDR_PLUS2[6]_i_2__1_n_0 ),
        .I3(p_3_in),
        .I4(p_5_in),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair365" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \RD_ADDR_PLUS2[6]_i_2__1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .O(\RD_ADDR_PLUS2[6]_i_2__1_n_0 ));
  FDRE \RD_ADDR_PLUS2_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[0]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .R(SS));
  FDSE \RD_ADDR_PLUS2_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_GRAY[0]_i_1__1_n_0 ),
        .Q(p_1_in),
        .S(SS));
  FDRE \RD_ADDR_PLUS2_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[2]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[3]),
        .Q(p_3_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[4]),
        .Q(p_4_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[5]),
        .Q(p_5_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[6]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .R(SS));
  FDRE \RD_ADDR_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[0]),
        .Q(RD_ADDR[0]),
        .R(SS));
  FDRE \RD_ADDR_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[1]),
        .Q(RD_ADDR[1]),
        .R(SS));
  FDRE \RD_ADDR_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[2]),
        .Q(RD_ADDR[2]),
        .R(SS));
  FDRE \RD_ADDR_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[3]),
        .Q(RD_ADDR[3]),
        .R(SS));
  FDRE \RD_ADDR_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[4]),
        .Q(RD_ADDR[4]),
        .R(SS));
  FDRE \RD_ADDR_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[5]),
        .Q(RD_ADDR[5]),
        .R(SS));
  FDRE \RD_ADDR_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[6]),
        .Q(RD_ADDR[6]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .Q(RD_DATA_REG[0]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[10] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[10].RD_DATA_reg_n_0_[10] ),
        .Q(RD_DATA_REG[10]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[11] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .Q(RD_DATA_REG[11]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[12] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .Q(RD_DATA_REG[12]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[13] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .Q(RD_DATA_REG[13]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[16] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[0]),
        .Q(RD_DATA_REG[16]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[17] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[1]),
        .Q(RD_DATA_REG[17]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[18] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[2]),
        .Q(RD_DATA_REG[18]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[19] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[3]),
        .Q(RD_DATA_REG[19]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .Q(RD_DATA_REG[1]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[20] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[4]),
        .Q(RD_DATA_REG[20]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[21] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[5]),
        .Q(RD_DATA_REG[21]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[22] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[6]),
        .Q(RD_DATA_REG[22]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[23] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[7]),
        .Q(RD_DATA_REG[23]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[25] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .Q(RD_DATA_REG[25]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[26] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[26].RD_DATA_reg_n_0_[26] ),
        .Q(RD_DATA_REG[26]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[27] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .Q(RD_DATA_REG[27]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[28] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[28].RD_DATA_reg ),
        .Q(RD_DATA_REG[28]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .Q(RD_DATA_REG[2]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .Q(RD_DATA_REG[3]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .Q(RD_DATA_REG[4]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .Q(RD_DATA_REG[5]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .Q(RD_DATA_REG[6]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[7] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .Q(RD_DATA_REG[7]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[9] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .Q(RD_DATA_REG[9]),
        .R(SS));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    RD_ENABLE_i_10__1
       (.I0(p_2_in[6]),
        .I1(p_2_in[1]),
        .I2(p_2_in[5]),
        .I3(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I4(p_2_in[3]),
        .O(RD_ENABLE_i_10__1_n_0));
  LUT6 #(
    .INIT(64'h4444444444444404)) 
    RD_ENABLE_i_1__1
       (.I0(SS),
        .I1(EVEN),
        .I2(RD_ENABLE_i_2__1_n_0),
        .I3(RD_ENABLE_i_3__1_n_0),
        .I4(RD_OCCUPANCY[6]),
        .I5(RD_ENABLE_i_4__1_n_0),
        .O(RD_ENABLE_i_1__1_n_0));
  LUT6 #(
    .INIT(64'h00000180FFFFFFFF)) 
    RD_ENABLE_i_2__1
       (.I0(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .I1(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I2(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I3(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .I4(RD_ENABLE_i_5__1_n_0),
        .I5(RD_ENABLE_i_6__1_n_0),
        .O(RD_ENABLE_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    RD_ENABLE_i_3__1
       (.I0(RD_OCCUPANCY[3]),
        .I1(RD_OCCUPANCY[2]),
        .I2(RD_OCCUPANCY[5]),
        .I3(RD_OCCUPANCY[4]),
        .I4(RD_OCCUPANCY[0]),
        .I5(RD_OCCUPANCY[1]),
        .O(RD_ENABLE_i_3__1_n_0));
  LUT6 #(
    .INIT(64'hBFFF0000BFFFBFFF)) 
    RD_ENABLE_i_4__1
       (.I0(RD_ENABLE_i_7__1_n_0),
        .I1(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .I2(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .I3(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I4(RD_ENABLE_i_8__1_n_0),
        .I5(RD_ENABLE_i_9__1_n_0),
        .O(RD_ENABLE_i_4__1_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    RD_ENABLE_i_5__1
       (.I0(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .I1(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I2(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I3(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I4(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .O(RD_ENABLE_i_5__1_n_0));
  LUT5 #(
    .INIT(32'hFFFEBFFF)) 
    RD_ENABLE_i_6__1
       (.I0(RD_ENABLE_i_10__1_n_0),
        .I1(p_2_in[2]),
        .I2(p_2_in[7]),
        .I3(p_2_in[0]),
        .I4(p_2_in[4]),
        .O(RD_ENABLE_i_6__1_n_0));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    RD_ENABLE_i_7__1
       (.I0(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I1(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I2(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I3(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .I4(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I5(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .O(RD_ENABLE_i_7__1_n_0));
  LUT6 #(
    .INIT(64'hFFFF7FFFFFFFFFFF)) 
    RD_ENABLE_i_8__1
       (.I0(p_2_in[4]),
        .I1(p_2_in[7]),
        .I2(p_2_in[3]),
        .I3(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I4(p_2_in[0]),
        .I5(p_2_in[5]),
        .O(RD_ENABLE_i_8__1_n_0));
  LUT3 #(
    .INIT(8'h02)) 
    RD_ENABLE_i_9__1
       (.I0(p_2_in[2]),
        .I1(p_2_in[6]),
        .I2(p_2_in[1]),
        .O(RD_ENABLE_i_9__1_n_0));
  FDRE RD_ENABLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RD_ENABLE_i_1__1_n_0),
        .Q(RD_ENABLE),
        .R(1'b0));
  FDRE \RD_OCCUPANCY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[0]),
        .Q(RD_OCCUPANCY[0]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[1]),
        .Q(RD_OCCUPANCY[1]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[2]),
        .Q(RD_OCCUPANCY[2]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[3]),
        .Q(RD_OCCUPANCY[3]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[4]),
        .Q(RD_OCCUPANCY[4]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[5]),
        .Q(RD_OCCUPANCY[5]),
        .R(SS));
  FDSE \RD_OCCUPANCY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[6]),
        .Q(RD_OCCUPANCY[6]),
        .S(SS));
  quadsgmii_0_TEST_qsgmii_sync_block_106 \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[0]),
        .data_out(\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_107 \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[1:0]),
        .S({\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_1 }),
        .\WR_OCCUPANCY[6]_i_8__1_0 (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .\WR_OCCUPANCY[6]_i_8__1_1 (p_17_in),
        .\WR_OCCUPANCY[6]_i_8__1_2 (p_1_in18_in),
        .\WR_OCCUPANCY[6]_i_8__1_3 (p_3_in24_in),
        .\WR_OCCUPANCY_reg[6] (\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_2_in21_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[1]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_108 \RECLOCK_RD_ADDRGRAY[2].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[2]),
        .data_out(p_3_in24_in),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_109 \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[2]),
        .S(\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ),
        .\WR_OCCUPANCY_reg[6] (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .\WR_OCCUPANCY_reg[6]_0 (p_17_in),
        .\WR_OCCUPANCY_reg[6]_1 (p_1_in18_in),
        .\WR_OCCUPANCY_reg[6]_2 (p_3_in24_in),
        .data_out(p_2_in21_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[3]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_110 \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[3]),
        .S(\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ),
        .\WR_OCCUPANCY_reg[6] (p_17_in),
        .\WR_OCCUPANCY_reg[6]_0 (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .\WR_OCCUPANCY_reg[6]_1 (p_2_in21_in),
        .data_out(p_1_in18_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[4]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_111 \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[4]),
        .S(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ),
        .\WR_OCCUPANCY_reg[6] (p_17_in),
        .\WR_OCCUPANCY_reg[6]_0 (p_1_in18_in),
        .data_out(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg1_0(RD_ADDR_GRAY[5]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_112 \RECLOCK_RD_ADDRGRAY[6].SYNC_RD_ADDRGRAY 
       (.D(WR_OCCUPANCY00_out),
        .Q(WR_ADDR),
        .S({\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_1 }),
        .\WR_OCCUPANCY_reg[6] (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_out(p_17_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[6]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_113 \RECLOCK_WR_ADDRGRAY[0].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[0]),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .data_out(p_0_out),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_114 \RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY 
       (.D(RD_OCCUPANCY01_out),
        .DI({GRAY_TO_BIN[5:2],GRAY_TO_BIN[0]}),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(RD_ADDR[1:0]),
        .\RD_OCCUPANCY_reg[6] (p_3_out),
        .\RD_OCCUPANCY_reg[6]_0 (p_5_out),
        .\RD_OCCUPANCY_reg[6]_1 (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_2 (p_4_out),
        .\RD_OCCUPANCY_reg[6]_3 (p_2_out),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 ,\RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 }),
        .data_out(p_0_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[1] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_115 \RECLOCK_WR_ADDRGRAY[2].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .\RD_OCCUPANCY_reg[6] (p_4_out),
        .\RD_OCCUPANCY_reg[6]_0 (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_1 (p_5_out),
        .\RD_OCCUPANCY_reg[6]_2 (p_3_out),
        .data_out(p_2_out),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_116 \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[3]),
        .Q(RD_ADDR[2]),
        .\RD_OCCUPANCY_reg[6] (p_5_out),
        .\RD_OCCUPANCY_reg[6]_0 (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_1 (p_4_out),
        .\RD_OCCUPANCY_reg[6]_2 (p_2_out),
        .S(\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ),
        .data_out(p_3_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[3] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_117 \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[4]),
        .Q(RD_ADDR[3]),
        .\RD_OCCUPANCY_reg[6] (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_0 (p_5_out),
        .\RD_OCCUPANCY_reg[6]_1 (p_3_out),
        .S(\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ),
        .data_out(p_4_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[4] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_118 \RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[5]),
        .Q(RD_ADDR[4]),
        .\RD_OCCUPANCY_reg[6] (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_0 (p_4_out),
        .S(\RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY_n_0 ),
        .data_out(p_5_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[5] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_119 \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY 
       (.Q(RD_ADDR[6:5]),
        .\RD_OCCUPANCY_reg[6] (p_5_out),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 }),
        .data_out(DATA_OUT),
        .data_sync_reg1_0(DATA_IN),
        .userclk(userclk));
  LUT6 #(
    .INIT(64'h0000FFFF00800000)) 
    REMOVE_IDLE_i_1__1
       (.I0(I1_DETECTED_WR),
        .I1(WR_OCCUPANCY[6]),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE_i_2__1_n_0),
        .I4(WR_TOGGLE),
        .I5(REMOVE_IDLE),
        .O(REMOVE_IDLE_i_1__1_n_0));
  LUT5 #(
    .INIT(32'h00000001)) 
    REMOVE_IDLE_i_2__1
       (.I0(WR_OCCUPANCY[1]),
        .I1(WR_OCCUPANCY[5]),
        .I2(WR_OCCUPANCY[3]),
        .I3(WR_OCCUPANCY[2]),
        .I4(WR_OCCUPANCY[4]),
        .O(REMOVE_IDLE_i_2__1_n_0));
  FDRE REMOVE_IDLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(REMOVE_IDLE_i_1__1_n_0),
        .Q(REMOVE_IDLE),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFA800)) 
    RXBUFERR_i_1__1
       (.I0(RXBUFERR_i_2__1_n_0),
        .I1(RD_OCCUPANCY[1]),
        .I2(RD_OCCUPANCY[0]),
        .I3(RD_OCCUPANCY[6]),
        .I4(RXBUFERR_i_3__1_n_0),
        .I5(RXBUFSTATUS),
        .O(RXBUFERR_i_1__1_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    RXBUFERR_i_2__1
       (.I0(RD_OCCUPANCY[4]),
        .I1(RD_OCCUPANCY[5]),
        .I2(RD_OCCUPANCY[2]),
        .I3(RD_OCCUPANCY[3]),
        .O(RXBUFERR_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    RXBUFERR_i_3__1
       (.I0(RD_OCCUPANCY[4]),
        .I1(RD_OCCUPANCY[5]),
        .I2(RD_OCCUPANCY[2]),
        .I3(RD_OCCUPANCY[3]),
        .I4(RD_OCCUPANCY[6]),
        .I5(RXBUFERR_i_4__1_n_0),
        .O(RXBUFERR_i_3__1_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    RXBUFERR_i_4__1
       (.I0(RD_OCCUPANCY[1]),
        .I1(RD_OCCUPANCY[0]),
        .O(RXBUFERR_i_4__1_n_0));
  FDRE RXBUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXBUFERR_i_1__1_n_0),
        .Q(RXBUFSTATUS),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair363" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISCOMMA_USR_i_1__1
       (.I0(RD_DATA_REG[28]),
        .I1(EVEN),
        .I2(RD_DATA_REG[12]),
        .O(RXCHARISCOMMA_USR_i_1__1_n_0));
  FDRE RXCHARISCOMMA_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISCOMMA_USR_i_1__1_n_0),
        .Q(RXCHARISCOMMA_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair366" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISK_USR_i_1__1
       (.I0(RD_DATA_REG[27]),
        .I1(EVEN),
        .I2(RD_DATA_REG[11]),
        .O(RXCHARISK_USR_i_1__1_n_0));
  FDRE RXCHARISK_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISK_USR_i_1__1_n_0),
        .Q(RXCHARISK_USR),
        .R(SS));
  LUT3 #(
    .INIT(8'hBA)) 
    \RXCLKCORCNT[0]_i_1__1 
       (.I0(insert_idle_reg),
        .I1(D[0]),
        .I2(RD_DATA_REG[13]),
        .O(\RXCLKCORCNT[0]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h10001010)) 
    \RXCLKCORCNT[2]_i_1__1 
       (.I0(RESET_IN),
        .I1(MGT_RX_RESET),
        .I2(insert_idle_reg),
        .I3(D[0]),
        .I4(RD_DATA_REG[13]),
        .O(\RXCLKCORCNT[2]_i_1__1_n_0 ));
  FDRE \RXCLKCORCNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[0]_i_1__1_n_0 ),
        .Q(D[0]),
        .R(SS));
  FDRE \RXCLKCORCNT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[2]_i_1__1_n_0 ),
        .Q(D[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair369" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[0]_i_1__1 
       (.I0(RD_DATA_REG[16]),
        .I1(EVEN),
        .I2(RD_DATA_REG[0]),
        .O(\RXDATA_USR[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair370" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[1]_i_1__1 
       (.I0(RD_DATA_REG[17]),
        .I1(EVEN),
        .I2(RD_DATA_REG[1]),
        .O(\RXDATA_USR[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair370" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[2]_i_1__1 
       (.I0(RD_DATA_REG[18]),
        .I1(EVEN),
        .I2(RD_DATA_REG[2]),
        .O(\RXDATA_USR[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair369" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[3]_i_1__1 
       (.I0(RD_DATA_REG[19]),
        .I1(EVEN),
        .I2(RD_DATA_REG[3]),
        .O(\RXDATA_USR[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair363" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[4]_i_1__1 
       (.I0(RD_DATA_REG[20]),
        .I1(EVEN),
        .I2(RD_DATA_REG[4]),
        .O(\RXDATA_USR[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair368" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[5]_i_1__1 
       (.I0(RD_DATA_REG[21]),
        .I1(EVEN),
        .I2(RD_DATA_REG[5]),
        .O(\RXDATA_USR[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair368" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[6]_i_1__1 
       (.I0(RD_DATA_REG[22]),
        .I1(EVEN),
        .I2(RD_DATA_REG[6]),
        .O(\RXDATA_USR[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair367" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[7]_i_1__1 
       (.I0(RD_DATA_REG[23]),
        .I1(EVEN),
        .I2(RD_DATA_REG[7]),
        .O(\RXDATA_USR[7]_i_1__1_n_0 ));
  FDRE \RXDATA_USR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(SS));
  FDRE \RXDATA_USR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(SS));
  FDRE \RXDATA_USR_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(SS));
  FDRE \RXDATA_USR_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(SS));
  FDRE \RXDATA_USR_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[4]_i_1__1_n_0 ),
        .Q(Q[4]),
        .R(SS));
  FDRE \RXDATA_USR_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[5]_i_1__1_n_0 ),
        .Q(Q[5]),
        .R(SS));
  FDRE \RXDATA_USR_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[6]_i_1__1_n_0 ),
        .Q(Q[6]),
        .R(SS));
  FDRE \RXDATA_USR_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[7]_i_1__1_n_0 ),
        .Q(Q[7]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair367" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXDISPERR_USR_i_1__1
       (.I0(RD_DATA_REG[26]),
        .I1(EVEN),
        .I2(RD_DATA_REG[10]),
        .O(RXDISPERR_USR_i_1__1_n_0));
  FDRE RXDISPERR_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_USR_i_1__1_n_0),
        .Q(RXDISPERR_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair366" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXNOTINTABLE_USR_i_1__1
       (.I0(RD_DATA_REG[25]),
        .I1(EVEN),
        .I2(RD_DATA_REG[9]),
        .O(RXNOTINTABLE_USR_i_1__1_n_0));
  FDRE RXNOTINTABLE_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_USR_i_1__1_n_0),
        .Q(RXNOTINTABLE_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair372" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[0]_i_1__1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .O(BIN_TO_GRAY[0]));
  (* SOFT_HLUTNM = "soft_lutpair374" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[1]_i_1__1 
       (.I0(p_1_in5_in),
        .I1(p_2_in7_in),
        .O(BIN_TO_GRAY[1]));
  (* SOFT_HLUTNM = "soft_lutpair374" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[2]_i_1__1 
       (.I0(p_2_in7_in),
        .I1(p_3_in9_in),
        .O(BIN_TO_GRAY[2]));
  (* SOFT_HLUTNM = "soft_lutpair376" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[3]_i_1__1 
       (.I0(p_3_in9_in),
        .I1(p_4_in11_in),
        .O(BIN_TO_GRAY[3]));
  (* SOFT_HLUTNM = "soft_lutpair376" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[4]_i_1__1 
       (.I0(p_4_in11_in),
        .I1(p_5_in13_in),
        .O(BIN_TO_GRAY[4]));
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[5]_i_1__1 
       (.I0(p_5_in13_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .O(BIN_TO_GRAY[5]));
  FDSE \WR_ADDR_GRAY_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[0]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[3]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[4]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[5]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[5] ),
        .S(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(DATA_IN),
        .S(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(WR_ADDR_PLUS1[0]),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_1_in5_in),
        .Q(WR_ADDR_PLUS1[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_2_in7_in),
        .Q(WR_ADDR_PLUS1[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_3_in9_in),
        .Q(WR_ADDR_PLUS1[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_4_in11_in),
        .Q(WR_ADDR_PLUS1[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_5_in13_in),
        .Q(WR_ADDR_PLUS1[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(WR_ADDR_PLUS1[6]),
        .S(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair372" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \WR_ADDR_PLUS2[0]_i_1__1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair364" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \WR_ADDR_PLUS2[2]_i_1__1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .I2(p_2_in7_in),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair359" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \WR_ADDR_PLUS2[3]_i_1__1 
       (.I0(p_3_in9_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in5_in),
        .I3(p_2_in7_in),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair359" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[4]_i_1__1 
       (.I0(p_4_in11_in),
        .I1(p_2_in7_in),
        .I2(p_1_in5_in),
        .I3(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I4(p_3_in9_in),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \WR_ADDR_PLUS2[5]_i_1__1 
       (.I0(p_5_in13_in),
        .I1(p_3_in9_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in5_in),
        .I4(p_2_in7_in),
        .I5(p_4_in11_in),
        .O(plusOp__0[5]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[6]_i_1__1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .I1(p_4_in11_in),
        .I2(\WR_ADDR_PLUS2[6]_i_2__1_n_0 ),
        .I3(p_3_in9_in),
        .I4(p_5_in13_in),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair364" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \WR_ADDR_PLUS2[6]_i_2__1 
       (.I0(p_2_in7_in),
        .I1(p_1_in5_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(\WR_ADDR_PLUS2[6]_i_2__1_n_0 ));
  FDRE \WR_ADDR_PLUS2_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[0]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(BIN_TO_GRAY[0]),
        .Q(p_1_in5_in),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[2]),
        .Q(p_2_in7_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[3]),
        .Q(p_3_in9_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[4]),
        .Q(p_4_in11_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[5]),
        .Q(p_5_in13_in),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[6]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[0]),
        .Q(WR_ADDR[0]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[1]),
        .Q(WR_ADDR[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[2]),
        .Q(WR_ADDR[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[3]),
        .Q(WR_ADDR[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[4]),
        .Q(WR_ADDR[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[5]),
        .Q(WR_ADDR[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[6]),
        .Q(WR_ADDR[6]),
        .S(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [0]),
        .Q(\WR_DATA_REG1_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[10] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [9]),
        .Q(WR_DATA_REG1[10]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [10]),
        .Q(p_0_in6_in),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [11]),
        .Q(WR_DATA_REG1[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [1]),
        .Q(\WR_DATA_REG1_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [2]),
        .Q(\WR_DATA_REG1_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [3]),
        .Q(\WR_DATA_REG1_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [4]),
        .Q(\WR_DATA_REG1_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [5]),
        .Q(\WR_DATA_REG1_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [6]),
        .Q(\WR_DATA_REG1_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [7]),
        .Q(\WR_DATA_REG1_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [8]),
        .Q(WR_DATA_REG1[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(WR_DATA_REG2[0]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[10] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[10]),
        .Q(WR_DATA_REG2[10]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in6_in),
        .Q(WR_DATA_REG2[11]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[12]),
        .Q(WR_DATA_REG2[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(WR_DATA_REG2[1]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(WR_DATA_REG2[2]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(WR_DATA_REG2[3]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(WR_DATA_REG2[4]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(WR_DATA_REG2[5]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(WR_DATA_REG2[6]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(WR_DATA_REG2[7]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[9]),
        .Q(WR_DATA_REG2[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[0] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(\WR_DATA_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[10] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[10]),
        .Q(\WR_DATA_reg_n_0_[10] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[11] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(p_0_in6_in),
        .Q(\WR_DATA_reg_n_0_[11] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[12] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[12]),
        .Q(\WR_DATA_reg_n_0_[12] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[13] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(REMOVE_IDLE),
        .Q(\WR_DATA_reg_n_0_[13] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[16] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[0]),
        .Q(\WR_DATA_reg_n_0_[16] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[17] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[1]),
        .Q(\WR_DATA_reg_n_0_[17] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[18] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[2]),
        .Q(\WR_DATA_reg_n_0_[18] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[19] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[3]),
        .Q(\WR_DATA_reg_n_0_[19] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[1] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(\WR_DATA_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[20] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[4]),
        .Q(\WR_DATA_reg_n_0_[20] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[21] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[5]),
        .Q(\WR_DATA_reg_n_0_[21] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[22] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[6]),
        .Q(\WR_DATA_reg_n_0_[22] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[23] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[7]),
        .Q(\WR_DATA_reg_n_0_[23] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[25] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[9]),
        .Q(\WR_DATA_reg_n_0_[25] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[26] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[10]),
        .Q(\WR_DATA_reg_n_0_[26] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[27] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[11]),
        .Q(\WR_DATA_reg_n_0_[27] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[28] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[12]),
        .Q(\WR_DATA_reg_n_0_[28] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[2] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(\WR_DATA_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[3] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(\WR_DATA_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[4] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(\WR_DATA_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[5] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(\WR_DATA_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[6] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(\WR_DATA_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[7] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(\WR_DATA_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[9] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[9]),
        .Q(\WR_DATA_reg_n_0_[9] ),
        .R(RESET_OUT));
  LUT4 #(
    .INIT(16'h4044)) 
    WR_ENABLE_i_1__1
       (.I0(RESET_OUT),
        .I1(WR_TOGGLE),
        .I2(WR_ENABLE_i_2__1_n_0),
        .I3(I1_DETECTED_WR),
        .O(WR_ENABLE_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair360" *) 
  LUT5 #(
    .INIT(32'hFFBFFFFF)) 
    WR_ENABLE_i_2__1
       (.I0(REMOVE_IDLE_i_2__1_n_0),
        .I1(WR_TOGGLE),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE),
        .I4(WR_OCCUPANCY[6]),
        .O(WR_ENABLE_i_2__1_n_0));
  FDRE WR_ENABLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_ENABLE_i_1__1_n_0),
        .Q(WE),
        .R(1'b0));
  FDRE \WR_OCCUPANCY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[1]),
        .Q(WR_OCCUPANCY[1]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[2]),
        .Q(WR_OCCUPANCY[2]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[3]),
        .Q(WR_OCCUPANCY[3]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[4]),
        .Q(WR_OCCUPANCY[4]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[5]),
        .Q(WR_OCCUPANCY[5]),
        .R(RESET_OUT));
  FDSE \WR_OCCUPANCY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[6]),
        .Q(WR_OCCUPANCY[6]),
        .S(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair360" *) 
  LUT1 #(
    .INIT(2'h1)) 
    WR_TOGGLE_i_1__1
       (.I0(WR_TOGGLE),
        .O(WR_TOGGLE_i_1__1_n_0));
  FDSE WR_TOGGLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_TOGGLE_i_1__1_n_0),
        .Q(WR_TOGGLE),
        .S(RESET_OUT));
  FDRE insert_idle_reg_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE),
        .Q(insert_idle_reg),
        .R(SS));
endmodule

(* ORIG_REF_NAME = "QSGMII_RX_ELASTIC_BUFFER" *) 
module quadsgmii_0_TEST_QSGMII_RX_ELASTIC_BUFFER_88
   (RXCHARISCOMMA_USR,
    RXCHARISK_USR,
    RXDISPERR_USR,
    RXNOTINTABLE_USR,
    D,
    RXBUFSTATUS,
    Q,
    userclk,
    rxrecclk,
    SS,
    RESET_OUT,
    \WR_DATA_REG1_reg[12]_0 ,
    SR,
    MGT_RX_RESET);
  output RXCHARISCOMMA_USR;
  output RXCHARISK_USR;
  output RXDISPERR_USR;
  output RXNOTINTABLE_USR;
  output [1:0]D;
  output [0:0]RXBUFSTATUS;
  output [7:0]Q;
  input userclk;
  input rxrecclk;
  input [0:0]SS;
  input RESET_OUT;
  input [11:0]\WR_DATA_REG1_reg[12]_0 ;
  input [0:0]SR;
  input MGT_RX_RESET;

  wire [5:0]BIN_TO_GRAY;
  wire [1:0]D;
  wire D5P6_WR_REG;
  wire D5P6_WR_REG_i_2__2_n_0;
  wire DATA_IN;
  wire DATA_OUT;
  wire EVEN;
  wire EVEN_i_1__2_n_0;
  wire \GEN_FIFO[0].RD_DATA_reg_n_0_[0] ;
  wire \GEN_FIFO[10].RD_DATA_reg_n_0_[10] ;
  wire \GEN_FIFO[11].RD_DATA_reg_n_0_[11] ;
  wire \GEN_FIFO[12].RD_DATA_reg_n_0_[12] ;
  wire \GEN_FIFO[13].RD_DATA_reg_n_0_[13] ;
  wire \GEN_FIFO[1].RD_DATA_reg_n_0_[1] ;
  wire \GEN_FIFO[25].RD_DATA_reg_n_0_[25] ;
  wire \GEN_FIFO[26].RD_DATA_reg_n_0_[26] ;
  wire \GEN_FIFO[27].RD_DATA_reg_n_0_[27] ;
  wire \GEN_FIFO[28].RD_DATA_reg ;
  wire \GEN_FIFO[2].RD_DATA_reg_n_0_[2] ;
  wire \GEN_FIFO[3].RD_DATA_reg_n_0_[3] ;
  wire \GEN_FIFO[4].RD_DATA_reg_n_0_[4] ;
  wire \GEN_FIFO[5].RD_DATA_reg_n_0_[5] ;
  wire \GEN_FIFO[6].RD_DATA_reg_n_0_[6] ;
  wire \GEN_FIFO[7].RD_DATA_reg_n_0_[7] ;
  wire \GEN_FIFO[9].RD_DATA_reg_n_0_[9] ;
  wire [5:0]GRAY_TO_BIN;
  wire I1_DETECTED_WR;
  wire I1_DETECTED_WR_REG;
  wire I1_DETECTED_WR_REG_i_2__2_n_0;
  wire INSERT_IDLE;
  wire INSERT_IDLE_i_1__6_n_0;
  wire K28P5_WR_REG;
  wire K28P5_WR_REG_i_2__2_n_0;
  wire MGT_RX_RESET;
  wire [7:0]Q;
  wire [6:0]RD_ADDR;
  wire [6:0]RD_ADDR_GRAY;
  wire \RD_ADDR_GRAY[0]_i_1__2_n_0 ;
  wire \RD_ADDR_GRAY[1]_i_1__2_n_0 ;
  wire \RD_ADDR_GRAY[2]_i_1__2_n_0 ;
  wire \RD_ADDR_GRAY[3]_i_1__2_n_0 ;
  wire \RD_ADDR_GRAY[4]_i_1__2_n_0 ;
  wire \RD_ADDR_GRAY[5]_i_1__2_n_0 ;
  wire [6:0]RD_ADDR_PLUS1;
  wire \RD_ADDR_PLUS2[6]_i_2__2_n_0 ;
  wire \RD_ADDR_PLUS2_reg_n_0_[0] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[2] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[6] ;
  wire RD_DATA_RAM_0;
  wire RD_DATA_RAM_1;
  wire RD_DATA_RAM_10;
  wire RD_DATA_RAM_11;
  wire RD_DATA_RAM_12;
  wire RD_DATA_RAM_13;
  wire RD_DATA_RAM_16;
  wire RD_DATA_RAM_17;
  wire RD_DATA_RAM_18;
  wire RD_DATA_RAM_19;
  wire RD_DATA_RAM_2;
  wire RD_DATA_RAM_20;
  wire RD_DATA_RAM_21;
  wire RD_DATA_RAM_22;
  wire RD_DATA_RAM_23;
  wire RD_DATA_RAM_25;
  wire RD_DATA_RAM_26;
  wire RD_DATA_RAM_27;
  wire RD_DATA_RAM_28;
  wire RD_DATA_RAM_3;
  wire RD_DATA_RAM_4;
  wire RD_DATA_RAM_5;
  wire RD_DATA_RAM_6;
  wire RD_DATA_RAM_7;
  wire RD_DATA_RAM_9;
  wire [28:0]RD_DATA_REG;
  wire RD_ENABLE;
  wire RD_ENABLE_i_10__2_n_0;
  wire RD_ENABLE_i_1__2_n_0;
  wire RD_ENABLE_i_2__2_n_0;
  wire RD_ENABLE_i_3__2_n_0;
  wire RD_ENABLE_i_4__2_n_0;
  wire RD_ENABLE_i_5__2_n_0;
  wire RD_ENABLE_i_6__2_n_0;
  wire RD_ENABLE_i_7__2_n_0;
  wire RD_ENABLE_i_8__2_n_0;
  wire RD_ENABLE_i_9__2_n_0;
  wire [6:0]RD_OCCUPANCY;
  wire [6:0]RD_OCCUPANCY01_out;
  wire \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_1 ;
  wire \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ;
  wire \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 ;
  wire REMOVE_IDLE;
  wire REMOVE_IDLE_i_1__2_n_0;
  wire REMOVE_IDLE_i_2__2_n_0;
  wire RESET_OUT;
  wire RXBUFERR_i_1__2_n_0;
  wire RXBUFERR_i_2__2_n_0;
  wire RXBUFERR_i_3__2_n_0;
  wire RXBUFERR_i_4__2_n_0;
  wire [0:0]RXBUFSTATUS;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISCOMMA_USR_i_1__2_n_0;
  wire RXCHARISK_USR;
  wire RXCHARISK_USR_i_1__2_n_0;
  wire \RXCLKCORCNT[0]_i_1__2_n_0 ;
  wire \RXCLKCORCNT[2]_i_1__2_n_0 ;
  wire \RXDATA_USR[0]_i_1__2_n_0 ;
  wire \RXDATA_USR[1]_i_1__2_n_0 ;
  wire \RXDATA_USR[2]_i_1__2_n_0 ;
  wire \RXDATA_USR[3]_i_1__2_n_0 ;
  wire \RXDATA_USR[4]_i_1__2_n_0 ;
  wire \RXDATA_USR[5]_i_1__2_n_0 ;
  wire \RXDATA_USR[6]_i_1__2_n_0 ;
  wire \RXDATA_USR[7]_i_1__2_n_0 ;
  wire RXDISPERR_USR;
  wire RXDISPERR_USR_i_1__2_n_0;
  wire RXNOTINTABLE_USR;
  wire RXNOTINTABLE_USR_i_1__2_n_0;
  wire [0:0]SR;
  wire [0:0]SS;
  wire WE;
  wire [6:0]WR_ADDR;
  wire \WR_ADDR_GRAY_reg_n_0_[0] ;
  wire \WR_ADDR_GRAY_reg_n_0_[1] ;
  wire \WR_ADDR_GRAY_reg_n_0_[2] ;
  wire \WR_ADDR_GRAY_reg_n_0_[3] ;
  wire \WR_ADDR_GRAY_reg_n_0_[4] ;
  wire \WR_ADDR_GRAY_reg_n_0_[5] ;
  wire [6:0]WR_ADDR_PLUS1;
  wire \WR_ADDR_PLUS2[6]_i_2__2_n_0 ;
  wire \WR_ADDR_PLUS2_reg_n_0_[0] ;
  wire \WR_ADDR_PLUS2_reg_n_0_[6] ;
  wire [12:9]WR_DATA_REG1;
  wire [11:0]\WR_DATA_REG1_reg[12]_0 ;
  wire \WR_DATA_REG1_reg_n_0_[0] ;
  wire \WR_DATA_REG1_reg_n_0_[1] ;
  wire \WR_DATA_REG1_reg_n_0_[2] ;
  wire \WR_DATA_REG1_reg_n_0_[3] ;
  wire \WR_DATA_REG1_reg_n_0_[4] ;
  wire \WR_DATA_REG1_reg_n_0_[5] ;
  wire \WR_DATA_REG1_reg_n_0_[6] ;
  wire \WR_DATA_REG1_reg_n_0_[7] ;
  wire [12:0]WR_DATA_REG2;
  wire \WR_DATA_reg_n_0_[0] ;
  wire \WR_DATA_reg_n_0_[10] ;
  wire \WR_DATA_reg_n_0_[11] ;
  wire \WR_DATA_reg_n_0_[12] ;
  wire \WR_DATA_reg_n_0_[13] ;
  wire \WR_DATA_reg_n_0_[16] ;
  wire \WR_DATA_reg_n_0_[17] ;
  wire \WR_DATA_reg_n_0_[18] ;
  wire \WR_DATA_reg_n_0_[19] ;
  wire \WR_DATA_reg_n_0_[1] ;
  wire \WR_DATA_reg_n_0_[20] ;
  wire \WR_DATA_reg_n_0_[21] ;
  wire \WR_DATA_reg_n_0_[22] ;
  wire \WR_DATA_reg_n_0_[23] ;
  wire \WR_DATA_reg_n_0_[25] ;
  wire \WR_DATA_reg_n_0_[26] ;
  wire \WR_DATA_reg_n_0_[27] ;
  wire \WR_DATA_reg_n_0_[28] ;
  wire \WR_DATA_reg_n_0_[2] ;
  wire \WR_DATA_reg_n_0_[3] ;
  wire \WR_DATA_reg_n_0_[4] ;
  wire \WR_DATA_reg_n_0_[5] ;
  wire \WR_DATA_reg_n_0_[6] ;
  wire \WR_DATA_reg_n_0_[7] ;
  wire \WR_DATA_reg_n_0_[9] ;
  wire WR_ENABLE_i_1__2_n_0;
  wire WR_ENABLE_i_2__2_n_0;
  wire [6:1]WR_OCCUPANCY;
  wire [6:1]WR_OCCUPANCY00_out;
  wire WR_TOGGLE;
  wire WR_TOGGLE_i_1__2_n_0;
  wire insert_idle_reg;
  wire p_0_in6_in;
  wire p_0_out;
  wire p_17_in;
  wire p_1_in;
  wire p_1_in18_in;
  wire p_1_in5_in;
  wire [7:0]p_2_in;
  wire p_2_in21_in;
  wire p_2_in7_in;
  wire p_2_out;
  wire p_3_in;
  wire p_3_in24_in;
  wire p_3_in9_in;
  wire p_3_out;
  wire p_4_in;
  wire p_4_in11_in;
  wire p_4_out;
  wire p_5_in;
  wire p_5_in13_in;
  wire p_5_out;
  wire p_8_in;
  wire p_9_in;
  wire [6:0]plusOp;
  wire [6:0]plusOp__0;
  wire rxrecclk;
  wire userclk;
  wire \NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[10].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[26].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ;

  LUT5 #(
    .INIT(32'h10000004)) 
    D5P6_WR_REG_i_1__2
       (.I0(D5P6_WR_REG_i_2__2_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[4] ),
        .I2(\WR_DATA_REG1_reg_n_0_[2] ),
        .I3(\WR_DATA_REG1_reg_n_0_[0] ),
        .I4(\WR_DATA_REG1_reg_n_0_[7] ),
        .O(p_8_in));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    D5P6_WR_REG_i_2__2
       (.I0(\WR_DATA_REG1_reg_n_0_[6] ),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[5] ),
        .I3(p_0_in6_in),
        .I4(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(D5P6_WR_REG_i_2__2_n_0));
  FDRE D5P6_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_8_in),
        .Q(D5P6_WR_REG),
        .R(RESET_OUT));
  LUT1 #(
    .INIT(2'h1)) 
    EVEN_i_1__2
       (.I0(EVEN),
        .O(EVEN_i_1__2_n_0));
  FDSE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__2_n_0),
        .Q(EVEN),
        .S(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[0].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[0] ),
        .DPO(RD_DATA_RAM_0),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[0].RD_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_0),
        .Q(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[10].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[10] ),
        .DPO(RD_DATA_RAM_10),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[10].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[10].RD_DATA_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_10),
        .Q(\GEN_FIFO[10].RD_DATA_reg_n_0_[10] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[11].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[11] ),
        .DPO(RD_DATA_RAM_11),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[11].RD_DATA_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_11),
        .Q(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[12].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[12] ),
        .DPO(RD_DATA_RAM_12),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[12].RD_DATA_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_12),
        .Q(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[13].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[13] ),
        .DPO(RD_DATA_RAM_13),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[13].RD_DATA_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_13),
        .Q(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[16].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[16] ),
        .DPO(RD_DATA_RAM_16),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[16].RD_DATA_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_16),
        .Q(p_2_in[0]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[17].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[17] ),
        .DPO(RD_DATA_RAM_17),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[17].RD_DATA_reg[17] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_17),
        .Q(p_2_in[1]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[18].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[18] ),
        .DPO(RD_DATA_RAM_18),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[18].RD_DATA_reg[18] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_18),
        .Q(p_2_in[2]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[19].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[19] ),
        .DPO(RD_DATA_RAM_19),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[19].RD_DATA_reg[19] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_19),
        .Q(p_2_in[3]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[1].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[1] ),
        .DPO(RD_DATA_RAM_1),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[1].RD_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_1),
        .Q(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[20].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[20] ),
        .DPO(RD_DATA_RAM_20),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[20].RD_DATA_reg[20] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_20),
        .Q(p_2_in[4]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[21].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[21] ),
        .DPO(RD_DATA_RAM_21),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[21].RD_DATA_reg[21] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_21),
        .Q(p_2_in[5]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[22].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[22] ),
        .DPO(RD_DATA_RAM_22),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[22].RD_DATA_reg[22] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_22),
        .Q(p_2_in[6]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[23].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[23] ),
        .DPO(RD_DATA_RAM_23),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[23].RD_DATA_reg[23] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_23),
        .Q(p_2_in[7]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[25].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[25] ),
        .DPO(RD_DATA_RAM_25),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[25].RD_DATA_reg[25] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_25),
        .Q(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[26].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[26] ),
        .DPO(RD_DATA_RAM_26),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[26].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[26].RD_DATA_reg[26] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_26),
        .Q(\GEN_FIFO[26].RD_DATA_reg_n_0_[26] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[27].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[27] ),
        .DPO(RD_DATA_RAM_27),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[27].RD_DATA_reg[27] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_27),
        .Q(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[28].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[28] ),
        .DPO(RD_DATA_RAM_28),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[28].RD_DATA_reg[28] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_28),
        .Q(\GEN_FIFO[28].RD_DATA_reg ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[2].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[2] ),
        .DPO(RD_DATA_RAM_2),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[2].RD_DATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_2),
        .Q(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[3].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[3] ),
        .DPO(RD_DATA_RAM_3),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[3].RD_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_3),
        .Q(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[4].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[4] ),
        .DPO(RD_DATA_RAM_4),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[4].RD_DATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_4),
        .Q(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[5].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[5] ),
        .DPO(RD_DATA_RAM_5),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[5].RD_DATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_5),
        .Q(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[6].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[6] ),
        .DPO(RD_DATA_RAM_6),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[6].RD_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_6),
        .Q(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[7].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[7] ),
        .DPO(RD_DATA_RAM_7),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[7].RD_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_7),
        .Q(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[9].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[9] ),
        .DPO(RD_DATA_RAM_9),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[9].RD_DATA_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_9),
        .Q(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .R(SS));
  LUT4 #(
    .INIT(16'h8F88)) 
    I1_DETECTED_WR_REG_i_1__2
       (.I0(p_8_in),
        .I1(K28P5_WR_REG),
        .I2(I1_DETECTED_WR_REG_i_2__2_n_0),
        .I3(D5P6_WR_REG),
        .O(I1_DETECTED_WR));
  (* SOFT_HLUTNM = "soft_lutpair380" *) 
  LUT4 #(
    .INIT(16'hFFFD)) 
    I1_DETECTED_WR_REG_i_2__2
       (.I0(\WR_DATA_REG1_reg_n_0_[3] ),
        .I1(\WR_DATA_REG1_reg_n_0_[0] ),
        .I2(\WR_DATA_REG1_reg_n_0_[1] ),
        .I3(K28P5_WR_REG_i_2__2_n_0),
        .O(I1_DETECTED_WR_REG_i_2__2_n_0));
  FDRE I1_DETECTED_WR_REG_reg
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(I1_DETECTED_WR),
        .Q(I1_DETECTED_WR_REG),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'h0000000000000040)) 
    INSERT_IDLE_i_1__6
       (.I0(SS),
        .I1(EVEN),
        .I2(RD_ENABLE_i_2__2_n_0),
        .I3(RD_ENABLE_i_3__2_n_0),
        .I4(RD_OCCUPANCY[6]),
        .I5(RD_ENABLE_i_4__2_n_0),
        .O(INSERT_IDLE_i_1__6_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__6_n_0),
        .Q(INSERT_IDLE),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair380" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    K28P5_WR_REG_i_1__2
       (.I0(K28P5_WR_REG_i_2__2_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[0] ),
        .I3(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(p_9_in));
  LUT6 #(
    .INIT(64'hDFFFFFFFFFFFFFFF)) 
    K28P5_WR_REG_i_2__2
       (.I0(\WR_DATA_REG1_reg_n_0_[2] ),
        .I1(\WR_DATA_REG1_reg_n_0_[6] ),
        .I2(\WR_DATA_REG1_reg_n_0_[7] ),
        .I3(\WR_DATA_REG1_reg_n_0_[4] ),
        .I4(\WR_DATA_REG1_reg_n_0_[5] ),
        .I5(p_0_in6_in),
        .O(K28P5_WR_REG_i_2__2_n_0));
  FDRE K28P5_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_9_in),
        .Q(K28P5_WR_REG),
        .R(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair389" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[0]_i_1__2 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .O(\RD_ADDR_GRAY[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair391" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[1]_i_1__2 
       (.I0(p_1_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(\RD_ADDR_GRAY[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair391" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[2]_i_1__2 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(p_3_in),
        .O(\RD_ADDR_GRAY[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair393" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[3]_i_1__2 
       (.I0(p_3_in),
        .I1(p_4_in),
        .O(\RD_ADDR_GRAY[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair393" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[4]_i_1__2 
       (.I0(p_4_in),
        .I1(p_5_in),
        .O(\RD_ADDR_GRAY[4]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[5]_i_1__2 
       (.I0(p_5_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .O(\RD_ADDR_GRAY[5]_i_1__2_n_0 ));
  FDRE \RD_ADDR_GRAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[0]_i_1__2_n_0 ),
        .Q(RD_ADDR_GRAY[0]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[1]_i_1__2_n_0 ),
        .Q(RD_ADDR_GRAY[1]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[2]_i_1__2_n_0 ),
        .Q(RD_ADDR_GRAY[2]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[3]_i_1__2_n_0 ),
        .Q(RD_ADDR_GRAY[3]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[4]_i_1__2_n_0 ),
        .Q(RD_ADDR_GRAY[4]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[5]_i_1__2_n_0 ),
        .Q(RD_ADDR_GRAY[5]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_GRAY[6]),
        .R(SS));
  FDSE \RD_ADDR_PLUS1_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(RD_ADDR_PLUS1[0]),
        .S(SS));
  FDRE \RD_ADDR_PLUS1_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_1_in),
        .Q(RD_ADDR_PLUS1[1]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .Q(RD_ADDR_PLUS1[2]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_3_in),
        .Q(RD_ADDR_PLUS1[3]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_4_in),
        .Q(RD_ADDR_PLUS1[4]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_5_in),
        .Q(RD_ADDR_PLUS1[5]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_PLUS1[6]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair389" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \RD_ADDR_PLUS2[0]_i_1__2 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair383" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \RD_ADDR_PLUS2[2]_i_1__2 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair379" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \RD_ADDR_PLUS2[3]_i_1__2 
       (.I0(p_3_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in),
        .I3(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair379" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \RD_ADDR_PLUS2[4]_i_1__2 
       (.I0(p_4_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I2(p_1_in),
        .I3(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I4(p_3_in),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \RD_ADDR_PLUS2[5]_i_1__2 
       (.I0(p_5_in),
        .I1(p_3_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in),
        .I4(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I5(p_4_in),
        .O(plusOp[5]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \RD_ADDR_PLUS2[6]_i_1__2 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .I1(p_4_in),
        .I2(\RD_ADDR_PLUS2[6]_i_2__2_n_0 ),
        .I3(p_3_in),
        .I4(p_5_in),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair383" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \RD_ADDR_PLUS2[6]_i_2__2 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .O(\RD_ADDR_PLUS2[6]_i_2__2_n_0 ));
  FDRE \RD_ADDR_PLUS2_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[0]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .R(SS));
  FDSE \RD_ADDR_PLUS2_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_GRAY[0]_i_1__2_n_0 ),
        .Q(p_1_in),
        .S(SS));
  FDRE \RD_ADDR_PLUS2_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[2]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[3]),
        .Q(p_3_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[4]),
        .Q(p_4_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[5]),
        .Q(p_5_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[6]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .R(SS));
  FDRE \RD_ADDR_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[0]),
        .Q(RD_ADDR[0]),
        .R(SS));
  FDRE \RD_ADDR_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[1]),
        .Q(RD_ADDR[1]),
        .R(SS));
  FDRE \RD_ADDR_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[2]),
        .Q(RD_ADDR[2]),
        .R(SS));
  FDRE \RD_ADDR_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[3]),
        .Q(RD_ADDR[3]),
        .R(SS));
  FDRE \RD_ADDR_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[4]),
        .Q(RD_ADDR[4]),
        .R(SS));
  FDRE \RD_ADDR_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[5]),
        .Q(RD_ADDR[5]),
        .R(SS));
  FDRE \RD_ADDR_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[6]),
        .Q(RD_ADDR[6]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .Q(RD_DATA_REG[0]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[10] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[10].RD_DATA_reg_n_0_[10] ),
        .Q(RD_DATA_REG[10]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[11] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .Q(RD_DATA_REG[11]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[12] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .Q(RD_DATA_REG[12]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[13] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .Q(RD_DATA_REG[13]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[16] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[0]),
        .Q(RD_DATA_REG[16]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[17] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[1]),
        .Q(RD_DATA_REG[17]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[18] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[2]),
        .Q(RD_DATA_REG[18]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[19] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[3]),
        .Q(RD_DATA_REG[19]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .Q(RD_DATA_REG[1]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[20] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[4]),
        .Q(RD_DATA_REG[20]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[21] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[5]),
        .Q(RD_DATA_REG[21]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[22] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[6]),
        .Q(RD_DATA_REG[22]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[23] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[7]),
        .Q(RD_DATA_REG[23]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[25] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .Q(RD_DATA_REG[25]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[26] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[26].RD_DATA_reg_n_0_[26] ),
        .Q(RD_DATA_REG[26]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[27] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .Q(RD_DATA_REG[27]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[28] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[28].RD_DATA_reg ),
        .Q(RD_DATA_REG[28]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .Q(RD_DATA_REG[2]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .Q(RD_DATA_REG[3]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .Q(RD_DATA_REG[4]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .Q(RD_DATA_REG[5]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .Q(RD_DATA_REG[6]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[7] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .Q(RD_DATA_REG[7]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[9] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .Q(RD_DATA_REG[9]),
        .R(SS));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    RD_ENABLE_i_10__2
       (.I0(p_2_in[6]),
        .I1(p_2_in[1]),
        .I2(p_2_in[5]),
        .I3(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I4(p_2_in[3]),
        .O(RD_ENABLE_i_10__2_n_0));
  LUT6 #(
    .INIT(64'h4444444444444404)) 
    RD_ENABLE_i_1__2
       (.I0(SS),
        .I1(EVEN),
        .I2(RD_ENABLE_i_2__2_n_0),
        .I3(RD_ENABLE_i_3__2_n_0),
        .I4(RD_OCCUPANCY[6]),
        .I5(RD_ENABLE_i_4__2_n_0),
        .O(RD_ENABLE_i_1__2_n_0));
  LUT6 #(
    .INIT(64'h00000180FFFFFFFF)) 
    RD_ENABLE_i_2__2
       (.I0(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .I1(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I2(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I3(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .I4(RD_ENABLE_i_5__2_n_0),
        .I5(RD_ENABLE_i_6__2_n_0),
        .O(RD_ENABLE_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    RD_ENABLE_i_3__2
       (.I0(RD_OCCUPANCY[3]),
        .I1(RD_OCCUPANCY[2]),
        .I2(RD_OCCUPANCY[5]),
        .I3(RD_OCCUPANCY[4]),
        .I4(RD_OCCUPANCY[0]),
        .I5(RD_OCCUPANCY[1]),
        .O(RD_ENABLE_i_3__2_n_0));
  LUT6 #(
    .INIT(64'hBFFF0000BFFFBFFF)) 
    RD_ENABLE_i_4__2
       (.I0(RD_ENABLE_i_7__2_n_0),
        .I1(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .I2(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .I3(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I4(RD_ENABLE_i_8__2_n_0),
        .I5(RD_ENABLE_i_9__2_n_0),
        .O(RD_ENABLE_i_4__2_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    RD_ENABLE_i_5__2
       (.I0(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .I1(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I2(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I3(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I4(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .O(RD_ENABLE_i_5__2_n_0));
  LUT5 #(
    .INIT(32'hFFFEBFFF)) 
    RD_ENABLE_i_6__2
       (.I0(RD_ENABLE_i_10__2_n_0),
        .I1(p_2_in[2]),
        .I2(p_2_in[7]),
        .I3(p_2_in[0]),
        .I4(p_2_in[4]),
        .O(RD_ENABLE_i_6__2_n_0));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    RD_ENABLE_i_7__2
       (.I0(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I1(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I2(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I3(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .I4(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I5(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .O(RD_ENABLE_i_7__2_n_0));
  LUT6 #(
    .INIT(64'hFFFF7FFFFFFFFFFF)) 
    RD_ENABLE_i_8__2
       (.I0(p_2_in[4]),
        .I1(p_2_in[7]),
        .I2(p_2_in[3]),
        .I3(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I4(p_2_in[0]),
        .I5(p_2_in[5]),
        .O(RD_ENABLE_i_8__2_n_0));
  LUT3 #(
    .INIT(8'h02)) 
    RD_ENABLE_i_9__2
       (.I0(p_2_in[2]),
        .I1(p_2_in[6]),
        .I2(p_2_in[1]),
        .O(RD_ENABLE_i_9__2_n_0));
  FDRE RD_ENABLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RD_ENABLE_i_1__2_n_0),
        .Q(RD_ENABLE),
        .R(1'b0));
  FDRE \RD_OCCUPANCY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[0]),
        .Q(RD_OCCUPANCY[0]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[1]),
        .Q(RD_OCCUPANCY[1]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[2]),
        .Q(RD_OCCUPANCY[2]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[3]),
        .Q(RD_OCCUPANCY[3]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[4]),
        .Q(RD_OCCUPANCY[4]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[5]),
        .Q(RD_OCCUPANCY[5]),
        .R(SS));
  FDSE \RD_OCCUPANCY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[6]),
        .Q(RD_OCCUPANCY[6]),
        .S(SS));
  quadsgmii_0_TEST_qsgmii_sync_block \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[0]),
        .data_out(\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_93 \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[1:0]),
        .S({\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_1 }),
        .\WR_OCCUPANCY[6]_i_8__2_0 (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .\WR_OCCUPANCY[6]_i_8__2_1 (p_17_in),
        .\WR_OCCUPANCY[6]_i_8__2_2 (p_1_in18_in),
        .\WR_OCCUPANCY[6]_i_8__2_3 (p_3_in24_in),
        .\WR_OCCUPANCY_reg[6] (\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_2_in21_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[1]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_94 \RECLOCK_RD_ADDRGRAY[2].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[2]),
        .data_out(p_3_in24_in),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_95 \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[2]),
        .S(\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ),
        .\WR_OCCUPANCY_reg[6] (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .\WR_OCCUPANCY_reg[6]_0 (p_17_in),
        .\WR_OCCUPANCY_reg[6]_1 (p_1_in18_in),
        .\WR_OCCUPANCY_reg[6]_2 (p_3_in24_in),
        .data_out(p_2_in21_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[3]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_96 \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[3]),
        .S(\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ),
        .\WR_OCCUPANCY_reg[6] (p_17_in),
        .\WR_OCCUPANCY_reg[6]_0 (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .\WR_OCCUPANCY_reg[6]_1 (p_2_in21_in),
        .data_out(p_1_in18_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[4]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_97 \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[4]),
        .S(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ),
        .\WR_OCCUPANCY_reg[6] (p_17_in),
        .\WR_OCCUPANCY_reg[6]_0 (p_1_in18_in),
        .data_out(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg1_0(RD_ADDR_GRAY[5]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_98 \RECLOCK_RD_ADDRGRAY[6].SYNC_RD_ADDRGRAY 
       (.D(WR_OCCUPANCY00_out),
        .Q(WR_ADDR),
        .S({\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_1 }),
        .\WR_OCCUPANCY_reg[6] (\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_out(p_17_in),
        .data_sync_reg1_0(RD_ADDR_GRAY[6]),
        .rxrecclk(rxrecclk));
  quadsgmii_0_TEST_qsgmii_sync_block_99 \RECLOCK_WR_ADDRGRAY[0].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[0]),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .data_out(p_0_out),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_100 \RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY 
       (.D(RD_OCCUPANCY01_out),
        .DI({GRAY_TO_BIN[5:2],GRAY_TO_BIN[0]}),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(RD_ADDR[1:0]),
        .\RD_OCCUPANCY_reg[6] (p_3_out),
        .\RD_OCCUPANCY_reg[6]_0 (p_5_out),
        .\RD_OCCUPANCY_reg[6]_1 (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_2 (p_4_out),
        .\RD_OCCUPANCY_reg[6]_3 (p_2_out),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 ,\RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 }),
        .data_out(p_0_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[1] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_101 \RECLOCK_WR_ADDRGRAY[2].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .\RD_OCCUPANCY_reg[6] (p_4_out),
        .\RD_OCCUPANCY_reg[6]_0 (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_1 (p_5_out),
        .\RD_OCCUPANCY_reg[6]_2 (p_3_out),
        .data_out(p_2_out),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_102 \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[3]),
        .Q(RD_ADDR[2]),
        .\RD_OCCUPANCY_reg[6] (p_5_out),
        .\RD_OCCUPANCY_reg[6]_0 (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_1 (p_4_out),
        .\RD_OCCUPANCY_reg[6]_2 (p_2_out),
        .S(\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ),
        .data_out(p_3_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[3] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_103 \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[4]),
        .Q(RD_ADDR[3]),
        .\RD_OCCUPANCY_reg[6] (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_0 (p_5_out),
        .\RD_OCCUPANCY_reg[6]_1 (p_3_out),
        .S(\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ),
        .data_out(p_4_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[4] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_104 \RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[5]),
        .Q(RD_ADDR[4]),
        .\RD_OCCUPANCY_reg[6] (DATA_OUT),
        .\RD_OCCUPANCY_reg[6]_0 (p_4_out),
        .S(\RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY_n_0 ),
        .data_out(p_5_out),
        .data_sync_reg1_0(\WR_ADDR_GRAY_reg_n_0_[5] ),
        .userclk(userclk));
  quadsgmii_0_TEST_qsgmii_sync_block_105 \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY 
       (.Q(RD_ADDR[6:5]),
        .\RD_OCCUPANCY_reg[6] (p_5_out),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 }),
        .data_out(DATA_OUT),
        .data_sync_reg1_0(DATA_IN),
        .userclk(userclk));
  LUT6 #(
    .INIT(64'h0000FFFF00800000)) 
    REMOVE_IDLE_i_1__2
       (.I0(I1_DETECTED_WR),
        .I1(WR_OCCUPANCY[6]),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE_i_2__2_n_0),
        .I4(WR_TOGGLE),
        .I5(REMOVE_IDLE),
        .O(REMOVE_IDLE_i_1__2_n_0));
  LUT5 #(
    .INIT(32'h00000001)) 
    REMOVE_IDLE_i_2__2
       (.I0(WR_OCCUPANCY[1]),
        .I1(WR_OCCUPANCY[5]),
        .I2(WR_OCCUPANCY[3]),
        .I3(WR_OCCUPANCY[2]),
        .I4(WR_OCCUPANCY[4]),
        .O(REMOVE_IDLE_i_2__2_n_0));
  FDRE REMOVE_IDLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(REMOVE_IDLE_i_1__2_n_0),
        .Q(REMOVE_IDLE),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFA800)) 
    RXBUFERR_i_1__2
       (.I0(RXBUFERR_i_2__2_n_0),
        .I1(RD_OCCUPANCY[1]),
        .I2(RD_OCCUPANCY[0]),
        .I3(RD_OCCUPANCY[6]),
        .I4(RXBUFERR_i_3__2_n_0),
        .I5(RXBUFSTATUS),
        .O(RXBUFERR_i_1__2_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    RXBUFERR_i_2__2
       (.I0(RD_OCCUPANCY[4]),
        .I1(RD_OCCUPANCY[5]),
        .I2(RD_OCCUPANCY[2]),
        .I3(RD_OCCUPANCY[3]),
        .O(RXBUFERR_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    RXBUFERR_i_3__2
       (.I0(RD_OCCUPANCY[4]),
        .I1(RD_OCCUPANCY[5]),
        .I2(RD_OCCUPANCY[2]),
        .I3(RD_OCCUPANCY[3]),
        .I4(RD_OCCUPANCY[6]),
        .I5(RXBUFERR_i_4__2_n_0),
        .O(RXBUFERR_i_3__2_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    RXBUFERR_i_4__2
       (.I0(RD_OCCUPANCY[1]),
        .I1(RD_OCCUPANCY[0]),
        .O(RXBUFERR_i_4__2_n_0));
  FDRE RXBUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXBUFERR_i_1__2_n_0),
        .Q(RXBUFSTATUS),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair381" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISCOMMA_USR_i_1__2
       (.I0(RD_DATA_REG[28]),
        .I1(EVEN),
        .I2(RD_DATA_REG[12]),
        .O(RXCHARISCOMMA_USR_i_1__2_n_0));
  FDRE RXCHARISCOMMA_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISCOMMA_USR_i_1__2_n_0),
        .Q(RXCHARISCOMMA_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair384" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISK_USR_i_1__2
       (.I0(RD_DATA_REG[27]),
        .I1(EVEN),
        .I2(RD_DATA_REG[11]),
        .O(RXCHARISK_USR_i_1__2_n_0));
  FDRE RXCHARISK_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISK_USR_i_1__2_n_0),
        .Q(RXCHARISK_USR),
        .R(SS));
  LUT3 #(
    .INIT(8'hBA)) 
    \RXCLKCORCNT[0]_i_1__2 
       (.I0(insert_idle_reg),
        .I1(D[0]),
        .I2(RD_DATA_REG[13]),
        .O(\RXCLKCORCNT[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h10001010)) 
    \RXCLKCORCNT[2]_i_1__2 
       (.I0(SR),
        .I1(MGT_RX_RESET),
        .I2(insert_idle_reg),
        .I3(D[0]),
        .I4(RD_DATA_REG[13]),
        .O(\RXCLKCORCNT[2]_i_1__2_n_0 ));
  FDRE \RXCLKCORCNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[0]_i_1__2_n_0 ),
        .Q(D[0]),
        .R(SS));
  FDRE \RXCLKCORCNT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[2]_i_1__2_n_0 ),
        .Q(D[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair387" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[0]_i_1__2 
       (.I0(RD_DATA_REG[16]),
        .I1(EVEN),
        .I2(RD_DATA_REG[0]),
        .O(\RXDATA_USR[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair388" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[1]_i_1__2 
       (.I0(RD_DATA_REG[17]),
        .I1(EVEN),
        .I2(RD_DATA_REG[1]),
        .O(\RXDATA_USR[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair388" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[2]_i_1__2 
       (.I0(RD_DATA_REG[18]),
        .I1(EVEN),
        .I2(RD_DATA_REG[2]),
        .O(\RXDATA_USR[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair387" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[3]_i_1__2 
       (.I0(RD_DATA_REG[19]),
        .I1(EVEN),
        .I2(RD_DATA_REG[3]),
        .O(\RXDATA_USR[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair381" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[4]_i_1__2 
       (.I0(RD_DATA_REG[20]),
        .I1(EVEN),
        .I2(RD_DATA_REG[4]),
        .O(\RXDATA_USR[4]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair386" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[5]_i_1__2 
       (.I0(RD_DATA_REG[21]),
        .I1(EVEN),
        .I2(RD_DATA_REG[5]),
        .O(\RXDATA_USR[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair386" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[6]_i_1__2 
       (.I0(RD_DATA_REG[22]),
        .I1(EVEN),
        .I2(RD_DATA_REG[6]),
        .O(\RXDATA_USR[6]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair385" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[7]_i_1__2 
       (.I0(RD_DATA_REG[23]),
        .I1(EVEN),
        .I2(RD_DATA_REG[7]),
        .O(\RXDATA_USR[7]_i_1__2_n_0 ));
  FDRE \RXDATA_USR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .R(SS));
  FDRE \RXDATA_USR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(SS));
  FDRE \RXDATA_USR_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(SS));
  FDRE \RXDATA_USR_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(SS));
  FDRE \RXDATA_USR_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[4]_i_1__2_n_0 ),
        .Q(Q[4]),
        .R(SS));
  FDRE \RXDATA_USR_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[5]_i_1__2_n_0 ),
        .Q(Q[5]),
        .R(SS));
  FDRE \RXDATA_USR_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[6]_i_1__2_n_0 ),
        .Q(Q[6]),
        .R(SS));
  FDRE \RXDATA_USR_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[7]_i_1__2_n_0 ),
        .Q(Q[7]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair385" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXDISPERR_USR_i_1__2
       (.I0(RD_DATA_REG[26]),
        .I1(EVEN),
        .I2(RD_DATA_REG[10]),
        .O(RXDISPERR_USR_i_1__2_n_0));
  FDRE RXDISPERR_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_USR_i_1__2_n_0),
        .Q(RXDISPERR_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair384" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXNOTINTABLE_USR_i_1__2
       (.I0(RD_DATA_REG[25]),
        .I1(EVEN),
        .I2(RD_DATA_REG[9]),
        .O(RXNOTINTABLE_USR_i_1__2_n_0));
  FDRE RXNOTINTABLE_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_USR_i_1__2_n_0),
        .Q(RXNOTINTABLE_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair390" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[0]_i_1__2 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .O(BIN_TO_GRAY[0]));
  (* SOFT_HLUTNM = "soft_lutpair392" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[1]_i_1__2 
       (.I0(p_1_in5_in),
        .I1(p_2_in7_in),
        .O(BIN_TO_GRAY[1]));
  (* SOFT_HLUTNM = "soft_lutpair392" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[2]_i_1__2 
       (.I0(p_2_in7_in),
        .I1(p_3_in9_in),
        .O(BIN_TO_GRAY[2]));
  (* SOFT_HLUTNM = "soft_lutpair394" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[3]_i_1__2 
       (.I0(p_3_in9_in),
        .I1(p_4_in11_in),
        .O(BIN_TO_GRAY[3]));
  (* SOFT_HLUTNM = "soft_lutpair394" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[4]_i_1__2 
       (.I0(p_4_in11_in),
        .I1(p_5_in13_in),
        .O(BIN_TO_GRAY[4]));
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[5]_i_1__2 
       (.I0(p_5_in13_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .O(BIN_TO_GRAY[5]));
  FDSE \WR_ADDR_GRAY_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[0]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[3]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[4]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[5]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[5] ),
        .S(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(DATA_IN),
        .S(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(WR_ADDR_PLUS1[0]),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_1_in5_in),
        .Q(WR_ADDR_PLUS1[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_2_in7_in),
        .Q(WR_ADDR_PLUS1[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_3_in9_in),
        .Q(WR_ADDR_PLUS1[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_4_in11_in),
        .Q(WR_ADDR_PLUS1[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_5_in13_in),
        .Q(WR_ADDR_PLUS1[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(WR_ADDR_PLUS1[6]),
        .S(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair390" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \WR_ADDR_PLUS2[0]_i_1__2 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair382" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \WR_ADDR_PLUS2[2]_i_1__2 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .I2(p_2_in7_in),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair377" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \WR_ADDR_PLUS2[3]_i_1__2 
       (.I0(p_3_in9_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in5_in),
        .I3(p_2_in7_in),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair377" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[4]_i_1__2 
       (.I0(p_4_in11_in),
        .I1(p_2_in7_in),
        .I2(p_1_in5_in),
        .I3(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I4(p_3_in9_in),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \WR_ADDR_PLUS2[5]_i_1__2 
       (.I0(p_5_in13_in),
        .I1(p_3_in9_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in5_in),
        .I4(p_2_in7_in),
        .I5(p_4_in11_in),
        .O(plusOp__0[5]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[6]_i_1__2 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .I1(p_4_in11_in),
        .I2(\WR_ADDR_PLUS2[6]_i_2__2_n_0 ),
        .I3(p_3_in9_in),
        .I4(p_5_in13_in),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair382" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \WR_ADDR_PLUS2[6]_i_2__2 
       (.I0(p_2_in7_in),
        .I1(p_1_in5_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(\WR_ADDR_PLUS2[6]_i_2__2_n_0 ));
  FDRE \WR_ADDR_PLUS2_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[0]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(BIN_TO_GRAY[0]),
        .Q(p_1_in5_in),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[2]),
        .Q(p_2_in7_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[3]),
        .Q(p_3_in9_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[4]),
        .Q(p_4_in11_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[5]),
        .Q(p_5_in13_in),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[6]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[0]),
        .Q(WR_ADDR[0]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[1]),
        .Q(WR_ADDR[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[2]),
        .Q(WR_ADDR[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[3]),
        .Q(WR_ADDR[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[4]),
        .Q(WR_ADDR[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[5]),
        .Q(WR_ADDR[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[6]),
        .Q(WR_ADDR[6]),
        .S(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [0]),
        .Q(\WR_DATA_REG1_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[10] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [9]),
        .Q(WR_DATA_REG1[10]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [10]),
        .Q(p_0_in6_in),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [11]),
        .Q(WR_DATA_REG1[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [1]),
        .Q(\WR_DATA_REG1_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [2]),
        .Q(\WR_DATA_REG1_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [3]),
        .Q(\WR_DATA_REG1_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [4]),
        .Q(\WR_DATA_REG1_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [5]),
        .Q(\WR_DATA_REG1_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [6]),
        .Q(\WR_DATA_REG1_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [7]),
        .Q(\WR_DATA_REG1_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg[12]_0 [8]),
        .Q(WR_DATA_REG1[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(WR_DATA_REG2[0]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[10] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[10]),
        .Q(WR_DATA_REG2[10]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in6_in),
        .Q(WR_DATA_REG2[11]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[12]),
        .Q(WR_DATA_REG2[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(WR_DATA_REG2[1]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(WR_DATA_REG2[2]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(WR_DATA_REG2[3]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(WR_DATA_REG2[4]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(WR_DATA_REG2[5]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(WR_DATA_REG2[6]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(WR_DATA_REG2[7]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[9]),
        .Q(WR_DATA_REG2[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[0] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(\WR_DATA_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[10] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[10]),
        .Q(\WR_DATA_reg_n_0_[10] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[11] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(p_0_in6_in),
        .Q(\WR_DATA_reg_n_0_[11] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[12] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[12]),
        .Q(\WR_DATA_reg_n_0_[12] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[13] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(REMOVE_IDLE),
        .Q(\WR_DATA_reg_n_0_[13] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[16] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[0]),
        .Q(\WR_DATA_reg_n_0_[16] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[17] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[1]),
        .Q(\WR_DATA_reg_n_0_[17] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[18] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[2]),
        .Q(\WR_DATA_reg_n_0_[18] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[19] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[3]),
        .Q(\WR_DATA_reg_n_0_[19] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[1] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(\WR_DATA_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[20] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[4]),
        .Q(\WR_DATA_reg_n_0_[20] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[21] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[5]),
        .Q(\WR_DATA_reg_n_0_[21] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[22] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[6]),
        .Q(\WR_DATA_reg_n_0_[22] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[23] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[7]),
        .Q(\WR_DATA_reg_n_0_[23] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[25] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[9]),
        .Q(\WR_DATA_reg_n_0_[25] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[26] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[10]),
        .Q(\WR_DATA_reg_n_0_[26] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[27] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[11]),
        .Q(\WR_DATA_reg_n_0_[27] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[28] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[12]),
        .Q(\WR_DATA_reg_n_0_[28] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[2] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(\WR_DATA_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[3] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(\WR_DATA_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[4] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(\WR_DATA_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[5] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(\WR_DATA_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[6] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(\WR_DATA_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[7] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(\WR_DATA_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[9] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[9]),
        .Q(\WR_DATA_reg_n_0_[9] ),
        .R(RESET_OUT));
  LUT4 #(
    .INIT(16'h4044)) 
    WR_ENABLE_i_1__2
       (.I0(RESET_OUT),
        .I1(WR_TOGGLE),
        .I2(WR_ENABLE_i_2__2_n_0),
        .I3(I1_DETECTED_WR),
        .O(WR_ENABLE_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair378" *) 
  LUT5 #(
    .INIT(32'hFFBFFFFF)) 
    WR_ENABLE_i_2__2
       (.I0(REMOVE_IDLE_i_2__2_n_0),
        .I1(WR_TOGGLE),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE),
        .I4(WR_OCCUPANCY[6]),
        .O(WR_ENABLE_i_2__2_n_0));
  FDRE WR_ENABLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_ENABLE_i_1__2_n_0),
        .Q(WE),
        .R(1'b0));
  FDRE \WR_OCCUPANCY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[1]),
        .Q(WR_OCCUPANCY[1]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[2]),
        .Q(WR_OCCUPANCY[2]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[3]),
        .Q(WR_OCCUPANCY[3]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[4]),
        .Q(WR_OCCUPANCY[4]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[5]),
        .Q(WR_OCCUPANCY[5]),
        .R(RESET_OUT));
  FDSE \WR_OCCUPANCY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[6]),
        .Q(WR_OCCUPANCY[6]),
        .S(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair378" *) 
  LUT1 #(
    .INIT(2'h1)) 
    WR_TOGGLE_i_1__2
       (.I0(WR_TOGGLE),
        .O(WR_TOGGLE_i_1__2_n_0));
  FDSE WR_TOGGLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_TOGGLE_i_1__2_n_0),
        .Q(WR_TOGGLE),
        .S(RESET_OUT));
  FDRE insert_idle_reg_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE),
        .Q(insert_idle_reg),
        .R(SS));
endmodule

(* ORIG_REF_NAME = "RX" *) 
module quadsgmii_0_TEST_RX
   (status_vector_ch3,
    RX_IDLE,
    SOP_REG3,
    RX_DATA_ERROR,
    gmii_rx_er_ch3,
    RX_CONFIG_VALID,
    RECEIVE,
    gmii_rx_dv_ch3,
    RX_INVALID,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ,
    SR,
    \RX_CONFIG_REG_reg[10]_0 ,
    \RX_CONFIG_REG_reg[15]_0 ,
    BASEX_REMOTE_FAULT_RSLVD,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ,
    FALSE_CARRIER_REG3_reg_0,
    I_REG_reg_0,
    RX_CONFIG_VALID_INT_reg_0,
    gmii_rxd_ch3,
    Q,
    userclk,
    \RX_CONFIG_VALID_REG_reg[0]_0 ,
    FALSE_NIT0,
    SYNC_STATUS_REG0,
    S0,
    S2,
    RXCHARISK_REG1_reg_0,
    RX_ER0,
    \RX_CONFIG_REG_reg[7]_0 ,
    RXSYNC_STATUS,
    RXEVEN0_out,
    RX_INVALID_reg_0,
    FALSE_CARRIER_reg_0,
    RXNOTINTABLE_INT,
    out,
    CONFIG_REG_MATCH_reg,
    RX_DV0,
    XMIT_DATA,
    RECEIVED_IDLE,
    RX_CONFIG_REG_NULL_reg,
    \RXD_reg[7]_0 );
  output [1:0]status_vector_ch3;
  output RX_IDLE;
  output SOP_REG3;
  output RX_DATA_ERROR;
  output gmii_rx_er_ch3;
  output RX_CONFIG_VALID;
  output RECEIVE;
  output gmii_rx_dv_ch3;
  output RX_INVALID;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ;
  output [0:0]SR;
  output \RX_CONFIG_REG_reg[10]_0 ;
  output [15:0]\RX_CONFIG_REG_reg[15]_0 ;
  output [0:0]BASEX_REMOTE_FAULT_RSLVD;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  output FALSE_CARRIER_REG3_reg_0;
  output I_REG_reg_0;
  output RX_CONFIG_VALID_INT_reg_0;
  output [7:0]gmii_rxd_ch3;
  input [7:0]Q;
  input userclk;
  input \RX_CONFIG_VALID_REG_reg[0]_0 ;
  input FALSE_NIT0;
  input SYNC_STATUS_REG0;
  input S0;
  input S2;
  input RXCHARISK_REG1_reg_0;
  input RX_ER0;
  input [1:0]\RX_CONFIG_REG_reg[7]_0 ;
  input RXSYNC_STATUS;
  input RXEVEN0_out;
  input RX_INVALID_reg_0;
  input FALSE_CARRIER_reg_0;
  input RXNOTINTABLE_INT;
  input out;
  input [2:0]CONFIG_REG_MATCH_reg;
  input RX_DV0;
  input XMIT_DATA;
  input RECEIVED_IDLE;
  input RX_CONFIG_REG_NULL_reg;
  input [0:0]\RXD_reg[7]_0 ;

  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire C;
  wire C0;
  wire CGBAD;
  wire CGBAD_REG1;
  wire CGBAD_REG2;
  wire CGBAD_REG3;
  wire [2:0]CONFIG_REG_MATCH_reg;
  wire C_HDR_REMOVED;
  wire C_HDR_REMOVED_REG;
  wire C_REG1;
  wire C_REG2;
  wire C_REG3;
  wire D0p0;
  wire D0p0_REG;
  wire EOP;
  wire EOP0;
  wire EOP_REG1;
  wire EOP_REG10;
  wire EOP_i_2__2_n_0;
  wire EXTEND;
  wire EXTEND_ERR;
  wire EXTEND_ERR0;
  wire EXTEND_REG1;
  wire EXTEND_REG2;
  wire EXTEND_REG3;
  wire EXTEND_i_1__2_n_0;
  wire EXT_ILLEGAL_K;
  wire EXT_ILLEGAL_K0;
  wire EXT_ILLEGAL_K_REG1;
  wire EXT_ILLEGAL_K_REG2;
  wire FALSE_CARRIER;
  wire FALSE_CARRIER0;
  wire FALSE_CARRIER_REG1;
  wire FALSE_CARRIER_REG2;
  wire FALSE_CARRIER_REG3;
  wire FALSE_CARRIER_REG3_reg_0;
  wire FALSE_CARRIER_i_1__2_n_0;
  wire FALSE_CARRIER_reg_0;
  wire FALSE_DATA;
  wire FALSE_DATA0;
  wire FALSE_DATA_i_2__2_n_0;
  wire FALSE_DATA_i_3__2_n_0;
  wire FALSE_DATA_i_4__2_n_0;
  wire FALSE_DATA_i_5__2_n_0;
  wire FALSE_DATA_i_6__2_n_0;
  wire FALSE_K;
  wire FALSE_K0;
  wire FALSE_K_i_2__2_n_0;
  wire FALSE_K_i_3__2_n_0;
  wire FALSE_NIT;
  wire FALSE_NIT0;
  wire FROM_IDLE_D;
  wire FROM_IDLE_D0;
  wire FROM_RX_CX;
  wire FROM_RX_CX0;
  wire FROM_RX_K;
  wire FROM_RX_K0;
  wire I;
  wire I0;
  wire \IDLE_REG_reg_n_0_[0] ;
  wire \IDLE_REG_reg_n_0_[2] ;
  wire ILLEGAL_K;
  wire ILLEGAL_K0;
  wire ILLEGAL_K_REG1;
  wire ILLEGAL_K_REG2;
  wire I_REG_reg_0;
  wire I_i_2__2_n_0;
  wire I_i_3__2_n_0;
  wire I_i_4__2_n_0;
  wire I_i_5__2_n_0;
  wire I_i_6__2_n_0;
  wire K23p7;
  wire K28p5;
  wire K28p5_REG1;
  wire K28p5_REG2;
  wire K29p7;
  wire [7:0]Q;
  wire R;
  wire RECEIVE;
  wire RECEIVED_IDLE;
  wire RECEIVE_i_1__2_n_0;
  wire RUDI_C0__0;
  wire RUDI_I0;
  wire RXCHARISK_REG1;
  wire RXCHARISK_REG1_reg_0;
  wire [7:0]RXDATA_REG5;
  wire \RXD[0]_i_1__2_n_0 ;
  wire \RXD[1]_i_1__2_n_0 ;
  wire \RXD[2]_i_1__2_n_0 ;
  wire \RXD[3]_i_1__2_n_0 ;
  wire \RXD[4]_i_1__2_n_0 ;
  wire \RXD[5]_i_1__2_n_0 ;
  wire \RXD[6]_i_1__2_n_0 ;
  wire \RXD[7]_i_1__2_n_0 ;
  wire [0:0]\RXD_reg[7]_0 ;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXSYNC_STATUS;
  wire \RX_CONFIG_REG[15]_i_1__2_n_0 ;
  wire \RX_CONFIG_REG[7]_i_1__2_n_0 ;
  wire RX_CONFIG_REG_NULL_i_2__2_n_0;
  wire RX_CONFIG_REG_NULL_i_3__2_n_0;
  wire RX_CONFIG_REG_NULL_i_4__2_n_0;
  wire RX_CONFIG_REG_NULL_i_5__2_n_0;
  wire RX_CONFIG_REG_NULL_reg;
  wire \RX_CONFIG_REG_reg[10]_0 ;
  wire [15:0]\RX_CONFIG_REG_reg[15]_0 ;
  wire [1:0]\RX_CONFIG_REG_reg[7]_0 ;
  wire RX_CONFIG_VALID;
  wire RX_CONFIG_VALID_INT0;
  wire RX_CONFIG_VALID_INT_i_2__2_n_0;
  wire RX_CONFIG_VALID_INT_reg_0;
  wire \RX_CONFIG_VALID_REG_reg[0]_0 ;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[3] ;
  wire RX_DATA_ERROR;
  wire RX_DATA_ERROR0;
  wire RX_DATA_ERROR_i_2__2_n_0;
  wire RX_DATA_ERROR_i_3__2_n_0;
  wire RX_DATA_ERROR_i_4__2_n_0;
  wire RX_DV0;
  wire RX_DV_i_1__2_n_0;
  wire RX_ER0;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_INVALID_i_1__2_n_0;
  wire RX_INVALID_reg_0;
  wire R_REG1;
  wire S;
  wire S0;
  wire S2;
  wire SOP;
  wire SOP0;
  wire SOP_REG1;
  wire SOP_REG2;
  wire SOP_REG3;
  wire [0:0]SR;
  wire SYNC_STATUS_REG;
  wire SYNC_STATUS_REG0;
  wire T;
  wire T_REG1;
  wire T_REG2;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ;
  wire WAIT_FOR_K;
  wire WAIT_FOR_K_i_1__2_n_0;
  wire XMIT_DATA;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_er_ch3;
  wire [7:0]gmii_rxd_ch3;
  wire out;
  wire p_0_in1_in;
  wire p_0_in2_in;
  wire p_1_in;
  wire [1:0]status_vector_ch3;
  wire userclk;

  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_5__2
       (.I0(\RX_CONFIG_REG_reg[15]_0 [10]),
        .I1(CONFIG_REG_MATCH_reg[1]),
        .I2(CONFIG_REG_MATCH_reg[2]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [11]),
        .I4(CONFIG_REG_MATCH_reg[0]),
        .I5(\RX_CONFIG_REG_reg[15]_0 [9]),
        .O(\RX_CONFIG_REG_reg[10]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair315" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \BASEX_REMOTE_FAULT[1]_i_1__2 
       (.I0(\RX_CONFIG_REG_reg[15]_0 [15]),
        .O(BASEX_REMOTE_FAULT_RSLVD));
  FDRE CGBAD_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD),
        .Q(CGBAD_REG1),
        .R(1'b0));
  FDRE CGBAD_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG1),
        .Q(CGBAD_REG2),
        .R(1'b0));
  FDRE CGBAD_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG2),
        .Q(CGBAD_REG3),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE CGBAD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S2),
        .Q(CGBAD),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    C_HDR_REMOVED_REG_i_1__2
       (.I0(C_REG2),
        .I1(\RX_CONFIG_REG_reg[7]_0 [0]),
        .I2(\RX_CONFIG_REG_reg[7]_0 [1]),
        .O(C_HDR_REMOVED));
  FDRE C_HDR_REMOVED_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_HDR_REMOVED),
        .Q(C_HDR_REMOVED_REG),
        .R(1'b0));
  FDRE C_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C),
        .Q(C_REG1),
        .R(1'b0));
  FDRE C_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG1),
        .Q(C_REG2),
        .R(1'b0));
  FDRE C_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG2),
        .Q(C_REG3),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h8)) 
    C_i_1__2
       (.I0(K28p5_REG1),
        .I1(I_i_3__2_n_0),
        .O(C0));
  FDRE C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C0),
        .Q(C),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair312" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    D0p0_REG_i_1__2
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[7]),
        .O(D0p0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    D0p0_REG_i_2__2
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(Q[4]),
        .I4(Q[5]),
        .I5(Q[6]),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ));
  FDRE D0p0_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(D0p0),
        .Q(D0p0_REG),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hEA)) 
    EOP_REG1_i_1__2
       (.I0(EOP),
        .I1(EXTEND),
        .I2(EXTEND_REG1),
        .O(EOP_REG10));
  FDRE EOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP_REG10),
        .Q(EOP_REG1),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF88888000)) 
    EOP_i_1__2
       (.I0(T_REG2),
        .I1(R_REG1),
        .I2(K28p5_REG1),
        .I3(RXEVEN0_out),
        .I4(R),
        .I5(EOP_i_2__2_n_0),
        .O(EOP0));
  LUT5 #(
    .INIT(32'hF8888888)) 
    EOP_i_2__2
       (.I0(RX_IDLE),
        .I1(K28p5_REG1),
        .I2(C_REG1),
        .I3(D0p0_REG),
        .I4(RXEVEN0_out),
        .O(EOP_i_2__2_n_0));
  FDRE EOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP0),
        .Q(EOP),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    EXTEND_ERR_i_1__2
       (.I0(EXT_ILLEGAL_K_REG2),
        .I1(CGBAD_REG3),
        .I2(EXTEND_REG3),
        .O(EXTEND_ERR0));
  FDRE EXTEND_ERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_ERR0),
        .Q(EXTEND_ERR),
        .R(SYNC_STATUS_REG0));
  FDRE EXTEND_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND),
        .Q(EXTEND_REG1),
        .R(1'b0));
  FDRE EXTEND_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG1),
        .Q(EXTEND_REG2),
        .R(1'b0));
  FDRE EXTEND_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG2),
        .Q(EXTEND_REG3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h808080FF80808080)) 
    EXTEND_i_1__2
       (.I0(R_REG1),
        .I1(R),
        .I2(RECEIVE),
        .I3(RX_DATA_ERROR_i_3__2_n_0),
        .I4(S),
        .I5(EXTEND),
        .O(EXTEND_i_1__2_n_0));
  FDRE EXTEND_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_i_1__2_n_0),
        .Q(EXTEND),
        .R(SYNC_STATUS_REG0));
  FDRE EXT_ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K),
        .Q(EXT_ILLEGAL_K_REG1),
        .R(SYNC_STATUS_REG0));
  FDRE EXT_ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K_REG1),
        .Q(EXT_ILLEGAL_K_REG2),
        .R(SYNC_STATUS_REG0));
  (* SOFT_HLUTNM = "soft_lutpair305" *) 
  LUT5 #(
    .INIT(32'h00000700)) 
    EXT_ILLEGAL_K_i_1__2
       (.I0(K28p5_REG1),
        .I1(RXEVEN0_out),
        .I2(S),
        .I3(EXTEND_REG1),
        .I4(R),
        .O(EXT_ILLEGAL_K0));
  FDRE EXT_ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K0),
        .Q(EXT_ILLEGAL_K),
        .R(SYNC_STATUS_REG0));
  FDRE FALSE_CARRIER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER),
        .Q(FALSE_CARRIER_REG1),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG1),
        .Q(FALSE_CARRIER_REG2),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG2),
        .Q(FALSE_CARRIER_REG3),
        .R(SYNC_STATUS_REG0));
  LUT4 #(
    .INIT(16'hF7F0)) 
    FALSE_CARRIER_i_1__2
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .I2(FALSE_CARRIER0),
        .I3(FALSE_CARRIER),
        .O(FALSE_CARRIER_i_1__2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    FALSE_CARRIER_i_2__2
       (.I0(FALSE_CARRIER_reg_0),
        .I1(K28p5_REG1),
        .I2(S),
        .I3(FALSE_NIT),
        .I4(FALSE_K),
        .I5(FALSE_DATA),
        .O(FALSE_CARRIER0));
  FDRE FALSE_CARRIER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_i_1__2_n_0),
        .Q(FALSE_CARRIER),
        .R(SYNC_STATUS_REG0));
  LUT3 #(
    .INIT(8'h02)) 
    FALSE_DATA_i_1__2
       (.I0(FALSE_DATA_i_2__2_n_0),
        .I1(RXNOTINTABLE_INT),
        .I2(RXCHARISK_REG1_reg_0),
        .O(FALSE_DATA0));
  LUT6 #(
    .INIT(64'h3035357530303000)) 
    FALSE_DATA_i_2__2
       (.I0(FALSE_DATA_i_3__2_n_0),
        .I1(FALSE_DATA_i_4__2_n_0),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .I5(FALSE_DATA_i_5__2_n_0),
        .O(FALSE_DATA_i_2__2_n_0));
  LUT3 #(
    .INIT(8'hFB)) 
    FALSE_DATA_i_3__2
       (.I0(Q[7]),
        .I1(Q[6]),
        .I2(Q[5]),
        .O(FALSE_DATA_i_3__2_n_0));
  LUT6 #(
    .INIT(64'hDFFFDFFFDFFFDFDF)) 
    FALSE_DATA_i_4__2
       (.I0(Q[5]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(FALSE_DATA_i_6__2_n_0),
        .I4(Q[4]),
        .I5(Q[3]),
        .O(FALSE_DATA_i_4__2_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    FALSE_DATA_i_5__2
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(FALSE_DATA_i_5__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair312" *) 
  LUT2 #(
    .INIT(4'h1)) 
    FALSE_DATA_i_6__2
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(FALSE_DATA_i_6__2_n_0));
  FDRE FALSE_DATA_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_DATA0),
        .Q(FALSE_DATA),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h00000041)) 
    FALSE_K_i_1__2
       (.I0(RXNOTINTABLE_INT),
        .I1(Q[6]),
        .I2(Q[5]),
        .I3(FALSE_K_i_2__2_n_0),
        .I4(FALSE_K_i_3__2_n_0),
        .O(FALSE_K0));
  (* SOFT_HLUTNM = "soft_lutpair303" *) 
  LUT4 #(
    .INIT(16'hFFF7)) 
    FALSE_K_i_2__2
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(FALSE_K_i_2__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair314" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    FALSE_K_i_3__2
       (.I0(Q[7]),
        .I1(Q[4]),
        .I2(RXCHARISK_REG1_reg_0),
        .O(FALSE_K_i_3__2_n_0));
  FDRE FALSE_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_K0),
        .Q(FALSE_K),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    FALSE_NIT_i_3__2
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(Q[4]),
        .I4(Q[6]),
        .I5(Q[5]),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ));
  FDRE FALSE_NIT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_NIT0),
        .Q(FALSE_NIT),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    FROM_IDLE_D_i_1__2
       (.I0(K28p5_REG1),
        .I1(RX_IDLE),
        .I2(WAIT_FOR_K),
        .I3(RX_INVALID_reg_0),
        .O(FROM_IDLE_D0));
  FDRE FROM_IDLE_D_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_IDLE_D0),
        .Q(FROM_IDLE_D),
        .R(SYNC_STATUS_REG0));
  LUT6 #(
    .INIT(64'hFFFFA8FFFCFCA8A8)) 
    FROM_RX_CX_i_1__2
       (.I0(RXCHARISK_REG1),
        .I1(C_REG1),
        .I2(C_REG2),
        .I3(RX_DATA_ERROR_i_3__2_n_0),
        .I4(CGBAD),
        .I5(C_REG3),
        .O(FROM_RX_CX0));
  FDRE FROM_RX_CX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_CX0),
        .Q(FROM_RX_CX),
        .R(SYNC_STATUS_REG0));
  LUT4 #(
    .INIT(16'h00E0)) 
    FROM_RX_K_i_1__2
       (.I0(RXCHARISK_REG1),
        .I1(CGBAD),
        .I2(K28p5_REG2),
        .I3(RX_INVALID_reg_0),
        .O(FROM_RX_K0));
  FDRE FROM_RX_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_K0),
        .Q(FROM_RX_K),
        .R(SYNC_STATUS_REG0));
  FDRE \IDLE_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(\IDLE_REG_reg_n_0_[0] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \IDLE_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IDLE_REG_reg_n_0_[0] ),
        .Q(p_0_in1_in),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \IDLE_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in1_in),
        .Q(\IDLE_REG_reg_n_0_[2] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K),
        .Q(ILLEGAL_K_REG1),
        .R(SYNC_STATUS_REG0));
  FDRE ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K_REG1),
        .Q(ILLEGAL_K_REG2),
        .R(SYNC_STATUS_REG0));
  (* SOFT_HLUTNM = "soft_lutpair313" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    ILLEGAL_K_i_1__2
       (.I0(R),
        .I1(K28p5_REG1),
        .I2(RXCHARISK_REG1),
        .I3(T),
        .O(ILLEGAL_K0));
  FDRE ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K0),
        .Q(ILLEGAL_K),
        .R(SYNC_STATUS_REG0));
  FDRE I_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I),
        .Q(RX_IDLE),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h20200020)) 
    I_i_1__2
       (.I0(I_i_2__2_n_0),
        .I1(I_i_3__2_n_0),
        .I2(RXEVEN0_out),
        .I3(RXCHARISK_REG1_reg_0),
        .I4(RX_INVALID_reg_0),
        .O(I0));
  LUT6 #(
    .INIT(64'hFFFEAAAAAAAAAAAA)) 
    I_i_2__2
       (.I0(K28p5_REG1),
        .I1(FALSE_NIT),
        .I2(FALSE_K),
        .I3(FALSE_DATA),
        .I4(RX_IDLE),
        .I5(RX_INVALID_reg_0),
        .O(I_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h0400FFFF04000400)) 
    I_i_3__2
       (.I0(FALSE_DATA_i_3__2_n_0),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(I_i_4__2_n_0),
        .I4(I_i_5__2_n_0),
        .I5(I_i_6__2_n_0),
        .O(I_i_3__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair314" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    I_i_4__2
       (.I0(Q[4]),
        .I1(RXCHARISK_REG1_reg_0),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(I_i_4__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair303" *) 
  LUT5 #(
    .INIT(32'hFFFFFDFF)) 
    I_i_5__2
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(RXCHARISK_REG1_reg_0),
        .O(I_i_5__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair307" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    I_i_6__2
       (.I0(Q[6]),
        .I1(Q[5]),
        .I2(Q[7]),
        .I3(Q[4]),
        .O(I_i_6__2_n_0));
  FDRE I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I0),
        .Q(I),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000800000)) 
    K28p5_REG1_i_1__2
       (.I0(Q[4]),
        .I1(Q[7]),
        .I2(Q[5]),
        .I3(Q[6]),
        .I4(RXCHARISK_REG1_reg_0),
        .I5(FALSE_K_i_2__2_n_0),
        .O(K28p5));
  FDRE K28p5_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5),
        .Q(K28p5_REG1),
        .R(1'b0));
  FDRE K28p5_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5_REG1),
        .Q(K28p5_REG2),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hBA)) 
    RECEIVED_IDLE_i_1__2
       (.I0(RX_IDLE),
        .I1(RX_CONFIG_VALID),
        .I2(RECEIVED_IDLE),
        .O(I_REG_reg_0));
  LUT3 #(
    .INIT(8'hDC)) 
    RECEIVE_i_1__2
       (.I0(EOP),
        .I1(SOP_REG2),
        .I2(RECEIVE),
        .O(RECEIVE_i_1__2_n_0));
  FDRE RECEIVE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RECEIVE_i_1__2_n_0),
        .Q(RECEIVE),
        .R(SYNC_STATUS_REG0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RUDI_C0
       (.I0(p_0_in2_in),
        .I1(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .I2(p_1_in),
        .I3(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .O(RUDI_C0__0));
  FDRE RUDI_C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_C0__0),
        .Q(status_vector_ch3[0]),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    RUDI_I_i_1__2
       (.I0(\IDLE_REG_reg_n_0_[2] ),
        .I1(p_0_in1_in),
        .O(RUDI_I0));
  FDRE RUDI_I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_I0),
        .Q(status_vector_ch3[1]),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE RXCHARISK_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISK_REG1_reg_0),
        .Q(RXCHARISK_REG1),
        .R(1'b0));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[0]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[0]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[0]),
        .Q(RXDATA_REG5[0]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[1]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[1]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[1]),
        .Q(RXDATA_REG5[1]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[2]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[2]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[2]),
        .Q(RXDATA_REG5[2]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[3]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[3]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[3]),
        .Q(RXDATA_REG5[3]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[4]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[4]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[4]),
        .Q(RXDATA_REG5[4]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[5]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[5]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[5]),
        .Q(RXDATA_REG5[5]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[6]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[6]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[6]),
        .Q(RXDATA_REG5[6]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[7]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[7]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[7]),
        .Q(RXDATA_REG5[7]));
  LUT4 #(
    .INIT(16'hBBBA)) 
    \RXD[0]_i_1__2 
       (.I0(SOP_REG3),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(RXDATA_REG5[0]),
        .O(\RXD[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair310" *) 
  LUT4 #(
    .INIT(16'h5554)) 
    \RXD[1]_i_1__2 
       (.I0(SOP_REG3),
        .I1(RXDATA_REG5[1]),
        .I2(FALSE_CARRIER_REG3),
        .I3(EXTEND_REG1),
        .O(\RXD[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair309" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \RXD[2]_i_1__2 
       (.I0(RXDATA_REG5[2]),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(SOP_REG3),
        .O(\RXD[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair308" *) 
  LUT4 #(
    .INIT(16'h5554)) 
    \RXD[3]_i_1__2 
       (.I0(SOP_REG3),
        .I1(RXDATA_REG5[3]),
        .I2(FALSE_CARRIER_REG3),
        .I3(EXTEND_REG1),
        .O(\RXD[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair304" *) 
  LUT5 #(
    .INIT(32'hBABBBAAA)) 
    \RXD[4]_i_1__2 
       (.I0(SOP_REG3),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_ERR),
        .I3(EXTEND_REG1),
        .I4(RXDATA_REG5[4]),
        .O(\RXD[4]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair309" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[5]_i_1__2 
       (.I0(RXDATA_REG5[5]),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(SOP_REG3),
        .O(\RXD[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair310" *) 
  LUT4 #(
    .INIT(16'hABAA)) 
    \RXD[6]_i_1__2 
       (.I0(SOP_REG3),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(RXDATA_REG5[6]),
        .O(\RXD[6]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair308" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[7]_i_1__2 
       (.I0(RXDATA_REG5[7]),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(SOP_REG3),
        .O(\RXD[7]_i_1__2_n_0 ));
  FDRE \RXD_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[0]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[0]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[1]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[1]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[2]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[2]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[3]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[3]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[4]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[4]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[5]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[5]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[6]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[6]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[7]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[7]),
        .R(\RXD_reg[7]_0 ));
  LUT4 #(
    .INIT(16'h000E)) 
    \RX_CONFIG_REG[15]_i_1__2 
       (.I0(C_REG1),
        .I1(C_HDR_REMOVED_REG),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(RXCHARISK_REG1),
        .O(\RX_CONFIG_REG[15]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h55550040)) 
    \RX_CONFIG_REG[7]_i_1__2 
       (.I0(RXCHARISK_REG1_reg_0),
        .I1(C_REG2),
        .I2(\RX_CONFIG_REG_reg[7]_0 [0]),
        .I3(\RX_CONFIG_REG_reg[7]_0 [1]),
        .I4(C),
        .O(\RX_CONFIG_REG[7]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0004FFFF00040000)) 
    RX_CONFIG_REG_NULL_i_1__2
       (.I0(RX_CONFIG_REG_NULL_i_2__2_n_0),
        .I1(RX_CONFIG_REG_NULL_i_3__2_n_0),
        .I2(RX_CONFIG_REG_NULL_i_4__2_n_0),
        .I3(RX_CONFIG_REG_NULL_i_5__2_n_0),
        .I4(RX_CONFIG_VALID),
        .I5(RX_CONFIG_REG_NULL_reg),
        .O(RX_CONFIG_VALID_INT_reg_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_CONFIG_REG_NULL_i_2__2
       (.I0(\RX_CONFIG_REG_reg[15]_0 [5]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [4]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [10]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [14]),
        .O(RX_CONFIG_REG_NULL_i_2__2_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    RX_CONFIG_REG_NULL_i_3__2
       (.I0(\RX_CONFIG_REG_reg[15]_0 [9]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [8]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [13]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [11]),
        .O(RX_CONFIG_REG_NULL_i_3__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair315" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_CONFIG_REG_NULL_i_4__2
       (.I0(\RX_CONFIG_REG_reg[15]_0 [0]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [15]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [7]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [1]),
        .O(RX_CONFIG_REG_NULL_i_4__2_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_CONFIG_REG_NULL_i_5__2
       (.I0(\RX_CONFIG_REG_reg[15]_0 [6]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [3]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [12]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [2]),
        .O(RX_CONFIG_REG_NULL_i_5__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair311" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \RX_CONFIG_REG_REG[15]_i_1__2 
       (.I0(out),
        .I1(RX_IDLE),
        .O(SR));
  FDRE \RX_CONFIG_REG_reg[0] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [0]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[10] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [10]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[11] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [11]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[12] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [12]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[13] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [13]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[14] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [14]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[15] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [15]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[1] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [1]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[2] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [2]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[3] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [3]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[4] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [4]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[5] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [5]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[6] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [6]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[7] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [7]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[8] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [8]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[9] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000000E000000)) 
    RX_CONFIG_VALID_INT_i_1__2
       (.I0(C_REG1),
        .I1(C_HDR_REMOVED_REG),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(RXSYNC_STATUS),
        .I4(RX_CONFIG_VALID_INT_i_2__2_n_0),
        .I5(S2),
        .O(RX_CONFIG_VALID_INT0));
  (* SOFT_HLUTNM = "soft_lutpair313" *) 
  LUT2 #(
    .INIT(4'h1)) 
    RX_CONFIG_VALID_INT_i_2__2
       (.I0(RXCHARISK_REG1),
        .I1(CGBAD),
        .O(RX_CONFIG_VALID_INT_i_2__2_n_0));
  FDRE RX_CONFIG_VALID_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT0),
        .Q(RX_CONFIG_VALID),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .Q(p_0_in2_in),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in2_in),
        .Q(p_1_in),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_1_in),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h888AAAAA88888888)) 
    RX_DATA_ERROR_i_1__2
       (.I0(RECEIVE),
        .I1(RX_DATA_ERROR_i_2__2_n_0),
        .I2(R),
        .I3(RX_DATA_ERROR_i_3__2_n_0),
        .I4(R_REG1),
        .I5(T_REG2),
        .O(RX_DATA_ERROR0));
  LUT5 #(
    .INIT(32'hFFFF4544)) 
    RX_DATA_ERROR_i_2__2
       (.I0(R_REG1),
        .I1(K28p5_REG1),
        .I2(T_REG1),
        .I3(R),
        .I4(RX_DATA_ERROR_i_4__2_n_0),
        .O(RX_DATA_ERROR_i_2__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair305" *) 
  LUT2 #(
    .INIT(4'h8)) 
    RX_DATA_ERROR_i_3__2
       (.I0(K28p5_REG1),
        .I1(RXEVEN0_out),
        .O(RX_DATA_ERROR_i_3__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair311" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_DATA_ERROR_i_4__2
       (.I0(CGBAD_REG3),
        .I1(RX_IDLE),
        .I2(ILLEGAL_K_REG2),
        .I3(C_REG1),
        .O(RX_DATA_ERROR_i_4__2_n_0));
  FDRE RX_DATA_ERROR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DATA_ERROR0),
        .Q(RX_DATA_ERROR),
        .R(SYNC_STATUS_REG0));
  LUT6 #(
    .INIT(64'hAAAAEEEAAAAAAAAA)) 
    RX_DV_i_1__2
       (.I0(RX_DV0),
        .I1(XMIT_DATA),
        .I2(RECEIVE),
        .I3(RXSYNC_STATUS),
        .I4(EOP_REG1),
        .I5(gmii_rx_dv_ch3),
        .O(RX_DV_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_DV_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DV_i_1__2_n_0),
        .Q(gmii_rx_dv_ch3),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair304" *) 
  LUT2 #(
    .INIT(4'h1)) 
    RX_ER_i_2__2
       (.I0(FALSE_CARRIER_REG3),
        .I1(EXTEND_REG1),
        .O(FALSE_CARRIER_REG3_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_ER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_ER0),
        .Q(gmii_rx_er_ch3),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFFFF55FDFFFF00FC)) 
    RX_INVALID_i_1__2
       (.I0(K28p5_REG1),
        .I1(FROM_RX_K),
        .I2(FROM_IDLE_D),
        .I3(RX_INVALID_reg_0),
        .I4(FROM_RX_CX),
        .I5(RX_INVALID),
        .O(RX_INVALID_i_1__2_n_0));
  FDRE RX_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_INVALID_i_1__2_n_0),
        .Q(RX_INVALID),
        .R(SYNC_STATUS_REG0));
  FDRE R_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R),
        .Q(R_REG1),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair306" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    R_i_1__5
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[2]),
        .O(K23p7));
  (* SOFT_HLUTNM = "soft_lutpair307" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    R_i_2__2
       (.I0(Q[5]),
        .I1(Q[6]),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(Q[4]),
        .I4(Q[7]),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K23p7),
        .Q(R),
        .R(1'b0));
  FDRE SOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP),
        .Q(SOP_REG1),
        .R(1'b0));
  FDRE SOP_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG1),
        .Q(SOP_REG2),
        .R(1'b0));
  FDRE SOP_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG2),
        .Q(SOP_REG3),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00A80000)) 
    SOP_i_1__2
       (.I0(RX_INVALID_reg_0),
        .I1(RX_IDLE),
        .I2(EXTEND),
        .I3(WAIT_FOR_K),
        .I4(S),
        .O(SOP0));
  FDRE SOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP0),
        .Q(SOP),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(SYNC_STATUS_REG),
        .R(SYNC_STATUS_REG0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S),
        .R(1'b0));
  FDRE T_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T),
        .Q(T_REG1),
        .R(1'b0));
  FDRE T_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T_REG1),
        .Q(T_REG2),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair306" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    T_i_1__6
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(K29p7));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K29p7),
        .Q(T),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h7F0F)) 
    WAIT_FOR_K_i_1__2
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .I2(SYNC_STATUS_REG),
        .I3(WAIT_FOR_K),
        .O(WAIT_FOR_K_i_1__2_n_0));
  FDRE WAIT_FOR_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(WAIT_FOR_K_i_1__2_n_0),
        .Q(WAIT_FOR_K),
        .R(SYNC_STATUS_REG0));
endmodule

(* ORIG_REF_NAME = "RX" *) 
module quadsgmii_0_TEST_RX_158
   (status_vector_ch2,
    RX_IDLE,
    SOP_REG3,
    RX_DATA_ERROR,
    gmii_rx_er_ch2,
    RX_CONFIG_VALID,
    RECEIVE,
    gmii_rx_dv_ch2,
    RX_INVALID,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ,
    SR,
    \RX_CONFIG_REG_reg[10]_0 ,
    \RX_CONFIG_REG_reg[15]_0 ,
    BASEX_REMOTE_FAULT_RSLVD,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ,
    FALSE_CARRIER_REG3_reg_0,
    I_REG_reg_0,
    RX_CONFIG_VALID_INT_reg_0,
    gmii_rxd_ch2,
    Q,
    userclk,
    \RX_CONFIG_VALID_REG_reg[0]_0 ,
    FALSE_NIT0,
    SYNC_STATUS_REG0,
    S0,
    S2,
    RXCHARISK_REG1_reg_0,
    RX_ER0,
    \RX_CONFIG_REG_reg[7]_0 ,
    RXSYNC_STATUS,
    RXEVEN0_out,
    RX_INVALID_reg_0,
    FALSE_CARRIER_reg_0,
    RXNOTINTABLE_INT,
    out,
    CONFIG_REG_MATCH_reg,
    RX_DV0,
    XMIT_DATA,
    RECEIVED_IDLE,
    RX_CONFIG_REG_NULL_reg,
    \RXD_reg[7]_0 );
  output [1:0]status_vector_ch2;
  output RX_IDLE;
  output SOP_REG3;
  output RX_DATA_ERROR;
  output gmii_rx_er_ch2;
  output RX_CONFIG_VALID;
  output RECEIVE;
  output gmii_rx_dv_ch2;
  output RX_INVALID;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ;
  output [0:0]SR;
  output \RX_CONFIG_REG_reg[10]_0 ;
  output [15:0]\RX_CONFIG_REG_reg[15]_0 ;
  output [0:0]BASEX_REMOTE_FAULT_RSLVD;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  output FALSE_CARRIER_REG3_reg_0;
  output I_REG_reg_0;
  output RX_CONFIG_VALID_INT_reg_0;
  output [7:0]gmii_rxd_ch2;
  input [7:0]Q;
  input userclk;
  input \RX_CONFIG_VALID_REG_reg[0]_0 ;
  input FALSE_NIT0;
  input SYNC_STATUS_REG0;
  input S0;
  input S2;
  input RXCHARISK_REG1_reg_0;
  input RX_ER0;
  input [1:0]\RX_CONFIG_REG_reg[7]_0 ;
  input RXSYNC_STATUS;
  input RXEVEN0_out;
  input RX_INVALID_reg_0;
  input FALSE_CARRIER_reg_0;
  input RXNOTINTABLE_INT;
  input out;
  input [2:0]CONFIG_REG_MATCH_reg;
  input RX_DV0;
  input XMIT_DATA;
  input RECEIVED_IDLE;
  input RX_CONFIG_REG_NULL_reg;
  input [0:0]\RXD_reg[7]_0 ;

  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire C;
  wire C0;
  wire CGBAD;
  wire CGBAD_REG1;
  wire CGBAD_REG2;
  wire CGBAD_REG3;
  wire [2:0]CONFIG_REG_MATCH_reg;
  wire C_HDR_REMOVED;
  wire C_HDR_REMOVED_REG;
  wire C_REG1;
  wire C_REG2;
  wire C_REG3;
  wire D0p0;
  wire D0p0_REG;
  wire EOP;
  wire EOP0;
  wire EOP_REG1;
  wire EOP_REG10;
  wire EOP_i_2__1_n_0;
  wire EXTEND;
  wire EXTEND_ERR;
  wire EXTEND_ERR0;
  wire EXTEND_REG1;
  wire EXTEND_REG2;
  wire EXTEND_REG3;
  wire EXTEND_i_1__1_n_0;
  wire EXT_ILLEGAL_K;
  wire EXT_ILLEGAL_K0;
  wire EXT_ILLEGAL_K_REG1;
  wire EXT_ILLEGAL_K_REG2;
  wire FALSE_CARRIER;
  wire FALSE_CARRIER0;
  wire FALSE_CARRIER_REG1;
  wire FALSE_CARRIER_REG2;
  wire FALSE_CARRIER_REG3;
  wire FALSE_CARRIER_REG3_reg_0;
  wire FALSE_CARRIER_i_1__1_n_0;
  wire FALSE_CARRIER_reg_0;
  wire FALSE_DATA;
  wire FALSE_DATA0;
  wire FALSE_DATA_i_2__1_n_0;
  wire FALSE_DATA_i_3__1_n_0;
  wire FALSE_DATA_i_4__1_n_0;
  wire FALSE_DATA_i_5__1_n_0;
  wire FALSE_DATA_i_6__1_n_0;
  wire FALSE_K;
  wire FALSE_K0;
  wire FALSE_K_i_2__1_n_0;
  wire FALSE_K_i_3__1_n_0;
  wire FALSE_NIT;
  wire FALSE_NIT0;
  wire FROM_IDLE_D;
  wire FROM_IDLE_D0;
  wire FROM_RX_CX;
  wire FROM_RX_CX0;
  wire FROM_RX_K;
  wire FROM_RX_K0;
  wire I;
  wire I0;
  wire \IDLE_REG_reg_n_0_[0] ;
  wire \IDLE_REG_reg_n_0_[2] ;
  wire ILLEGAL_K;
  wire ILLEGAL_K0;
  wire ILLEGAL_K_REG1;
  wire ILLEGAL_K_REG2;
  wire I_REG_reg_0;
  wire I_i_2__1_n_0;
  wire I_i_3__1_n_0;
  wire I_i_4__1_n_0;
  wire I_i_5__1_n_0;
  wire I_i_6__1_n_0;
  wire K23p7;
  wire K28p5;
  wire K28p5_REG1;
  wire K28p5_REG2;
  wire K29p7;
  wire [7:0]Q;
  wire R;
  wire RECEIVE;
  wire RECEIVED_IDLE;
  wire RECEIVE_i_1__1_n_0;
  wire RUDI_C0__0;
  wire RUDI_I0;
  wire RXCHARISK_REG1;
  wire RXCHARISK_REG1_reg_0;
  wire [7:0]RXDATA_REG5;
  wire \RXD[0]_i_1__1_n_0 ;
  wire \RXD[1]_i_1__1_n_0 ;
  wire \RXD[2]_i_1__1_n_0 ;
  wire \RXD[3]_i_1__1_n_0 ;
  wire \RXD[4]_i_1__1_n_0 ;
  wire \RXD[5]_i_1__1_n_0 ;
  wire \RXD[6]_i_1__1_n_0 ;
  wire \RXD[7]_i_1__1_n_0 ;
  wire [0:0]\RXD_reg[7]_0 ;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXSYNC_STATUS;
  wire \RX_CONFIG_REG[15]_i_1__1_n_0 ;
  wire \RX_CONFIG_REG[7]_i_1__1_n_0 ;
  wire RX_CONFIG_REG_NULL_i_2__1_n_0;
  wire RX_CONFIG_REG_NULL_i_3__1_n_0;
  wire RX_CONFIG_REG_NULL_i_4__1_n_0;
  wire RX_CONFIG_REG_NULL_i_5__1_n_0;
  wire RX_CONFIG_REG_NULL_reg;
  wire \RX_CONFIG_REG_reg[10]_0 ;
  wire [15:0]\RX_CONFIG_REG_reg[15]_0 ;
  wire [1:0]\RX_CONFIG_REG_reg[7]_0 ;
  wire RX_CONFIG_VALID;
  wire RX_CONFIG_VALID_INT0;
  wire RX_CONFIG_VALID_INT_i_2__1_n_0;
  wire RX_CONFIG_VALID_INT_reg_0;
  wire \RX_CONFIG_VALID_REG_reg[0]_0 ;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[3] ;
  wire RX_DATA_ERROR;
  wire RX_DATA_ERROR0;
  wire RX_DATA_ERROR_i_2__1_n_0;
  wire RX_DATA_ERROR_i_3__1_n_0;
  wire RX_DATA_ERROR_i_4__1_n_0;
  wire RX_DV0;
  wire RX_DV_i_1__1_n_0;
  wire RX_ER0;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_INVALID_i_1__1_n_0;
  wire RX_INVALID_reg_0;
  wire R_REG1;
  wire S;
  wire S0;
  wire S2;
  wire SOP;
  wire SOP0;
  wire SOP_REG1;
  wire SOP_REG2;
  wire SOP_REG3;
  wire [0:0]SR;
  wire SYNC_STATUS_REG;
  wire SYNC_STATUS_REG0;
  wire T;
  wire T_REG1;
  wire T_REG2;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ;
  wire WAIT_FOR_K;
  wire WAIT_FOR_K_i_1__1_n_0;
  wire XMIT_DATA;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_er_ch2;
  wire [7:0]gmii_rxd_ch2;
  wire out;
  wire p_0_in1_in;
  wire p_0_in2_in;
  wire p_1_in;
  wire [1:0]status_vector_ch2;
  wire userclk;

  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_5__1
       (.I0(\RX_CONFIG_REG_reg[15]_0 [10]),
        .I1(CONFIG_REG_MATCH_reg[1]),
        .I2(CONFIG_REG_MATCH_reg[2]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [11]),
        .I4(CONFIG_REG_MATCH_reg[0]),
        .I5(\RX_CONFIG_REG_reg[15]_0 [9]),
        .O(\RX_CONFIG_REG_reg[10]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \BASEX_REMOTE_FAULT[1]_i_1__1 
       (.I0(\RX_CONFIG_REG_reg[15]_0 [15]),
        .O(BASEX_REMOTE_FAULT_RSLVD));
  FDRE CGBAD_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD),
        .Q(CGBAD_REG1),
        .R(1'b0));
  FDRE CGBAD_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG1),
        .Q(CGBAD_REG2),
        .R(1'b0));
  FDRE CGBAD_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG2),
        .Q(CGBAD_REG3),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE CGBAD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S2),
        .Q(CGBAD),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    C_HDR_REMOVED_REG_i_1__1
       (.I0(C_REG2),
        .I1(\RX_CONFIG_REG_reg[7]_0 [0]),
        .I2(\RX_CONFIG_REG_reg[7]_0 [1]),
        .O(C_HDR_REMOVED));
  FDRE C_HDR_REMOVED_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_HDR_REMOVED),
        .Q(C_HDR_REMOVED_REG),
        .R(1'b0));
  FDRE C_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C),
        .Q(C_REG1),
        .R(1'b0));
  FDRE C_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG1),
        .Q(C_REG2),
        .R(1'b0));
  FDRE C_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG2),
        .Q(C_REG3),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h8)) 
    C_i_1__1
       (.I0(K28p5_REG1),
        .I1(I_i_3__1_n_0),
        .O(C0));
  FDRE C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C0),
        .Q(C),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    D0p0_REG_i_1__1
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[7]),
        .O(D0p0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    D0p0_REG_i_2__1
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(Q[4]),
        .I4(Q[5]),
        .I5(Q[6]),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ));
  FDRE D0p0_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(D0p0),
        .Q(D0p0_REG),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hEA)) 
    EOP_REG1_i_1__1
       (.I0(EOP),
        .I1(EXTEND),
        .I2(EXTEND_REG1),
        .O(EOP_REG10));
  FDRE EOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP_REG10),
        .Q(EOP_REG1),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF88888000)) 
    EOP_i_1__1
       (.I0(T_REG2),
        .I1(R_REG1),
        .I2(K28p5_REG1),
        .I3(RXEVEN0_out),
        .I4(R),
        .I5(EOP_i_2__1_n_0),
        .O(EOP0));
  LUT5 #(
    .INIT(32'hF8888888)) 
    EOP_i_2__1
       (.I0(RX_IDLE),
        .I1(K28p5_REG1),
        .I2(C_REG1),
        .I3(D0p0_REG),
        .I4(RXEVEN0_out),
        .O(EOP_i_2__1_n_0));
  FDRE EOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP0),
        .Q(EOP),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    EXTEND_ERR_i_1__1
       (.I0(EXT_ILLEGAL_K_REG2),
        .I1(CGBAD_REG3),
        .I2(EXTEND_REG3),
        .O(EXTEND_ERR0));
  FDRE EXTEND_ERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_ERR0),
        .Q(EXTEND_ERR),
        .R(SYNC_STATUS_REG0));
  FDRE EXTEND_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND),
        .Q(EXTEND_REG1),
        .R(1'b0));
  FDRE EXTEND_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG1),
        .Q(EXTEND_REG2),
        .R(1'b0));
  FDRE EXTEND_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG2),
        .Q(EXTEND_REG3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h808080FF80808080)) 
    EXTEND_i_1__1
       (.I0(R_REG1),
        .I1(R),
        .I2(RECEIVE),
        .I3(RX_DATA_ERROR_i_3__1_n_0),
        .I4(S),
        .I5(EXTEND),
        .O(EXTEND_i_1__1_n_0));
  FDRE EXTEND_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_i_1__1_n_0),
        .Q(EXTEND),
        .R(SYNC_STATUS_REG0));
  FDRE EXT_ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K),
        .Q(EXT_ILLEGAL_K_REG1),
        .R(SYNC_STATUS_REG0));
  FDRE EXT_ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K_REG1),
        .Q(EXT_ILLEGAL_K_REG2),
        .R(SYNC_STATUS_REG0));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT5 #(
    .INIT(32'h00000700)) 
    EXT_ILLEGAL_K_i_1__1
       (.I0(K28p5_REG1),
        .I1(RXEVEN0_out),
        .I2(S),
        .I3(EXTEND_REG1),
        .I4(R),
        .O(EXT_ILLEGAL_K0));
  FDRE EXT_ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K0),
        .Q(EXT_ILLEGAL_K),
        .R(SYNC_STATUS_REG0));
  FDRE FALSE_CARRIER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER),
        .Q(FALSE_CARRIER_REG1),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG1),
        .Q(FALSE_CARRIER_REG2),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG2),
        .Q(FALSE_CARRIER_REG3),
        .R(SYNC_STATUS_REG0));
  LUT4 #(
    .INIT(16'hF7F0)) 
    FALSE_CARRIER_i_1__1
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .I2(FALSE_CARRIER0),
        .I3(FALSE_CARRIER),
        .O(FALSE_CARRIER_i_1__1_n_0));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    FALSE_CARRIER_i_2__1
       (.I0(FALSE_CARRIER_reg_0),
        .I1(K28p5_REG1),
        .I2(S),
        .I3(FALSE_NIT),
        .I4(FALSE_K),
        .I5(FALSE_DATA),
        .O(FALSE_CARRIER0));
  FDRE FALSE_CARRIER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_i_1__1_n_0),
        .Q(FALSE_CARRIER),
        .R(SYNC_STATUS_REG0));
  LUT3 #(
    .INIT(8'h02)) 
    FALSE_DATA_i_1__1
       (.I0(FALSE_DATA_i_2__1_n_0),
        .I1(RXNOTINTABLE_INT),
        .I2(RXCHARISK_REG1_reg_0),
        .O(FALSE_DATA0));
  LUT6 #(
    .INIT(64'h3035357530303000)) 
    FALSE_DATA_i_2__1
       (.I0(FALSE_DATA_i_3__1_n_0),
        .I1(FALSE_DATA_i_4__1_n_0),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .I5(FALSE_DATA_i_5__1_n_0),
        .O(FALSE_DATA_i_2__1_n_0));
  LUT3 #(
    .INIT(8'hFB)) 
    FALSE_DATA_i_3__1
       (.I0(Q[7]),
        .I1(Q[6]),
        .I2(Q[5]),
        .O(FALSE_DATA_i_3__1_n_0));
  LUT6 #(
    .INIT(64'hDFFFDFFFDFFFDFDF)) 
    FALSE_DATA_i_4__1
       (.I0(Q[5]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(FALSE_DATA_i_6__1_n_0),
        .I4(Q[4]),
        .I5(Q[3]),
        .O(FALSE_DATA_i_4__1_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    FALSE_DATA_i_5__1
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(FALSE_DATA_i_5__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT2 #(
    .INIT(4'h1)) 
    FALSE_DATA_i_6__1
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(FALSE_DATA_i_6__1_n_0));
  FDRE FALSE_DATA_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_DATA0),
        .Q(FALSE_DATA),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h00000041)) 
    FALSE_K_i_1__1
       (.I0(RXNOTINTABLE_INT),
        .I1(Q[6]),
        .I2(Q[5]),
        .I3(FALSE_K_i_2__1_n_0),
        .I4(FALSE_K_i_3__1_n_0),
        .O(FALSE_K0));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT4 #(
    .INIT(16'hFFF7)) 
    FALSE_K_i_2__1
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(FALSE_K_i_2__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    FALSE_K_i_3__1
       (.I0(Q[7]),
        .I1(Q[4]),
        .I2(RXCHARISK_REG1_reg_0),
        .O(FALSE_K_i_3__1_n_0));
  FDRE FALSE_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_K0),
        .Q(FALSE_K),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    FALSE_NIT_i_3__1
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(Q[4]),
        .I4(Q[6]),
        .I5(Q[5]),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ));
  FDRE FALSE_NIT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_NIT0),
        .Q(FALSE_NIT),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    FROM_IDLE_D_i_1__1
       (.I0(K28p5_REG1),
        .I1(RX_IDLE),
        .I2(WAIT_FOR_K),
        .I3(RX_INVALID_reg_0),
        .O(FROM_IDLE_D0));
  FDRE FROM_IDLE_D_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_IDLE_D0),
        .Q(FROM_IDLE_D),
        .R(SYNC_STATUS_REG0));
  LUT6 #(
    .INIT(64'hFFFFA8FFFCFCA8A8)) 
    FROM_RX_CX_i_1__1
       (.I0(RXCHARISK_REG1),
        .I1(C_REG1),
        .I2(C_REG2),
        .I3(RX_DATA_ERROR_i_3__1_n_0),
        .I4(CGBAD),
        .I5(C_REG3),
        .O(FROM_RX_CX0));
  FDRE FROM_RX_CX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_CX0),
        .Q(FROM_RX_CX),
        .R(SYNC_STATUS_REG0));
  LUT4 #(
    .INIT(16'h00E0)) 
    FROM_RX_K_i_1__1
       (.I0(RXCHARISK_REG1),
        .I1(CGBAD),
        .I2(K28p5_REG2),
        .I3(RX_INVALID_reg_0),
        .O(FROM_RX_K0));
  FDRE FROM_RX_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_K0),
        .Q(FROM_RX_K),
        .R(SYNC_STATUS_REG0));
  FDRE \IDLE_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(\IDLE_REG_reg_n_0_[0] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \IDLE_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IDLE_REG_reg_n_0_[0] ),
        .Q(p_0_in1_in),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \IDLE_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in1_in),
        .Q(\IDLE_REG_reg_n_0_[2] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K),
        .Q(ILLEGAL_K_REG1),
        .R(SYNC_STATUS_REG0));
  FDRE ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K_REG1),
        .Q(ILLEGAL_K_REG2),
        .R(SYNC_STATUS_REG0));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    ILLEGAL_K_i_1__1
       (.I0(R),
        .I1(K28p5_REG1),
        .I2(RXCHARISK_REG1),
        .I3(T),
        .O(ILLEGAL_K0));
  FDRE ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K0),
        .Q(ILLEGAL_K),
        .R(SYNC_STATUS_REG0));
  FDRE I_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I),
        .Q(RX_IDLE),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h20200020)) 
    I_i_1__1
       (.I0(I_i_2__1_n_0),
        .I1(I_i_3__1_n_0),
        .I2(RXEVEN0_out),
        .I3(RXCHARISK_REG1_reg_0),
        .I4(RX_INVALID_reg_0),
        .O(I0));
  LUT6 #(
    .INIT(64'hFFFEAAAAAAAAAAAA)) 
    I_i_2__1
       (.I0(K28p5_REG1),
        .I1(FALSE_NIT),
        .I2(FALSE_K),
        .I3(FALSE_DATA),
        .I4(RX_IDLE),
        .I5(RX_INVALID_reg_0),
        .O(I_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h0400FFFF04000400)) 
    I_i_3__1
       (.I0(FALSE_DATA_i_3__1_n_0),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(I_i_4__1_n_0),
        .I4(I_i_5__1_n_0),
        .I5(I_i_6__1_n_0),
        .O(I_i_3__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    I_i_4__1
       (.I0(Q[4]),
        .I1(RXCHARISK_REG1_reg_0),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(I_i_4__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT5 #(
    .INIT(32'hFFFFFDFF)) 
    I_i_5__1
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(RXCHARISK_REG1_reg_0),
        .O(I_i_5__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    I_i_6__1
       (.I0(Q[6]),
        .I1(Q[5]),
        .I2(Q[7]),
        .I3(Q[4]),
        .O(I_i_6__1_n_0));
  FDRE I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I0),
        .Q(I),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000800000)) 
    K28p5_REG1_i_1__1
       (.I0(Q[4]),
        .I1(Q[7]),
        .I2(Q[5]),
        .I3(Q[6]),
        .I4(RXCHARISK_REG1_reg_0),
        .I5(FALSE_K_i_2__1_n_0),
        .O(K28p5));
  FDRE K28p5_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5),
        .Q(K28p5_REG1),
        .R(1'b0));
  FDRE K28p5_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5_REG1),
        .Q(K28p5_REG2),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hBA)) 
    RECEIVED_IDLE_i_1__1
       (.I0(RX_IDLE),
        .I1(RX_CONFIG_VALID),
        .I2(RECEIVED_IDLE),
        .O(I_REG_reg_0));
  LUT3 #(
    .INIT(8'hDC)) 
    RECEIVE_i_1__1
       (.I0(EOP),
        .I1(SOP_REG2),
        .I2(RECEIVE),
        .O(RECEIVE_i_1__1_n_0));
  FDRE RECEIVE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RECEIVE_i_1__1_n_0),
        .Q(RECEIVE),
        .R(SYNC_STATUS_REG0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RUDI_C0
       (.I0(p_0_in2_in),
        .I1(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .I2(p_1_in),
        .I3(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .O(RUDI_C0__0));
  FDRE RUDI_C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_C0__0),
        .Q(status_vector_ch2[0]),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    RUDI_I_i_1__1
       (.I0(\IDLE_REG_reg_n_0_[2] ),
        .I1(p_0_in1_in),
        .O(RUDI_I0));
  FDRE RUDI_I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_I0),
        .Q(status_vector_ch2[1]),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE RXCHARISK_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISK_REG1_reg_0),
        .Q(RXCHARISK_REG1),
        .R(1'b0));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[0]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[0]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[0]),
        .Q(RXDATA_REG5[0]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[1]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[1]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[1]),
        .Q(RXDATA_REG5[1]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[2]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[2]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[2]),
        .Q(RXDATA_REG5[2]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[3]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[3]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[3]),
        .Q(RXDATA_REG5[3]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[4]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[4]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[4]),
        .Q(RXDATA_REG5[4]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[5]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[5]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[5]),
        .Q(RXDATA_REG5[5]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[6]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[6]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[6]),
        .Q(RXDATA_REG5[6]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[7]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[7]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[7]),
        .Q(RXDATA_REG5[7]));
  LUT4 #(
    .INIT(16'hBBBA)) 
    \RXD[0]_i_1__1 
       (.I0(SOP_REG3),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(RXDATA_REG5[0]),
        .O(\RXD[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT4 #(
    .INIT(16'h5554)) 
    \RXD[1]_i_1__1 
       (.I0(SOP_REG3),
        .I1(RXDATA_REG5[1]),
        .I2(FALSE_CARRIER_REG3),
        .I3(EXTEND_REG1),
        .O(\RXD[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \RXD[2]_i_1__1 
       (.I0(RXDATA_REG5[2]),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(SOP_REG3),
        .O(\RXD[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT4 #(
    .INIT(16'h5554)) 
    \RXD[3]_i_1__1 
       (.I0(SOP_REG3),
        .I1(RXDATA_REG5[3]),
        .I2(FALSE_CARRIER_REG3),
        .I3(EXTEND_REG1),
        .O(\RXD[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT5 #(
    .INIT(32'hBABBBAAA)) 
    \RXD[4]_i_1__1 
       (.I0(SOP_REG3),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_ERR),
        .I3(EXTEND_REG1),
        .I4(RXDATA_REG5[4]),
        .O(\RXD[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[5]_i_1__1 
       (.I0(RXDATA_REG5[5]),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(SOP_REG3),
        .O(\RXD[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT4 #(
    .INIT(16'hABAA)) 
    \RXD[6]_i_1__1 
       (.I0(SOP_REG3),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(RXDATA_REG5[6]),
        .O(\RXD[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[7]_i_1__1 
       (.I0(RXDATA_REG5[7]),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(SOP_REG3),
        .O(\RXD[7]_i_1__1_n_0 ));
  FDRE \RXD_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[0]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[0]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[1]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[1]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[2]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[2]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[3]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[3]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[4]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[4]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[5]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[5]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[6]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[6]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[7]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[7]),
        .R(\RXD_reg[7]_0 ));
  LUT4 #(
    .INIT(16'h000E)) 
    \RX_CONFIG_REG[15]_i_1__1 
       (.I0(C_REG1),
        .I1(C_HDR_REMOVED_REG),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(RXCHARISK_REG1),
        .O(\RX_CONFIG_REG[15]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h55550040)) 
    \RX_CONFIG_REG[7]_i_1__1 
       (.I0(RXCHARISK_REG1_reg_0),
        .I1(C_REG2),
        .I2(\RX_CONFIG_REG_reg[7]_0 [0]),
        .I3(\RX_CONFIG_REG_reg[7]_0 [1]),
        .I4(C),
        .O(\RX_CONFIG_REG[7]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0004FFFF00040000)) 
    RX_CONFIG_REG_NULL_i_1__1
       (.I0(RX_CONFIG_REG_NULL_i_2__1_n_0),
        .I1(RX_CONFIG_REG_NULL_i_3__1_n_0),
        .I2(RX_CONFIG_REG_NULL_i_4__1_n_0),
        .I3(RX_CONFIG_REG_NULL_i_5__1_n_0),
        .I4(RX_CONFIG_VALID),
        .I5(RX_CONFIG_REG_NULL_reg),
        .O(RX_CONFIG_VALID_INT_reg_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_CONFIG_REG_NULL_i_2__1
       (.I0(\RX_CONFIG_REG_reg[15]_0 [5]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [4]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [10]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [14]),
        .O(RX_CONFIG_REG_NULL_i_2__1_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    RX_CONFIG_REG_NULL_i_3__1
       (.I0(\RX_CONFIG_REG_reg[15]_0 [9]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [8]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [13]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [11]),
        .O(RX_CONFIG_REG_NULL_i_3__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_CONFIG_REG_NULL_i_4__1
       (.I0(\RX_CONFIG_REG_reg[15]_0 [0]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [15]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [7]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [1]),
        .O(RX_CONFIG_REG_NULL_i_4__1_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_CONFIG_REG_NULL_i_5__1
       (.I0(\RX_CONFIG_REG_reg[15]_0 [6]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [3]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [12]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [2]),
        .O(RX_CONFIG_REG_NULL_i_5__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \RX_CONFIG_REG_REG[15]_i_1__1 
       (.I0(out),
        .I1(RX_IDLE),
        .O(SR));
  FDRE \RX_CONFIG_REG_reg[0] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [0]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[10] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [10]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[11] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [11]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[12] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [12]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[13] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [13]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[14] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [14]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[15] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [15]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[1] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [1]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[2] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [2]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[3] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [3]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[4] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [4]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[5] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [5]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[6] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [6]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[7] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [7]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[8] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [8]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[9] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000000E000000)) 
    RX_CONFIG_VALID_INT_i_1__1
       (.I0(C_REG1),
        .I1(C_HDR_REMOVED_REG),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(RXSYNC_STATUS),
        .I4(RX_CONFIG_VALID_INT_i_2__1_n_0),
        .I5(S2),
        .O(RX_CONFIG_VALID_INT0));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT2 #(
    .INIT(4'h1)) 
    RX_CONFIG_VALID_INT_i_2__1
       (.I0(RXCHARISK_REG1),
        .I1(CGBAD),
        .O(RX_CONFIG_VALID_INT_i_2__1_n_0));
  FDRE RX_CONFIG_VALID_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT0),
        .Q(RX_CONFIG_VALID),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .Q(p_0_in2_in),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in2_in),
        .Q(p_1_in),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_1_in),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h888AAAAA88888888)) 
    RX_DATA_ERROR_i_1__1
       (.I0(RECEIVE),
        .I1(RX_DATA_ERROR_i_2__1_n_0),
        .I2(R),
        .I3(RX_DATA_ERROR_i_3__1_n_0),
        .I4(R_REG1),
        .I5(T_REG2),
        .O(RX_DATA_ERROR0));
  LUT5 #(
    .INIT(32'hFFFF4544)) 
    RX_DATA_ERROR_i_2__1
       (.I0(R_REG1),
        .I1(K28p5_REG1),
        .I2(T_REG1),
        .I3(R),
        .I4(RX_DATA_ERROR_i_4__1_n_0),
        .O(RX_DATA_ERROR_i_2__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT2 #(
    .INIT(4'h8)) 
    RX_DATA_ERROR_i_3__1
       (.I0(K28p5_REG1),
        .I1(RXEVEN0_out),
        .O(RX_DATA_ERROR_i_3__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_DATA_ERROR_i_4__1
       (.I0(CGBAD_REG3),
        .I1(RX_IDLE),
        .I2(ILLEGAL_K_REG2),
        .I3(C_REG1),
        .O(RX_DATA_ERROR_i_4__1_n_0));
  FDRE RX_DATA_ERROR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DATA_ERROR0),
        .Q(RX_DATA_ERROR),
        .R(SYNC_STATUS_REG0));
  LUT6 #(
    .INIT(64'hAAAAEEEAAAAAAAAA)) 
    RX_DV_i_1__1
       (.I0(RX_DV0),
        .I1(XMIT_DATA),
        .I2(RECEIVE),
        .I3(RXSYNC_STATUS),
        .I4(EOP_REG1),
        .I5(gmii_rx_dv_ch2),
        .O(RX_DV_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_DV_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DV_i_1__1_n_0),
        .Q(gmii_rx_dv_ch2),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT2 #(
    .INIT(4'h1)) 
    RX_ER_i_2__1
       (.I0(FALSE_CARRIER_REG3),
        .I1(EXTEND_REG1),
        .O(FALSE_CARRIER_REG3_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_ER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_ER0),
        .Q(gmii_rx_er_ch2),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFFFF55FDFFFF00FC)) 
    RX_INVALID_i_1__1
       (.I0(K28p5_REG1),
        .I1(FROM_RX_K),
        .I2(FROM_IDLE_D),
        .I3(RX_INVALID_reg_0),
        .I4(FROM_RX_CX),
        .I5(RX_INVALID),
        .O(RX_INVALID_i_1__1_n_0));
  FDRE RX_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_INVALID_i_1__1_n_0),
        .Q(RX_INVALID),
        .R(SYNC_STATUS_REG0));
  FDRE R_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R),
        .Q(R_REG1),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    R_i_1__3
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[2]),
        .O(K23p7));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    R_i_2__1
       (.I0(Q[5]),
        .I1(Q[6]),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(Q[4]),
        .I4(Q[7]),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K23p7),
        .Q(R),
        .R(1'b0));
  FDRE SOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP),
        .Q(SOP_REG1),
        .R(1'b0));
  FDRE SOP_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG1),
        .Q(SOP_REG2),
        .R(1'b0));
  FDRE SOP_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG2),
        .Q(SOP_REG3),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00A80000)) 
    SOP_i_1__1
       (.I0(RX_INVALID_reg_0),
        .I1(RX_IDLE),
        .I2(EXTEND),
        .I3(WAIT_FOR_K),
        .I4(S),
        .O(SOP0));
  FDRE SOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP0),
        .Q(SOP),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(SYNC_STATUS_REG),
        .R(SYNC_STATUS_REG0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S),
        .R(1'b0));
  FDRE T_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T),
        .Q(T_REG1),
        .R(1'b0));
  FDRE T_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T_REG1),
        .Q(T_REG2),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    T_i_1__4
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(K29p7));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K29p7),
        .Q(T),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h7F0F)) 
    WAIT_FOR_K_i_1__1
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .I2(SYNC_STATUS_REG),
        .I3(WAIT_FOR_K),
        .O(WAIT_FOR_K_i_1__1_n_0));
  FDRE WAIT_FOR_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(WAIT_FOR_K_i_1__1_n_0),
        .Q(WAIT_FOR_K),
        .R(SYNC_STATUS_REG0));
endmodule

(* ORIG_REF_NAME = "RX" *) 
module quadsgmii_0_TEST_RX_170
   (status_vector_ch1,
    RX_IDLE,
    SOP_REG3,
    RX_DATA_ERROR,
    gmii_rx_er_ch1,
    RX_CONFIG_VALID,
    RECEIVE,
    gmii_rx_dv_ch1,
    RX_INVALID,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ,
    SR,
    \RX_CONFIG_REG_reg[10]_0 ,
    \RX_CONFIG_REG_reg[15]_0 ,
    BASEX_REMOTE_FAULT_RSLVD,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ,
    FALSE_CARRIER_REG3_reg_0,
    I_REG_reg_0,
    RX_CONFIG_VALID_INT_reg_0,
    gmii_rxd_ch1,
    Q,
    userclk,
    \RX_CONFIG_VALID_REG_reg[0]_0 ,
    FALSE_NIT0,
    SYNC_STATUS_REG0,
    S0,
    S2,
    RXCHARISK_REG1_reg_0,
    RX_ER0,
    \RX_CONFIG_REG_reg[7]_0 ,
    RXSYNC_STATUS,
    RXEVEN0_out,
    RX_INVALID_reg_0,
    FALSE_CARRIER_reg_0,
    RXNOTINTABLE_INT,
    out,
    CONFIG_REG_MATCH_reg,
    RX_DV0,
    XMIT_DATA,
    RECEIVED_IDLE,
    RX_CONFIG_REG_NULL_reg,
    \RXD_reg[7]_0 );
  output [1:0]status_vector_ch1;
  output RX_IDLE;
  output SOP_REG3;
  output RX_DATA_ERROR;
  output gmii_rx_er_ch1;
  output RX_CONFIG_VALID;
  output RECEIVE;
  output gmii_rx_dv_ch1;
  output RX_INVALID;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ;
  output [0:0]SR;
  output \RX_CONFIG_REG_reg[10]_0 ;
  output [15:0]\RX_CONFIG_REG_reg[15]_0 ;
  output [0:0]BASEX_REMOTE_FAULT_RSLVD;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  output FALSE_CARRIER_REG3_reg_0;
  output I_REG_reg_0;
  output RX_CONFIG_VALID_INT_reg_0;
  output [7:0]gmii_rxd_ch1;
  input [7:0]Q;
  input userclk;
  input \RX_CONFIG_VALID_REG_reg[0]_0 ;
  input FALSE_NIT0;
  input SYNC_STATUS_REG0;
  input S0;
  input S2;
  input RXCHARISK_REG1_reg_0;
  input RX_ER0;
  input [1:0]\RX_CONFIG_REG_reg[7]_0 ;
  input RXSYNC_STATUS;
  input RXEVEN0_out;
  input RX_INVALID_reg_0;
  input FALSE_CARRIER_reg_0;
  input RXNOTINTABLE_INT;
  input out;
  input [2:0]CONFIG_REG_MATCH_reg;
  input RX_DV0;
  input XMIT_DATA;
  input RECEIVED_IDLE;
  input RX_CONFIG_REG_NULL_reg;
  input [0:0]\RXD_reg[7]_0 ;

  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire C;
  wire C0;
  wire CGBAD;
  wire CGBAD_REG1;
  wire CGBAD_REG2;
  wire CGBAD_REG3;
  wire [2:0]CONFIG_REG_MATCH_reg;
  wire C_HDR_REMOVED;
  wire C_HDR_REMOVED_REG;
  wire C_REG1;
  wire C_REG2;
  wire C_REG3;
  wire D0p0;
  wire D0p0_REG;
  wire EOP;
  wire EOP0;
  wire EOP_REG1;
  wire EOP_REG10;
  wire EOP_i_2__0_n_0;
  wire EXTEND;
  wire EXTEND_ERR;
  wire EXTEND_ERR0;
  wire EXTEND_REG1;
  wire EXTEND_REG2;
  wire EXTEND_REG3;
  wire EXTEND_i_1__0_n_0;
  wire EXT_ILLEGAL_K;
  wire EXT_ILLEGAL_K0;
  wire EXT_ILLEGAL_K_REG1;
  wire EXT_ILLEGAL_K_REG2;
  wire FALSE_CARRIER;
  wire FALSE_CARRIER0;
  wire FALSE_CARRIER_REG1;
  wire FALSE_CARRIER_REG2;
  wire FALSE_CARRIER_REG3;
  wire FALSE_CARRIER_REG3_reg_0;
  wire FALSE_CARRIER_i_1__0_n_0;
  wire FALSE_CARRIER_reg_0;
  wire FALSE_DATA;
  wire FALSE_DATA0;
  wire FALSE_DATA_i_2__0_n_0;
  wire FALSE_DATA_i_3__0_n_0;
  wire FALSE_DATA_i_4__0_n_0;
  wire FALSE_DATA_i_5__0_n_0;
  wire FALSE_DATA_i_6__0_n_0;
  wire FALSE_K;
  wire FALSE_K0;
  wire FALSE_K_i_2__0_n_0;
  wire FALSE_K_i_3__0_n_0;
  wire FALSE_NIT;
  wire FALSE_NIT0;
  wire FROM_IDLE_D;
  wire FROM_IDLE_D0;
  wire FROM_RX_CX;
  wire FROM_RX_CX0;
  wire FROM_RX_K;
  wire FROM_RX_K0;
  wire I;
  wire I0;
  wire \IDLE_REG_reg_n_0_[0] ;
  wire \IDLE_REG_reg_n_0_[2] ;
  wire ILLEGAL_K;
  wire ILLEGAL_K0;
  wire ILLEGAL_K_REG1;
  wire ILLEGAL_K_REG2;
  wire I_REG_reg_0;
  wire I_i_2__0_n_0;
  wire I_i_3__0_n_0;
  wire I_i_4__0_n_0;
  wire I_i_5__0_n_0;
  wire I_i_6__0_n_0;
  wire K23p7;
  wire K28p5;
  wire K28p5_REG1;
  wire K28p5_REG2;
  wire K29p7;
  wire [7:0]Q;
  wire R;
  wire RECEIVE;
  wire RECEIVED_IDLE;
  wire RECEIVE_i_1__0_n_0;
  wire RUDI_C0__0;
  wire RUDI_I0;
  wire RXCHARISK_REG1;
  wire RXCHARISK_REG1_reg_0;
  wire [7:0]RXDATA_REG5;
  wire \RXD[0]_i_1__0_n_0 ;
  wire \RXD[1]_i_1__0_n_0 ;
  wire \RXD[2]_i_1__0_n_0 ;
  wire \RXD[3]_i_1__0_n_0 ;
  wire \RXD[4]_i_1__0_n_0 ;
  wire \RXD[5]_i_1__0_n_0 ;
  wire \RXD[6]_i_1__0_n_0 ;
  wire \RXD[7]_i_1__0_n_0 ;
  wire [0:0]\RXD_reg[7]_0 ;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXSYNC_STATUS;
  wire \RX_CONFIG_REG[15]_i_1__0_n_0 ;
  wire \RX_CONFIG_REG[7]_i_1__0_n_0 ;
  wire RX_CONFIG_REG_NULL_i_2__0_n_0;
  wire RX_CONFIG_REG_NULL_i_3__0_n_0;
  wire RX_CONFIG_REG_NULL_i_4__0_n_0;
  wire RX_CONFIG_REG_NULL_i_5__0_n_0;
  wire RX_CONFIG_REG_NULL_reg;
  wire \RX_CONFIG_REG_reg[10]_0 ;
  wire [15:0]\RX_CONFIG_REG_reg[15]_0 ;
  wire [1:0]\RX_CONFIG_REG_reg[7]_0 ;
  wire RX_CONFIG_VALID;
  wire RX_CONFIG_VALID_INT0;
  wire RX_CONFIG_VALID_INT_i_2__0_n_0;
  wire RX_CONFIG_VALID_INT_reg_0;
  wire \RX_CONFIG_VALID_REG_reg[0]_0 ;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[3] ;
  wire RX_DATA_ERROR;
  wire RX_DATA_ERROR0;
  wire RX_DATA_ERROR_i_2__0_n_0;
  wire RX_DATA_ERROR_i_3__0_n_0;
  wire RX_DATA_ERROR_i_4__0_n_0;
  wire RX_DV0;
  wire RX_DV_i_1__0_n_0;
  wire RX_ER0;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_INVALID_i_1__0_n_0;
  wire RX_INVALID_reg_0;
  wire R_REG1;
  wire S;
  wire S0;
  wire S2;
  wire SOP;
  wire SOP0;
  wire SOP_REG1;
  wire SOP_REG2;
  wire SOP_REG3;
  wire [0:0]SR;
  wire SYNC_STATUS_REG;
  wire SYNC_STATUS_REG0;
  wire T;
  wire T_REG1;
  wire T_REG2;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ;
  wire WAIT_FOR_K;
  wire WAIT_FOR_K_i_1__0_n_0;
  wire XMIT_DATA;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_er_ch1;
  wire [7:0]gmii_rxd_ch1;
  wire out;
  wire p_0_in1_in;
  wire p_0_in2_in;
  wire p_1_in;
  wire [1:0]status_vector_ch1;
  wire userclk;

  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_5__0
       (.I0(\RX_CONFIG_REG_reg[15]_0 [10]),
        .I1(CONFIG_REG_MATCH_reg[1]),
        .I2(CONFIG_REG_MATCH_reg[2]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [11]),
        .I4(CONFIG_REG_MATCH_reg[0]),
        .I5(\RX_CONFIG_REG_reg[15]_0 [9]),
        .O(\RX_CONFIG_REG_reg[10]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \BASEX_REMOTE_FAULT[1]_i_1__0 
       (.I0(\RX_CONFIG_REG_reg[15]_0 [15]),
        .O(BASEX_REMOTE_FAULT_RSLVD));
  FDRE CGBAD_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD),
        .Q(CGBAD_REG1),
        .R(1'b0));
  FDRE CGBAD_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG1),
        .Q(CGBAD_REG2),
        .R(1'b0));
  FDRE CGBAD_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG2),
        .Q(CGBAD_REG3),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE CGBAD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S2),
        .Q(CGBAD),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    C_HDR_REMOVED_REG_i_1__0
       (.I0(C_REG2),
        .I1(\RX_CONFIG_REG_reg[7]_0 [0]),
        .I2(\RX_CONFIG_REG_reg[7]_0 [1]),
        .O(C_HDR_REMOVED));
  FDRE C_HDR_REMOVED_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_HDR_REMOVED),
        .Q(C_HDR_REMOVED_REG),
        .R(1'b0));
  FDRE C_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C),
        .Q(C_REG1),
        .R(1'b0));
  FDRE C_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG1),
        .Q(C_REG2),
        .R(1'b0));
  FDRE C_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG2),
        .Q(C_REG3),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h8)) 
    C_i_1__0
       (.I0(K28p5_REG1),
        .I1(I_i_3__0_n_0),
        .O(C0));
  FDRE C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C0),
        .Q(C),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    D0p0_REG_i_1__0
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[7]),
        .O(D0p0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    D0p0_REG_i_2__0
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(Q[4]),
        .I4(Q[5]),
        .I5(Q[6]),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ));
  FDRE D0p0_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(D0p0),
        .Q(D0p0_REG),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hEA)) 
    EOP_REG1_i_1__0
       (.I0(EOP),
        .I1(EXTEND),
        .I2(EXTEND_REG1),
        .O(EOP_REG10));
  FDRE EOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP_REG10),
        .Q(EOP_REG1),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF88888000)) 
    EOP_i_1__0
       (.I0(T_REG2),
        .I1(R_REG1),
        .I2(K28p5_REG1),
        .I3(RXEVEN0_out),
        .I4(R),
        .I5(EOP_i_2__0_n_0),
        .O(EOP0));
  LUT5 #(
    .INIT(32'hF8888888)) 
    EOP_i_2__0
       (.I0(RX_IDLE),
        .I1(K28p5_REG1),
        .I2(C_REG1),
        .I3(D0p0_REG),
        .I4(RXEVEN0_out),
        .O(EOP_i_2__0_n_0));
  FDRE EOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP0),
        .Q(EOP),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    EXTEND_ERR_i_1__0
       (.I0(EXT_ILLEGAL_K_REG2),
        .I1(CGBAD_REG3),
        .I2(EXTEND_REG3),
        .O(EXTEND_ERR0));
  FDRE EXTEND_ERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_ERR0),
        .Q(EXTEND_ERR),
        .R(SYNC_STATUS_REG0));
  FDRE EXTEND_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND),
        .Q(EXTEND_REG1),
        .R(1'b0));
  FDRE EXTEND_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG1),
        .Q(EXTEND_REG2),
        .R(1'b0));
  FDRE EXTEND_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG2),
        .Q(EXTEND_REG3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h808080FF80808080)) 
    EXTEND_i_1__0
       (.I0(R_REG1),
        .I1(R),
        .I2(RECEIVE),
        .I3(RX_DATA_ERROR_i_3__0_n_0),
        .I4(S),
        .I5(EXTEND),
        .O(EXTEND_i_1__0_n_0));
  FDRE EXTEND_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_i_1__0_n_0),
        .Q(EXTEND),
        .R(SYNC_STATUS_REG0));
  FDRE EXT_ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K),
        .Q(EXT_ILLEGAL_K_REG1),
        .R(SYNC_STATUS_REG0));
  FDRE EXT_ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K_REG1),
        .Q(EXT_ILLEGAL_K_REG2),
        .R(SYNC_STATUS_REG0));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT5 #(
    .INIT(32'h00000700)) 
    EXT_ILLEGAL_K_i_1__0
       (.I0(K28p5_REG1),
        .I1(RXEVEN0_out),
        .I2(S),
        .I3(EXTEND_REG1),
        .I4(R),
        .O(EXT_ILLEGAL_K0));
  FDRE EXT_ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K0),
        .Q(EXT_ILLEGAL_K),
        .R(SYNC_STATUS_REG0));
  FDRE FALSE_CARRIER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER),
        .Q(FALSE_CARRIER_REG1),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG1),
        .Q(FALSE_CARRIER_REG2),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG2),
        .Q(FALSE_CARRIER_REG3),
        .R(SYNC_STATUS_REG0));
  LUT4 #(
    .INIT(16'hF7F0)) 
    FALSE_CARRIER_i_1__0
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .I2(FALSE_CARRIER0),
        .I3(FALSE_CARRIER),
        .O(FALSE_CARRIER_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    FALSE_CARRIER_i_2__0
       (.I0(FALSE_CARRIER_reg_0),
        .I1(K28p5_REG1),
        .I2(S),
        .I3(FALSE_NIT),
        .I4(FALSE_K),
        .I5(FALSE_DATA),
        .O(FALSE_CARRIER0));
  FDRE FALSE_CARRIER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_i_1__0_n_0),
        .Q(FALSE_CARRIER),
        .R(SYNC_STATUS_REG0));
  LUT3 #(
    .INIT(8'h02)) 
    FALSE_DATA_i_1__0
       (.I0(FALSE_DATA_i_2__0_n_0),
        .I1(RXNOTINTABLE_INT),
        .I2(RXCHARISK_REG1_reg_0),
        .O(FALSE_DATA0));
  LUT6 #(
    .INIT(64'h3035357530303000)) 
    FALSE_DATA_i_2__0
       (.I0(FALSE_DATA_i_3__0_n_0),
        .I1(FALSE_DATA_i_4__0_n_0),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .I5(FALSE_DATA_i_5__0_n_0),
        .O(FALSE_DATA_i_2__0_n_0));
  LUT3 #(
    .INIT(8'hFB)) 
    FALSE_DATA_i_3__0
       (.I0(Q[7]),
        .I1(Q[6]),
        .I2(Q[5]),
        .O(FALSE_DATA_i_3__0_n_0));
  LUT6 #(
    .INIT(64'hDFFFDFFFDFFFDFDF)) 
    FALSE_DATA_i_4__0
       (.I0(Q[5]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(FALSE_DATA_i_6__0_n_0),
        .I4(Q[4]),
        .I5(Q[3]),
        .O(FALSE_DATA_i_4__0_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    FALSE_DATA_i_5__0
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(FALSE_DATA_i_5__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT2 #(
    .INIT(4'h1)) 
    FALSE_DATA_i_6__0
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(FALSE_DATA_i_6__0_n_0));
  FDRE FALSE_DATA_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_DATA0),
        .Q(FALSE_DATA),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h00000041)) 
    FALSE_K_i_1__0
       (.I0(RXNOTINTABLE_INT),
        .I1(Q[6]),
        .I2(Q[5]),
        .I3(FALSE_K_i_2__0_n_0),
        .I4(FALSE_K_i_3__0_n_0),
        .O(FALSE_K0));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT4 #(
    .INIT(16'hFFF7)) 
    FALSE_K_i_2__0
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(FALSE_K_i_2__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    FALSE_K_i_3__0
       (.I0(Q[7]),
        .I1(Q[4]),
        .I2(RXCHARISK_REG1_reg_0),
        .O(FALSE_K_i_3__0_n_0));
  FDRE FALSE_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_K0),
        .Q(FALSE_K),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    FALSE_NIT_i_3__0
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(Q[4]),
        .I4(Q[6]),
        .I5(Q[5]),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ));
  FDRE FALSE_NIT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_NIT0),
        .Q(FALSE_NIT),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    FROM_IDLE_D_i_1__0
       (.I0(K28p5_REG1),
        .I1(RX_IDLE),
        .I2(WAIT_FOR_K),
        .I3(RX_INVALID_reg_0),
        .O(FROM_IDLE_D0));
  FDRE FROM_IDLE_D_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_IDLE_D0),
        .Q(FROM_IDLE_D),
        .R(SYNC_STATUS_REG0));
  LUT6 #(
    .INIT(64'hFFFFA8FFFCFCA8A8)) 
    FROM_RX_CX_i_1__0
       (.I0(RXCHARISK_REG1),
        .I1(C_REG1),
        .I2(C_REG2),
        .I3(RX_DATA_ERROR_i_3__0_n_0),
        .I4(CGBAD),
        .I5(C_REG3),
        .O(FROM_RX_CX0));
  FDRE FROM_RX_CX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_CX0),
        .Q(FROM_RX_CX),
        .R(SYNC_STATUS_REG0));
  LUT4 #(
    .INIT(16'h00E0)) 
    FROM_RX_K_i_1__0
       (.I0(RXCHARISK_REG1),
        .I1(CGBAD),
        .I2(K28p5_REG2),
        .I3(RX_INVALID_reg_0),
        .O(FROM_RX_K0));
  FDRE FROM_RX_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_K0),
        .Q(FROM_RX_K),
        .R(SYNC_STATUS_REG0));
  FDRE \IDLE_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(\IDLE_REG_reg_n_0_[0] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \IDLE_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IDLE_REG_reg_n_0_[0] ),
        .Q(p_0_in1_in),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \IDLE_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in1_in),
        .Q(\IDLE_REG_reg_n_0_[2] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K),
        .Q(ILLEGAL_K_REG1),
        .R(SYNC_STATUS_REG0));
  FDRE ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K_REG1),
        .Q(ILLEGAL_K_REG2),
        .R(SYNC_STATUS_REG0));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    ILLEGAL_K_i_1__0
       (.I0(R),
        .I1(K28p5_REG1),
        .I2(RXCHARISK_REG1),
        .I3(T),
        .O(ILLEGAL_K0));
  FDRE ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K0),
        .Q(ILLEGAL_K),
        .R(SYNC_STATUS_REG0));
  FDRE I_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I),
        .Q(RX_IDLE),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h20200020)) 
    I_i_1__0
       (.I0(I_i_2__0_n_0),
        .I1(I_i_3__0_n_0),
        .I2(RXEVEN0_out),
        .I3(RXCHARISK_REG1_reg_0),
        .I4(RX_INVALID_reg_0),
        .O(I0));
  LUT6 #(
    .INIT(64'hFFFEAAAAAAAAAAAA)) 
    I_i_2__0
       (.I0(K28p5_REG1),
        .I1(FALSE_NIT),
        .I2(FALSE_K),
        .I3(FALSE_DATA),
        .I4(RX_IDLE),
        .I5(RX_INVALID_reg_0),
        .O(I_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h0400FFFF04000400)) 
    I_i_3__0
       (.I0(FALSE_DATA_i_3__0_n_0),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(I_i_4__0_n_0),
        .I4(I_i_5__0_n_0),
        .I5(I_i_6__0_n_0),
        .O(I_i_3__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    I_i_4__0
       (.I0(Q[4]),
        .I1(RXCHARISK_REG1_reg_0),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(I_i_4__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT5 #(
    .INIT(32'hFFFFFDFF)) 
    I_i_5__0
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(RXCHARISK_REG1_reg_0),
        .O(I_i_5__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    I_i_6__0
       (.I0(Q[6]),
        .I1(Q[5]),
        .I2(Q[7]),
        .I3(Q[4]),
        .O(I_i_6__0_n_0));
  FDRE I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I0),
        .Q(I),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000800000)) 
    K28p5_REG1_i_1__0
       (.I0(Q[4]),
        .I1(Q[7]),
        .I2(Q[5]),
        .I3(Q[6]),
        .I4(RXCHARISK_REG1_reg_0),
        .I5(FALSE_K_i_2__0_n_0),
        .O(K28p5));
  FDRE K28p5_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5),
        .Q(K28p5_REG1),
        .R(1'b0));
  FDRE K28p5_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5_REG1),
        .Q(K28p5_REG2),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hBA)) 
    RECEIVED_IDLE_i_1__0
       (.I0(RX_IDLE),
        .I1(RX_CONFIG_VALID),
        .I2(RECEIVED_IDLE),
        .O(I_REG_reg_0));
  LUT3 #(
    .INIT(8'hDC)) 
    RECEIVE_i_1__0
       (.I0(EOP),
        .I1(SOP_REG2),
        .I2(RECEIVE),
        .O(RECEIVE_i_1__0_n_0));
  FDRE RECEIVE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RECEIVE_i_1__0_n_0),
        .Q(RECEIVE),
        .R(SYNC_STATUS_REG0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RUDI_C0
       (.I0(p_0_in2_in),
        .I1(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .I2(p_1_in),
        .I3(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .O(RUDI_C0__0));
  FDRE RUDI_C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_C0__0),
        .Q(status_vector_ch1[0]),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    RUDI_I_i_1__0
       (.I0(\IDLE_REG_reg_n_0_[2] ),
        .I1(p_0_in1_in),
        .O(RUDI_I0));
  FDRE RUDI_I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_I0),
        .Q(status_vector_ch1[1]),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE RXCHARISK_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISK_REG1_reg_0),
        .Q(RXCHARISK_REG1),
        .R(1'b0));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[0]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[0]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[0]),
        .Q(RXDATA_REG5[0]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[1]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[1]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[1]),
        .Q(RXDATA_REG5[1]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[2]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[2]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[2]),
        .Q(RXDATA_REG5[2]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[3]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[3]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[3]),
        .Q(RXDATA_REG5[3]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[4]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[4]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[4]),
        .Q(RXDATA_REG5[4]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[5]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[5]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[5]),
        .Q(RXDATA_REG5[5]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[6]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[6]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[6]),
        .Q(RXDATA_REG5[6]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[7]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[7]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[7]),
        .Q(RXDATA_REG5[7]));
  LUT4 #(
    .INIT(16'hBBBA)) 
    \RXD[0]_i_1__0 
       (.I0(SOP_REG3),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(RXDATA_REG5[0]),
        .O(\RXD[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT4 #(
    .INIT(16'h5554)) 
    \RXD[1]_i_1__0 
       (.I0(SOP_REG3),
        .I1(RXDATA_REG5[1]),
        .I2(FALSE_CARRIER_REG3),
        .I3(EXTEND_REG1),
        .O(\RXD[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \RXD[2]_i_1__0 
       (.I0(RXDATA_REG5[2]),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(SOP_REG3),
        .O(\RXD[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT4 #(
    .INIT(16'h5554)) 
    \RXD[3]_i_1__0 
       (.I0(SOP_REG3),
        .I1(RXDATA_REG5[3]),
        .I2(FALSE_CARRIER_REG3),
        .I3(EXTEND_REG1),
        .O(\RXD[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT5 #(
    .INIT(32'hBABBBAAA)) 
    \RXD[4]_i_1__0 
       (.I0(SOP_REG3),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_ERR),
        .I3(EXTEND_REG1),
        .I4(RXDATA_REG5[4]),
        .O(\RXD[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[5]_i_1__0 
       (.I0(RXDATA_REG5[5]),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(SOP_REG3),
        .O(\RXD[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT4 #(
    .INIT(16'hABAA)) 
    \RXD[6]_i_1__0 
       (.I0(SOP_REG3),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(RXDATA_REG5[6]),
        .O(\RXD[6]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[7]_i_1__0 
       (.I0(RXDATA_REG5[7]),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(SOP_REG3),
        .O(\RXD[7]_i_1__0_n_0 ));
  FDRE \RXD_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[0]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[0]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[1]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[1]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[2]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[2]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[3]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[3]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[4]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[4]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[5]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[5]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[6]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[6]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[7]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[7]),
        .R(\RXD_reg[7]_0 ));
  LUT4 #(
    .INIT(16'h000E)) 
    \RX_CONFIG_REG[15]_i_1__0 
       (.I0(C_REG1),
        .I1(C_HDR_REMOVED_REG),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(RXCHARISK_REG1),
        .O(\RX_CONFIG_REG[15]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h55550040)) 
    \RX_CONFIG_REG[7]_i_1__0 
       (.I0(RXCHARISK_REG1_reg_0),
        .I1(C_REG2),
        .I2(\RX_CONFIG_REG_reg[7]_0 [0]),
        .I3(\RX_CONFIG_REG_reg[7]_0 [1]),
        .I4(C),
        .O(\RX_CONFIG_REG[7]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0004FFFF00040000)) 
    RX_CONFIG_REG_NULL_i_1__0
       (.I0(RX_CONFIG_REG_NULL_i_2__0_n_0),
        .I1(RX_CONFIG_REG_NULL_i_3__0_n_0),
        .I2(RX_CONFIG_REG_NULL_i_4__0_n_0),
        .I3(RX_CONFIG_REG_NULL_i_5__0_n_0),
        .I4(RX_CONFIG_VALID),
        .I5(RX_CONFIG_REG_NULL_reg),
        .O(RX_CONFIG_VALID_INT_reg_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_CONFIG_REG_NULL_i_2__0
       (.I0(\RX_CONFIG_REG_reg[15]_0 [5]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [4]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [10]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [14]),
        .O(RX_CONFIG_REG_NULL_i_2__0_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    RX_CONFIG_REG_NULL_i_3__0
       (.I0(\RX_CONFIG_REG_reg[15]_0 [9]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [8]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [13]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [11]),
        .O(RX_CONFIG_REG_NULL_i_3__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_CONFIG_REG_NULL_i_4__0
       (.I0(\RX_CONFIG_REG_reg[15]_0 [0]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [15]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [7]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [1]),
        .O(RX_CONFIG_REG_NULL_i_4__0_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_CONFIG_REG_NULL_i_5__0
       (.I0(\RX_CONFIG_REG_reg[15]_0 [6]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [3]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [12]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [2]),
        .O(RX_CONFIG_REG_NULL_i_5__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \RX_CONFIG_REG_REG[15]_i_1__0 
       (.I0(out),
        .I1(RX_IDLE),
        .O(SR));
  FDRE \RX_CONFIG_REG_reg[0] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [0]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[10] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [10]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[11] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [11]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[12] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [12]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[13] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [13]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[14] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [14]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[15] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [15]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[1] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [1]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[2] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [2]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[3] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [3]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[4] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [4]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[5] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [5]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[6] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [6]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[7] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [7]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[8] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [8]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[9] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000000E000000)) 
    RX_CONFIG_VALID_INT_i_1__0
       (.I0(C_REG1),
        .I1(C_HDR_REMOVED_REG),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(RXSYNC_STATUS),
        .I4(RX_CONFIG_VALID_INT_i_2__0_n_0),
        .I5(S2),
        .O(RX_CONFIG_VALID_INT0));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT2 #(
    .INIT(4'h1)) 
    RX_CONFIG_VALID_INT_i_2__0
       (.I0(RXCHARISK_REG1),
        .I1(CGBAD),
        .O(RX_CONFIG_VALID_INT_i_2__0_n_0));
  FDRE RX_CONFIG_VALID_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT0),
        .Q(RX_CONFIG_VALID),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .Q(p_0_in2_in),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in2_in),
        .Q(p_1_in),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_1_in),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h888AAAAA88888888)) 
    RX_DATA_ERROR_i_1__0
       (.I0(RECEIVE),
        .I1(RX_DATA_ERROR_i_2__0_n_0),
        .I2(R),
        .I3(RX_DATA_ERROR_i_3__0_n_0),
        .I4(R_REG1),
        .I5(T_REG2),
        .O(RX_DATA_ERROR0));
  LUT5 #(
    .INIT(32'hFFFF4544)) 
    RX_DATA_ERROR_i_2__0
       (.I0(R_REG1),
        .I1(K28p5_REG1),
        .I2(T_REG1),
        .I3(R),
        .I4(RX_DATA_ERROR_i_4__0_n_0),
        .O(RX_DATA_ERROR_i_2__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT2 #(
    .INIT(4'h8)) 
    RX_DATA_ERROR_i_3__0
       (.I0(K28p5_REG1),
        .I1(RXEVEN0_out),
        .O(RX_DATA_ERROR_i_3__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_DATA_ERROR_i_4__0
       (.I0(CGBAD_REG3),
        .I1(RX_IDLE),
        .I2(ILLEGAL_K_REG2),
        .I3(C_REG1),
        .O(RX_DATA_ERROR_i_4__0_n_0));
  FDRE RX_DATA_ERROR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DATA_ERROR0),
        .Q(RX_DATA_ERROR),
        .R(SYNC_STATUS_REG0));
  LUT6 #(
    .INIT(64'hAAAAEEEAAAAAAAAA)) 
    RX_DV_i_1__0
       (.I0(RX_DV0),
        .I1(XMIT_DATA),
        .I2(RECEIVE),
        .I3(RXSYNC_STATUS),
        .I4(EOP_REG1),
        .I5(gmii_rx_dv_ch1),
        .O(RX_DV_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_DV_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DV_i_1__0_n_0),
        .Q(gmii_rx_dv_ch1),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h1)) 
    RX_ER_i_2__0
       (.I0(FALSE_CARRIER_REG3),
        .I1(EXTEND_REG1),
        .O(FALSE_CARRIER_REG3_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_ER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_ER0),
        .Q(gmii_rx_er_ch1),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFFFF55FDFFFF00FC)) 
    RX_INVALID_i_1__0
       (.I0(K28p5_REG1),
        .I1(FROM_RX_K),
        .I2(FROM_IDLE_D),
        .I3(RX_INVALID_reg_0),
        .I4(FROM_RX_CX),
        .I5(RX_INVALID),
        .O(RX_INVALID_i_1__0_n_0));
  FDRE RX_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_INVALID_i_1__0_n_0),
        .Q(RX_INVALID),
        .R(SYNC_STATUS_REG0));
  FDRE R_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R),
        .Q(R_REG1),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    R_i_1__1
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[2]),
        .O(K23p7));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    R_i_2__0
       (.I0(Q[5]),
        .I1(Q[6]),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(Q[4]),
        .I4(Q[7]),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K23p7),
        .Q(R),
        .R(1'b0));
  FDRE SOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP),
        .Q(SOP_REG1),
        .R(1'b0));
  FDRE SOP_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG1),
        .Q(SOP_REG2),
        .R(1'b0));
  FDRE SOP_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG2),
        .Q(SOP_REG3),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00A80000)) 
    SOP_i_1__0
       (.I0(RX_INVALID_reg_0),
        .I1(RX_IDLE),
        .I2(EXTEND),
        .I3(WAIT_FOR_K),
        .I4(S),
        .O(SOP0));
  FDRE SOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP0),
        .Q(SOP),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(SYNC_STATUS_REG),
        .R(SYNC_STATUS_REG0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S),
        .R(1'b0));
  FDRE T_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T),
        .Q(T_REG1),
        .R(1'b0));
  FDRE T_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T_REG1),
        .Q(T_REG2),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    T_i_1__2
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(K29p7));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K29p7),
        .Q(T),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h7F0F)) 
    WAIT_FOR_K_i_1__0
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .I2(SYNC_STATUS_REG),
        .I3(WAIT_FOR_K),
        .O(WAIT_FOR_K_i_1__0_n_0));
  FDRE WAIT_FOR_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(WAIT_FOR_K_i_1__0_n_0),
        .Q(WAIT_FOR_K),
        .R(SYNC_STATUS_REG0));
endmodule

(* ORIG_REF_NAME = "RX" *) 
module quadsgmii_0_TEST_RX_182
   (status_vector_ch0,
    RX_IDLE,
    SOP_REG3,
    RX_DATA_ERROR,
    gmii_rx_er_ch0,
    RX_CONFIG_VALID,
    RECEIVE,
    gmii_rx_dv_ch0,
    RX_INVALID,
    I_REG_reg_0,
    RX_CONFIG_VALID_INT_reg_0,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ,
    SR,
    \RX_CONFIG_REG_reg[10]_0 ,
    \RX_CONFIG_REG_reg[15]_0 ,
    BASEX_REMOTE_FAULT_RSLVD,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ,
    FALSE_CARRIER_REG3_reg_0,
    gmii_rxd_ch0,
    Q,
    userclk,
    \RX_CONFIG_VALID_REG_reg[0]_0 ,
    FALSE_NIT0,
    SYNC_STATUS_REG0,
    S0,
    S2,
    RXCHARISK_REG1_reg_0,
    RX_ER0,
    \RX_CONFIG_REG_reg[7]_0 ,
    RXEVEN0_out,
    RX_DV0,
    XMIT_DATA,
    RXSYNC_STATUS,
    RX_INVALID_reg_0,
    RECEIVED_IDLE,
    RX_CONFIG_REG_NULL_reg,
    FALSE_CARRIER_reg_0,
    RXNOTINTABLE_INT,
    out,
    CONFIG_REG_MATCH_reg,
    \RXD_reg[7]_0 );
  output [1:0]status_vector_ch0;
  output RX_IDLE;
  output SOP_REG3;
  output RX_DATA_ERROR;
  output gmii_rx_er_ch0;
  output RX_CONFIG_VALID;
  output RECEIVE;
  output gmii_rx_dv_ch0;
  output RX_INVALID;
  output I_REG_reg_0;
  output RX_CONFIG_VALID_INT_reg_0;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ;
  output [0:0]SR;
  output \RX_CONFIG_REG_reg[10]_0 ;
  output [15:0]\RX_CONFIG_REG_reg[15]_0 ;
  output [0:0]BASEX_REMOTE_FAULT_RSLVD;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  output FALSE_CARRIER_REG3_reg_0;
  output [7:0]gmii_rxd_ch0;
  input [7:0]Q;
  input userclk;
  input \RX_CONFIG_VALID_REG_reg[0]_0 ;
  input FALSE_NIT0;
  input SYNC_STATUS_REG0;
  input S0;
  input S2;
  input RXCHARISK_REG1_reg_0;
  input RX_ER0;
  input [1:0]\RX_CONFIG_REG_reg[7]_0 ;
  input RXEVEN0_out;
  input RX_DV0;
  input XMIT_DATA;
  input RXSYNC_STATUS;
  input RX_INVALID_reg_0;
  input RECEIVED_IDLE;
  input RX_CONFIG_REG_NULL_reg;
  input FALSE_CARRIER_reg_0;
  input RXNOTINTABLE_INT;
  input out;
  input [2:0]CONFIG_REG_MATCH_reg;
  input [0:0]\RXD_reg[7]_0 ;

  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire C;
  wire C0;
  wire CGBAD;
  wire CGBAD_REG1;
  wire CGBAD_REG2;
  wire CGBAD_REG3;
  wire [2:0]CONFIG_REG_MATCH_reg;
  wire C_HDR_REMOVED;
  wire C_HDR_REMOVED_REG;
  wire C_REG1;
  wire C_REG2;
  wire C_REG3;
  wire D0p0;
  wire D0p0_REG;
  wire EOP;
  wire EOP0;
  wire EOP_REG1;
  wire EOP_REG10;
  wire EOP_i_2_n_0;
  wire EXTEND;
  wire EXTEND_ERR;
  wire EXTEND_ERR0;
  wire EXTEND_REG1;
  wire EXTEND_REG2;
  wire EXTEND_REG3;
  wire EXTEND_i_1_n_0;
  wire EXT_ILLEGAL_K;
  wire EXT_ILLEGAL_K0;
  wire EXT_ILLEGAL_K_REG1;
  wire EXT_ILLEGAL_K_REG2;
  wire FALSE_CARRIER;
  wire FALSE_CARRIER0;
  wire FALSE_CARRIER_REG1;
  wire FALSE_CARRIER_REG2;
  wire FALSE_CARRIER_REG3;
  wire FALSE_CARRIER_REG3_reg_0;
  wire FALSE_CARRIER_i_1_n_0;
  wire FALSE_CARRIER_reg_0;
  wire FALSE_DATA;
  wire FALSE_DATA0;
  wire FALSE_DATA_i_2_n_0;
  wire FALSE_DATA_i_3_n_0;
  wire FALSE_DATA_i_4_n_0;
  wire FALSE_DATA_i_5_n_0;
  wire FALSE_DATA_i_6_n_0;
  wire FALSE_K;
  wire FALSE_K0;
  wire FALSE_K_i_2_n_0;
  wire FALSE_K_i_3_n_0;
  wire FALSE_NIT;
  wire FALSE_NIT0;
  wire FROM_IDLE_D;
  wire FROM_IDLE_D0;
  wire FROM_RX_CX;
  wire FROM_RX_CX0;
  wire FROM_RX_K;
  wire FROM_RX_K0;
  wire I;
  wire I0;
  wire \IDLE_REG_reg_n_0_[0] ;
  wire \IDLE_REG_reg_n_0_[2] ;
  wire ILLEGAL_K;
  wire ILLEGAL_K0;
  wire ILLEGAL_K_REG1;
  wire ILLEGAL_K_REG2;
  wire I_REG_reg_0;
  wire I_i_2_n_0;
  wire I_i_3_n_0;
  wire I_i_4_n_0;
  wire I_i_5_n_0;
  wire I_i_6_n_0;
  wire K23p7;
  wire K28p5;
  wire K28p5_REG1;
  wire K28p5_REG2;
  wire K29p7;
  wire [7:0]Q;
  wire R;
  wire RECEIVE;
  wire RECEIVED_IDLE;
  wire RECEIVE_i_1_n_0;
  wire RUDI_C0__0;
  wire RUDI_I0;
  wire RXCHARISK_REG1;
  wire RXCHARISK_REG1_reg_0;
  wire [7:0]RXDATA_REG5;
  wire \RXD[0]_i_1_n_0 ;
  wire \RXD[1]_i_1_n_0 ;
  wire \RXD[2]_i_1_n_0 ;
  wire \RXD[3]_i_1_n_0 ;
  wire \RXD[4]_i_1_n_0 ;
  wire \RXD[5]_i_1_n_0 ;
  wire \RXD[6]_i_1_n_0 ;
  wire \RXD[7]_i_1_n_0 ;
  wire [0:0]\RXD_reg[7]_0 ;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXSYNC_STATUS;
  wire \RX_CONFIG_REG[15]_i_1_n_0 ;
  wire \RX_CONFIG_REG[7]_i_1_n_0 ;
  wire RX_CONFIG_REG_NULL_i_2_n_0;
  wire RX_CONFIG_REG_NULL_i_3_n_0;
  wire RX_CONFIG_REG_NULL_i_4_n_0;
  wire RX_CONFIG_REG_NULL_i_5_n_0;
  wire RX_CONFIG_REG_NULL_reg;
  wire \RX_CONFIG_REG_reg[10]_0 ;
  wire [15:0]\RX_CONFIG_REG_reg[15]_0 ;
  wire [1:0]\RX_CONFIG_REG_reg[7]_0 ;
  wire RX_CONFIG_VALID;
  wire RX_CONFIG_VALID_INT0;
  wire RX_CONFIG_VALID_INT_i_2_n_0;
  wire RX_CONFIG_VALID_INT_reg_0;
  wire \RX_CONFIG_VALID_REG_reg[0]_0 ;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[3] ;
  wire RX_DATA_ERROR;
  wire RX_DATA_ERROR0;
  wire RX_DATA_ERROR_i_2_n_0;
  wire RX_DATA_ERROR_i_3_n_0;
  wire RX_DATA_ERROR_i_4_n_0;
  wire RX_DV0;
  wire RX_DV_i_1_n_0;
  wire RX_ER0;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_INVALID_i_1_n_0;
  wire RX_INVALID_reg_0;
  wire R_REG1;
  wire S;
  wire S0;
  wire S2;
  wire SOP;
  wire SOP0;
  wire SOP_REG1;
  wire SOP_REG2;
  wire SOP_REG3;
  wire [0:0]SR;
  wire SYNC_STATUS_REG;
  wire SYNC_STATUS_REG0;
  wire T;
  wire T_REG1;
  wire T_REG2;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ;
  wire WAIT_FOR_K;
  wire WAIT_FOR_K_i_1_n_0;
  wire XMIT_DATA;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_er_ch0;
  wire [7:0]gmii_rxd_ch0;
  wire out;
  wire p_0_in1_in;
  wire p_0_in2_in;
  wire p_1_in;
  wire [1:0]status_vector_ch0;
  wire userclk;

  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    ABILITY_MATCH_2_i_5
       (.I0(\RX_CONFIG_REG_reg[15]_0 [10]),
        .I1(CONFIG_REG_MATCH_reg[1]),
        .I2(CONFIG_REG_MATCH_reg[2]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [11]),
        .I4(CONFIG_REG_MATCH_reg[0]),
        .I5(\RX_CONFIG_REG_reg[15]_0 [9]),
        .O(\RX_CONFIG_REG_reg[10]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \BASEX_REMOTE_FAULT[1]_i_1 
       (.I0(\RX_CONFIG_REG_reg[15]_0 [15]),
        .O(BASEX_REMOTE_FAULT_RSLVD));
  FDRE CGBAD_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD),
        .Q(CGBAD_REG1),
        .R(1'b0));
  FDRE CGBAD_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG1),
        .Q(CGBAD_REG2),
        .R(1'b0));
  FDRE CGBAD_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG2),
        .Q(CGBAD_REG3),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE CGBAD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S2),
        .Q(CGBAD),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    C_HDR_REMOVED_REG_i_1
       (.I0(C_REG2),
        .I1(\RX_CONFIG_REG_reg[7]_0 [0]),
        .I2(\RX_CONFIG_REG_reg[7]_0 [1]),
        .O(C_HDR_REMOVED));
  FDRE C_HDR_REMOVED_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_HDR_REMOVED),
        .Q(C_HDR_REMOVED_REG),
        .R(1'b0));
  FDRE C_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C),
        .Q(C_REG1),
        .R(1'b0));
  FDRE C_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG1),
        .Q(C_REG2),
        .R(1'b0));
  FDRE C_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG2),
        .Q(C_REG3),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h8)) 
    C_i_1
       (.I0(K28p5_REG1),
        .I1(I_i_3_n_0),
        .O(C0));
  FDRE C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C0),
        .Q(C),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    D0p0_REG_i_1
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[7]),
        .O(D0p0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    D0p0_REG_i_2
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(Q[4]),
        .I4(Q[5]),
        .I5(Q[6]),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] ));
  FDRE D0p0_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(D0p0),
        .Q(D0p0_REG),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hEA)) 
    EOP_REG1_i_1
       (.I0(EOP),
        .I1(EXTEND),
        .I2(EXTEND_REG1),
        .O(EOP_REG10));
  FDRE EOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP_REG10),
        .Q(EOP_REG1),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF88888000)) 
    EOP_i_1
       (.I0(T_REG2),
        .I1(R_REG1),
        .I2(K28p5_REG1),
        .I3(RXEVEN0_out),
        .I4(R),
        .I5(EOP_i_2_n_0),
        .O(EOP0));
  LUT5 #(
    .INIT(32'hF8888888)) 
    EOP_i_2
       (.I0(RX_IDLE),
        .I1(K28p5_REG1),
        .I2(C_REG1),
        .I3(D0p0_REG),
        .I4(RXEVEN0_out),
        .O(EOP_i_2_n_0));
  FDRE EOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP0),
        .Q(EOP),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    EXTEND_ERR_i_1
       (.I0(EXT_ILLEGAL_K_REG2),
        .I1(CGBAD_REG3),
        .I2(EXTEND_REG3),
        .O(EXTEND_ERR0));
  FDRE EXTEND_ERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_ERR0),
        .Q(EXTEND_ERR),
        .R(SYNC_STATUS_REG0));
  FDRE EXTEND_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND),
        .Q(EXTEND_REG1),
        .R(1'b0));
  FDRE EXTEND_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG1),
        .Q(EXTEND_REG2),
        .R(1'b0));
  FDRE EXTEND_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG2),
        .Q(EXTEND_REG3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h808080FF80808080)) 
    EXTEND_i_1
       (.I0(R_REG1),
        .I1(R),
        .I2(RECEIVE),
        .I3(RX_DATA_ERROR_i_3_n_0),
        .I4(S),
        .I5(EXTEND),
        .O(EXTEND_i_1_n_0));
  FDRE EXTEND_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_i_1_n_0),
        .Q(EXTEND),
        .R(SYNC_STATUS_REG0));
  FDRE EXT_ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K),
        .Q(EXT_ILLEGAL_K_REG1),
        .R(SYNC_STATUS_REG0));
  FDRE EXT_ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K_REG1),
        .Q(EXT_ILLEGAL_K_REG2),
        .R(SYNC_STATUS_REG0));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT5 #(
    .INIT(32'h00000700)) 
    EXT_ILLEGAL_K_i_1
       (.I0(K28p5_REG1),
        .I1(RXEVEN0_out),
        .I2(S),
        .I3(EXTEND_REG1),
        .I4(R),
        .O(EXT_ILLEGAL_K0));
  FDRE EXT_ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K0),
        .Q(EXT_ILLEGAL_K),
        .R(SYNC_STATUS_REG0));
  FDRE FALSE_CARRIER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER),
        .Q(FALSE_CARRIER_REG1),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG1),
        .Q(FALSE_CARRIER_REG2),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG2),
        .Q(FALSE_CARRIER_REG3),
        .R(SYNC_STATUS_REG0));
  LUT4 #(
    .INIT(16'hF7F0)) 
    FALSE_CARRIER_i_1
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .I2(FALSE_CARRIER0),
        .I3(FALSE_CARRIER),
        .O(FALSE_CARRIER_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    FALSE_CARRIER_i_2
       (.I0(FALSE_CARRIER_reg_0),
        .I1(K28p5_REG1),
        .I2(S),
        .I3(FALSE_NIT),
        .I4(FALSE_K),
        .I5(FALSE_DATA),
        .O(FALSE_CARRIER0));
  FDRE FALSE_CARRIER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_i_1_n_0),
        .Q(FALSE_CARRIER),
        .R(SYNC_STATUS_REG0));
  LUT3 #(
    .INIT(8'h02)) 
    FALSE_DATA_i_1
       (.I0(FALSE_DATA_i_2_n_0),
        .I1(RXNOTINTABLE_INT),
        .I2(RXCHARISK_REG1_reg_0),
        .O(FALSE_DATA0));
  LUT6 #(
    .INIT(64'h3035357530303000)) 
    FALSE_DATA_i_2
       (.I0(FALSE_DATA_i_3_n_0),
        .I1(FALSE_DATA_i_4_n_0),
        .I2(Q[2]),
        .I3(Q[4]),
        .I4(Q[3]),
        .I5(FALSE_DATA_i_5_n_0),
        .O(FALSE_DATA_i_2_n_0));
  LUT3 #(
    .INIT(8'hFB)) 
    FALSE_DATA_i_3
       (.I0(Q[7]),
        .I1(Q[6]),
        .I2(Q[5]),
        .O(FALSE_DATA_i_3_n_0));
  LUT6 #(
    .INIT(64'hDFFFDFFFDFFFDFDF)) 
    FALSE_DATA_i_4
       (.I0(Q[5]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(FALSE_DATA_i_6_n_0),
        .I4(Q[4]),
        .I5(Q[3]),
        .O(FALSE_DATA_i_4_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    FALSE_DATA_i_5
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(FALSE_DATA_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT2 #(
    .INIT(4'h1)) 
    FALSE_DATA_i_6
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(FALSE_DATA_i_6_n_0));
  FDRE FALSE_DATA_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_DATA0),
        .Q(FALSE_DATA),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT5 #(
    .INIT(32'h00000041)) 
    FALSE_K_i_1
       (.I0(RXNOTINTABLE_INT),
        .I1(Q[6]),
        .I2(Q[5]),
        .I3(FALSE_K_i_2_n_0),
        .I4(FALSE_K_i_3_n_0),
        .O(FALSE_K0));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT4 #(
    .INIT(16'hFFF7)) 
    FALSE_K_i_2
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[1]),
        .I3(Q[0]),
        .O(FALSE_K_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    FALSE_K_i_3
       (.I0(Q[7]),
        .I1(Q[4]),
        .I2(RXCHARISK_REG1_reg_0),
        .O(FALSE_K_i_3_n_0));
  FDRE FALSE_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_K0),
        .Q(FALSE_K),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    FALSE_NIT_i_3
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(Q[4]),
        .I4(Q[6]),
        .I5(Q[5]),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ));
  FDRE FALSE_NIT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_NIT0),
        .Q(FALSE_NIT),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    FROM_IDLE_D_i_1
       (.I0(K28p5_REG1),
        .I1(RX_IDLE),
        .I2(WAIT_FOR_K),
        .I3(RX_INVALID_reg_0),
        .O(FROM_IDLE_D0));
  FDRE FROM_IDLE_D_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_IDLE_D0),
        .Q(FROM_IDLE_D),
        .R(SYNC_STATUS_REG0));
  LUT6 #(
    .INIT(64'hFFFFA8FFFCFCA8A8)) 
    FROM_RX_CX_i_1
       (.I0(RXCHARISK_REG1),
        .I1(C_REG1),
        .I2(C_REG2),
        .I3(RX_DATA_ERROR_i_3_n_0),
        .I4(CGBAD),
        .I5(C_REG3),
        .O(FROM_RX_CX0));
  FDRE FROM_RX_CX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_CX0),
        .Q(FROM_RX_CX),
        .R(SYNC_STATUS_REG0));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT4 #(
    .INIT(16'h00E0)) 
    FROM_RX_K_i_1
       (.I0(RXCHARISK_REG1),
        .I1(CGBAD),
        .I2(K28p5_REG2),
        .I3(RX_INVALID_reg_0),
        .O(FROM_RX_K0));
  FDRE FROM_RX_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_K0),
        .Q(FROM_RX_K),
        .R(SYNC_STATUS_REG0));
  FDRE \IDLE_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(\IDLE_REG_reg_n_0_[0] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \IDLE_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IDLE_REG_reg_n_0_[0] ),
        .Q(p_0_in1_in),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \IDLE_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in1_in),
        .Q(\IDLE_REG_reg_n_0_[2] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K),
        .Q(ILLEGAL_K_REG1),
        .R(SYNC_STATUS_REG0));
  FDRE ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K_REG1),
        .Q(ILLEGAL_K_REG2),
        .R(SYNC_STATUS_REG0));
  LUT4 #(
    .INIT(16'h0010)) 
    ILLEGAL_K_i_1
       (.I0(R),
        .I1(K28p5_REG1),
        .I2(RXCHARISK_REG1),
        .I3(T),
        .O(ILLEGAL_K0));
  FDRE ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K0),
        .Q(ILLEGAL_K),
        .R(SYNC_STATUS_REG0));
  FDRE I_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I),
        .Q(RX_IDLE),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h20200020)) 
    I_i_1
       (.I0(I_i_2_n_0),
        .I1(I_i_3_n_0),
        .I2(RXEVEN0_out),
        .I3(RXCHARISK_REG1_reg_0),
        .I4(RX_INVALID_reg_0),
        .O(I0));
  LUT6 #(
    .INIT(64'hFFFEAAAAAAAAAAAA)) 
    I_i_2
       (.I0(K28p5_REG1),
        .I1(FALSE_NIT),
        .I2(FALSE_K),
        .I3(FALSE_DATA),
        .I4(RX_IDLE),
        .I5(RX_INVALID_reg_0),
        .O(I_i_2_n_0));
  LUT6 #(
    .INIT(64'h0400FFFF04000400)) 
    I_i_3
       (.I0(FALSE_DATA_i_3_n_0),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(I_i_4_n_0),
        .I4(I_i_5_n_0),
        .I5(I_i_6_n_0),
        .O(I_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    I_i_4
       (.I0(Q[4]),
        .I1(RXCHARISK_REG1_reg_0),
        .I2(Q[3]),
        .I3(Q[2]),
        .O(I_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT5 #(
    .INIT(32'hFFFFFDFF)) 
    I_i_5
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(RXCHARISK_REG1_reg_0),
        .O(I_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    I_i_6
       (.I0(Q[6]),
        .I1(Q[5]),
        .I2(Q[7]),
        .I3(Q[4]),
        .O(I_i_6_n_0));
  FDRE I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I0),
        .Q(I),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000800000)) 
    K28p5_REG1_i_1
       (.I0(Q[4]),
        .I1(Q[7]),
        .I2(Q[5]),
        .I3(Q[6]),
        .I4(RXCHARISK_REG1_reg_0),
        .I5(FALSE_K_i_2_n_0),
        .O(K28p5));
  FDRE K28p5_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5),
        .Q(K28p5_REG1),
        .R(1'b0));
  FDRE K28p5_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5_REG1),
        .Q(K28p5_REG2),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hBA)) 
    RECEIVED_IDLE_i_1
       (.I0(RX_IDLE),
        .I1(RX_CONFIG_VALID),
        .I2(RECEIVED_IDLE),
        .O(I_REG_reg_0));
  LUT3 #(
    .INIT(8'hDC)) 
    RECEIVE_i_1
       (.I0(EOP),
        .I1(SOP_REG2),
        .I2(RECEIVE),
        .O(RECEIVE_i_1_n_0));
  FDRE RECEIVE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RECEIVE_i_1_n_0),
        .Q(RECEIVE),
        .R(SYNC_STATUS_REG0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RUDI_C0
       (.I0(p_0_in2_in),
        .I1(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .I2(p_1_in),
        .I3(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .O(RUDI_C0__0));
  FDRE RUDI_C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_C0__0),
        .Q(status_vector_ch0[0]),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    RUDI_I_i_1
       (.I0(\IDLE_REG_reg_n_0_[2] ),
        .I1(p_0_in1_in),
        .O(RUDI_I0));
  FDRE RUDI_I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_I0),
        .Q(status_vector_ch0[1]),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE RXCHARISK_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISK_REG1_reg_0),
        .Q(RXCHARISK_REG1),
        .R(1'b0));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[0]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[0]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[0]),
        .Q(RXDATA_REG5[0]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[1]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[1]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[1]),
        .Q(RXDATA_REG5[1]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[2]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[2]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[2]),
        .Q(RXDATA_REG5[2]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[3]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[3]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[3]),
        .Q(RXDATA_REG5[3]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[4]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[4]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[4]),
        .Q(RXDATA_REG5[4]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[5]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[5]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[5]),
        .Q(RXDATA_REG5[5]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[6]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[6]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[6]),
        .Q(RXDATA_REG5[6]));
  (* srl_bus_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/quadsgmii_0_TEST_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[7]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[7]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[7]),
        .Q(RXDATA_REG5[7]));
  LUT4 #(
    .INIT(16'hBBBA)) 
    \RXD[0]_i_1 
       (.I0(SOP_REG3),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(RXDATA_REG5[0]),
        .O(\RXD[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT4 #(
    .INIT(16'h5554)) 
    \RXD[1]_i_1 
       (.I0(SOP_REG3),
        .I1(RXDATA_REG5[1]),
        .I2(FALSE_CARRIER_REG3),
        .I3(EXTEND_REG1),
        .O(\RXD[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \RXD[2]_i_1 
       (.I0(RXDATA_REG5[2]),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(SOP_REG3),
        .O(\RXD[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT4 #(
    .INIT(16'h5554)) 
    \RXD[3]_i_1 
       (.I0(SOP_REG3),
        .I1(RXDATA_REG5[3]),
        .I2(FALSE_CARRIER_REG3),
        .I3(EXTEND_REG1),
        .O(\RXD[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT5 #(
    .INIT(32'hBABBBAAA)) 
    \RXD[4]_i_1 
       (.I0(SOP_REG3),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_ERR),
        .I3(EXTEND_REG1),
        .I4(RXDATA_REG5[4]),
        .O(\RXD[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[5]_i_1 
       (.I0(RXDATA_REG5[5]),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(SOP_REG3),
        .O(\RXD[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT4 #(
    .INIT(16'hABAA)) 
    \RXD[6]_i_1 
       (.I0(SOP_REG3),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(RXDATA_REG5[6]),
        .O(\RXD[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[7]_i_1 
       (.I0(RXDATA_REG5[7]),
        .I1(FALSE_CARRIER_REG3),
        .I2(EXTEND_REG1),
        .I3(SOP_REG3),
        .O(\RXD[7]_i_1_n_0 ));
  FDRE \RXD_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[0]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[0]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[1]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[1]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[2]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[2]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[3]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[3]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[4]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[4]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[5]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[5]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[6]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[6]),
        .R(\RXD_reg[7]_0 ));
  FDRE \RXD_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[7]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[7]),
        .R(\RXD_reg[7]_0 ));
  LUT4 #(
    .INIT(16'h000E)) 
    \RX_CONFIG_REG[15]_i_1 
       (.I0(C_REG1),
        .I1(C_HDR_REMOVED_REG),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(RXCHARISK_REG1),
        .O(\RX_CONFIG_REG[15]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h55550040)) 
    \RX_CONFIG_REG[7]_i_1 
       (.I0(RXCHARISK_REG1_reg_0),
        .I1(C_REG2),
        .I2(\RX_CONFIG_REG_reg[7]_0 [0]),
        .I3(\RX_CONFIG_REG_reg[7]_0 [1]),
        .I4(C),
        .O(\RX_CONFIG_REG[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0004FFFF00040000)) 
    RX_CONFIG_REG_NULL_i_1
       (.I0(RX_CONFIG_REG_NULL_i_2_n_0),
        .I1(RX_CONFIG_REG_NULL_i_3_n_0),
        .I2(RX_CONFIG_REG_NULL_i_4_n_0),
        .I3(RX_CONFIG_REG_NULL_i_5_n_0),
        .I4(RX_CONFIG_VALID),
        .I5(RX_CONFIG_REG_NULL_reg),
        .O(RX_CONFIG_VALID_INT_reg_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_CONFIG_REG_NULL_i_2
       (.I0(\RX_CONFIG_REG_reg[15]_0 [5]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [4]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [10]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [14]),
        .O(RX_CONFIG_REG_NULL_i_2_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    RX_CONFIG_REG_NULL_i_3
       (.I0(\RX_CONFIG_REG_reg[15]_0 [9]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [8]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [13]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [11]),
        .O(RX_CONFIG_REG_NULL_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_CONFIG_REG_NULL_i_4
       (.I0(\RX_CONFIG_REG_reg[15]_0 [0]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [15]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [7]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [1]),
        .O(RX_CONFIG_REG_NULL_i_4_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_CONFIG_REG_NULL_i_5
       (.I0(\RX_CONFIG_REG_reg[15]_0 [6]),
        .I1(\RX_CONFIG_REG_reg[15]_0 [3]),
        .I2(\RX_CONFIG_REG_reg[15]_0 [12]),
        .I3(\RX_CONFIG_REG_reg[15]_0 [2]),
        .O(RX_CONFIG_REG_NULL_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \RX_CONFIG_REG_REG[15]_i_1 
       (.I0(out),
        .I1(RX_IDLE),
        .O(SR));
  FDRE \RX_CONFIG_REG_reg[0] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [0]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[10] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [10]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[11] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [11]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[12] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [12]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[13] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [13]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[14] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [14]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[15] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [15]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[1] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [1]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[2] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [2]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[3] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [3]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[4] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [4]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[5] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [5]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[6] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [6]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[7] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [7]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[8] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [8]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[9] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_reg[15]_0 [9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000000E000000)) 
    RX_CONFIG_VALID_INT_i_1
       (.I0(C_REG1),
        .I1(C_HDR_REMOVED_REG),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(RXSYNC_STATUS),
        .I4(RX_CONFIG_VALID_INT_i_2_n_0),
        .I5(S2),
        .O(RX_CONFIG_VALID_INT0));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT2 #(
    .INIT(4'h1)) 
    RX_CONFIG_VALID_INT_i_2
       (.I0(RXCHARISK_REG1),
        .I1(CGBAD),
        .O(RX_CONFIG_VALID_INT_i_2_n_0));
  FDRE RX_CONFIG_VALID_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT0),
        .Q(RX_CONFIG_VALID),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .Q(p_0_in2_in),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in2_in),
        .Q(p_1_in),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE \RX_CONFIG_VALID_REG_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_1_in),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h888AAAAA88888888)) 
    RX_DATA_ERROR_i_1
       (.I0(RECEIVE),
        .I1(RX_DATA_ERROR_i_2_n_0),
        .I2(R),
        .I3(RX_DATA_ERROR_i_3_n_0),
        .I4(R_REG1),
        .I5(T_REG2),
        .O(RX_DATA_ERROR0));
  LUT5 #(
    .INIT(32'hFFFF4544)) 
    RX_DATA_ERROR_i_2
       (.I0(R_REG1),
        .I1(K28p5_REG1),
        .I2(T_REG1),
        .I3(R),
        .I4(RX_DATA_ERROR_i_4_n_0),
        .O(RX_DATA_ERROR_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT2 #(
    .INIT(4'h8)) 
    RX_DATA_ERROR_i_3
       (.I0(K28p5_REG1),
        .I1(RXEVEN0_out),
        .O(RX_DATA_ERROR_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    RX_DATA_ERROR_i_4
       (.I0(CGBAD_REG3),
        .I1(RX_IDLE),
        .I2(ILLEGAL_K_REG2),
        .I3(C_REG1),
        .O(RX_DATA_ERROR_i_4_n_0));
  FDRE RX_DATA_ERROR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DATA_ERROR0),
        .Q(RX_DATA_ERROR),
        .R(SYNC_STATUS_REG0));
  LUT6 #(
    .INIT(64'hAAAAEEEAAAAAAAAA)) 
    RX_DV_i_1
       (.I0(RX_DV0),
        .I1(XMIT_DATA),
        .I2(RECEIVE),
        .I3(RXSYNC_STATUS),
        .I4(EOP_REG1),
        .I5(gmii_rx_dv_ch0),
        .O(RX_DV_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_DV_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DV_i_1_n_0),
        .Q(gmii_rx_dv_ch0),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT2 #(
    .INIT(4'h1)) 
    RX_ER_i_2
       (.I0(FALSE_CARRIER_REG3),
        .I1(EXTEND_REG1),
        .O(FALSE_CARRIER_REG3_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_ER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_ER0),
        .Q(gmii_rx_er_ch0),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFFFF55FDFFFF00FC)) 
    RX_INVALID_i_1
       (.I0(K28p5_REG1),
        .I1(FROM_RX_K),
        .I2(FROM_IDLE_D),
        .I3(RX_INVALID_reg_0),
        .I4(FROM_RX_CX),
        .I5(RX_INVALID),
        .O(RX_INVALID_i_1_n_0));
  FDRE RX_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_INVALID_i_1_n_0),
        .Q(RX_INVALID),
        .R(SYNC_STATUS_REG0));
  FDRE R_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R),
        .Q(R_REG1),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    R_i_1
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .I4(Q[2]),
        .O(K23p7));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    R_i_2
       (.I0(Q[5]),
        .I1(Q[6]),
        .I2(RXCHARISK_REG1_reg_0),
        .I3(Q[4]),
        .I4(Q[7]),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K23p7),
        .Q(R),
        .R(1'b0));
  FDRE SOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP),
        .Q(SOP_REG1),
        .R(1'b0));
  FDRE SOP_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG1),
        .Q(SOP_REG2),
        .R(1'b0));
  FDRE SOP_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG2),
        .Q(SOP_REG3),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00A80000)) 
    SOP_i_1
       (.I0(RX_INVALID_reg_0),
        .I1(RX_IDLE),
        .I2(EXTEND),
        .I3(WAIT_FOR_K),
        .I4(S),
        .O(SOP0));
  FDRE SOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP0),
        .Q(SOP),
        .R(\RX_CONFIG_VALID_REG_reg[0]_0 ));
  FDRE SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(SYNC_STATUS_REG),
        .R(SYNC_STATUS_REG0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S),
        .R(1'b0));
  FDRE T_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T),
        .Q(T_REG1),
        .R(1'b0));
  FDRE T_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T_REG1),
        .Q(T_REG2),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    T_i_1__0
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] ),
        .I1(Q[2]),
        .I2(Q[3]),
        .I3(Q[1]),
        .I4(Q[0]),
        .O(K29p7));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K29p7),
        .Q(T),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h7F0F)) 
    WAIT_FOR_K_i_1
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .I2(SYNC_STATUS_REG),
        .I3(WAIT_FOR_K),
        .O(WAIT_FOR_K_i_1_n_0));
  FDRE WAIT_FOR_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(WAIT_FOR_K_i_1_n_0),
        .Q(WAIT_FOR_K),
        .R(SYNC_STATUS_REG0));
endmodule

(* ORIG_REF_NAME = "SYNCHRONISE" *) 
module quadsgmii_0_TEST_SYNCHRONISE
   (RXSYNC_STATUS,
    RXEVEN0_out,
    ENABLEALIGN,
    SYNC_STATUS_REG0,
    \MGT_RESET.SRESET_reg ,
    SIGNAL_DETECT_MOD,
    userclk,
    EVEN_reg_0,
    \GOOD_CGS_reg[1]_0 ,
    LOOPBACK,
    \FSM_onehot_STATE_reg[2]_0 ,
    \FSM_onehot_STATE_reg[2]_1 ,
    \GOOD_CGS_reg[1]_1 ,
    RXNOTINTABLE_INT,
    RUNDISP_EN,
    RXDISPERR_INT,
    S2,
    out);
  output RXSYNC_STATUS;
  output RXEVEN0_out;
  output ENABLEALIGN;
  output SYNC_STATUS_REG0;
  output \MGT_RESET.SRESET_reg ;
  input SIGNAL_DETECT_MOD;
  input userclk;
  input EVEN_reg_0;
  input \GOOD_CGS_reg[1]_0 ;
  input LOOPBACK;
  input \FSM_onehot_STATE_reg[2]_0 ;
  input \FSM_onehot_STATE_reg[2]_1 ;
  input \GOOD_CGS_reg[1]_1 ;
  input RXNOTINTABLE_INT;
  input RUNDISP_EN;
  input RXDISPERR_INT;
  input S2;
  input out;

  wire ENABLEALIGN;
  wire EVEN_i_1__6_n_0;
  wire EVEN_reg_0;
  wire \FSM_onehot_STATE[0]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[10]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[11]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[12]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[12]_i_2__2_n_0 ;
  wire \FSM_onehot_STATE[12]_i_4__2_n_0 ;
  wire \FSM_onehot_STATE[1]_i_1__6_n_0 ;
  wire \FSM_onehot_STATE[2]_i_1__6_n_0 ;
  wire \FSM_onehot_STATE[2]_i_2__2_n_0 ;
  wire \FSM_onehot_STATE[2]_i_3__2_n_0 ;
  wire \FSM_onehot_STATE[3]_i_1__5_n_0 ;
  wire \FSM_onehot_STATE[4]_i_1__5_n_0 ;
  wire \FSM_onehot_STATE[5]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[6]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[7]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[8]_i_1__6_n_0 ;
  wire \FSM_onehot_STATE[9]_i_1__6_n_0 ;
  wire \FSM_onehot_STATE_reg[2]_0 ;
  wire \FSM_onehot_STATE_reg[2]_1 ;
  wire \FSM_onehot_STATE_reg_n_0_[0] ;
  wire \FSM_onehot_STATE_reg_n_0_[10] ;
  wire \FSM_onehot_STATE_reg_n_0_[11] ;
  wire \FSM_onehot_STATE_reg_n_0_[12] ;
  wire \FSM_onehot_STATE_reg_n_0_[1] ;
  wire \FSM_onehot_STATE_reg_n_0_[2] ;
  wire \FSM_onehot_STATE_reg_n_0_[4] ;
  wire \FSM_onehot_STATE_reg_n_0_[5] ;
  wire \FSM_onehot_STATE_reg_n_0_[6] ;
  wire \FSM_onehot_STATE_reg_n_0_[8] ;
  wire \FSM_onehot_STATE_reg_n_0_[9] ;
  wire [1:0]GOOD_CGS;
  wire \GOOD_CGS[0]_i_1__2_n_0 ;
  wire \GOOD_CGS[1]_i_1__2_n_0 ;
  wire \GOOD_CGS[1]_i_2__2_n_0 ;
  wire \GOOD_CGS[1]_i_3__2_n_0 ;
  wire \GOOD_CGS_reg[1]_0 ;
  wire \GOOD_CGS_reg[1]_1 ;
  wire LOOPBACK;
  wire \MGT_RESET.SRESET_reg ;
  wire RUNDISP_EN;
  wire RXDISPERR_INT;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXSYNC_STATUS;
  wire S2;
  wire SIGNAL_DETECT_MOD;
  wire SIGNAL_DETECT_REG;
  wire SYNC_STATUS0;
  wire SYNC_STATUS_REG0;
  wire SYNC_STATUS_i_2__2_n_0;
  wire out;
  wire p_0_in;
  wire p_1_in;
  wire userclk;

  FDRE ENCOMMAALIGN_reg
       (.C(userclk),
        .CE(SYNC_STATUS_i_2__2_n_0),
        .D(SYNC_STATUS_i_2__2_n_0),
        .Q(ENABLEALIGN),
        .R(SYNC_STATUS0));
  (* SOFT_HLUTNM = "soft_lutpair320" *) 
  LUT3 #(
    .INIT(8'h4F)) 
    EVEN_i_1__6
       (.I0(RXSYNC_STATUS),
        .I1(\GOOD_CGS_reg[1]_0 ),
        .I2(RXEVEN0_out),
        .O(EVEN_i_1__6_n_0));
  FDRE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__6_n_0),
        .Q(RXEVEN0_out),
        .R(EVEN_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair319" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \FSM_onehot_STATE[0]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I1(RXEVEN0_out),
        .I2(S2),
        .I3(\GOOD_CGS_reg[1]_0 ),
        .O(\FSM_onehot_STATE[0]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_STATE[10]_i_1__2 
       (.I0(\GOOD_CGS_reg[1]_0 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .O(\FSM_onehot_STATE[10]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair316" *) 
  LUT5 #(
    .INIT(32'h54554444)) 
    \FSM_onehot_STATE[11]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[11] ),
        .O(\FSM_onehot_STATE[11]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hAB)) 
    \FSM_onehot_STATE[12]_i_1__2 
       (.I0(EVEN_reg_0),
        .I1(SIGNAL_DETECT_REG),
        .I2(LOOPBACK),
        .O(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0F0F0F040F040F04)) 
    \FSM_onehot_STATE[12]_i_2__2 
       (.I0(\FSM_onehot_STATE_reg[2]_0 ),
        .I1(p_0_in),
        .I2(\FSM_onehot_STATE_reg[2]_1 ),
        .I3(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I4(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .I5(\FSM_onehot_STATE_reg_n_0_[11] ),
        .O(\FSM_onehot_STATE[12]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair316" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \FSM_onehot_STATE[12]_i_4__2 
       (.I0(GOOD_CGS[1]),
        .I1(GOOD_CGS[0]),
        .O(\FSM_onehot_STATE[12]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h000300BB000000AA)) 
    \FSM_onehot_STATE[1]_i_1__6 
       (.I0(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I1(\FSM_onehot_STATE_reg[2]_0 ),
        .I2(RXEVEN0_out),
        .I3(S2),
        .I4(\GOOD_CGS_reg[1]_0 ),
        .I5(\FSM_onehot_STATE_reg_n_0_[0] ),
        .O(\FSM_onehot_STATE[1]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEFEFE00)) 
    \FSM_onehot_STATE[2]_i_1__6 
       (.I0(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I2(p_0_in),
        .I3(\FSM_onehot_STATE_reg[2]_0 ),
        .I4(\FSM_onehot_STATE_reg[2]_1 ),
        .I5(\FSM_onehot_STATE[2]_i_2__2_n_0 ),
        .O(\FSM_onehot_STATE[2]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF4F44444444)) 
    \FSM_onehot_STATE[2]_i_2__2 
       (.I0(\GOOD_CGS_reg[1]_0 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I2(\FSM_onehot_STATE[2]_i_3__2_n_0 ),
        .I3(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I5(\FSM_onehot_STATE_reg[2]_1 ),
        .O(\FSM_onehot_STATE[2]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair318" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_onehot_STATE[2]_i_3__2 
       (.I0(p_1_in),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .O(\FSM_onehot_STATE[2]_i_3__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair319" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \FSM_onehot_STATE[3]_i_1__5 
       (.I0(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I1(RXEVEN0_out),
        .I2(S2),
        .I3(\GOOD_CGS_reg[1]_0 ),
        .O(\FSM_onehot_STATE[3]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h000010FF00001050)) 
    \FSM_onehot_STATE[4]_i_1__5 
       (.I0(\FSM_onehot_STATE_reg[2]_0 ),
        .I1(RXEVEN0_out),
        .I2(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I3(\GOOD_CGS_reg[1]_0 ),
        .I4(S2),
        .I5(\FSM_onehot_STATE_reg_n_0_[4] ),
        .O(\FSM_onehot_STATE[4]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair318" *) 
  LUT5 #(
    .INIT(32'h54554444)) 
    \FSM_onehot_STATE[5]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(p_1_in),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[5] ),
        .O(\FSM_onehot_STATE[5]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF0040404040)) 
    \FSM_onehot_STATE[6]_i_1__2 
       (.I0(GOOD_CGS[0]),
        .I1(GOOD_CGS[1]),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[11] ),
        .I5(\FSM_onehot_STATE_reg[2]_1 ),
        .O(\FSM_onehot_STATE[6]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair317" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \FSM_onehot_STATE[7]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[6] ),
        .O(\FSM_onehot_STATE[7]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair317" *) 
  LUT5 #(
    .INIT(32'h54554444)) 
    \FSM_onehot_STATE[8]_i_1__6 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[8]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \FSM_onehot_STATE[9]_i_1__6 
       (.I0(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I1(\FSM_onehot_STATE_reg[2]_1 ),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[9]_i_1__6_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[0]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[0] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[10]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[10] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[11]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[11] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[12]_i_2__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[12] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[1]_i_1__6_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[1] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[2]_i_1__6_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[2] ),
        .S(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[3]_i_1__5_n_0 ),
        .Q(p_0_in),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[4]_i_1__5_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[4] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[5]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[5] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[6]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[6] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[7]_i_1__2_n_0 ),
        .Q(p_1_in),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[8]_i_1__6_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[8] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[9]_i_1__6_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[9] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair321" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \GOOD_CGS[0]_i_1__2 
       (.I0(GOOD_CGS[0]),
        .O(\GOOD_CGS[0]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \GOOD_CGS[1]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I1(EVEN_reg_0),
        .I2(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I3(p_1_in),
        .O(\GOOD_CGS[1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0001010100030303)) 
    \GOOD_CGS[1]_i_2__2 
       (.I0(RXEVEN0_out),
        .I1(\GOOD_CGS_reg[1]_1 ),
        .I2(RXNOTINTABLE_INT),
        .I3(RUNDISP_EN),
        .I4(RXDISPERR_INT),
        .I5(\GOOD_CGS_reg[1]_0 ),
        .O(\GOOD_CGS[1]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair321" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \GOOD_CGS[1]_i_3__2 
       (.I0(GOOD_CGS[1]),
        .I1(GOOD_CGS[0]),
        .O(\GOOD_CGS[1]_i_3__2_n_0 ));
  FDRE \GOOD_CGS_reg[0] 
       (.C(userclk),
        .CE(\GOOD_CGS[1]_i_2__2_n_0 ),
        .D(\GOOD_CGS[0]_i_1__2_n_0 ),
        .Q(GOOD_CGS[0]),
        .R(\GOOD_CGS[1]_i_1__2_n_0 ));
  FDRE \GOOD_CGS_reg[1] 
       (.C(userclk),
        .CE(\GOOD_CGS[1]_i_2__2_n_0 ),
        .D(\GOOD_CGS[1]_i_3__2_n_0 ),
        .Q(GOOD_CGS[1]),
        .R(\GOOD_CGS[1]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    RX_RUDI_INVALID_REG_i_1__2
       (.I0(out),
        .I1(RXSYNC_STATUS),
        .O(\MGT_RESET.SRESET_reg ));
  FDRE SIGNAL_DETECT_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SIGNAL_DETECT_MOD),
        .Q(SIGNAL_DETECT_REG),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair320" *) 
  LUT2 #(
    .INIT(4'hB)) 
    SYNC_STATUS_REG_i_1__2
       (.I0(EVEN_reg_0),
        .I1(RXSYNC_STATUS),
        .O(SYNC_STATUS_REG0));
  LUT3 #(
    .INIT(8'h02)) 
    SYNC_STATUS_i_1__2
       (.I0(p_0_in),
        .I1(\FSM_onehot_STATE_reg[2]_1 ),
        .I2(\FSM_onehot_STATE_reg[2]_0 ),
        .O(SYNC_STATUS0));
  LUT4 #(
    .INIT(16'hFEAA)) 
    SYNC_STATUS_i_2__2
       (.I0(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I1(p_1_in),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(\FSM_onehot_STATE_reg[2]_1 ),
        .O(SYNC_STATUS_i_2__2_n_0));
  FDSE #(
    .INIT(1'b0)) 
    SYNC_STATUS_reg
       (.C(userclk),
        .CE(SYNC_STATUS_i_2__2_n_0),
        .D(1'b0),
        .Q(RXSYNC_STATUS),
        .S(SYNC_STATUS0));
endmodule

(* ORIG_REF_NAME = "SYNCHRONISE" *) 
module quadsgmii_0_TEST_SYNCHRONISE_159
   (RXSYNC_STATUS,
    RXEVEN0_out,
    ENABLEALIGN,
    SYNC_STATUS_REG0,
    \MGT_RESET.SRESET_reg ,
    SIGNAL_DETECT_MOD,
    userclk,
    EVEN_reg_0,
    \GOOD_CGS_reg[1]_0 ,
    LOOPBACK,
    \FSM_onehot_STATE_reg[2]_0 ,
    \FSM_onehot_STATE_reg[2]_1 ,
    \GOOD_CGS_reg[1]_1 ,
    RXNOTINTABLE_INT,
    RUNDISP_EN,
    RXDISPERR_INT,
    S2,
    out);
  output RXSYNC_STATUS;
  output RXEVEN0_out;
  output ENABLEALIGN;
  output SYNC_STATUS_REG0;
  output \MGT_RESET.SRESET_reg ;
  input SIGNAL_DETECT_MOD;
  input userclk;
  input EVEN_reg_0;
  input \GOOD_CGS_reg[1]_0 ;
  input LOOPBACK;
  input \FSM_onehot_STATE_reg[2]_0 ;
  input \FSM_onehot_STATE_reg[2]_1 ;
  input \GOOD_CGS_reg[1]_1 ;
  input RXNOTINTABLE_INT;
  input RUNDISP_EN;
  input RXDISPERR_INT;
  input S2;
  input out;

  wire ENABLEALIGN;
  wire EVEN_i_1__5_n_0;
  wire EVEN_reg_0;
  wire \FSM_onehot_STATE[0]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[10]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[11]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[12]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[12]_i_2__1_n_0 ;
  wire \FSM_onehot_STATE[12]_i_4__1_n_0 ;
  wire \FSM_onehot_STATE[1]_i_1__4_n_0 ;
  wire \FSM_onehot_STATE[2]_i_1__4_n_0 ;
  wire \FSM_onehot_STATE[2]_i_2__1_n_0 ;
  wire \FSM_onehot_STATE[2]_i_3__1_n_0 ;
  wire \FSM_onehot_STATE[3]_i_1__3_n_0 ;
  wire \FSM_onehot_STATE[4]_i_1__3_n_0 ;
  wire \FSM_onehot_STATE[5]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[6]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[7]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[8]_i_1__4_n_0 ;
  wire \FSM_onehot_STATE[9]_i_1__4_n_0 ;
  wire \FSM_onehot_STATE_reg[2]_0 ;
  wire \FSM_onehot_STATE_reg[2]_1 ;
  wire \FSM_onehot_STATE_reg_n_0_[0] ;
  wire \FSM_onehot_STATE_reg_n_0_[10] ;
  wire \FSM_onehot_STATE_reg_n_0_[11] ;
  wire \FSM_onehot_STATE_reg_n_0_[12] ;
  wire \FSM_onehot_STATE_reg_n_0_[1] ;
  wire \FSM_onehot_STATE_reg_n_0_[2] ;
  wire \FSM_onehot_STATE_reg_n_0_[4] ;
  wire \FSM_onehot_STATE_reg_n_0_[5] ;
  wire \FSM_onehot_STATE_reg_n_0_[6] ;
  wire \FSM_onehot_STATE_reg_n_0_[8] ;
  wire \FSM_onehot_STATE_reg_n_0_[9] ;
  wire [1:0]GOOD_CGS;
  wire \GOOD_CGS[0]_i_1__1_n_0 ;
  wire \GOOD_CGS[1]_i_1__1_n_0 ;
  wire \GOOD_CGS[1]_i_2__1_n_0 ;
  wire \GOOD_CGS[1]_i_3__1_n_0 ;
  wire \GOOD_CGS_reg[1]_0 ;
  wire \GOOD_CGS_reg[1]_1 ;
  wire LOOPBACK;
  wire \MGT_RESET.SRESET_reg ;
  wire RUNDISP_EN;
  wire RXDISPERR_INT;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXSYNC_STATUS;
  wire S2;
  wire SIGNAL_DETECT_MOD;
  wire SIGNAL_DETECT_REG;
  wire SYNC_STATUS0;
  wire SYNC_STATUS_REG0;
  wire SYNC_STATUS_i_2__1_n_0;
  wire out;
  wire p_0_in;
  wire p_1_in;
  wire userclk;

  FDRE ENCOMMAALIGN_reg
       (.C(userclk),
        .CE(SYNC_STATUS_i_2__1_n_0),
        .D(SYNC_STATUS_i_2__1_n_0),
        .Q(ENABLEALIGN),
        .R(SYNC_STATUS0));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT3 #(
    .INIT(8'h4F)) 
    EVEN_i_1__5
       (.I0(RXSYNC_STATUS),
        .I1(\GOOD_CGS_reg[1]_0 ),
        .I2(RXEVEN0_out),
        .O(EVEN_i_1__5_n_0));
  FDRE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__5_n_0),
        .Q(RXEVEN0_out),
        .R(EVEN_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \FSM_onehot_STATE[0]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I1(RXEVEN0_out),
        .I2(S2),
        .I3(\GOOD_CGS_reg[1]_0 ),
        .O(\FSM_onehot_STATE[0]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_STATE[10]_i_1__1 
       (.I0(\GOOD_CGS_reg[1]_0 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .O(\FSM_onehot_STATE[10]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT5 #(
    .INIT(32'h54554444)) 
    \FSM_onehot_STATE[11]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[11] ),
        .O(\FSM_onehot_STATE[11]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hAB)) 
    \FSM_onehot_STATE[12]_i_1__1 
       (.I0(EVEN_reg_0),
        .I1(SIGNAL_DETECT_REG),
        .I2(LOOPBACK),
        .O(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0F0F0F040F040F04)) 
    \FSM_onehot_STATE[12]_i_2__1 
       (.I0(\FSM_onehot_STATE_reg[2]_0 ),
        .I1(p_0_in),
        .I2(\FSM_onehot_STATE_reg[2]_1 ),
        .I3(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I4(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .I5(\FSM_onehot_STATE_reg_n_0_[11] ),
        .O(\FSM_onehot_STATE[12]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \FSM_onehot_STATE[12]_i_4__1 
       (.I0(GOOD_CGS[1]),
        .I1(GOOD_CGS[0]),
        .O(\FSM_onehot_STATE[12]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h000300BB000000AA)) 
    \FSM_onehot_STATE[1]_i_1__4 
       (.I0(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I1(\FSM_onehot_STATE_reg[2]_0 ),
        .I2(RXEVEN0_out),
        .I3(S2),
        .I4(\GOOD_CGS_reg[1]_0 ),
        .I5(\FSM_onehot_STATE_reg_n_0_[0] ),
        .O(\FSM_onehot_STATE[1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEFEFE00)) 
    \FSM_onehot_STATE[2]_i_1__4 
       (.I0(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I2(p_0_in),
        .I3(\FSM_onehot_STATE_reg[2]_0 ),
        .I4(\FSM_onehot_STATE_reg[2]_1 ),
        .I5(\FSM_onehot_STATE[2]_i_2__1_n_0 ),
        .O(\FSM_onehot_STATE[2]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF4F44444444)) 
    \FSM_onehot_STATE[2]_i_2__1 
       (.I0(\GOOD_CGS_reg[1]_0 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I2(\FSM_onehot_STATE[2]_i_3__1_n_0 ),
        .I3(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I5(\FSM_onehot_STATE_reg[2]_1 ),
        .O(\FSM_onehot_STATE[2]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_onehot_STATE[2]_i_3__1 
       (.I0(p_1_in),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .O(\FSM_onehot_STATE[2]_i_3__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \FSM_onehot_STATE[3]_i_1__3 
       (.I0(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I1(RXEVEN0_out),
        .I2(S2),
        .I3(\GOOD_CGS_reg[1]_0 ),
        .O(\FSM_onehot_STATE[3]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h000010FF00001050)) 
    \FSM_onehot_STATE[4]_i_1__3 
       (.I0(\FSM_onehot_STATE_reg[2]_0 ),
        .I1(RXEVEN0_out),
        .I2(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I3(\GOOD_CGS_reg[1]_0 ),
        .I4(S2),
        .I5(\FSM_onehot_STATE_reg_n_0_[4] ),
        .O(\FSM_onehot_STATE[4]_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT5 #(
    .INIT(32'h54554444)) 
    \FSM_onehot_STATE[5]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(p_1_in),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[5] ),
        .O(\FSM_onehot_STATE[5]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF0040404040)) 
    \FSM_onehot_STATE[6]_i_1__1 
       (.I0(GOOD_CGS[0]),
        .I1(GOOD_CGS[1]),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[11] ),
        .I5(\FSM_onehot_STATE_reg[2]_1 ),
        .O(\FSM_onehot_STATE[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \FSM_onehot_STATE[7]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[6] ),
        .O(\FSM_onehot_STATE[7]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT5 #(
    .INIT(32'h54554444)) 
    \FSM_onehot_STATE[8]_i_1__4 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[8]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \FSM_onehot_STATE[9]_i_1__4 
       (.I0(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I1(\FSM_onehot_STATE_reg[2]_1 ),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[9]_i_1__4_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[0]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[0] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[10]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[10] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[11]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[11] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[12]_i_2__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[12] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[1]_i_1__4_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[1] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[2]_i_1__4_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[2] ),
        .S(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[3]_i_1__3_n_0 ),
        .Q(p_0_in),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[4]_i_1__3_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[4] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[5]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[5] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[6]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[6] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[7]_i_1__1_n_0 ),
        .Q(p_1_in),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[8]_i_1__4_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[8] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[9]_i_1__4_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[9] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \GOOD_CGS[0]_i_1__1 
       (.I0(GOOD_CGS[0]),
        .O(\GOOD_CGS[0]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \GOOD_CGS[1]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I1(EVEN_reg_0),
        .I2(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I3(p_1_in),
        .O(\GOOD_CGS[1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0001010100030303)) 
    \GOOD_CGS[1]_i_2__1 
       (.I0(RXEVEN0_out),
        .I1(\GOOD_CGS_reg[1]_1 ),
        .I2(RXNOTINTABLE_INT),
        .I3(RUNDISP_EN),
        .I4(RXDISPERR_INT),
        .I5(\GOOD_CGS_reg[1]_0 ),
        .O(\GOOD_CGS[1]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \GOOD_CGS[1]_i_3__1 
       (.I0(GOOD_CGS[1]),
        .I1(GOOD_CGS[0]),
        .O(\GOOD_CGS[1]_i_3__1_n_0 ));
  FDRE \GOOD_CGS_reg[0] 
       (.C(userclk),
        .CE(\GOOD_CGS[1]_i_2__1_n_0 ),
        .D(\GOOD_CGS[0]_i_1__1_n_0 ),
        .Q(GOOD_CGS[0]),
        .R(\GOOD_CGS[1]_i_1__1_n_0 ));
  FDRE \GOOD_CGS_reg[1] 
       (.C(userclk),
        .CE(\GOOD_CGS[1]_i_2__1_n_0 ),
        .D(\GOOD_CGS[1]_i_3__1_n_0 ),
        .Q(GOOD_CGS[1]),
        .R(\GOOD_CGS[1]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    RX_RUDI_INVALID_REG_i_1__1
       (.I0(out),
        .I1(RXSYNC_STATUS),
        .O(\MGT_RESET.SRESET_reg ));
  FDRE SIGNAL_DETECT_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SIGNAL_DETECT_MOD),
        .Q(SIGNAL_DETECT_REG),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT2 #(
    .INIT(4'hB)) 
    SYNC_STATUS_REG_i_1__1
       (.I0(EVEN_reg_0),
        .I1(RXSYNC_STATUS),
        .O(SYNC_STATUS_REG0));
  LUT3 #(
    .INIT(8'h02)) 
    SYNC_STATUS_i_1__1
       (.I0(p_0_in),
        .I1(\FSM_onehot_STATE_reg[2]_1 ),
        .I2(\FSM_onehot_STATE_reg[2]_0 ),
        .O(SYNC_STATUS0));
  LUT4 #(
    .INIT(16'hFEAA)) 
    SYNC_STATUS_i_2__1
       (.I0(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I1(p_1_in),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(\FSM_onehot_STATE_reg[2]_1 ),
        .O(SYNC_STATUS_i_2__1_n_0));
  FDSE #(
    .INIT(1'b0)) 
    SYNC_STATUS_reg
       (.C(userclk),
        .CE(SYNC_STATUS_i_2__1_n_0),
        .D(1'b0),
        .Q(RXSYNC_STATUS),
        .S(SYNC_STATUS0));
endmodule

(* ORIG_REF_NAME = "SYNCHRONISE" *) 
module quadsgmii_0_TEST_SYNCHRONISE_171
   (RXSYNC_STATUS,
    RXEVEN0_out,
    ENABLEALIGN,
    SYNC_STATUS_REG0,
    \MGT_RESET.SRESET_reg ,
    SIGNAL_DETECT_MOD,
    userclk,
    EVEN_reg_0,
    \GOOD_CGS_reg[1]_0 ,
    LOOPBACK,
    \FSM_onehot_STATE_reg[2]_0 ,
    \FSM_onehot_STATE_reg[2]_1 ,
    \GOOD_CGS_reg[1]_1 ,
    RXNOTINTABLE_INT,
    RUNDISP_EN,
    RXDISPERR_INT,
    S2,
    out);
  output RXSYNC_STATUS;
  output RXEVEN0_out;
  output ENABLEALIGN;
  output SYNC_STATUS_REG0;
  output \MGT_RESET.SRESET_reg ;
  input SIGNAL_DETECT_MOD;
  input userclk;
  input EVEN_reg_0;
  input \GOOD_CGS_reg[1]_0 ;
  input LOOPBACK;
  input \FSM_onehot_STATE_reg[2]_0 ;
  input \FSM_onehot_STATE_reg[2]_1 ;
  input \GOOD_CGS_reg[1]_1 ;
  input RXNOTINTABLE_INT;
  input RUNDISP_EN;
  input RXDISPERR_INT;
  input S2;
  input out;

  wire ENABLEALIGN;
  wire EVEN_i_1__4_n_0;
  wire EVEN_reg_0;
  wire \FSM_onehot_STATE[0]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[10]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[11]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[12]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[12]_i_2__0_n_0 ;
  wire \FSM_onehot_STATE[12]_i_4__0_n_0 ;
  wire \FSM_onehot_STATE[1]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[2]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[2]_i_2__0_n_0 ;
  wire \FSM_onehot_STATE[2]_i_3__0_n_0 ;
  wire \FSM_onehot_STATE[3]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[4]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[5]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[6]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[7]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[8]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[9]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE_reg[2]_0 ;
  wire \FSM_onehot_STATE_reg[2]_1 ;
  wire \FSM_onehot_STATE_reg_n_0_[0] ;
  wire \FSM_onehot_STATE_reg_n_0_[10] ;
  wire \FSM_onehot_STATE_reg_n_0_[11] ;
  wire \FSM_onehot_STATE_reg_n_0_[12] ;
  wire \FSM_onehot_STATE_reg_n_0_[1] ;
  wire \FSM_onehot_STATE_reg_n_0_[2] ;
  wire \FSM_onehot_STATE_reg_n_0_[4] ;
  wire \FSM_onehot_STATE_reg_n_0_[5] ;
  wire \FSM_onehot_STATE_reg_n_0_[6] ;
  wire \FSM_onehot_STATE_reg_n_0_[8] ;
  wire \FSM_onehot_STATE_reg_n_0_[9] ;
  wire [1:0]GOOD_CGS;
  wire \GOOD_CGS[0]_i_1__0_n_0 ;
  wire \GOOD_CGS[1]_i_1__0_n_0 ;
  wire \GOOD_CGS[1]_i_2__0_n_0 ;
  wire \GOOD_CGS[1]_i_3__0_n_0 ;
  wire \GOOD_CGS_reg[1]_0 ;
  wire \GOOD_CGS_reg[1]_1 ;
  wire LOOPBACK;
  wire \MGT_RESET.SRESET_reg ;
  wire RUNDISP_EN;
  wire RXDISPERR_INT;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXSYNC_STATUS;
  wire S2;
  wire SIGNAL_DETECT_MOD;
  wire SIGNAL_DETECT_REG;
  wire SYNC_STATUS0;
  wire SYNC_STATUS_REG0;
  wire SYNC_STATUS_i_2__0_n_0;
  wire out;
  wire p_0_in;
  wire p_1_in;
  wire userclk;

  FDRE ENCOMMAALIGN_reg
       (.C(userclk),
        .CE(SYNC_STATUS_i_2__0_n_0),
        .D(SYNC_STATUS_i_2__0_n_0),
        .Q(ENABLEALIGN),
        .R(SYNC_STATUS0));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'h4F)) 
    EVEN_i_1__4
       (.I0(RXSYNC_STATUS),
        .I1(\GOOD_CGS_reg[1]_0 ),
        .I2(RXEVEN0_out),
        .O(EVEN_i_1__4_n_0));
  FDRE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__4_n_0),
        .Q(RXEVEN0_out),
        .R(EVEN_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \FSM_onehot_STATE[0]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I1(RXEVEN0_out),
        .I2(S2),
        .I3(\GOOD_CGS_reg[1]_0 ),
        .O(\FSM_onehot_STATE[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_STATE[10]_i_1__0 
       (.I0(\GOOD_CGS_reg[1]_0 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .O(\FSM_onehot_STATE[10]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT5 #(
    .INIT(32'h54554444)) 
    \FSM_onehot_STATE[11]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[11] ),
        .O(\FSM_onehot_STATE[11]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hAB)) 
    \FSM_onehot_STATE[12]_i_1__0 
       (.I0(EVEN_reg_0),
        .I1(SIGNAL_DETECT_REG),
        .I2(LOOPBACK),
        .O(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0F0F0F040F040F04)) 
    \FSM_onehot_STATE[12]_i_2__0 
       (.I0(\FSM_onehot_STATE_reg[2]_0 ),
        .I1(p_0_in),
        .I2(\FSM_onehot_STATE_reg[2]_1 ),
        .I3(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I4(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .I5(\FSM_onehot_STATE_reg_n_0_[11] ),
        .O(\FSM_onehot_STATE[12]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \FSM_onehot_STATE[12]_i_4__0 
       (.I0(GOOD_CGS[1]),
        .I1(GOOD_CGS[0]),
        .O(\FSM_onehot_STATE[12]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h000300BB000000AA)) 
    \FSM_onehot_STATE[1]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I1(\FSM_onehot_STATE_reg[2]_0 ),
        .I2(RXEVEN0_out),
        .I3(S2),
        .I4(\GOOD_CGS_reg[1]_0 ),
        .I5(\FSM_onehot_STATE_reg_n_0_[0] ),
        .O(\FSM_onehot_STATE[1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEFEFE00)) 
    \FSM_onehot_STATE[2]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I2(p_0_in),
        .I3(\FSM_onehot_STATE_reg[2]_0 ),
        .I4(\FSM_onehot_STATE_reg[2]_1 ),
        .I5(\FSM_onehot_STATE[2]_i_2__0_n_0 ),
        .O(\FSM_onehot_STATE[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF4F44444444)) 
    \FSM_onehot_STATE[2]_i_2__0 
       (.I0(\GOOD_CGS_reg[1]_0 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I2(\FSM_onehot_STATE[2]_i_3__0_n_0 ),
        .I3(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I5(\FSM_onehot_STATE_reg[2]_1 ),
        .O(\FSM_onehot_STATE[2]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_onehot_STATE[2]_i_3__0 
       (.I0(p_1_in),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .O(\FSM_onehot_STATE[2]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \FSM_onehot_STATE[3]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I1(RXEVEN0_out),
        .I2(S2),
        .I3(\GOOD_CGS_reg[1]_0 ),
        .O(\FSM_onehot_STATE[3]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h000010FF00001050)) 
    \FSM_onehot_STATE[4]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg[2]_0 ),
        .I1(RXEVEN0_out),
        .I2(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I3(\GOOD_CGS_reg[1]_0 ),
        .I4(S2),
        .I5(\FSM_onehot_STATE_reg_n_0_[4] ),
        .O(\FSM_onehot_STATE[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT5 #(
    .INIT(32'h54554444)) 
    \FSM_onehot_STATE[5]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(p_1_in),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[5] ),
        .O(\FSM_onehot_STATE[5]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF0040404040)) 
    \FSM_onehot_STATE[6]_i_1__0 
       (.I0(GOOD_CGS[0]),
        .I1(GOOD_CGS[1]),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[11] ),
        .I5(\FSM_onehot_STATE_reg[2]_1 ),
        .O(\FSM_onehot_STATE[6]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \FSM_onehot_STATE[7]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[6] ),
        .O(\FSM_onehot_STATE[7]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT5 #(
    .INIT(32'h54554444)) 
    \FSM_onehot_STATE[8]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[8]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \FSM_onehot_STATE[9]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I1(\FSM_onehot_STATE_reg[2]_1 ),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[9]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[0]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[0] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[10]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[10] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[11]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[11] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[12]_i_2__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[12] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[1]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[1] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[2]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[2] ),
        .S(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[3]_i_1__1_n_0 ),
        .Q(p_0_in),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[4]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[4] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[5]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[5] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[6]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[6] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[7]_i_1__0_n_0 ),
        .Q(p_1_in),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[8]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[8] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[9]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[9] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \GOOD_CGS[0]_i_1__0 
       (.I0(GOOD_CGS[0]),
        .O(\GOOD_CGS[0]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \GOOD_CGS[1]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I1(EVEN_reg_0),
        .I2(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I3(p_1_in),
        .O(\GOOD_CGS[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0001010100030303)) 
    \GOOD_CGS[1]_i_2__0 
       (.I0(RXEVEN0_out),
        .I1(\GOOD_CGS_reg[1]_1 ),
        .I2(RXNOTINTABLE_INT),
        .I3(RUNDISP_EN),
        .I4(RXDISPERR_INT),
        .I5(\GOOD_CGS_reg[1]_0 ),
        .O(\GOOD_CGS[1]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \GOOD_CGS[1]_i_3__0 
       (.I0(GOOD_CGS[1]),
        .I1(GOOD_CGS[0]),
        .O(\GOOD_CGS[1]_i_3__0_n_0 ));
  FDRE \GOOD_CGS_reg[0] 
       (.C(userclk),
        .CE(\GOOD_CGS[1]_i_2__0_n_0 ),
        .D(\GOOD_CGS[0]_i_1__0_n_0 ),
        .Q(GOOD_CGS[0]),
        .R(\GOOD_CGS[1]_i_1__0_n_0 ));
  FDRE \GOOD_CGS_reg[1] 
       (.C(userclk),
        .CE(\GOOD_CGS[1]_i_2__0_n_0 ),
        .D(\GOOD_CGS[1]_i_3__0_n_0 ),
        .Q(GOOD_CGS[1]),
        .R(\GOOD_CGS[1]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    RX_RUDI_INVALID_REG_i_1__0
       (.I0(out),
        .I1(RXSYNC_STATUS),
        .O(\MGT_RESET.SRESET_reg ));
  FDRE SIGNAL_DETECT_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SIGNAL_DETECT_MOD),
        .Q(SIGNAL_DETECT_REG),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT2 #(
    .INIT(4'hB)) 
    SYNC_STATUS_REG_i_1__0
       (.I0(EVEN_reg_0),
        .I1(RXSYNC_STATUS),
        .O(SYNC_STATUS_REG0));
  LUT3 #(
    .INIT(8'h02)) 
    SYNC_STATUS_i_1__0
       (.I0(p_0_in),
        .I1(\FSM_onehot_STATE_reg[2]_1 ),
        .I2(\FSM_onehot_STATE_reg[2]_0 ),
        .O(SYNC_STATUS0));
  LUT4 #(
    .INIT(16'hFEAA)) 
    SYNC_STATUS_i_2__0
       (.I0(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I1(p_1_in),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(\FSM_onehot_STATE_reg[2]_1 ),
        .O(SYNC_STATUS_i_2__0_n_0));
  FDSE #(
    .INIT(1'b0)) 
    SYNC_STATUS_reg
       (.C(userclk),
        .CE(SYNC_STATUS_i_2__0_n_0),
        .D(1'b0),
        .Q(RXSYNC_STATUS),
        .S(SYNC_STATUS0));
endmodule

(* ORIG_REF_NAME = "SYNCHRONISE" *) 
module quadsgmii_0_TEST_SYNCHRONISE_183
   (RXSYNC_STATUS,
    RXEVEN0_out,
    ENCOMMAALIGN_reg_0,
    SYNC_STATUS_REG0,
    \MGT_RESET.SRESET_reg ,
    SIGNAL_DETECT_MOD,
    userclk,
    EVEN_reg_0,
    \GOOD_CGS_reg[1]_0 ,
    LOOPBACK,
    \FSM_onehot_STATE_reg[2]_0 ,
    \FSM_onehot_STATE_reg[2]_1 ,
    \GOOD_CGS_reg[1]_1 ,
    RXNOTINTABLE_INT,
    RUNDISP_EN,
    RXDISPERR_INT,
    S2,
    out);
  output RXSYNC_STATUS;
  output RXEVEN0_out;
  output ENCOMMAALIGN_reg_0;
  output SYNC_STATUS_REG0;
  output \MGT_RESET.SRESET_reg ;
  input SIGNAL_DETECT_MOD;
  input userclk;
  input EVEN_reg_0;
  input \GOOD_CGS_reg[1]_0 ;
  input LOOPBACK;
  input \FSM_onehot_STATE_reg[2]_0 ;
  input \FSM_onehot_STATE_reg[2]_1 ;
  input \GOOD_CGS_reg[1]_1 ;
  input RXNOTINTABLE_INT;
  input RUNDISP_EN;
  input RXDISPERR_INT;
  input S2;
  input out;

  wire ENCOMMAALIGN_reg_0;
  wire EVEN_i_1__3_n_0;
  wire EVEN_reg_0;
  wire \FSM_onehot_STATE[0]_i_1_n_0 ;
  wire \FSM_onehot_STATE[10]_i_1_n_0 ;
  wire \FSM_onehot_STATE[11]_i_1_n_0 ;
  wire \FSM_onehot_STATE[12]_i_1_n_0 ;
  wire \FSM_onehot_STATE[12]_i_2_n_0 ;
  wire \FSM_onehot_STATE[12]_i_4_n_0 ;
  wire \FSM_onehot_STATE[1]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[2]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[2]_i_2_n_0 ;
  wire \FSM_onehot_STATE[2]_i_3_n_0 ;
  wire \FSM_onehot_STATE[3]_i_1_n_0 ;
  wire \FSM_onehot_STATE[4]_i_1_n_0 ;
  wire \FSM_onehot_STATE[5]_i_1_n_0 ;
  wire \FSM_onehot_STATE[6]_i_1_n_0 ;
  wire \FSM_onehot_STATE[7]_i_1_n_0 ;
  wire \FSM_onehot_STATE[8]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[9]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE_reg[2]_0 ;
  wire \FSM_onehot_STATE_reg[2]_1 ;
  wire \FSM_onehot_STATE_reg_n_0_[0] ;
  wire \FSM_onehot_STATE_reg_n_0_[10] ;
  wire \FSM_onehot_STATE_reg_n_0_[11] ;
  wire \FSM_onehot_STATE_reg_n_0_[12] ;
  wire \FSM_onehot_STATE_reg_n_0_[1] ;
  wire \FSM_onehot_STATE_reg_n_0_[2] ;
  wire \FSM_onehot_STATE_reg_n_0_[4] ;
  wire \FSM_onehot_STATE_reg_n_0_[5] ;
  wire \FSM_onehot_STATE_reg_n_0_[6] ;
  wire \FSM_onehot_STATE_reg_n_0_[8] ;
  wire \FSM_onehot_STATE_reg_n_0_[9] ;
  wire [1:0]GOOD_CGS;
  wire \GOOD_CGS[0]_i_1_n_0 ;
  wire \GOOD_CGS[1]_i_1_n_0 ;
  wire \GOOD_CGS[1]_i_2_n_0 ;
  wire \GOOD_CGS[1]_i_3_n_0 ;
  wire \GOOD_CGS_reg[1]_0 ;
  wire \GOOD_CGS_reg[1]_1 ;
  wire LOOPBACK;
  wire \MGT_RESET.SRESET_reg ;
  wire RUNDISP_EN;
  wire RXDISPERR_INT;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_INT;
  wire RXSYNC_STATUS;
  wire S2;
  wire SIGNAL_DETECT_MOD;
  wire SIGNAL_DETECT_REG;
  wire SYNC_STATUS0;
  wire SYNC_STATUS_REG0;
  wire SYNC_STATUS_i_2_n_0;
  wire out;
  wire p_0_in;
  wire p_1_in;
  wire userclk;

  FDRE ENCOMMAALIGN_reg
       (.C(userclk),
        .CE(SYNC_STATUS_i_2_n_0),
        .D(SYNC_STATUS_i_2_n_0),
        .Q(ENCOMMAALIGN_reg_0),
        .R(SYNC_STATUS0));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT3 #(
    .INIT(8'h4F)) 
    EVEN_i_1__3
       (.I0(RXSYNC_STATUS),
        .I1(\GOOD_CGS_reg[1]_0 ),
        .I2(RXEVEN0_out),
        .O(EVEN_i_1__3_n_0));
  FDRE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__3_n_0),
        .Q(RXEVEN0_out),
        .R(EVEN_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \FSM_onehot_STATE[0]_i_1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I1(RXEVEN0_out),
        .I2(S2),
        .I3(\GOOD_CGS_reg[1]_0 ),
        .O(\FSM_onehot_STATE[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_STATE[10]_i_1 
       (.I0(\GOOD_CGS_reg[1]_0 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .O(\FSM_onehot_STATE[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT5 #(
    .INIT(32'h54554444)) 
    \FSM_onehot_STATE[11]_i_1 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[11] ),
        .O(\FSM_onehot_STATE[11]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hAB)) 
    \FSM_onehot_STATE[12]_i_1 
       (.I0(EVEN_reg_0),
        .I1(SIGNAL_DETECT_REG),
        .I2(LOOPBACK),
        .O(\FSM_onehot_STATE[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0F0F0F040F040F04)) 
    \FSM_onehot_STATE[12]_i_2 
       (.I0(\FSM_onehot_STATE_reg[2]_0 ),
        .I1(p_0_in),
        .I2(\FSM_onehot_STATE_reg[2]_1 ),
        .I3(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I4(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .I5(\FSM_onehot_STATE_reg_n_0_[11] ),
        .O(\FSM_onehot_STATE[12]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \FSM_onehot_STATE[12]_i_4 
       (.I0(GOOD_CGS[1]),
        .I1(GOOD_CGS[0]),
        .O(\FSM_onehot_STATE[12]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h000300BB000000AA)) 
    \FSM_onehot_STATE[1]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I1(\FSM_onehot_STATE_reg[2]_0 ),
        .I2(RXEVEN0_out),
        .I3(S2),
        .I4(\GOOD_CGS_reg[1]_0 ),
        .I5(\FSM_onehot_STATE_reg_n_0_[0] ),
        .O(\FSM_onehot_STATE[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEFEFE00)) 
    \FSM_onehot_STATE[2]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I2(p_0_in),
        .I3(\FSM_onehot_STATE_reg[2]_0 ),
        .I4(\FSM_onehot_STATE_reg[2]_1 ),
        .I5(\FSM_onehot_STATE[2]_i_2_n_0 ),
        .O(\FSM_onehot_STATE[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF4F44444444)) 
    \FSM_onehot_STATE[2]_i_2 
       (.I0(\GOOD_CGS_reg[1]_0 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I2(\FSM_onehot_STATE[2]_i_3_n_0 ),
        .I3(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I5(\FSM_onehot_STATE_reg[2]_1 ),
        .O(\FSM_onehot_STATE[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_onehot_STATE[2]_i_3 
       (.I0(p_1_in),
        .I1(\FSM_onehot_STATE_reg_n_0_[5] ),
        .O(\FSM_onehot_STATE[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \FSM_onehot_STATE[3]_i_1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I1(RXEVEN0_out),
        .I2(S2),
        .I3(\GOOD_CGS_reg[1]_0 ),
        .O(\FSM_onehot_STATE[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000010FF00001050)) 
    \FSM_onehot_STATE[4]_i_1 
       (.I0(\FSM_onehot_STATE_reg[2]_0 ),
        .I1(RXEVEN0_out),
        .I2(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I3(\GOOD_CGS_reg[1]_0 ),
        .I4(S2),
        .I5(\FSM_onehot_STATE_reg_n_0_[4] ),
        .O(\FSM_onehot_STATE[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT5 #(
    .INIT(32'h54554444)) 
    \FSM_onehot_STATE[5]_i_1 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(p_1_in),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[5] ),
        .O(\FSM_onehot_STATE[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFF0040404040)) 
    \FSM_onehot_STATE[6]_i_1 
       (.I0(GOOD_CGS[0]),
        .I1(GOOD_CGS[1]),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I4(\FSM_onehot_STATE_reg_n_0_[11] ),
        .I5(\FSM_onehot_STATE_reg[2]_1 ),
        .O(\FSM_onehot_STATE[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \FSM_onehot_STATE[7]_i_1 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I2(\FSM_onehot_STATE_reg_n_0_[6] ),
        .O(\FSM_onehot_STATE[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT5 #(
    .INIT(32'h54554444)) 
    \FSM_onehot_STATE[8]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg[2]_1 ),
        .I1(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[8]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \FSM_onehot_STATE[9]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I1(\FSM_onehot_STATE_reg[2]_1 ),
        .I2(GOOD_CGS[0]),
        .I3(GOOD_CGS[1]),
        .I4(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[9]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[0]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[0] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[10]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[10] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[11]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[11] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[12]_i_2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[12] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[1]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[1] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[2]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[2] ),
        .S(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[3]_i_1_n_0 ),
        .Q(p_0_in),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[4]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[4] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[5]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[5] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[6]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[6] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[7]_i_1_n_0 ),
        .Q(p_1_in),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[8]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[8] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[9]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[9] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \GOOD_CGS[0]_i_1 
       (.I0(GOOD_CGS[0]),
        .O(\GOOD_CGS[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \GOOD_CGS[1]_i_1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I1(EVEN_reg_0),
        .I2(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I3(p_1_in),
        .O(\GOOD_CGS[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0001010100030303)) 
    \GOOD_CGS[1]_i_2 
       (.I0(RXEVEN0_out),
        .I1(\GOOD_CGS_reg[1]_1 ),
        .I2(RXNOTINTABLE_INT),
        .I3(RUNDISP_EN),
        .I4(RXDISPERR_INT),
        .I5(\GOOD_CGS_reg[1]_0 ),
        .O(\GOOD_CGS[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \GOOD_CGS[1]_i_3 
       (.I0(GOOD_CGS[1]),
        .I1(GOOD_CGS[0]),
        .O(\GOOD_CGS[1]_i_3_n_0 ));
  FDRE \GOOD_CGS_reg[0] 
       (.C(userclk),
        .CE(\GOOD_CGS[1]_i_2_n_0 ),
        .D(\GOOD_CGS[0]_i_1_n_0 ),
        .Q(GOOD_CGS[0]),
        .R(\GOOD_CGS[1]_i_1_n_0 ));
  FDRE \GOOD_CGS_reg[1] 
       (.C(userclk),
        .CE(\GOOD_CGS[1]_i_2_n_0 ),
        .D(\GOOD_CGS[1]_i_3_n_0 ),
        .Q(GOOD_CGS[1]),
        .R(\GOOD_CGS[1]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    RX_RUDI_INVALID_REG_i_1
       (.I0(out),
        .I1(RXSYNC_STATUS),
        .O(\MGT_RESET.SRESET_reg ));
  FDRE SIGNAL_DETECT_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SIGNAL_DETECT_MOD),
        .Q(SIGNAL_DETECT_REG),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT2 #(
    .INIT(4'hB)) 
    SYNC_STATUS_REG_i_1
       (.I0(EVEN_reg_0),
        .I1(RXSYNC_STATUS),
        .O(SYNC_STATUS_REG0));
  LUT3 #(
    .INIT(8'h02)) 
    SYNC_STATUS_i_1
       (.I0(p_0_in),
        .I1(\FSM_onehot_STATE_reg[2]_1 ),
        .I2(\FSM_onehot_STATE_reg[2]_0 ),
        .O(SYNC_STATUS0));
  LUT4 #(
    .INIT(16'hFEAA)) 
    SYNC_STATUS_i_2
       (.I0(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I1(p_1_in),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(\FSM_onehot_STATE_reg[2]_1 ),
        .O(SYNC_STATUS_i_2_n_0));
  FDSE #(
    .INIT(1'b0)) 
    SYNC_STATUS_reg
       (.C(userclk),
        .CE(SYNC_STATUS_i_2_n_0),
        .D(1'b0),
        .Q(RXSYNC_STATUS),
        .S(SYNC_STATUS0));
endmodule

(* ORIG_REF_NAME = "TX" *) 
module quadsgmii_0_TEST_TX
   (XMIT_CONFIG_INT,
    D,
    Q,
    \CODE_GRP_CNT_reg[0]_0 ,
    \USE_QSGMII_DATA.TXCHARISK_reg_0 ,
    \USE_QSGMII_DATA.TXCHARISK_reg_1 ,
    \USE_QSGMII_DATA.TXDATA_reg[7]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[2]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[3]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[5]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[7]_1 ,
    TRIGGER_T_reg_0,
    userclk,
    XMIT_CONFIG,
    \CODE_GRP_reg[0]_0 ,
    gmii_tx_er_ch3,
    gmii_tx_en_ch3,
    XMIT_DATA,
    LOOPBACK,
    gmii_txd_ch3,
    INSERT_IDLE_reg_0,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    RXDATA_USR,
    \TX_CONFIG_reg[14]_0 );
  output XMIT_CONFIG_INT;
  output [3:0]D;
  output [0:0]Q;
  output \CODE_GRP_CNT_reg[0]_0 ;
  output \USE_QSGMII_DATA.TXCHARISK_reg_0 ;
  output \USE_QSGMII_DATA.TXCHARISK_reg_1 ;
  output [7:0]\USE_QSGMII_DATA.TXDATA_reg[7]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[2]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[3]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[5]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[7]_1 ;
  input TRIGGER_T_reg_0;
  input userclk;
  input XMIT_CONFIG;
  input \CODE_GRP_reg[0]_0 ;
  input gmii_tx_er_ch3;
  input gmii_tx_en_ch3;
  input XMIT_DATA;
  input LOOPBACK;
  input [7:0]gmii_txd_ch3;
  input INSERT_IDLE_reg_0;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [7:0]RXDATA_USR;
  input [3:0]\TX_CONFIG_reg[14]_0 ;

  wire C1_OR_C2_i_1__2_n_0;
  wire C1_OR_C2_reg_n_0;
  wire [7:0]CODE_GRP;
  wire CODE_GRPISK;
  wire CODE_GRPISK_i_1__2_n_0;
  wire \CODE_GRP[0]_i_1__2_n_0 ;
  wire \CODE_GRP[0]_i_2__2_n_0 ;
  wire \CODE_GRP[1]_i_1__2_n_0 ;
  wire \CODE_GRP[1]_i_2__2_n_0 ;
  wire \CODE_GRP[2]_i_1__2_n_0 ;
  wire \CODE_GRP[2]_i_2__2_n_0 ;
  wire \CODE_GRP[3]_i_1__2_n_0 ;
  wire \CODE_GRP[3]_i_2__2_n_0 ;
  wire \CODE_GRP[4]_i_1__2_n_0 ;
  wire \CODE_GRP[5]_i_1__2_n_0 ;
  wire \CODE_GRP[6]_i_2__2_n_0 ;
  wire \CODE_GRP[7]_i_1__2_n_0 ;
  wire \CODE_GRP[7]_i_2__2_n_0 ;
  wire \CODE_GRP[7]_i_3__2_n_0 ;
  wire \CODE_GRP[7]_i_4__2_n_0 ;
  wire \CODE_GRP_CNT_reg[0]_0 ;
  wire \CODE_GRP_CNT_reg_n_0_[1] ;
  wire \CODE_GRP_reg[0]_0 ;
  wire [7:0]CONFIG_DATA;
  wire \CONFIG_DATA_reg_n_0_[0] ;
  wire \CONFIG_DATA_reg_n_0_[1] ;
  wire \CONFIG_DATA_reg_n_0_[3] ;
  wire \CONFIG_DATA_reg_n_0_[5] ;
  wire \CONFIG_DATA_reg_n_0_[6] ;
  wire \CONFIG_DATA_reg_n_0_[7] ;
  wire [3:0]D;
  wire INSERT_IDLE_i_1__2_n_0;
  wire INSERT_IDLE_reg_0;
  wire INSERT_IDLE_reg_n_0;
  wire LOOPBACK;
  wire [0:0]Q;
  wire R;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [7:0]RXDATA_USR;
  wire R_i_1__6_n_0;
  wire S;
  wire S0;
  wire T;
  wire T0;
  wire TRIGGER_S;
  wire TRIGGER_S0;
  wire TRIGGER_T;
  wire TRIGGER_T_reg_0;
  wire TXCHARISK_INT;
  wire [7:0]TXD_REG1;
  wire [14:0]TX_CONFIG;
  wire [3:0]\TX_CONFIG_reg[14]_0 ;
  wire TX_EN_REG1;
  wire TX_ER_REG1;
  wire TX_PACKET;
  wire TX_PACKET_REG1;
  wire TX_PACKET_i_1__2_n_0;
  wire \USE_QSGMII_DATA.TXCHARISK_i_1__2_n_0 ;
  wire \USE_QSGMII_DATA.TXCHARISK_reg_0 ;
  wire \USE_QSGMII_DATA.TXCHARISK_reg_1 ;
  wire \USE_QSGMII_DATA.TXDATA[0]_i_1__2_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[2]_i_1__2_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[5]_i_1__2_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[6]_i_1__2_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[7]_i_1__2_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[2]_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[3]_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[5]_0 ;
  wire [7:0]\USE_QSGMII_DATA.TXDATA_reg[7]_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[7]_1 ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ;
  wire V;
  wire V_i_1__2_n_0;
  wire V_i_2__2_n_0;
  wire V_i_3__2_n_0;
  wire V_i_4__2_n_0;
  wire XMIT_CONFIG;
  wire XMIT_CONFIG_INT;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT_reg_n_0;
  wire gmii_tx_en_ch3;
  wire gmii_tx_er_ch3;
  wire [7:0]gmii_txd_ch3;
  wire p_14_in;
  wire [1:0]plusOp;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    C1_OR_C2_i_1__2
       (.I0(XMIT_CONFIG_INT),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(C1_OR_C2_reg_n_0),
        .O(C1_OR_C2_i_1__2_n_0));
  FDRE C1_OR_C2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C1_OR_C2_i_1__2_n_0),
        .Q(C1_OR_C2_reg_n_0),
        .R(TRIGGER_T_reg_0));
  LUT4 #(
    .INIT(16'hAEAA)) 
    CODE_GRPISK_i_1__2
       (.I0(\CODE_GRP[7]_i_1__2_n_0 ),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(XMIT_CONFIG_INT),
        .O(CODE_GRPISK_i_1__2_n_0));
  FDRE CODE_GRPISK_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRPISK_i_1__2_n_0),
        .Q(CODE_GRPISK),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFF100F1)) 
    \CODE_GRP[0]_i_1__2 
       (.I0(\CODE_GRP[0]_i_2__2_n_0 ),
        .I1(V),
        .I2(S),
        .I3(XMIT_CONFIG_INT),
        .I4(\CONFIG_DATA_reg_n_0_[0] ),
        .O(\CODE_GRP[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT4 #(
    .INIT(16'h0111)) 
    \CODE_GRP[0]_i_2__2 
       (.I0(R),
        .I1(T),
        .I2(TXD_REG1[0]),
        .I3(TX_PACKET),
        .O(\CODE_GRP[0]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFF00FDFD)) 
    \CODE_GRP[1]_i_1__2 
       (.I0(\CODE_GRP[1]_i_2__2_n_0 ),
        .I1(S),
        .I2(V),
        .I3(\CONFIG_DATA_reg_n_0_[1] ),
        .I4(XMIT_CONFIG_INT),
        .O(\CODE_GRP[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT4 #(
    .INIT(16'hAABF)) 
    \CODE_GRP[1]_i_2__2 
       (.I0(T),
        .I1(TX_PACKET),
        .I2(TXD_REG1[1]),
        .I3(R),
        .O(\CODE_GRP[1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA0000FFF3)) 
    \CODE_GRP[2]_i_1__2 
       (.I0(\CONFIG_DATA_reg_n_0_[7] ),
        .I1(\CODE_GRP[7]_i_3__2_n_0 ),
        .I2(\CODE_GRP[2]_i_2__2_n_0 ),
        .I3(TXD_REG1[2]),
        .I4(S),
        .I5(XMIT_CONFIG_INT),
        .O(\CODE_GRP[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair294" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \CODE_GRP[2]_i_2__2 
       (.I0(R),
        .I1(TX_PACKET),
        .O(\CODE_GRP[2]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFD0D0D0FFD0)) 
    \CODE_GRP[3]_i_1__2 
       (.I0(TX_PACKET),
        .I1(TXD_REG1[3]),
        .I2(\CODE_GRP[7]_i_4__2_n_0 ),
        .I3(\CODE_GRP[3]_i_2__2_n_0 ),
        .I4(XMIT_CONFIG_INT),
        .I5(\CONFIG_DATA_reg_n_0_[3] ),
        .O(\CODE_GRP[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \CODE_GRP[3]_i_2__2 
       (.I0(INSERT_IDLE_reg_0),
        .I1(S),
        .I2(V),
        .I3(T),
        .O(\CODE_GRP[3]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hF8888888)) 
    \CODE_GRP[4]_i_1__2 
       (.I0(\CONFIG_DATA_reg_n_0_[7] ),
        .I1(XMIT_CONFIG_INT),
        .I2(TX_PACKET),
        .I3(TXD_REG1[4]),
        .I4(\CODE_GRP[7]_i_4__2_n_0 ),
        .O(\CODE_GRP[4]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hF8888888)) 
    \CODE_GRP[5]_i_1__2 
       (.I0(\CONFIG_DATA_reg_n_0_[5] ),
        .I1(XMIT_CONFIG_INT),
        .I2(TX_PACKET),
        .I3(TXD_REG1[5]),
        .I4(\CODE_GRP[7]_i_4__2_n_0 ),
        .O(\CODE_GRP[5]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hD000DDDD)) 
    \CODE_GRP[6]_i_2__2 
       (.I0(XMIT_CONFIG_INT),
        .I1(\CONFIG_DATA_reg_n_0_[6] ),
        .I2(TX_PACKET),
        .I3(TXD_REG1[6]),
        .I4(\CODE_GRP[7]_i_4__2_n_0 ),
        .O(\CODE_GRP[6]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h5555554555555555)) 
    \CODE_GRP[7]_i_1__2 
       (.I0(XMIT_CONFIG_INT),
        .I1(R),
        .I2(TX_PACKET),
        .I3(INSERT_IDLE_reg_0),
        .I4(S),
        .I5(\CODE_GRP[7]_i_3__2_n_0 ),
        .O(\CODE_GRP[7]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hF8888888)) 
    \CODE_GRP[7]_i_2__2 
       (.I0(\CONFIG_DATA_reg_n_0_[7] ),
        .I1(XMIT_CONFIG_INT),
        .I2(TX_PACKET),
        .I3(TXD_REG1[7]),
        .I4(\CODE_GRP[7]_i_4__2_n_0 ),
        .O(\CODE_GRP[7]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \CODE_GRP[7]_i_3__2 
       (.I0(T),
        .I1(V),
        .O(\CODE_GRP[7]_i_3__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \CODE_GRP[7]_i_4__2 
       (.I0(V),
        .I1(S),
        .I2(XMIT_CONFIG_INT),
        .I3(R),
        .I4(T),
        .O(\CODE_GRP[7]_i_4__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair302" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CODE_GRP_CNT[0]_i_1__2 
       (.I0(Q),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair302" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \CODE_GRP_CNT[1]_i_1__2 
       (.I0(Q),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(plusOp[1]));
  FDSE \CODE_GRP_CNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[0]),
        .Q(Q),
        .S(TRIGGER_T_reg_0));
  FDSE \CODE_GRP_CNT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[1]),
        .Q(\CODE_GRP_CNT_reg_n_0_[1] ),
        .S(TRIGGER_T_reg_0));
  FDRE \CODE_GRP_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[0]_i_1__2_n_0 ),
        .Q(CODE_GRP[0]),
        .R(\CODE_GRP_reg[0]_0 ));
  FDRE \CODE_GRP_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[1]_i_1__2_n_0 ),
        .Q(CODE_GRP[1]),
        .R(\CODE_GRP_reg[0]_0 ));
  FDSE \CODE_GRP_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[2]_i_1__2_n_0 ),
        .Q(CODE_GRP[2]),
        .S(\CODE_GRP_reg[0]_0 ));
  FDRE \CODE_GRP_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[3]_i_1__2_n_0 ),
        .Q(CODE_GRP[3]),
        .R(1'b0));
  FDSE \CODE_GRP_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[4]_i_1__2_n_0 ),
        .Q(CODE_GRP[4]),
        .S(\CODE_GRP[7]_i_1__2_n_0 ));
  FDSE \CODE_GRP_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[5]_i_1__2_n_0 ),
        .Q(CODE_GRP[5]),
        .S(\CODE_GRP[7]_i_1__2_n_0 ));
  FDRE \CODE_GRP_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[6]_i_2__2_n_0 ),
        .Q(CODE_GRP[6]),
        .R(\CODE_GRP_reg[0]_0 ));
  FDSE \CODE_GRP_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[7]_i_2__2_n_0 ),
        .Q(CODE_GRP[7]),
        .S(\CODE_GRP[7]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT4 #(
    .INIT(16'h3404)) 
    \CONFIG_DATA[0]_i_1__2 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(TX_CONFIG[0]),
        .O(CONFIG_DATA[0]));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \CONFIG_DATA[1]_i_1__2 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(Q),
        .O(CONFIG_DATA[1]));
  (* SOFT_HLUTNM = "soft_lutpair301" *) 
  LUT3 #(
    .INIT(8'h83)) 
    \CONFIG_DATA[3]_i_1__2 
       (.I0(TX_CONFIG[11]),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(Q),
        .O(CONFIG_DATA[3]));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT4 #(
    .INIT(16'hC707)) 
    \CONFIG_DATA[5]_i_1__2 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(TX_CONFIG[13]),
        .O(CONFIG_DATA[5]));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT4 #(
    .INIT(16'hC808)) 
    \CONFIG_DATA[6]_i_1__2 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(TX_CONFIG[14]),
        .O(CONFIG_DATA[6]));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT3 #(
    .INIT(8'h13)) 
    \CONFIG_DATA[7]_i_1__2 
       (.I0(Q),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(C1_OR_C2_reg_n_0),
        .O(CONFIG_DATA[7]));
  FDRE \CONFIG_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[0]),
        .Q(\CONFIG_DATA_reg_n_0_[0] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[1]),
        .Q(\CONFIG_DATA_reg_n_0_[1] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[3]),
        .Q(\CONFIG_DATA_reg_n_0_[3] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[5]),
        .Q(\CONFIG_DATA_reg_n_0_[5] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[6]),
        .Q(\CONFIG_DATA_reg_n_0_[6] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[7]),
        .Q(\CONFIG_DATA_reg_n_0_[7] ),
        .R(TRIGGER_T_reg_0));
  LUT6 #(
    .INIT(64'h00000000FFFF0002)) 
    INSERT_IDLE_i_1__2
       (.I0(\CODE_GRP[7]_i_3__2_n_0 ),
        .I1(S),
        .I2(TX_PACKET),
        .I3(R),
        .I4(INSERT_IDLE_reg_0),
        .I5(XMIT_CONFIG_INT),
        .O(INSERT_IDLE_i_1__2_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__2_n_0),
        .Q(INSERT_IDLE_reg_n_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hDDDCCCCC)) 
    R_i_1__6
       (.I0(S),
        .I1(T),
        .I2(TX_ER_REG1),
        .I3(Q),
        .I4(R),
        .O(R_i_1__6_n_0));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R_i_1__6_n_0),
        .Q(R),
        .R(TRIGGER_T_reg_0));
  LUT6 #(
    .INIT(64'h88888888A8AA8888)) 
    S_i_1__6
       (.I0(XMIT_DATA_INT_reg_n_0),
        .I1(TRIGGER_S),
        .I2(TX_ER_REG1),
        .I3(Q),
        .I4(gmii_tx_en_ch3),
        .I5(TX_EN_REG1),
        .O(S0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S),
        .R(TRIGGER_T_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    TRIGGER_S_i_1__2
       (.I0(TX_ER_REG1),
        .I1(Q),
        .I2(gmii_tx_en_ch3),
        .I3(TX_EN_REG1),
        .O(TRIGGER_S0));
  FDRE TRIGGER_S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TRIGGER_S0),
        .Q(TRIGGER_S),
        .R(TRIGGER_T_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT2 #(
    .INIT(4'h2)) 
    TRIGGER_T_i_1__2
       (.I0(TX_EN_REG1),
        .I1(gmii_tx_en_ch3),
        .O(p_14_in));
  FDRE TRIGGER_T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(p_14_in),
        .Q(TRIGGER_T),
        .R(TRIGGER_T_reg_0));
  FDRE \TXD_REG1_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[0]),
        .Q(TXD_REG1[0]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[1]),
        .Q(TXD_REG1[1]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[2]),
        .Q(TXD_REG1[2]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[3]),
        .Q(TXD_REG1[3]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[4]),
        .Q(TXD_REG1[4]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[5]),
        .Q(TXD_REG1[5]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[6]),
        .Q(TXD_REG1[6]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[7]),
        .Q(TXD_REG1[7]),
        .R(1'b0));
  FDRE \TX_CONFIG_reg[0] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [0]),
        .Q(TX_CONFIG[0]),
        .R(TRIGGER_T_reg_0));
  FDRE \TX_CONFIG_reg[11] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [1]),
        .Q(TX_CONFIG[11]),
        .R(TRIGGER_T_reg_0));
  FDRE \TX_CONFIG_reg[13] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [2]),
        .Q(TX_CONFIG[13]),
        .R(TRIGGER_T_reg_0));
  FDRE \TX_CONFIG_reg[14] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [3]),
        .Q(TX_CONFIG[14]),
        .R(TRIGGER_T_reg_0));
  FDRE TX_EN_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_en_ch3),
        .Q(TX_EN_REG1),
        .R(1'b0));
  FDRE TX_ER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_er_ch3),
        .Q(TX_ER_REG1),
        .R(1'b0));
  FDRE TX_PACKET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET),
        .Q(TX_PACKET_REG1),
        .R(TRIGGER_T_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair294" *) 
  LUT3 #(
    .INIT(8'hDC)) 
    TX_PACKET_i_1__2
       (.I0(T),
        .I1(S),
        .I2(TX_PACKET),
        .O(TX_PACKET_i_1__2_n_0));
  FDRE TX_PACKET_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET_i_1__2_n_0),
        .Q(TX_PACKET),
        .R(TRIGGER_T_reg_0));
  LUT6 #(
    .INIT(64'h88888888FFF88888)) 
    T_i_1__5
       (.I0(TRIGGER_T),
        .I1(V),
        .I2(S),
        .I3(TX_PACKET),
        .I4(TX_EN_REG1),
        .I5(gmii_tx_en_ch3),
        .O(T0));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T0),
        .Q(T),
        .R(TRIGGER_T_reg_0));
  LUT4 #(
    .INIT(16'h002A)) 
    \USE_QSGMII_DATA.TXCHARISK_i_1__2 
       (.I0(CODE_GRPISK),
        .I1(Q),
        .I2(INSERT_IDLE_reg_n_0),
        .I3(TRIGGER_T_reg_0),
        .O(\USE_QSGMII_DATA.TXCHARISK_i_1__2_n_0 ));
  FDRE \USE_QSGMII_DATA.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXCHARISK_i_1__2_n_0 ),
        .Q(TXCHARISK_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair298" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[0]_i_1__2 
       (.I0(CODE_GRP[0]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[0]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[2]_i_1__2 
       (.I0(CODE_GRP[2]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[2]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[5]_i_1__2 
       (.I0(TRIGGER_T_reg_0),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair301" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[6]_i_1__2 
       (.I0(CODE_GRP[6]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[6]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair298" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[7]_i_1__2 
       (.I0(CODE_GRP[7]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[7]_i_1__2_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[0]_i_1__2_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .R(TRIGGER_T_reg_0));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[1]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__2_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[2]_i_1__2_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .R(TRIGGER_T_reg_0));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[3]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__2_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[4]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__2_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[5]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__2_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[6]_i_1__2_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .R(TRIGGER_T_reg_0));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[7]_i_1__2_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .R(TRIGGER_T_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair295" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_i_1__2 
       (.I0(TXCHARISK_INT),
        .I1(LOOPBACK),
        .I2(RXCHARISCOMMA_USR),
        .O(\USE_QSGMII_DATA.TXCHARISK_reg_1 ));
  (* SOFT_HLUTNM = "soft_lutpair295" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_i_1__2 
       (.I0(TXCHARISK_INT),
        .I1(LOOPBACK),
        .I2(RXCHARISK_USR),
        .O(\USE_QSGMII_DATA.TXCHARISK_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair300" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[0]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[0]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair296" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[1]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[1]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [1]));
  (* SOFT_HLUTNM = "soft_lutpair299" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[2]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[2]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [2]));
  (* SOFT_HLUTNM = "soft_lutpair297" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[3]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[3]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [3]));
  (* SOFT_HLUTNM = "soft_lutpair293" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[4]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[4]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [4]));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[5]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[5]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [5]));
  (* SOFT_HLUTNM = "soft_lutpair297" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[6]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[6]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [6]));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[7]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[7]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [7]));
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.TXCHARISK_i_1__2 
       (.I0(Q),
        .I1(LOOPBACK),
        .I2(TXCHARISK_INT),
        .O(\CODE_GRP_CNT_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair300" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[0]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair296" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[1]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair299" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[2]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[2]_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[3]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[3]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair293" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \USE_ROCKET_IO.TXDATA[4]_i_1__2 
       (.I0(TRIGGER_T_reg_0),
        .I1(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I2(LOOPBACK),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[5]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[5]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT4 #(
    .INIT(16'h0074)) 
    \USE_ROCKET_IO.TXDATA[6]_i_1__2 
       (.I0(Q),
        .I1(LOOPBACK),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I3(TRIGGER_T_reg_0),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[7]_i_2__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    V_i_1__2
       (.I0(V_i_2__2_n_0),
        .I1(S),
        .I2(V),
        .O(V_i_1__2_n_0));
  LUT5 #(
    .INIT(32'h0080AAAA)) 
    V_i_2__2
       (.I0(XMIT_DATA_INT_reg_n_0),
        .I1(TX_EN_REG1),
        .I2(TX_ER_REG1),
        .I3(TX_PACKET_REG1),
        .I4(V_i_3__2_n_0),
        .O(V_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h00FF0101FFFFFFFF)) 
    V_i_3__2
       (.I0(V_i_4__2_n_0),
        .I1(gmii_txd_ch3[5]),
        .I2(gmii_txd_ch3[7]),
        .I3(TX_PACKET),
        .I4(gmii_tx_en_ch3),
        .I5(gmii_tx_er_ch3),
        .O(V_i_3__2_n_0));
  LUT6 #(
    .INIT(64'hFFFFDFFFFFFFFFFF)) 
    V_i_4__2
       (.I0(gmii_txd_ch3[2]),
        .I1(gmii_txd_ch3[4]),
        .I2(gmii_txd_ch3[3]),
        .I3(gmii_txd_ch3[0]),
        .I4(gmii_txd_ch3[6]),
        .I5(gmii_txd_ch3[1]),
        .O(V_i_4__2_n_0));
  FDRE V_reg
       (.C(userclk),
        .CE(1'b1),
        .D(V_i_1__2_n_0),
        .Q(V),
        .R(TRIGGER_T_reg_0));
  LUT2 #(
    .INIT(4'h1)) 
    XMIT_CONFIG_INT_i_1__6
       (.I0(Q),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(XMIT_DATA_INT));
  FDSE XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_CONFIG),
        .Q(XMIT_CONFIG_INT),
        .S(TRIGGER_T_reg_0));
  FDRE XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_DATA),
        .Q(XMIT_DATA_INT_reg_n_0),
        .R(TRIGGER_T_reg_0));
endmodule

(* ORIG_REF_NAME = "TX" *) 
module quadsgmii_0_TEST_TX_154
   (XMIT_CONFIG_INT,
    D,
    Q,
    \CODE_GRP_CNT_reg[0]_0 ,
    \USE_QSGMII_DATA.TXCHARISK_reg_0 ,
    \USE_QSGMII_DATA.TXCHARISK_reg_1 ,
    \USE_QSGMII_DATA.TXDATA_reg[7]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[2]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[3]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[5]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[7]_1 ,
    TRIGGER_T_reg_0,
    userclk,
    XMIT_CONFIG,
    \CODE_GRP_reg[0]_0 ,
    gmii_tx_er_ch2,
    gmii_tx_en_ch2,
    XMIT_DATA,
    LOOPBACK,
    gmii_txd_ch2,
    INSERT_IDLE_reg_0,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    RXDATA_USR,
    \TX_CONFIG_reg[14]_0 );
  output XMIT_CONFIG_INT;
  output [3:0]D;
  output [0:0]Q;
  output \CODE_GRP_CNT_reg[0]_0 ;
  output \USE_QSGMII_DATA.TXCHARISK_reg_0 ;
  output \USE_QSGMII_DATA.TXCHARISK_reg_1 ;
  output [7:0]\USE_QSGMII_DATA.TXDATA_reg[7]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[2]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[3]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[5]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[7]_1 ;
  input TRIGGER_T_reg_0;
  input userclk;
  input XMIT_CONFIG;
  input \CODE_GRP_reg[0]_0 ;
  input gmii_tx_er_ch2;
  input gmii_tx_en_ch2;
  input XMIT_DATA;
  input LOOPBACK;
  input [7:0]gmii_txd_ch2;
  input INSERT_IDLE_reg_0;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [7:0]RXDATA_USR;
  input [3:0]\TX_CONFIG_reg[14]_0 ;

  wire C1_OR_C2_i_1__1_n_0;
  wire C1_OR_C2_reg_n_0;
  wire [7:0]CODE_GRP;
  wire CODE_GRPISK;
  wire CODE_GRPISK_i_1__1_n_0;
  wire \CODE_GRP[0]_i_1__1_n_0 ;
  wire \CODE_GRP[0]_i_2__1_n_0 ;
  wire \CODE_GRP[1]_i_1__1_n_0 ;
  wire \CODE_GRP[1]_i_2__1_n_0 ;
  wire \CODE_GRP[2]_i_1__1_n_0 ;
  wire \CODE_GRP[2]_i_2__1_n_0 ;
  wire \CODE_GRP[3]_i_1__1_n_0 ;
  wire \CODE_GRP[3]_i_2__1_n_0 ;
  wire \CODE_GRP[4]_i_1__1_n_0 ;
  wire \CODE_GRP[5]_i_1__1_n_0 ;
  wire \CODE_GRP[6]_i_2__1_n_0 ;
  wire \CODE_GRP[7]_i_1__1_n_0 ;
  wire \CODE_GRP[7]_i_2__1_n_0 ;
  wire \CODE_GRP[7]_i_3__1_n_0 ;
  wire \CODE_GRP[7]_i_4__1_n_0 ;
  wire \CODE_GRP_CNT_reg[0]_0 ;
  wire \CODE_GRP_CNT_reg_n_0_[1] ;
  wire \CODE_GRP_reg[0]_0 ;
  wire [7:0]CONFIG_DATA;
  wire \CONFIG_DATA_reg_n_0_[0] ;
  wire \CONFIG_DATA_reg_n_0_[1] ;
  wire \CONFIG_DATA_reg_n_0_[3] ;
  wire \CONFIG_DATA_reg_n_0_[5] ;
  wire \CONFIG_DATA_reg_n_0_[6] ;
  wire \CONFIG_DATA_reg_n_0_[7] ;
  wire [3:0]D;
  wire INSERT_IDLE_i_1__1_n_0;
  wire INSERT_IDLE_reg_0;
  wire INSERT_IDLE_reg_n_0;
  wire LOOPBACK;
  wire [0:0]Q;
  wire R;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [7:0]RXDATA_USR;
  wire R_i_1__4_n_0;
  wire S;
  wire S0;
  wire T;
  wire T0;
  wire TRIGGER_S;
  wire TRIGGER_S0;
  wire TRIGGER_T;
  wire TRIGGER_T_reg_0;
  wire TXCHARISK_INT;
  wire [7:0]TXD_REG1;
  wire [14:0]TX_CONFIG;
  wire [3:0]\TX_CONFIG_reg[14]_0 ;
  wire TX_EN_REG1;
  wire TX_ER_REG1;
  wire TX_PACKET;
  wire TX_PACKET_REG1;
  wire TX_PACKET_i_1__1_n_0;
  wire \USE_QSGMII_DATA.TXCHARISK_i_1__1_n_0 ;
  wire \USE_QSGMII_DATA.TXCHARISK_reg_0 ;
  wire \USE_QSGMII_DATA.TXCHARISK_reg_1 ;
  wire \USE_QSGMII_DATA.TXDATA[0]_i_1__1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[2]_i_1__1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[5]_i_1__1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[6]_i_1__1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[7]_i_1__1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[2]_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[3]_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[5]_0 ;
  wire [7:0]\USE_QSGMII_DATA.TXDATA_reg[7]_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[7]_1 ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ;
  wire V;
  wire V_i_1__1_n_0;
  wire V_i_2__1_n_0;
  wire V_i_3__1_n_0;
  wire V_i_4__1_n_0;
  wire XMIT_CONFIG;
  wire XMIT_CONFIG_INT;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT_reg_n_0;
  wire gmii_tx_en_ch2;
  wire gmii_tx_er_ch2;
  wire [7:0]gmii_txd_ch2;
  wire p_14_in;
  wire [1:0]plusOp;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    C1_OR_C2_i_1__1
       (.I0(XMIT_CONFIG_INT),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(C1_OR_C2_reg_n_0),
        .O(C1_OR_C2_i_1__1_n_0));
  FDRE C1_OR_C2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C1_OR_C2_i_1__1_n_0),
        .Q(C1_OR_C2_reg_n_0),
        .R(TRIGGER_T_reg_0));
  LUT4 #(
    .INIT(16'hAEAA)) 
    CODE_GRPISK_i_1__1
       (.I0(\CODE_GRP[7]_i_1__1_n_0 ),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(XMIT_CONFIG_INT),
        .O(CODE_GRPISK_i_1__1_n_0));
  FDRE CODE_GRPISK_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRPISK_i_1__1_n_0),
        .Q(CODE_GRPISK),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFF100F1)) 
    \CODE_GRP[0]_i_1__1 
       (.I0(\CODE_GRP[0]_i_2__1_n_0 ),
        .I1(V),
        .I2(S),
        .I3(XMIT_CONFIG_INT),
        .I4(\CONFIG_DATA_reg_n_0_[0] ),
        .O(\CODE_GRP[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT4 #(
    .INIT(16'h0111)) 
    \CODE_GRP[0]_i_2__1 
       (.I0(R),
        .I1(T),
        .I2(TXD_REG1[0]),
        .I3(TX_PACKET),
        .O(\CODE_GRP[0]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFF00FDFD)) 
    \CODE_GRP[1]_i_1__1 
       (.I0(\CODE_GRP[1]_i_2__1_n_0 ),
        .I1(S),
        .I2(V),
        .I3(\CONFIG_DATA_reg_n_0_[1] ),
        .I4(XMIT_CONFIG_INT),
        .O(\CODE_GRP[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT4 #(
    .INIT(16'hAABF)) 
    \CODE_GRP[1]_i_2__1 
       (.I0(T),
        .I1(TX_PACKET),
        .I2(TXD_REG1[1]),
        .I3(R),
        .O(\CODE_GRP[1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA0000FFF3)) 
    \CODE_GRP[2]_i_1__1 
       (.I0(\CONFIG_DATA_reg_n_0_[7] ),
        .I1(\CODE_GRP[7]_i_3__1_n_0 ),
        .I2(\CODE_GRP[2]_i_2__1_n_0 ),
        .I3(TXD_REG1[2]),
        .I4(S),
        .I5(XMIT_CONFIG_INT),
        .O(\CODE_GRP[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \CODE_GRP[2]_i_2__1 
       (.I0(R),
        .I1(TX_PACKET),
        .O(\CODE_GRP[2]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFD0D0D0FFD0)) 
    \CODE_GRP[3]_i_1__1 
       (.I0(TX_PACKET),
        .I1(TXD_REG1[3]),
        .I2(\CODE_GRP[7]_i_4__1_n_0 ),
        .I3(\CODE_GRP[3]_i_2__1_n_0 ),
        .I4(XMIT_CONFIG_INT),
        .I5(\CONFIG_DATA_reg_n_0_[3] ),
        .O(\CODE_GRP[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \CODE_GRP[3]_i_2__1 
       (.I0(INSERT_IDLE_reg_0),
        .I1(S),
        .I2(V),
        .I3(T),
        .O(\CODE_GRP[3]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hF8888888)) 
    \CODE_GRP[4]_i_1__1 
       (.I0(\CONFIG_DATA_reg_n_0_[7] ),
        .I1(XMIT_CONFIG_INT),
        .I2(TX_PACKET),
        .I3(TXD_REG1[4]),
        .I4(\CODE_GRP[7]_i_4__1_n_0 ),
        .O(\CODE_GRP[4]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hF8888888)) 
    \CODE_GRP[5]_i_1__1 
       (.I0(\CONFIG_DATA_reg_n_0_[5] ),
        .I1(XMIT_CONFIG_INT),
        .I2(TX_PACKET),
        .I3(TXD_REG1[5]),
        .I4(\CODE_GRP[7]_i_4__1_n_0 ),
        .O(\CODE_GRP[5]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hD000DDDD)) 
    \CODE_GRP[6]_i_2__1 
       (.I0(XMIT_CONFIG_INT),
        .I1(\CONFIG_DATA_reg_n_0_[6] ),
        .I2(TX_PACKET),
        .I3(TXD_REG1[6]),
        .I4(\CODE_GRP[7]_i_4__1_n_0 ),
        .O(\CODE_GRP[6]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h5555554555555555)) 
    \CODE_GRP[7]_i_1__1 
       (.I0(XMIT_CONFIG_INT),
        .I1(R),
        .I2(TX_PACKET),
        .I3(INSERT_IDLE_reg_0),
        .I4(S),
        .I5(\CODE_GRP[7]_i_3__1_n_0 ),
        .O(\CODE_GRP[7]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hF8888888)) 
    \CODE_GRP[7]_i_2__1 
       (.I0(\CONFIG_DATA_reg_n_0_[7] ),
        .I1(XMIT_CONFIG_INT),
        .I2(TX_PACKET),
        .I3(TXD_REG1[7]),
        .I4(\CODE_GRP[7]_i_4__1_n_0 ),
        .O(\CODE_GRP[7]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \CODE_GRP[7]_i_3__1 
       (.I0(T),
        .I1(V),
        .O(\CODE_GRP[7]_i_3__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \CODE_GRP[7]_i_4__1 
       (.I0(V),
        .I1(S),
        .I2(XMIT_CONFIG_INT),
        .I3(R),
        .I4(T),
        .O(\CODE_GRP[7]_i_4__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CODE_GRP_CNT[0]_i_1__1 
       (.I0(Q),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \CODE_GRP_CNT[1]_i_1__1 
       (.I0(Q),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(plusOp[1]));
  FDSE \CODE_GRP_CNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[0]),
        .Q(Q),
        .S(TRIGGER_T_reg_0));
  FDSE \CODE_GRP_CNT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[1]),
        .Q(\CODE_GRP_CNT_reg_n_0_[1] ),
        .S(TRIGGER_T_reg_0));
  FDRE \CODE_GRP_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[0]_i_1__1_n_0 ),
        .Q(CODE_GRP[0]),
        .R(\CODE_GRP_reg[0]_0 ));
  FDRE \CODE_GRP_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[1]_i_1__1_n_0 ),
        .Q(CODE_GRP[1]),
        .R(\CODE_GRP_reg[0]_0 ));
  FDSE \CODE_GRP_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[2]_i_1__1_n_0 ),
        .Q(CODE_GRP[2]),
        .S(\CODE_GRP_reg[0]_0 ));
  FDRE \CODE_GRP_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[3]_i_1__1_n_0 ),
        .Q(CODE_GRP[3]),
        .R(1'b0));
  FDSE \CODE_GRP_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[4]_i_1__1_n_0 ),
        .Q(CODE_GRP[4]),
        .S(\CODE_GRP[7]_i_1__1_n_0 ));
  FDSE \CODE_GRP_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[5]_i_1__1_n_0 ),
        .Q(CODE_GRP[5]),
        .S(\CODE_GRP[7]_i_1__1_n_0 ));
  FDRE \CODE_GRP_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[6]_i_2__1_n_0 ),
        .Q(CODE_GRP[6]),
        .R(\CODE_GRP_reg[0]_0 ));
  FDSE \CODE_GRP_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[7]_i_2__1_n_0 ),
        .Q(CODE_GRP[7]),
        .S(\CODE_GRP[7]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT4 #(
    .INIT(16'h3404)) 
    \CONFIG_DATA[0]_i_1__1 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(TX_CONFIG[0]),
        .O(CONFIG_DATA[0]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \CONFIG_DATA[1]_i_1__1 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(Q),
        .O(CONFIG_DATA[1]));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT3 #(
    .INIT(8'h83)) 
    \CONFIG_DATA[3]_i_1__1 
       (.I0(TX_CONFIG[11]),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(Q),
        .O(CONFIG_DATA[3]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT4 #(
    .INIT(16'hC707)) 
    \CONFIG_DATA[5]_i_1__1 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(TX_CONFIG[13]),
        .O(CONFIG_DATA[5]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT4 #(
    .INIT(16'hC808)) 
    \CONFIG_DATA[6]_i_1__1 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(TX_CONFIG[14]),
        .O(CONFIG_DATA[6]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT3 #(
    .INIT(8'h13)) 
    \CONFIG_DATA[7]_i_1__1 
       (.I0(Q),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(C1_OR_C2_reg_n_0),
        .O(CONFIG_DATA[7]));
  FDRE \CONFIG_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[0]),
        .Q(\CONFIG_DATA_reg_n_0_[0] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[1]),
        .Q(\CONFIG_DATA_reg_n_0_[1] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[3]),
        .Q(\CONFIG_DATA_reg_n_0_[3] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[5]),
        .Q(\CONFIG_DATA_reg_n_0_[5] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[6]),
        .Q(\CONFIG_DATA_reg_n_0_[6] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[7]),
        .Q(\CONFIG_DATA_reg_n_0_[7] ),
        .R(TRIGGER_T_reg_0));
  LUT6 #(
    .INIT(64'h00000000FFFF0002)) 
    INSERT_IDLE_i_1__1
       (.I0(\CODE_GRP[7]_i_3__1_n_0 ),
        .I1(S),
        .I2(TX_PACKET),
        .I3(R),
        .I4(INSERT_IDLE_reg_0),
        .I5(XMIT_CONFIG_INT),
        .O(INSERT_IDLE_i_1__1_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__1_n_0),
        .Q(INSERT_IDLE_reg_n_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hDDDCCCCC)) 
    R_i_1__4
       (.I0(S),
        .I1(T),
        .I2(TX_ER_REG1),
        .I3(Q),
        .I4(R),
        .O(R_i_1__4_n_0));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R_i_1__4_n_0),
        .Q(R),
        .R(TRIGGER_T_reg_0));
  LUT6 #(
    .INIT(64'h88888888A8AA8888)) 
    S_i_1__4
       (.I0(XMIT_DATA_INT_reg_n_0),
        .I1(TRIGGER_S),
        .I2(TX_ER_REG1),
        .I3(Q),
        .I4(gmii_tx_en_ch2),
        .I5(TX_EN_REG1),
        .O(S0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S),
        .R(TRIGGER_T_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    TRIGGER_S_i_1__1
       (.I0(TX_ER_REG1),
        .I1(Q),
        .I2(gmii_tx_en_ch2),
        .I3(TX_EN_REG1),
        .O(TRIGGER_S0));
  FDRE TRIGGER_S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TRIGGER_S0),
        .Q(TRIGGER_S),
        .R(TRIGGER_T_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT2 #(
    .INIT(4'h2)) 
    TRIGGER_T_i_1__1
       (.I0(TX_EN_REG1),
        .I1(gmii_tx_en_ch2),
        .O(p_14_in));
  FDRE TRIGGER_T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(p_14_in),
        .Q(TRIGGER_T),
        .R(TRIGGER_T_reg_0));
  FDRE \TXD_REG1_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[0]),
        .Q(TXD_REG1[0]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[1]),
        .Q(TXD_REG1[1]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[2]),
        .Q(TXD_REG1[2]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[3]),
        .Q(TXD_REG1[3]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[4]),
        .Q(TXD_REG1[4]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[5]),
        .Q(TXD_REG1[5]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[6]),
        .Q(TXD_REG1[6]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[7]),
        .Q(TXD_REG1[7]),
        .R(1'b0));
  FDRE \TX_CONFIG_reg[0] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [0]),
        .Q(TX_CONFIG[0]),
        .R(TRIGGER_T_reg_0));
  FDRE \TX_CONFIG_reg[11] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [1]),
        .Q(TX_CONFIG[11]),
        .R(TRIGGER_T_reg_0));
  FDRE \TX_CONFIG_reg[13] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [2]),
        .Q(TX_CONFIG[13]),
        .R(TRIGGER_T_reg_0));
  FDRE \TX_CONFIG_reg[14] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [3]),
        .Q(TX_CONFIG[14]),
        .R(TRIGGER_T_reg_0));
  FDRE TX_EN_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_en_ch2),
        .Q(TX_EN_REG1),
        .R(1'b0));
  FDRE TX_ER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_er_ch2),
        .Q(TX_ER_REG1),
        .R(1'b0));
  FDRE TX_PACKET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET),
        .Q(TX_PACKET_REG1),
        .R(TRIGGER_T_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT3 #(
    .INIT(8'hDC)) 
    TX_PACKET_i_1__1
       (.I0(T),
        .I1(S),
        .I2(TX_PACKET),
        .O(TX_PACKET_i_1__1_n_0));
  FDRE TX_PACKET_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET_i_1__1_n_0),
        .Q(TX_PACKET),
        .R(TRIGGER_T_reg_0));
  LUT6 #(
    .INIT(64'h88888888FFF88888)) 
    T_i_1__3
       (.I0(TRIGGER_T),
        .I1(V),
        .I2(S),
        .I3(TX_PACKET),
        .I4(TX_EN_REG1),
        .I5(gmii_tx_en_ch2),
        .O(T0));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T0),
        .Q(T),
        .R(TRIGGER_T_reg_0));
  LUT4 #(
    .INIT(16'h002A)) 
    \USE_QSGMII_DATA.TXCHARISK_i_1__1 
       (.I0(CODE_GRPISK),
        .I1(Q),
        .I2(INSERT_IDLE_reg_n_0),
        .I3(TRIGGER_T_reg_0),
        .O(\USE_QSGMII_DATA.TXCHARISK_i_1__1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXCHARISK_i_1__1_n_0 ),
        .Q(TXCHARISK_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[0]_i_1__1 
       (.I0(CODE_GRP[0]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[0]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[2]_i_1__1 
       (.I0(CODE_GRP[2]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[2]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[5]_i_1__1 
       (.I0(TRIGGER_T_reg_0),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[6]_i_1__1 
       (.I0(CODE_GRP[6]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[7]_i_1__1 
       (.I0(CODE_GRP[7]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[7]_i_1__1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[0]_i_1__1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .R(TRIGGER_T_reg_0));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[1]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[2]_i_1__1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .R(TRIGGER_T_reg_0));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[3]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[4]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[5]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[6]_i_1__1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .R(TRIGGER_T_reg_0));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[7]_i_1__1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .R(TRIGGER_T_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_i_1__1 
       (.I0(TXCHARISK_INT),
        .I1(LOOPBACK),
        .I2(RXCHARISCOMMA_USR),
        .O(\USE_QSGMII_DATA.TXCHARISK_reg_1 ));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_i_1__1 
       (.I0(TXCHARISK_INT),
        .I1(LOOPBACK),
        .I2(RXCHARISK_USR),
        .O(\USE_QSGMII_DATA.TXCHARISK_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[0]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[0]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[1]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[1]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [1]));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[2]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[2]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [2]));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[3]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[3]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [3]));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[4]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[4]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [4]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[5]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[5]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [5]));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[6]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[6]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [6]));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[7]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[7]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [7]));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.TXCHARISK_i_1__1 
       (.I0(Q),
        .I1(LOOPBACK),
        .I2(TXCHARISK_INT),
        .O(\CODE_GRP_CNT_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[0]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[1]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[2]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[2]_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[3]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[3]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \USE_ROCKET_IO.TXDATA[4]_i_1__1 
       (.I0(TRIGGER_T_reg_0),
        .I1(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I2(LOOPBACK),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[5]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[5]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT4 #(
    .INIT(16'h0074)) 
    \USE_ROCKET_IO.TXDATA[6]_i_1__1 
       (.I0(Q),
        .I1(LOOPBACK),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I3(TRIGGER_T_reg_0),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[7]_i_2__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    V_i_1__1
       (.I0(V_i_2__1_n_0),
        .I1(S),
        .I2(V),
        .O(V_i_1__1_n_0));
  LUT5 #(
    .INIT(32'h0080AAAA)) 
    V_i_2__1
       (.I0(XMIT_DATA_INT_reg_n_0),
        .I1(TX_EN_REG1),
        .I2(TX_ER_REG1),
        .I3(TX_PACKET_REG1),
        .I4(V_i_3__1_n_0),
        .O(V_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h00FF0101FFFFFFFF)) 
    V_i_3__1
       (.I0(V_i_4__1_n_0),
        .I1(gmii_txd_ch2[5]),
        .I2(gmii_txd_ch2[7]),
        .I3(TX_PACKET),
        .I4(gmii_tx_en_ch2),
        .I5(gmii_tx_er_ch2),
        .O(V_i_3__1_n_0));
  LUT6 #(
    .INIT(64'hFFFFDFFFFFFFFFFF)) 
    V_i_4__1
       (.I0(gmii_txd_ch2[2]),
        .I1(gmii_txd_ch2[4]),
        .I2(gmii_txd_ch2[3]),
        .I3(gmii_txd_ch2[0]),
        .I4(gmii_txd_ch2[6]),
        .I5(gmii_txd_ch2[1]),
        .O(V_i_4__1_n_0));
  FDRE V_reg
       (.C(userclk),
        .CE(1'b1),
        .D(V_i_1__1_n_0),
        .Q(V),
        .R(TRIGGER_T_reg_0));
  LUT2 #(
    .INIT(4'h1)) 
    XMIT_CONFIG_INT_i_1__4
       (.I0(Q),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(XMIT_DATA_INT));
  FDSE XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_CONFIG),
        .Q(XMIT_CONFIG_INT),
        .S(TRIGGER_T_reg_0));
  FDRE XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_DATA),
        .Q(XMIT_DATA_INT_reg_n_0),
        .R(TRIGGER_T_reg_0));
endmodule

(* ORIG_REF_NAME = "TX" *) 
module quadsgmii_0_TEST_TX_166
   (XMIT_CONFIG_INT,
    D,
    Q,
    \CODE_GRP_CNT_reg[0]_0 ,
    \USE_QSGMII_DATA.TXCHARISK_reg_0 ,
    \USE_QSGMII_DATA.TXCHARISK_reg_1 ,
    \USE_QSGMII_DATA.TXDATA_reg[7]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[2]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[3]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[5]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[7]_1 ,
    TRIGGER_T_reg_0,
    userclk,
    XMIT_CONFIG,
    \CODE_GRP_reg[0]_0 ,
    gmii_tx_er_ch1,
    gmii_tx_en_ch1,
    XMIT_DATA,
    LOOPBACK,
    gmii_txd_ch1,
    INSERT_IDLE_reg_0,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    RXDATA_USR,
    \TX_CONFIG_reg[14]_0 );
  output XMIT_CONFIG_INT;
  output [3:0]D;
  output [0:0]Q;
  output \CODE_GRP_CNT_reg[0]_0 ;
  output \USE_QSGMII_DATA.TXCHARISK_reg_0 ;
  output \USE_QSGMII_DATA.TXCHARISK_reg_1 ;
  output [7:0]\USE_QSGMII_DATA.TXDATA_reg[7]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[2]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[3]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[5]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[7]_1 ;
  input TRIGGER_T_reg_0;
  input userclk;
  input XMIT_CONFIG;
  input \CODE_GRP_reg[0]_0 ;
  input gmii_tx_er_ch1;
  input gmii_tx_en_ch1;
  input XMIT_DATA;
  input LOOPBACK;
  input [7:0]gmii_txd_ch1;
  input INSERT_IDLE_reg_0;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [7:0]RXDATA_USR;
  input [3:0]\TX_CONFIG_reg[14]_0 ;

  wire C1_OR_C2_i_1__0_n_0;
  wire C1_OR_C2_reg_n_0;
  wire [7:0]CODE_GRP;
  wire CODE_GRPISK;
  wire CODE_GRPISK_i_1__0_n_0;
  wire \CODE_GRP[0]_i_1__0_n_0 ;
  wire \CODE_GRP[0]_i_2__0_n_0 ;
  wire \CODE_GRP[1]_i_1__0_n_0 ;
  wire \CODE_GRP[1]_i_2__0_n_0 ;
  wire \CODE_GRP[2]_i_1__0_n_0 ;
  wire \CODE_GRP[2]_i_2__0_n_0 ;
  wire \CODE_GRP[3]_i_1__0_n_0 ;
  wire \CODE_GRP[3]_i_2__0_n_0 ;
  wire \CODE_GRP[4]_i_1__0_n_0 ;
  wire \CODE_GRP[5]_i_1__0_n_0 ;
  wire \CODE_GRP[6]_i_2__0_n_0 ;
  wire \CODE_GRP[7]_i_1__0_n_0 ;
  wire \CODE_GRP[7]_i_2__0_n_0 ;
  wire \CODE_GRP[7]_i_3__0_n_0 ;
  wire \CODE_GRP[7]_i_4__0_n_0 ;
  wire \CODE_GRP_CNT_reg[0]_0 ;
  wire \CODE_GRP_CNT_reg_n_0_[1] ;
  wire \CODE_GRP_reg[0]_0 ;
  wire [7:0]CONFIG_DATA;
  wire \CONFIG_DATA_reg_n_0_[0] ;
  wire \CONFIG_DATA_reg_n_0_[1] ;
  wire \CONFIG_DATA_reg_n_0_[3] ;
  wire \CONFIG_DATA_reg_n_0_[5] ;
  wire \CONFIG_DATA_reg_n_0_[6] ;
  wire \CONFIG_DATA_reg_n_0_[7] ;
  wire [3:0]D;
  wire INSERT_IDLE_i_1__0_n_0;
  wire INSERT_IDLE_reg_0;
  wire INSERT_IDLE_reg_n_0;
  wire LOOPBACK;
  wire [0:0]Q;
  wire R;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [7:0]RXDATA_USR;
  wire R_i_1__2_n_0;
  wire S;
  wire S0;
  wire T;
  wire T0;
  wire TRIGGER_S;
  wire TRIGGER_S0;
  wire TRIGGER_T;
  wire TRIGGER_T_reg_0;
  wire TXCHARISK_INT;
  wire [7:0]TXD_REG1;
  wire [14:0]TX_CONFIG;
  wire [3:0]\TX_CONFIG_reg[14]_0 ;
  wire TX_EN_REG1;
  wire TX_ER_REG1;
  wire TX_PACKET;
  wire TX_PACKET_REG1;
  wire TX_PACKET_i_1__0_n_0;
  wire \USE_QSGMII_DATA.TXCHARISK_i_1__0_n_0 ;
  wire \USE_QSGMII_DATA.TXCHARISK_reg_0 ;
  wire \USE_QSGMII_DATA.TXCHARISK_reg_1 ;
  wire \USE_QSGMII_DATA.TXDATA[0]_i_1__0_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[2]_i_1__0_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[5]_i_1__0_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[6]_i_1__0_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[7]_i_1__0_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[2]_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[3]_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[5]_0 ;
  wire [7:0]\USE_QSGMII_DATA.TXDATA_reg[7]_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[7]_1 ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ;
  wire V;
  wire V_i_1__0_n_0;
  wire V_i_2__0_n_0;
  wire V_i_3__0_n_0;
  wire V_i_4__0_n_0;
  wire XMIT_CONFIG;
  wire XMIT_CONFIG_INT;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT_reg_n_0;
  wire gmii_tx_en_ch1;
  wire gmii_tx_er_ch1;
  wire [7:0]gmii_txd_ch1;
  wire p_14_in;
  wire [1:0]plusOp;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    C1_OR_C2_i_1__0
       (.I0(XMIT_CONFIG_INT),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(C1_OR_C2_reg_n_0),
        .O(C1_OR_C2_i_1__0_n_0));
  FDRE C1_OR_C2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C1_OR_C2_i_1__0_n_0),
        .Q(C1_OR_C2_reg_n_0),
        .R(TRIGGER_T_reg_0));
  LUT4 #(
    .INIT(16'hAEAA)) 
    CODE_GRPISK_i_1__0
       (.I0(\CODE_GRP[7]_i_1__0_n_0 ),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(XMIT_CONFIG_INT),
        .O(CODE_GRPISK_i_1__0_n_0));
  FDRE CODE_GRPISK_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRPISK_i_1__0_n_0),
        .Q(CODE_GRPISK),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFF100F1)) 
    \CODE_GRP[0]_i_1__0 
       (.I0(\CODE_GRP[0]_i_2__0_n_0 ),
        .I1(V),
        .I2(S),
        .I3(XMIT_CONFIG_INT),
        .I4(\CONFIG_DATA_reg_n_0_[0] ),
        .O(\CODE_GRP[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT4 #(
    .INIT(16'h0111)) 
    \CODE_GRP[0]_i_2__0 
       (.I0(R),
        .I1(T),
        .I2(TXD_REG1[0]),
        .I3(TX_PACKET),
        .O(\CODE_GRP[0]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFF00FDFD)) 
    \CODE_GRP[1]_i_1__0 
       (.I0(\CODE_GRP[1]_i_2__0_n_0 ),
        .I1(S),
        .I2(V),
        .I3(\CONFIG_DATA_reg_n_0_[1] ),
        .I4(XMIT_CONFIG_INT),
        .O(\CODE_GRP[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT4 #(
    .INIT(16'hAABF)) 
    \CODE_GRP[1]_i_2__0 
       (.I0(T),
        .I1(TX_PACKET),
        .I2(TXD_REG1[1]),
        .I3(R),
        .O(\CODE_GRP[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA0000FFF3)) 
    \CODE_GRP[2]_i_1__0 
       (.I0(\CONFIG_DATA_reg_n_0_[7] ),
        .I1(\CODE_GRP[7]_i_3__0_n_0 ),
        .I2(\CODE_GRP[2]_i_2__0_n_0 ),
        .I3(TXD_REG1[2]),
        .I4(S),
        .I5(XMIT_CONFIG_INT),
        .O(\CODE_GRP[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \CODE_GRP[2]_i_2__0 
       (.I0(R),
        .I1(TX_PACKET),
        .O(\CODE_GRP[2]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFD0D0D0FFD0)) 
    \CODE_GRP[3]_i_1__0 
       (.I0(TX_PACKET),
        .I1(TXD_REG1[3]),
        .I2(\CODE_GRP[7]_i_4__0_n_0 ),
        .I3(\CODE_GRP[3]_i_2__0_n_0 ),
        .I4(XMIT_CONFIG_INT),
        .I5(\CONFIG_DATA_reg_n_0_[3] ),
        .O(\CODE_GRP[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \CODE_GRP[3]_i_2__0 
       (.I0(INSERT_IDLE_reg_0),
        .I1(S),
        .I2(V),
        .I3(T),
        .O(\CODE_GRP[3]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hF8888888)) 
    \CODE_GRP[4]_i_1__0 
       (.I0(\CONFIG_DATA_reg_n_0_[7] ),
        .I1(XMIT_CONFIG_INT),
        .I2(TX_PACKET),
        .I3(TXD_REG1[4]),
        .I4(\CODE_GRP[7]_i_4__0_n_0 ),
        .O(\CODE_GRP[4]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hF8888888)) 
    \CODE_GRP[5]_i_1__0 
       (.I0(\CONFIG_DATA_reg_n_0_[5] ),
        .I1(XMIT_CONFIG_INT),
        .I2(TX_PACKET),
        .I3(TXD_REG1[5]),
        .I4(\CODE_GRP[7]_i_4__0_n_0 ),
        .O(\CODE_GRP[5]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hD000DDDD)) 
    \CODE_GRP[6]_i_2__0 
       (.I0(XMIT_CONFIG_INT),
        .I1(\CONFIG_DATA_reg_n_0_[6] ),
        .I2(TX_PACKET),
        .I3(TXD_REG1[6]),
        .I4(\CODE_GRP[7]_i_4__0_n_0 ),
        .O(\CODE_GRP[6]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h5555554555555555)) 
    \CODE_GRP[7]_i_1__0 
       (.I0(XMIT_CONFIG_INT),
        .I1(R),
        .I2(TX_PACKET),
        .I3(INSERT_IDLE_reg_0),
        .I4(S),
        .I5(\CODE_GRP[7]_i_3__0_n_0 ),
        .O(\CODE_GRP[7]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hF8888888)) 
    \CODE_GRP[7]_i_2__0 
       (.I0(\CONFIG_DATA_reg_n_0_[7] ),
        .I1(XMIT_CONFIG_INT),
        .I2(TX_PACKET),
        .I3(TXD_REG1[7]),
        .I4(\CODE_GRP[7]_i_4__0_n_0 ),
        .O(\CODE_GRP[7]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \CODE_GRP[7]_i_3__0 
       (.I0(T),
        .I1(V),
        .O(\CODE_GRP[7]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \CODE_GRP[7]_i_4__0 
       (.I0(V),
        .I1(S),
        .I2(XMIT_CONFIG_INT),
        .I3(R),
        .I4(T),
        .O(\CODE_GRP[7]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CODE_GRP_CNT[0]_i_1__0 
       (.I0(Q),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \CODE_GRP_CNT[1]_i_1__0 
       (.I0(Q),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(plusOp[1]));
  FDSE \CODE_GRP_CNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[0]),
        .Q(Q),
        .S(TRIGGER_T_reg_0));
  FDSE \CODE_GRP_CNT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[1]),
        .Q(\CODE_GRP_CNT_reg_n_0_[1] ),
        .S(TRIGGER_T_reg_0));
  FDRE \CODE_GRP_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[0]_i_1__0_n_0 ),
        .Q(CODE_GRP[0]),
        .R(\CODE_GRP_reg[0]_0 ));
  FDRE \CODE_GRP_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[1]_i_1__0_n_0 ),
        .Q(CODE_GRP[1]),
        .R(\CODE_GRP_reg[0]_0 ));
  FDSE \CODE_GRP_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[2]_i_1__0_n_0 ),
        .Q(CODE_GRP[2]),
        .S(\CODE_GRP_reg[0]_0 ));
  FDRE \CODE_GRP_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[3]_i_1__0_n_0 ),
        .Q(CODE_GRP[3]),
        .R(1'b0));
  FDSE \CODE_GRP_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[4]_i_1__0_n_0 ),
        .Q(CODE_GRP[4]),
        .S(\CODE_GRP[7]_i_1__0_n_0 ));
  FDSE \CODE_GRP_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[5]_i_1__0_n_0 ),
        .Q(CODE_GRP[5]),
        .S(\CODE_GRP[7]_i_1__0_n_0 ));
  FDRE \CODE_GRP_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[6]_i_2__0_n_0 ),
        .Q(CODE_GRP[6]),
        .R(\CODE_GRP_reg[0]_0 ));
  FDSE \CODE_GRP_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[7]_i_2__0_n_0 ),
        .Q(CODE_GRP[7]),
        .S(\CODE_GRP[7]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'h3404)) 
    \CONFIG_DATA[0]_i_1__0 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(TX_CONFIG[0]),
        .O(CONFIG_DATA[0]));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \CONFIG_DATA[1]_i_1__0 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(Q),
        .O(CONFIG_DATA[1]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'h83)) 
    \CONFIG_DATA[3]_i_1__0 
       (.I0(TX_CONFIG[11]),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(Q),
        .O(CONFIG_DATA[3]));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT4 #(
    .INIT(16'hC707)) 
    \CONFIG_DATA[5]_i_1__0 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(TX_CONFIG[13]),
        .O(CONFIG_DATA[5]));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT4 #(
    .INIT(16'hC808)) 
    \CONFIG_DATA[6]_i_1__0 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(TX_CONFIG[14]),
        .O(CONFIG_DATA[6]));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'h13)) 
    \CONFIG_DATA[7]_i_1__0 
       (.I0(Q),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(C1_OR_C2_reg_n_0),
        .O(CONFIG_DATA[7]));
  FDRE \CONFIG_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[0]),
        .Q(\CONFIG_DATA_reg_n_0_[0] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[1]),
        .Q(\CONFIG_DATA_reg_n_0_[1] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[3]),
        .Q(\CONFIG_DATA_reg_n_0_[3] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[5]),
        .Q(\CONFIG_DATA_reg_n_0_[5] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[6]),
        .Q(\CONFIG_DATA_reg_n_0_[6] ),
        .R(TRIGGER_T_reg_0));
  FDRE \CONFIG_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[7]),
        .Q(\CONFIG_DATA_reg_n_0_[7] ),
        .R(TRIGGER_T_reg_0));
  LUT6 #(
    .INIT(64'h00000000FFFF0002)) 
    INSERT_IDLE_i_1__0
       (.I0(\CODE_GRP[7]_i_3__0_n_0 ),
        .I1(S),
        .I2(TX_PACKET),
        .I3(R),
        .I4(INSERT_IDLE_reg_0),
        .I5(XMIT_CONFIG_INT),
        .O(INSERT_IDLE_i_1__0_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__0_n_0),
        .Q(INSERT_IDLE_reg_n_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hDDDCCCCC)) 
    R_i_1__2
       (.I0(S),
        .I1(T),
        .I2(TX_ER_REG1),
        .I3(Q),
        .I4(R),
        .O(R_i_1__2_n_0));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R_i_1__2_n_0),
        .Q(R),
        .R(TRIGGER_T_reg_0));
  LUT6 #(
    .INIT(64'h88888888A8AA8888)) 
    S_i_1__2
       (.I0(XMIT_DATA_INT_reg_n_0),
        .I1(TRIGGER_S),
        .I2(TX_ER_REG1),
        .I3(Q),
        .I4(gmii_tx_en_ch1),
        .I5(TX_EN_REG1),
        .O(S0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S),
        .R(TRIGGER_T_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    TRIGGER_S_i_1__0
       (.I0(TX_ER_REG1),
        .I1(Q),
        .I2(gmii_tx_en_ch1),
        .I3(TX_EN_REG1),
        .O(TRIGGER_S0));
  FDRE TRIGGER_S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TRIGGER_S0),
        .Q(TRIGGER_S),
        .R(TRIGGER_T_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT2 #(
    .INIT(4'h2)) 
    TRIGGER_T_i_1__0
       (.I0(TX_EN_REG1),
        .I1(gmii_tx_en_ch1),
        .O(p_14_in));
  FDRE TRIGGER_T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(p_14_in),
        .Q(TRIGGER_T),
        .R(TRIGGER_T_reg_0));
  FDRE \TXD_REG1_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[0]),
        .Q(TXD_REG1[0]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[1]),
        .Q(TXD_REG1[1]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[2]),
        .Q(TXD_REG1[2]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[3]),
        .Q(TXD_REG1[3]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[4]),
        .Q(TXD_REG1[4]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[5]),
        .Q(TXD_REG1[5]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[6]),
        .Q(TXD_REG1[6]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[7]),
        .Q(TXD_REG1[7]),
        .R(1'b0));
  FDRE \TX_CONFIG_reg[0] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [0]),
        .Q(TX_CONFIG[0]),
        .R(TRIGGER_T_reg_0));
  FDRE \TX_CONFIG_reg[11] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [1]),
        .Q(TX_CONFIG[11]),
        .R(TRIGGER_T_reg_0));
  FDRE \TX_CONFIG_reg[13] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [2]),
        .Q(TX_CONFIG[13]),
        .R(TRIGGER_T_reg_0));
  FDRE \TX_CONFIG_reg[14] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [3]),
        .Q(TX_CONFIG[14]),
        .R(TRIGGER_T_reg_0));
  FDRE TX_EN_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_en_ch1),
        .Q(TX_EN_REG1),
        .R(1'b0));
  FDRE TX_ER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_er_ch1),
        .Q(TX_ER_REG1),
        .R(1'b0));
  FDRE TX_PACKET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET),
        .Q(TX_PACKET_REG1),
        .R(TRIGGER_T_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT3 #(
    .INIT(8'hDC)) 
    TX_PACKET_i_1__0
       (.I0(T),
        .I1(S),
        .I2(TX_PACKET),
        .O(TX_PACKET_i_1__0_n_0));
  FDRE TX_PACKET_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET_i_1__0_n_0),
        .Q(TX_PACKET),
        .R(TRIGGER_T_reg_0));
  LUT6 #(
    .INIT(64'h88888888FFF88888)) 
    T_i_1__1
       (.I0(TRIGGER_T),
        .I1(V),
        .I2(S),
        .I3(TX_PACKET),
        .I4(TX_EN_REG1),
        .I5(gmii_tx_en_ch1),
        .O(T0));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T0),
        .Q(T),
        .R(TRIGGER_T_reg_0));
  LUT4 #(
    .INIT(16'h002A)) 
    \USE_QSGMII_DATA.TXCHARISK_i_1__0 
       (.I0(CODE_GRPISK),
        .I1(Q),
        .I2(INSERT_IDLE_reg_n_0),
        .I3(TRIGGER_T_reg_0),
        .O(\USE_QSGMII_DATA.TXCHARISK_i_1__0_n_0 ));
  FDRE \USE_QSGMII_DATA.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXCHARISK_i_1__0_n_0 ),
        .Q(TXCHARISK_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[0]_i_1__0 
       (.I0(CODE_GRP[0]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[0]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[2]_i_1__0 
       (.I0(CODE_GRP[2]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[2]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[5]_i_1__0 
       (.I0(TRIGGER_T_reg_0),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[6]_i_1__0 
       (.I0(CODE_GRP[6]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[6]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[7]_i_1__0 
       (.I0(CODE_GRP[7]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[7]_i_1__0_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[0]_i_1__0_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .R(TRIGGER_T_reg_0));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[1]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__0_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[2]_i_1__0_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .R(TRIGGER_T_reg_0));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[3]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__0_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[4]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__0_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[5]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__0_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[6]_i_1__0_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .R(TRIGGER_T_reg_0));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[7]_i_1__0_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .R(TRIGGER_T_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_i_1__0 
       (.I0(TXCHARISK_INT),
        .I1(LOOPBACK),
        .I2(RXCHARISCOMMA_USR),
        .O(\USE_QSGMII_DATA.TXCHARISK_reg_1 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_i_1__0 
       (.I0(TXCHARISK_INT),
        .I1(LOOPBACK),
        .I2(RXCHARISK_USR),
        .O(\USE_QSGMII_DATA.TXCHARISK_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[0]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[0]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[1]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[1]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [1]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[2]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[2]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [2]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[3]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[3]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [3]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[4]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[4]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [4]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[5]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[5]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [5]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[6]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[6]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [6]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[7]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[7]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [7]));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.TXCHARISK_i_1__0 
       (.I0(Q),
        .I1(LOOPBACK),
        .I2(TXCHARISK_INT),
        .O(\CODE_GRP_CNT_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[0]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[1]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[2]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[2]_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[3]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[3]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \USE_ROCKET_IO.TXDATA[4]_i_1__0 
       (.I0(TRIGGER_T_reg_0),
        .I1(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I2(LOOPBACK),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[5]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[5]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT4 #(
    .INIT(16'h0074)) 
    \USE_ROCKET_IO.TXDATA[6]_i_1__0 
       (.I0(Q),
        .I1(LOOPBACK),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I3(TRIGGER_T_reg_0),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[7]_i_2__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .I1(TRIGGER_T_reg_0),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    V_i_1__0
       (.I0(V_i_2__0_n_0),
        .I1(S),
        .I2(V),
        .O(V_i_1__0_n_0));
  LUT5 #(
    .INIT(32'h0080AAAA)) 
    V_i_2__0
       (.I0(XMIT_DATA_INT_reg_n_0),
        .I1(TX_EN_REG1),
        .I2(TX_ER_REG1),
        .I3(TX_PACKET_REG1),
        .I4(V_i_3__0_n_0),
        .O(V_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h00FF0101FFFFFFFF)) 
    V_i_3__0
       (.I0(V_i_4__0_n_0),
        .I1(gmii_txd_ch1[5]),
        .I2(gmii_txd_ch1[7]),
        .I3(TX_PACKET),
        .I4(gmii_tx_en_ch1),
        .I5(gmii_tx_er_ch1),
        .O(V_i_3__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFDFFFFFFFFFFF)) 
    V_i_4__0
       (.I0(gmii_txd_ch1[2]),
        .I1(gmii_txd_ch1[4]),
        .I2(gmii_txd_ch1[3]),
        .I3(gmii_txd_ch1[0]),
        .I4(gmii_txd_ch1[6]),
        .I5(gmii_txd_ch1[1]),
        .O(V_i_4__0_n_0));
  FDRE V_reg
       (.C(userclk),
        .CE(1'b1),
        .D(V_i_1__0_n_0),
        .Q(V),
        .R(TRIGGER_T_reg_0));
  LUT2 #(
    .INIT(4'h1)) 
    XMIT_CONFIG_INT_i_1__2
       (.I0(Q),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(XMIT_DATA_INT));
  FDSE XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_CONFIG),
        .Q(XMIT_CONFIG_INT),
        .S(TRIGGER_T_reg_0));
  FDRE XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_DATA),
        .Q(XMIT_DATA_INT_reg_n_0),
        .R(TRIGGER_T_reg_0));
endmodule

(* ORIG_REF_NAME = "TX" *) 
module quadsgmii_0_TEST_TX_178
   (XMIT_CONFIG_INT,
    D,
    Q,
    \CODE_GRP_CNT_reg[0]_0 ,
    \USE_QSGMII_DATA.TXCHARISK_reg_0 ,
    \USE_QSGMII_DATA.TXCHARISK_reg_1 ,
    \USE_QSGMII_DATA.TXDATA_reg[7]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[2]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[3]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[5]_0 ,
    \USE_QSGMII_DATA.TXDATA_reg[7]_1 ,
    \USE_QSGMII_DATA.TXDATA_reg[7]_2 ,
    userclk,
    XMIT_CONFIG,
    \CODE_GRP_reg[0]_0 ,
    gmii_tx_er_ch0,
    gmii_tx_en_ch0,
    XMIT_DATA,
    LOOPBACK,
    INSERT_IDLE_reg_0,
    gmii_txd_ch0,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    RXDATA_USR,
    \TX_CONFIG_reg[14]_0 );
  output XMIT_CONFIG_INT;
  output [3:0]D;
  output [0:0]Q;
  output \CODE_GRP_CNT_reg[0]_0 ;
  output \USE_QSGMII_DATA.TXCHARISK_reg_0 ;
  output \USE_QSGMII_DATA.TXCHARISK_reg_1 ;
  output [7:0]\USE_QSGMII_DATA.TXDATA_reg[7]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[2]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[3]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[5]_0 ;
  output \USE_QSGMII_DATA.TXDATA_reg[7]_1 ;
  input \USE_QSGMII_DATA.TXDATA_reg[7]_2 ;
  input userclk;
  input XMIT_CONFIG;
  input \CODE_GRP_reg[0]_0 ;
  input gmii_tx_er_ch0;
  input gmii_tx_en_ch0;
  input XMIT_DATA;
  input LOOPBACK;
  input INSERT_IDLE_reg_0;
  input [7:0]gmii_txd_ch0;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [7:0]RXDATA_USR;
  input [3:0]\TX_CONFIG_reg[14]_0 ;

  wire C1_OR_C2_i_1_n_0;
  wire C1_OR_C2_reg_n_0;
  wire [7:0]CODE_GRP;
  wire CODE_GRPISK;
  wire CODE_GRPISK_i_1_n_0;
  wire \CODE_GRP[0]_i_1_n_0 ;
  wire \CODE_GRP[0]_i_2_n_0 ;
  wire \CODE_GRP[1]_i_1_n_0 ;
  wire \CODE_GRP[1]_i_2_n_0 ;
  wire \CODE_GRP[2]_i_1_n_0 ;
  wire \CODE_GRP[2]_i_2_n_0 ;
  wire \CODE_GRP[3]_i_1_n_0 ;
  wire \CODE_GRP[3]_i_2_n_0 ;
  wire \CODE_GRP[4]_i_1_n_0 ;
  wire \CODE_GRP[5]_i_1_n_0 ;
  wire \CODE_GRP[6]_i_2_n_0 ;
  wire \CODE_GRP[7]_i_1_n_0 ;
  wire \CODE_GRP[7]_i_2_n_0 ;
  wire \CODE_GRP[7]_i_3_n_0 ;
  wire \CODE_GRP[7]_i_4_n_0 ;
  wire \CODE_GRP_CNT_reg[0]_0 ;
  wire \CODE_GRP_CNT_reg_n_0_[1] ;
  wire \CODE_GRP_reg[0]_0 ;
  wire [7:0]CONFIG_DATA;
  wire \CONFIG_DATA_reg_n_0_[0] ;
  wire \CONFIG_DATA_reg_n_0_[1] ;
  wire \CONFIG_DATA_reg_n_0_[3] ;
  wire \CONFIG_DATA_reg_n_0_[5] ;
  wire \CONFIG_DATA_reg_n_0_[6] ;
  wire \CONFIG_DATA_reg_n_0_[7] ;
  wire [3:0]D;
  wire INSERT_IDLE_i_1_n_0;
  wire INSERT_IDLE_reg_0;
  wire INSERT_IDLE_reg_n_0;
  wire LOOPBACK;
  wire [0:0]Q;
  wire R;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [7:0]RXDATA_USR;
  wire R_i_1__0_n_0;
  wire S;
  wire S0;
  wire T;
  wire T0;
  wire TRIGGER_S;
  wire TRIGGER_S0;
  wire TRIGGER_T;
  wire TXCHARISK_INT;
  wire [7:0]TXD_REG1;
  wire [14:0]TX_CONFIG;
  wire [3:0]\TX_CONFIG_reg[14]_0 ;
  wire TX_EN_REG1;
  wire TX_ER_REG1;
  wire TX_PACKET;
  wire TX_PACKET_REG1;
  wire TX_PACKET_i_1_n_0;
  wire \USE_QSGMII_DATA.TXCHARISK_i_1_n_0 ;
  wire \USE_QSGMII_DATA.TXCHARISK_reg_0 ;
  wire \USE_QSGMII_DATA.TXCHARISK_reg_1 ;
  wire \USE_QSGMII_DATA.TXDATA[0]_i_1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[2]_i_1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[5]_i_1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[6]_i_1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[7]_i_1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[2]_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[3]_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[5]_0 ;
  wire [7:0]\USE_QSGMII_DATA.TXDATA_reg[7]_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[7]_1 ;
  wire \USE_QSGMII_DATA.TXDATA_reg[7]_2 ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ;
  wire V;
  wire V_i_1_n_0;
  wire V_i_2_n_0;
  wire V_i_3_n_0;
  wire V_i_4_n_0;
  wire XMIT_CONFIG;
  wire XMIT_CONFIG_INT;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT_reg_n_0;
  wire gmii_tx_en_ch0;
  wire gmii_tx_er_ch0;
  wire [7:0]gmii_txd_ch0;
  wire p_14_in;
  wire [1:0]plusOp;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    C1_OR_C2_i_1
       (.I0(XMIT_CONFIG_INT),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(C1_OR_C2_reg_n_0),
        .O(C1_OR_C2_i_1_n_0));
  FDRE C1_OR_C2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C1_OR_C2_i_1_n_0),
        .Q(C1_OR_C2_reg_n_0),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  LUT4 #(
    .INIT(16'hAEAA)) 
    CODE_GRPISK_i_1
       (.I0(\CODE_GRP[7]_i_1_n_0 ),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(XMIT_CONFIG_INT),
        .O(CODE_GRPISK_i_1_n_0));
  FDRE CODE_GRPISK_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRPISK_i_1_n_0),
        .Q(CODE_GRPISK),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFF100F1)) 
    \CODE_GRP[0]_i_1 
       (.I0(\CODE_GRP[0]_i_2_n_0 ),
        .I1(V),
        .I2(S),
        .I3(XMIT_CONFIG_INT),
        .I4(\CONFIG_DATA_reg_n_0_[0] ),
        .O(\CODE_GRP[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT4 #(
    .INIT(16'h0111)) 
    \CODE_GRP[0]_i_2 
       (.I0(R),
        .I1(T),
        .I2(TXD_REG1[0]),
        .I3(TX_PACKET),
        .O(\CODE_GRP[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFF00FDFD)) 
    \CODE_GRP[1]_i_1 
       (.I0(\CODE_GRP[1]_i_2_n_0 ),
        .I1(S),
        .I2(V),
        .I3(\CONFIG_DATA_reg_n_0_[1] ),
        .I4(XMIT_CONFIG_INT),
        .O(\CODE_GRP[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT4 #(
    .INIT(16'hAABF)) 
    \CODE_GRP[1]_i_2 
       (.I0(T),
        .I1(TX_PACKET),
        .I2(TXD_REG1[1]),
        .I3(R),
        .O(\CODE_GRP[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA0000FFF3)) 
    \CODE_GRP[2]_i_1 
       (.I0(\CONFIG_DATA_reg_n_0_[7] ),
        .I1(\CODE_GRP[7]_i_3_n_0 ),
        .I2(\CODE_GRP[2]_i_2_n_0 ),
        .I3(TXD_REG1[2]),
        .I4(S),
        .I5(XMIT_CONFIG_INT),
        .O(\CODE_GRP[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \CODE_GRP[2]_i_2 
       (.I0(R),
        .I1(TX_PACKET),
        .O(\CODE_GRP[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFD0D0D0FFD0)) 
    \CODE_GRP[3]_i_1 
       (.I0(TX_PACKET),
        .I1(TXD_REG1[3]),
        .I2(\CODE_GRP[7]_i_4_n_0 ),
        .I3(\CODE_GRP[3]_i_2_n_0 ),
        .I4(XMIT_CONFIG_INT),
        .I5(\CONFIG_DATA_reg_n_0_[3] ),
        .O(\CODE_GRP[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \CODE_GRP[3]_i_2 
       (.I0(INSERT_IDLE_reg_0),
        .I1(S),
        .I2(V),
        .I3(T),
        .O(\CODE_GRP[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF8888888)) 
    \CODE_GRP[4]_i_1 
       (.I0(\CONFIG_DATA_reg_n_0_[7] ),
        .I1(XMIT_CONFIG_INT),
        .I2(TX_PACKET),
        .I3(TXD_REG1[4]),
        .I4(\CODE_GRP[7]_i_4_n_0 ),
        .O(\CODE_GRP[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF8888888)) 
    \CODE_GRP[5]_i_1 
       (.I0(\CONFIG_DATA_reg_n_0_[5] ),
        .I1(XMIT_CONFIG_INT),
        .I2(TX_PACKET),
        .I3(TXD_REG1[5]),
        .I4(\CODE_GRP[7]_i_4_n_0 ),
        .O(\CODE_GRP[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hD000DDDD)) 
    \CODE_GRP[6]_i_2 
       (.I0(XMIT_CONFIG_INT),
        .I1(\CONFIG_DATA_reg_n_0_[6] ),
        .I2(TX_PACKET),
        .I3(TXD_REG1[6]),
        .I4(\CODE_GRP[7]_i_4_n_0 ),
        .O(\CODE_GRP[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h5555554555555555)) 
    \CODE_GRP[7]_i_1 
       (.I0(XMIT_CONFIG_INT),
        .I1(R),
        .I2(TX_PACKET),
        .I3(INSERT_IDLE_reg_0),
        .I4(S),
        .I5(\CODE_GRP[7]_i_3_n_0 ),
        .O(\CODE_GRP[7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hF8888888)) 
    \CODE_GRP[7]_i_2 
       (.I0(\CONFIG_DATA_reg_n_0_[7] ),
        .I1(XMIT_CONFIG_INT),
        .I2(TX_PACKET),
        .I3(TXD_REG1[7]),
        .I4(\CODE_GRP[7]_i_4_n_0 ),
        .O(\CODE_GRP[7]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \CODE_GRP[7]_i_3 
       (.I0(T),
        .I1(V),
        .O(\CODE_GRP[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \CODE_GRP[7]_i_4 
       (.I0(V),
        .I1(S),
        .I2(XMIT_CONFIG_INT),
        .I3(R),
        .I4(T),
        .O(\CODE_GRP[7]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CODE_GRP_CNT[0]_i_1 
       (.I0(Q),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \CODE_GRP_CNT[1]_i_1 
       (.I0(Q),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(plusOp[1]));
  FDSE \CODE_GRP_CNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[0]),
        .Q(Q),
        .S(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDSE \CODE_GRP_CNT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[1]),
        .Q(\CODE_GRP_CNT_reg_n_0_[1] ),
        .S(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE \CODE_GRP_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[0]_i_1_n_0 ),
        .Q(CODE_GRP[0]),
        .R(\CODE_GRP_reg[0]_0 ));
  FDRE \CODE_GRP_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[1]_i_1_n_0 ),
        .Q(CODE_GRP[1]),
        .R(\CODE_GRP_reg[0]_0 ));
  FDSE \CODE_GRP_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[2]_i_1_n_0 ),
        .Q(CODE_GRP[2]),
        .S(\CODE_GRP_reg[0]_0 ));
  FDRE \CODE_GRP_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[3]_i_1_n_0 ),
        .Q(CODE_GRP[3]),
        .R(1'b0));
  FDSE \CODE_GRP_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[4]_i_1_n_0 ),
        .Q(CODE_GRP[4]),
        .S(\CODE_GRP[7]_i_1_n_0 ));
  FDSE \CODE_GRP_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[5]_i_1_n_0 ),
        .Q(CODE_GRP[5]),
        .S(\CODE_GRP[7]_i_1_n_0 ));
  FDRE \CODE_GRP_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[6]_i_2_n_0 ),
        .Q(CODE_GRP[6]),
        .R(\CODE_GRP_reg[0]_0 ));
  FDSE \CODE_GRP_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[7]_i_2_n_0 ),
        .Q(CODE_GRP[7]),
        .S(\CODE_GRP[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT4 #(
    .INIT(16'h3404)) 
    \CONFIG_DATA[0]_i_1 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(TX_CONFIG[0]),
        .O(CONFIG_DATA[0]));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \CONFIG_DATA[1]_i_1 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(Q),
        .O(CONFIG_DATA[1]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'h83)) 
    \CONFIG_DATA[3]_i_1 
       (.I0(TX_CONFIG[11]),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(Q),
        .O(CONFIG_DATA[3]));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT4 #(
    .INIT(16'hC707)) 
    \CONFIG_DATA[5]_i_1 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(TX_CONFIG[13]),
        .O(CONFIG_DATA[5]));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT4 #(
    .INIT(16'hC808)) 
    \CONFIG_DATA[6]_i_1 
       (.I0(C1_OR_C2_reg_n_0),
        .I1(Q),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(TX_CONFIG[14]),
        .O(CONFIG_DATA[6]));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'h13)) 
    \CONFIG_DATA[7]_i_1 
       (.I0(Q),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(C1_OR_C2_reg_n_0),
        .O(CONFIG_DATA[7]));
  FDRE \CONFIG_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[0]),
        .Q(\CONFIG_DATA_reg_n_0_[0] ),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE \CONFIG_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[1]),
        .Q(\CONFIG_DATA_reg_n_0_[1] ),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE \CONFIG_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[3]),
        .Q(\CONFIG_DATA_reg_n_0_[3] ),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE \CONFIG_DATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[5]),
        .Q(\CONFIG_DATA_reg_n_0_[5] ),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE \CONFIG_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[6]),
        .Q(\CONFIG_DATA_reg_n_0_[6] ),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE \CONFIG_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[7]),
        .Q(\CONFIG_DATA_reg_n_0_[7] ),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  LUT6 #(
    .INIT(64'h00000000FFFF0002)) 
    INSERT_IDLE_i_1
       (.I0(\CODE_GRP[7]_i_3_n_0 ),
        .I1(S),
        .I2(TX_PACKET),
        .I3(R),
        .I4(INSERT_IDLE_reg_0),
        .I5(XMIT_CONFIG_INT),
        .O(INSERT_IDLE_i_1_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1_n_0),
        .Q(INSERT_IDLE_reg_n_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hDDDCCCCC)) 
    R_i_1__0
       (.I0(S),
        .I1(T),
        .I2(TX_ER_REG1),
        .I3(Q),
        .I4(R),
        .O(R_i_1__0_n_0));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R_i_1__0_n_0),
        .Q(R),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  LUT6 #(
    .INIT(64'h88888888A8AA8888)) 
    S_i_1__0
       (.I0(XMIT_DATA_INT_reg_n_0),
        .I1(TRIGGER_S),
        .I2(TX_ER_REG1),
        .I3(Q),
        .I4(gmii_tx_en_ch0),
        .I5(TX_EN_REG1),
        .O(S0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    TRIGGER_S_i_1
       (.I0(TX_ER_REG1),
        .I1(Q),
        .I2(gmii_tx_en_ch0),
        .I3(TX_EN_REG1),
        .O(TRIGGER_S0));
  FDRE TRIGGER_S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TRIGGER_S0),
        .Q(TRIGGER_S),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT2 #(
    .INIT(4'h2)) 
    TRIGGER_T_i_1
       (.I0(TX_EN_REG1),
        .I1(gmii_tx_en_ch0),
        .O(p_14_in));
  FDRE TRIGGER_T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(p_14_in),
        .Q(TRIGGER_T),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE \TXD_REG1_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[0]),
        .Q(TXD_REG1[0]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[1]),
        .Q(TXD_REG1[1]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[2]),
        .Q(TXD_REG1[2]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[3]),
        .Q(TXD_REG1[3]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[4]),
        .Q(TXD_REG1[4]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[5]),
        .Q(TXD_REG1[5]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[6]),
        .Q(TXD_REG1[6]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[7]),
        .Q(TXD_REG1[7]),
        .R(1'b0));
  FDRE \TX_CONFIG_reg[0] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [0]),
        .Q(TX_CONFIG[0]),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE \TX_CONFIG_reg[11] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [1]),
        .Q(TX_CONFIG[11]),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE \TX_CONFIG_reg[13] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [2]),
        .Q(TX_CONFIG[13]),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE \TX_CONFIG_reg[14] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_reg[14]_0 [3]),
        .Q(TX_CONFIG[14]),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE TX_EN_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_en_ch0),
        .Q(TX_EN_REG1),
        .R(1'b0));
  FDRE TX_ER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_er_ch0),
        .Q(TX_ER_REG1),
        .R(1'b0));
  FDRE TX_PACKET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET),
        .Q(TX_PACKET_REG1),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'hDC)) 
    TX_PACKET_i_1
       (.I0(T),
        .I1(S),
        .I2(TX_PACKET),
        .O(TX_PACKET_i_1_n_0));
  FDRE TX_PACKET_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET_i_1_n_0),
        .Q(TX_PACKET),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  LUT6 #(
    .INIT(64'h88888888FFF88888)) 
    T_i_1
       (.I0(TRIGGER_T),
        .I1(V),
        .I2(S),
        .I3(TX_PACKET),
        .I4(TX_EN_REG1),
        .I5(gmii_tx_en_ch0),
        .O(T0));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T0),
        .Q(T),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  LUT4 #(
    .INIT(16'h002A)) 
    \USE_QSGMII_DATA.TXCHARISK_i_1 
       (.I0(CODE_GRPISK),
        .I1(Q),
        .I2(INSERT_IDLE_reg_n_0),
        .I3(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ),
        .O(\USE_QSGMII_DATA.TXCHARISK_i_1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXCHARISK_i_1_n_0 ),
        .Q(TXCHARISK_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[0]_i_1 
       (.I0(CODE_GRP[0]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[2]_i_1 
       (.I0(CODE_GRP[2]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[2]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[5]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[6]_i_1 
       (.I0(CODE_GRP[6]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[7]_i_1 
       (.I0(CODE_GRP[7]),
        .I1(INSERT_IDLE_reg_n_0),
        .I2(Q),
        .O(\USE_QSGMII_DATA.TXDATA[7]_i_1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[0]_i_1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[1]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[2]_i_1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[3]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[4]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[5]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[6]_i_1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[7]_i_1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_i_1 
       (.I0(TXCHARISK_INT),
        .I1(LOOPBACK),
        .I2(RXCHARISCOMMA_USR),
        .O(\USE_QSGMII_DATA.TXCHARISK_reg_1 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_i_1 
       (.I0(TXCHARISK_INT),
        .I1(LOOPBACK),
        .I2(RXCHARISK_USR),
        .O(\USE_QSGMII_DATA.TXCHARISK_reg_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[0]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[0]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[1]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[1]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [1]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[2]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[2]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [2]));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[3]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[3]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [3]));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[4]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[4]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [4]));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[5]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[5]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [5]));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[6]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[6]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [6]));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[7]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .I1(LOOPBACK),
        .I2(RXDATA_USR[7]),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_0 [7]));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.TXCHARISK_i_1 
       (.I0(Q),
        .I1(LOOPBACK),
        .I2(TXCHARISK_INT),
        .O(\CODE_GRP_CNT_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[0]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .I1(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ),
        .I2(LOOPBACK),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[1]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .I1(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ),
        .I2(LOOPBACK),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[2]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .I1(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[2]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[3]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .I1(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[3]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \USE_ROCKET_IO.TXDATA[4]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ),
        .I1(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I2(LOOPBACK),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[5]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .I1(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[5]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT4 #(
    .INIT(16'h0074)) 
    \USE_ROCKET_IO.TXDATA[6]_i_1 
       (.I0(Q),
        .I1(LOOPBACK),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I3(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.TXDATA[7]_i_2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .I1(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ),
        .I2(LOOPBACK),
        .O(\USE_QSGMII_DATA.TXDATA_reg[7]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    V_i_1
       (.I0(V_i_2_n_0),
        .I1(S),
        .I2(V),
        .O(V_i_1_n_0));
  LUT5 #(
    .INIT(32'h0080AAAA)) 
    V_i_2
       (.I0(XMIT_DATA_INT_reg_n_0),
        .I1(TX_EN_REG1),
        .I2(TX_ER_REG1),
        .I3(TX_PACKET_REG1),
        .I4(V_i_3_n_0),
        .O(V_i_2_n_0));
  LUT6 #(
    .INIT(64'h00FF0101FFFFFFFF)) 
    V_i_3
       (.I0(V_i_4_n_0),
        .I1(gmii_txd_ch0[5]),
        .I2(gmii_txd_ch0[7]),
        .I3(TX_PACKET),
        .I4(gmii_tx_en_ch0),
        .I5(gmii_tx_er_ch0),
        .O(V_i_3_n_0));
  LUT6 #(
    .INIT(64'hFFFFDFFFFFFFFFFF)) 
    V_i_4
       (.I0(gmii_txd_ch0[2]),
        .I1(gmii_txd_ch0[4]),
        .I2(gmii_txd_ch0[3]),
        .I3(gmii_txd_ch0[0]),
        .I4(gmii_txd_ch0[6]),
        .I5(gmii_txd_ch0[1]),
        .O(V_i_4_n_0));
  FDRE V_reg
       (.C(userclk),
        .CE(1'b1),
        .D(V_i_1_n_0),
        .Q(V),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  LUT2 #(
    .INIT(4'h1)) 
    XMIT_CONFIG_INT_i_1__0
       (.I0(Q),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(XMIT_DATA_INT));
  FDSE XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_CONFIG),
        .Q(XMIT_CONFIG_INT),
        .S(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
  FDRE XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_DATA),
        .Q(XMIT_DATA_INT_reg_n_0),
        .R(\USE_QSGMII_DATA.TXDATA_reg[7]_2 ));
endmodule

(* ORIG_REF_NAME = "qsgmii_reset_sync" *) 
module quadsgmii_0_TEST_qsgmii_reset_sync
   (RESET_OUT,
    userclk,
    reset);
  output RESET_OUT;
  input userclk;
  input reset;

  wire RESET_OUT;
  wire RESET_SYNC_REG1;
  wire RESET_SYNC_REG2;
  wire RESET_SYNC_REG3;
  wire RESET_SYNC_REG4;
  wire RESET_SYNC_REG5;
  wire reset;
  wire userclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC1
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(reset),
        .Q(RESET_SYNC_REG1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC2
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG1),
        .PRE(reset),
        .Q(RESET_SYNC_REG2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC3
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG2),
        .PRE(reset),
        .Q(RESET_SYNC_REG3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC4
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG3),
        .PRE(reset),
        .Q(RESET_SYNC_REG4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC5
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG4),
        .PRE(reset),
        .Q(RESET_SYNC_REG5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    RESET_SYNC6
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG5),
        .Q(RESET_OUT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_reset_sync" *) 
module quadsgmii_0_TEST_qsgmii_reset_sync_89
   (RESET_OUT,
    rxrecclk,
    SR);
  output RESET_OUT;
  input rxrecclk;
  input [0:0]SR;

  wire RESET_OUT;
  wire RESET_SYNC_REG1;
  wire RESET_SYNC_REG2;
  wire RESET_SYNC_REG3;
  wire RESET_SYNC_REG4;
  wire RESET_SYNC_REG5;
  wire [0:0]SR;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(SR),
        .Q(RESET_SYNC_REG1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG1),
        .PRE(SR),
        .Q(RESET_SYNC_REG2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG2),
        .PRE(SR),
        .Q(RESET_SYNC_REG3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG3),
        .PRE(SR),
        .Q(RESET_SYNC_REG4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG4),
        .PRE(SR),
        .Q(RESET_SYNC_REG5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    RESET_SYNC6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG5),
        .Q(RESET_OUT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_reset_sync" *) 
module quadsgmii_0_TEST_qsgmii_reset_sync_90
   (RESET_OUT,
    rxrecclk,
    SS);
  output RESET_OUT;
  input rxrecclk;
  input [0:0]SS;

  wire RESET_OUT;
  wire RESET_SYNC_REG1;
  wire RESET_SYNC_REG2;
  wire RESET_SYNC_REG3;
  wire RESET_SYNC_REG4;
  wire RESET_SYNC_REG5;
  wire [0:0]SS;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(SS),
        .Q(RESET_SYNC_REG1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG1),
        .PRE(SS),
        .Q(RESET_SYNC_REG2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG2),
        .PRE(SS),
        .Q(RESET_SYNC_REG3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG3),
        .PRE(SS),
        .Q(RESET_SYNC_REG4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG4),
        .PRE(SS),
        .Q(RESET_SYNC_REG5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    RESET_SYNC6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG5),
        .Q(RESET_OUT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_reset_sync" *) 
module quadsgmii_0_TEST_qsgmii_reset_sync_91
   (RESET_OUT,
    rxrecclk,
    RESET_SYNC1_0);
  output RESET_OUT;
  input rxrecclk;
  input [0:0]RESET_SYNC1_0;

  wire RESET_OUT;
  wire [0:0]RESET_SYNC1_0;
  wire RESET_SYNC_REG1;
  wire RESET_SYNC_REG2;
  wire RESET_SYNC_REG3;
  wire RESET_SYNC_REG4;
  wire RESET_SYNC_REG5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_SYNC1_0),
        .Q(RESET_SYNC_REG1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG1),
        .PRE(RESET_SYNC1_0),
        .Q(RESET_SYNC_REG2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG2),
        .PRE(RESET_SYNC1_0),
        .Q(RESET_SYNC_REG3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG3),
        .PRE(RESET_SYNC1_0),
        .Q(RESET_SYNC_REG4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG4),
        .PRE(RESET_SYNC1_0),
        .Q(RESET_SYNC_REG5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    RESET_SYNC6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG5),
        .Q(RESET_OUT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_reset_sync" *) 
module quadsgmii_0_TEST_qsgmii_reset_sync_92
   (RESET_OUT,
    rxrecclk,
    RESET_SYNC1_0);
  output RESET_OUT;
  input rxrecclk;
  input [0:0]RESET_SYNC1_0;

  wire RESET_OUT;
  wire [0:0]RESET_SYNC1_0;
  wire RESET_SYNC_REG1;
  wire RESET_SYNC_REG2;
  wire RESET_SYNC_REG3;
  wire RESET_SYNC_REG4;
  wire RESET_SYNC_REG5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_SYNC1_0),
        .Q(RESET_SYNC_REG1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG1),
        .PRE(RESET_SYNC1_0),
        .Q(RESET_SYNC_REG2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG2),
        .PRE(RESET_SYNC1_0),
        .Q(RESET_SYNC_REG3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG3),
        .PRE(RESET_SYNC1_0),
        .Q(RESET_SYNC_REG4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG4),
        .PRE(RESET_SYNC1_0),
        .Q(RESET_SYNC_REG5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    RESET_SYNC6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG5),
        .Q(RESET_OUT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_100
   (GRAY_TO_BIN,
    D,
    Q,
    data_out,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    \RD_OCCUPANCY_reg[6]_2 ,
    \RD_OCCUPANCY_reg[6]_3 ,
    DI,
    S,
    data_sync_reg1_0,
    userclk);
  output [0:0]GRAY_TO_BIN;
  output [6:0]D;
  input [1:0]Q;
  input data_out;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input \RD_OCCUPANCY_reg[6]_2 ;
  input \RD_OCCUPANCY_reg[6]_3 ;
  input [4:0]DI;
  input [4:0]S;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [6:0]D;
  wire [4:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [1:0]Q;
  wire \RD_OCCUPANCY[6]_i_13__2_n_0 ;
  wire \RD_OCCUPANCY[6]_i_14__2_n_0 ;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire \RD_OCCUPANCY_reg[6]_2 ;
  wire \RD_OCCUPANCY_reg[6]_3 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__2_n_2 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__2_n_3 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__2_n_4 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__2_n_5 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__2_n_6 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__2_n_7 ;
  wire [4:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire p_1_out;
  wire userclk;
  wire [7:6]\NLW_RD_OCCUPANCY_reg[6]_i_1__2_CO_UNCONNECTED ;
  wire [7:7]\NLW_RD_OCCUPANCY_reg[6]_i_1__2_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[6]_i_13__2 
       (.I0(GRAY_TO_BIN),
        .I1(Q[1]),
        .O(\RD_OCCUPANCY[6]_i_13__2_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[6]_i_14__2 
       (.I0(GRAY_TO_BIN),
        .I1(data_out),
        .I2(Q[0]),
        .O(\RD_OCCUPANCY[6]_i_14__2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \RD_OCCUPANCY[6]_i_6__2 
       (.I0(p_1_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(\RD_OCCUPANCY_reg[6]_2 ),
        .I5(\RD_OCCUPANCY_reg[6]_3 ),
        .O(GRAY_TO_BIN));
  CARRY8 \RD_OCCUPANCY_reg[6]_i_1__2 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_RD_OCCUPANCY_reg[6]_i_1__2_CO_UNCONNECTED [7:6],\RD_OCCUPANCY_reg[6]_i_1__2_n_2 ,\RD_OCCUPANCY_reg[6]_i_1__2_n_3 ,\RD_OCCUPANCY_reg[6]_i_1__2_n_4 ,\RD_OCCUPANCY_reg[6]_i_1__2_n_5 ,\RD_OCCUPANCY_reg[6]_i_1__2_n_6 ,\RD_OCCUPANCY_reg[6]_i_1__2_n_7 }),
        .DI({1'b0,1'b0,DI[4:1],GRAY_TO_BIN,DI[0]}),
        .O({\NLW_RD_OCCUPANCY_reg[6]_i_1__2_O_UNCONNECTED [7],D}),
        .S({1'b0,S,\RD_OCCUPANCY[6]_i_13__2_n_0 ,\RD_OCCUPANCY[6]_i_14__2_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_1_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_101
   (DI,
    data_out,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    \RD_OCCUPANCY_reg[6]_2 ,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input \RD_OCCUPANCY_reg[6]_2 ;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire \RD_OCCUPANCY_reg[6]_2 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk;

  LUT5 #(
    .INIT(32'h96696996)) 
    \RD_OCCUPANCY[6]_i_5__2 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(\RD_OCCUPANCY_reg[6]_2 ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_102
   (S,
    data_out,
    DI,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    \RD_OCCUPANCY_reg[6]_2 ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input \RD_OCCUPANCY_reg[6]_2 ;
  input [0:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire \RD_OCCUPANCY_reg[6]_2 ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \RD_OCCUPANCY[6]_i_12__2 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(\RD_OCCUPANCY_reg[6]_2 ),
        .I5(Q),
        .O(S));
  LUT4 #(
    .INIT(16'h6996)) 
    \RD_OCCUPANCY[6]_i_4__2 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_103
   (S,
    data_out,
    DI,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input [0:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \RD_OCCUPANCY[6]_i_11__2 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(Q),
        .O(S));
  LUT3 #(
    .INIT(8'h96)) 
    \RD_OCCUPANCY[6]_i_3__2 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_104
   (S,
    data_out,
    DI,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input [0:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT4 #(
    .INIT(16'h9669)) 
    \RD_OCCUPANCY[6]_i_10__2 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(Q),
        .O(S));
  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[6]_i_2__2 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_105
   (S,
    data_out,
    \RD_OCCUPANCY_reg[6] ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [1:0]S;
  output data_out;
  input \RD_OCCUPANCY_reg[6] ;
  input [1:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [1:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire [1:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[6]_i_8__2 
       (.I0(data_out),
        .I1(Q[1]),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[6]_i_9__2 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(Q[0]),
        .O(S[0]));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_106
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_107
   (S,
    Q,
    data_out,
    \WR_OCCUPANCY[6]_i_8__1_0 ,
    \WR_OCCUPANCY[6]_i_8__1_1 ,
    \WR_OCCUPANCY[6]_i_8__1_2 ,
    \WR_OCCUPANCY[6]_i_8__1_3 ,
    \WR_OCCUPANCY_reg[6] ,
    data_sync_reg1_0,
    rxrecclk);
  output [1:0]S;
  input [1:0]Q;
  input data_out;
  input \WR_OCCUPANCY[6]_i_8__1_0 ;
  input \WR_OCCUPANCY[6]_i_8__1_1 ;
  input \WR_OCCUPANCY[6]_i_8__1_2 ;
  input \WR_OCCUPANCY[6]_i_8__1_3 ;
  input \WR_OCCUPANCY_reg[6] ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [1:0]Q;
  wire [1:0]S;
  wire \WR_OCCUPANCY[6]_i_8__1_0 ;
  wire \WR_OCCUPANCY[6]_i_8__1_1 ;
  wire \WR_OCCUPANCY[6]_i_8__1_2 ;
  wire \WR_OCCUPANCY[6]_i_8__1_3 ;
  wire \WR_OCCUPANCY_reg[6] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire p_31_in;
  wire p_4_in27_in;
  wire rxrecclk;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[6]_i_7__1 
       (.I0(Q[1]),
        .I1(p_31_in),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[6]_i_8__1 
       (.I0(Q[0]),
        .I1(p_31_in),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .O(S[0]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \WR_OCCUPANCY[6]_i_9__1 
       (.I0(p_4_in27_in),
        .I1(data_out),
        .I2(\WR_OCCUPANCY[6]_i_8__1_0 ),
        .I3(\WR_OCCUPANCY[6]_i_8__1_1 ),
        .I4(\WR_OCCUPANCY[6]_i_8__1_2 ),
        .I5(\WR_OCCUPANCY[6]_i_8__1_3 ),
        .O(p_31_in));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_4_in27_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_108
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_109
   (S,
    data_out,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    \WR_OCCUPANCY_reg[6]_0 ,
    \WR_OCCUPANCY_reg[6]_1 ,
    \WR_OCCUPANCY_reg[6]_2 ,
    data_sync_reg1_0,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input \WR_OCCUPANCY_reg[6]_0 ;
  input \WR_OCCUPANCY_reg[6]_1 ;
  input \WR_OCCUPANCY_reg[6]_2 ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]S;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_0 ;
  wire \WR_OCCUPANCY_reg[6]_1 ;
  wire \WR_OCCUPANCY_reg[6]_2 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;

  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \WR_OCCUPANCY[6]_i_6__1 
       (.I0(Q),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .I3(\WR_OCCUPANCY_reg[6]_0 ),
        .I4(\WR_OCCUPANCY_reg[6]_1 ),
        .I5(\WR_OCCUPANCY_reg[6]_2 ),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_110
   (S,
    data_out,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    \WR_OCCUPANCY_reg[6]_0 ,
    \WR_OCCUPANCY_reg[6]_1 ,
    data_sync_reg1_0,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input \WR_OCCUPANCY_reg[6]_0 ;
  input \WR_OCCUPANCY_reg[6]_1 ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]S;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_0 ;
  wire \WR_OCCUPANCY_reg[6]_1 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \WR_OCCUPANCY[6]_i_5__1 
       (.I0(Q),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .I3(\WR_OCCUPANCY_reg[6]_0 ),
        .I4(\WR_OCCUPANCY_reg[6]_1 ),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_111
   (S,
    data_out,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    \WR_OCCUPANCY_reg[6]_0 ,
    data_sync_reg1_0,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input \WR_OCCUPANCY_reg[6]_0 ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]S;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_0 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;

  LUT4 #(
    .INIT(16'h9669)) 
    \WR_OCCUPANCY[6]_i_4__1 
       (.I0(Q),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .I3(\WR_OCCUPANCY_reg[6]_0 ),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_112
   (data_out,
    D,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    S,
    data_sync_reg1_0,
    rxrecclk);
  output data_out;
  output [5:0]D;
  input [6:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input [4:0]S;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [5:0]D;
  wire [6:0]Q;
  wire [4:0]S;
  wire \WR_OCCUPANCY[6]_i_2__1_n_0 ;
  wire \WR_OCCUPANCY[6]_i_3__1_n_0 ;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_i_1__1_n_2 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__1_n_3 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__1_n_4 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__1_n_5 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__1_n_6 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__1_n_7 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;
  wire [7:6]\NLW_WR_OCCUPANCY_reg[6]_i_1__1_CO_UNCONNECTED ;
  wire [7:0]\NLW_WR_OCCUPANCY_reg[6]_i_1__1_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[6]_i_2__1 
       (.I0(Q[6]),
        .I1(data_out),
        .O(\WR_OCCUPANCY[6]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[6]_i_3__1 
       (.I0(Q[5]),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .O(\WR_OCCUPANCY[6]_i_3__1_n_0 ));
  CARRY8 \WR_OCCUPANCY_reg[6]_i_1__1 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_WR_OCCUPANCY_reg[6]_i_1__1_CO_UNCONNECTED [7:6],\WR_OCCUPANCY_reg[6]_i_1__1_n_2 ,\WR_OCCUPANCY_reg[6]_i_1__1_n_3 ,\WR_OCCUPANCY_reg[6]_i_1__1_n_4 ,\WR_OCCUPANCY_reg[6]_i_1__1_n_5 ,\WR_OCCUPANCY_reg[6]_i_1__1_n_6 ,\WR_OCCUPANCY_reg[6]_i_1__1_n_7 }),
        .DI({1'b0,1'b0,Q[5:0]}),
        .O({\NLW_WR_OCCUPANCY_reg[6]_i_1__1_O_UNCONNECTED [7],D,\NLW_WR_OCCUPANCY_reg[6]_i_1__1_O_UNCONNECTED [0]}),
        .S({1'b0,\WR_OCCUPANCY[6]_i_2__1_n_0 ,\WR_OCCUPANCY[6]_i_3__1_n_0 ,S}));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_113
   (DI,
    data_out,
    GRAY_TO_BIN,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input [0:0]GRAY_TO_BIN;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk;

  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[6]_i_7__1 
       (.I0(data_out),
        .I1(GRAY_TO_BIN),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_114
   (GRAY_TO_BIN,
    D,
    Q,
    data_out,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    \RD_OCCUPANCY_reg[6]_2 ,
    \RD_OCCUPANCY_reg[6]_3 ,
    DI,
    S,
    data_sync_reg1_0,
    userclk);
  output [0:0]GRAY_TO_BIN;
  output [6:0]D;
  input [1:0]Q;
  input data_out;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input \RD_OCCUPANCY_reg[6]_2 ;
  input \RD_OCCUPANCY_reg[6]_3 ;
  input [4:0]DI;
  input [4:0]S;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [6:0]D;
  wire [4:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [1:0]Q;
  wire \RD_OCCUPANCY[6]_i_13__1_n_0 ;
  wire \RD_OCCUPANCY[6]_i_14__1_n_0 ;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire \RD_OCCUPANCY_reg[6]_2 ;
  wire \RD_OCCUPANCY_reg[6]_3 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__1_n_2 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__1_n_3 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__1_n_4 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__1_n_5 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__1_n_6 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__1_n_7 ;
  wire [4:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire p_1_out;
  wire userclk;
  wire [7:6]\NLW_RD_OCCUPANCY_reg[6]_i_1__1_CO_UNCONNECTED ;
  wire [7:7]\NLW_RD_OCCUPANCY_reg[6]_i_1__1_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[6]_i_13__1 
       (.I0(GRAY_TO_BIN),
        .I1(Q[1]),
        .O(\RD_OCCUPANCY[6]_i_13__1_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[6]_i_14__1 
       (.I0(GRAY_TO_BIN),
        .I1(data_out),
        .I2(Q[0]),
        .O(\RD_OCCUPANCY[6]_i_14__1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \RD_OCCUPANCY[6]_i_6__1 
       (.I0(p_1_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(\RD_OCCUPANCY_reg[6]_2 ),
        .I5(\RD_OCCUPANCY_reg[6]_3 ),
        .O(GRAY_TO_BIN));
  CARRY8 \RD_OCCUPANCY_reg[6]_i_1__1 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_RD_OCCUPANCY_reg[6]_i_1__1_CO_UNCONNECTED [7:6],\RD_OCCUPANCY_reg[6]_i_1__1_n_2 ,\RD_OCCUPANCY_reg[6]_i_1__1_n_3 ,\RD_OCCUPANCY_reg[6]_i_1__1_n_4 ,\RD_OCCUPANCY_reg[6]_i_1__1_n_5 ,\RD_OCCUPANCY_reg[6]_i_1__1_n_6 ,\RD_OCCUPANCY_reg[6]_i_1__1_n_7 }),
        .DI({1'b0,1'b0,DI[4:1],GRAY_TO_BIN,DI[0]}),
        .O({\NLW_RD_OCCUPANCY_reg[6]_i_1__1_O_UNCONNECTED [7],D}),
        .S({1'b0,S,\RD_OCCUPANCY[6]_i_13__1_n_0 ,\RD_OCCUPANCY[6]_i_14__1_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_1_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_115
   (DI,
    data_out,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    \RD_OCCUPANCY_reg[6]_2 ,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input \RD_OCCUPANCY_reg[6]_2 ;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire \RD_OCCUPANCY_reg[6]_2 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk;

  LUT5 #(
    .INIT(32'h96696996)) 
    \RD_OCCUPANCY[6]_i_5__1 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(\RD_OCCUPANCY_reg[6]_2 ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_116
   (S,
    data_out,
    DI,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    \RD_OCCUPANCY_reg[6]_2 ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input \RD_OCCUPANCY_reg[6]_2 ;
  input [0:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire \RD_OCCUPANCY_reg[6]_2 ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \RD_OCCUPANCY[6]_i_12__1 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(\RD_OCCUPANCY_reg[6]_2 ),
        .I5(Q),
        .O(S));
  LUT4 #(
    .INIT(16'h6996)) 
    \RD_OCCUPANCY[6]_i_4__1 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_117
   (S,
    data_out,
    DI,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input [0:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \RD_OCCUPANCY[6]_i_11__1 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(Q),
        .O(S));
  LUT3 #(
    .INIT(8'h96)) 
    \RD_OCCUPANCY[6]_i_3__1 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_118
   (S,
    data_out,
    DI,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input [0:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT4 #(
    .INIT(16'h9669)) 
    \RD_OCCUPANCY[6]_i_10__1 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(Q),
        .O(S));
  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[6]_i_2__1 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_119
   (S,
    data_out,
    \RD_OCCUPANCY_reg[6] ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [1:0]S;
  output data_out;
  input \RD_OCCUPANCY_reg[6] ;
  input [1:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [1:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire [1:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[6]_i_8__1 
       (.I0(data_out),
        .I1(Q[1]),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[6]_i_9__1 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(Q[0]),
        .O(S[0]));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_120
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_121
   (S,
    Q,
    data_out,
    \WR_OCCUPANCY[6]_i_8__0_0 ,
    \WR_OCCUPANCY[6]_i_8__0_1 ,
    \WR_OCCUPANCY[6]_i_8__0_2 ,
    \WR_OCCUPANCY[6]_i_8__0_3 ,
    \WR_OCCUPANCY_reg[6] ,
    data_sync_reg1_0,
    rxrecclk);
  output [1:0]S;
  input [1:0]Q;
  input data_out;
  input \WR_OCCUPANCY[6]_i_8__0_0 ;
  input \WR_OCCUPANCY[6]_i_8__0_1 ;
  input \WR_OCCUPANCY[6]_i_8__0_2 ;
  input \WR_OCCUPANCY[6]_i_8__0_3 ;
  input \WR_OCCUPANCY_reg[6] ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [1:0]Q;
  wire [1:0]S;
  wire \WR_OCCUPANCY[6]_i_8__0_0 ;
  wire \WR_OCCUPANCY[6]_i_8__0_1 ;
  wire \WR_OCCUPANCY[6]_i_8__0_2 ;
  wire \WR_OCCUPANCY[6]_i_8__0_3 ;
  wire \WR_OCCUPANCY_reg[6] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire p_31_in;
  wire p_4_in27_in;
  wire rxrecclk;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[6]_i_7__0 
       (.I0(Q[1]),
        .I1(p_31_in),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[6]_i_8__0 
       (.I0(Q[0]),
        .I1(p_31_in),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .O(S[0]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \WR_OCCUPANCY[6]_i_9__0 
       (.I0(p_4_in27_in),
        .I1(data_out),
        .I2(\WR_OCCUPANCY[6]_i_8__0_0 ),
        .I3(\WR_OCCUPANCY[6]_i_8__0_1 ),
        .I4(\WR_OCCUPANCY[6]_i_8__0_2 ),
        .I5(\WR_OCCUPANCY[6]_i_8__0_3 ),
        .O(p_31_in));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_4_in27_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_122
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_123
   (S,
    data_out,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    \WR_OCCUPANCY_reg[6]_0 ,
    \WR_OCCUPANCY_reg[6]_1 ,
    \WR_OCCUPANCY_reg[6]_2 ,
    data_sync_reg1_0,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input \WR_OCCUPANCY_reg[6]_0 ;
  input \WR_OCCUPANCY_reg[6]_1 ;
  input \WR_OCCUPANCY_reg[6]_2 ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]S;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_0 ;
  wire \WR_OCCUPANCY_reg[6]_1 ;
  wire \WR_OCCUPANCY_reg[6]_2 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;

  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \WR_OCCUPANCY[6]_i_6__0 
       (.I0(Q),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .I3(\WR_OCCUPANCY_reg[6]_0 ),
        .I4(\WR_OCCUPANCY_reg[6]_1 ),
        .I5(\WR_OCCUPANCY_reg[6]_2 ),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_124
   (S,
    data_out,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    \WR_OCCUPANCY_reg[6]_0 ,
    \WR_OCCUPANCY_reg[6]_1 ,
    data_sync_reg1_0,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input \WR_OCCUPANCY_reg[6]_0 ;
  input \WR_OCCUPANCY_reg[6]_1 ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]S;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_0 ;
  wire \WR_OCCUPANCY_reg[6]_1 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \WR_OCCUPANCY[6]_i_5__0 
       (.I0(Q),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .I3(\WR_OCCUPANCY_reg[6]_0 ),
        .I4(\WR_OCCUPANCY_reg[6]_1 ),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_125
   (S,
    data_out,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    \WR_OCCUPANCY_reg[6]_0 ,
    data_sync_reg1_0,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input \WR_OCCUPANCY_reg[6]_0 ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]S;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_0 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;

  LUT4 #(
    .INIT(16'h9669)) 
    \WR_OCCUPANCY[6]_i_4__0 
       (.I0(Q),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .I3(\WR_OCCUPANCY_reg[6]_0 ),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_126
   (data_out,
    D,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    S,
    data_sync_reg1_0,
    rxrecclk);
  output data_out;
  output [5:0]D;
  input [6:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input [4:0]S;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [5:0]D;
  wire [6:0]Q;
  wire [4:0]S;
  wire \WR_OCCUPANCY[6]_i_2__0_n_0 ;
  wire \WR_OCCUPANCY[6]_i_3__0_n_0 ;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_i_1__0_n_2 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__0_n_3 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__0_n_4 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__0_n_5 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__0_n_6 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__0_n_7 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;
  wire [7:6]\NLW_WR_OCCUPANCY_reg[6]_i_1__0_CO_UNCONNECTED ;
  wire [7:0]\NLW_WR_OCCUPANCY_reg[6]_i_1__0_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[6]_i_2__0 
       (.I0(Q[6]),
        .I1(data_out),
        .O(\WR_OCCUPANCY[6]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[6]_i_3__0 
       (.I0(Q[5]),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .O(\WR_OCCUPANCY[6]_i_3__0_n_0 ));
  CARRY8 \WR_OCCUPANCY_reg[6]_i_1__0 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_WR_OCCUPANCY_reg[6]_i_1__0_CO_UNCONNECTED [7:6],\WR_OCCUPANCY_reg[6]_i_1__0_n_2 ,\WR_OCCUPANCY_reg[6]_i_1__0_n_3 ,\WR_OCCUPANCY_reg[6]_i_1__0_n_4 ,\WR_OCCUPANCY_reg[6]_i_1__0_n_5 ,\WR_OCCUPANCY_reg[6]_i_1__0_n_6 ,\WR_OCCUPANCY_reg[6]_i_1__0_n_7 }),
        .DI({1'b0,1'b0,Q[5:0]}),
        .O({\NLW_WR_OCCUPANCY_reg[6]_i_1__0_O_UNCONNECTED [7],D,\NLW_WR_OCCUPANCY_reg[6]_i_1__0_O_UNCONNECTED [0]}),
        .S({1'b0,\WR_OCCUPANCY[6]_i_2__0_n_0 ,\WR_OCCUPANCY[6]_i_3__0_n_0 ,S}));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_127
   (DI,
    data_out,
    GRAY_TO_BIN,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input [0:0]GRAY_TO_BIN;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk;

  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[6]_i_7__0 
       (.I0(data_out),
        .I1(GRAY_TO_BIN),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_128
   (GRAY_TO_BIN,
    D,
    Q,
    data_out,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    \RD_OCCUPANCY_reg[6]_2 ,
    \RD_OCCUPANCY_reg[6]_3 ,
    DI,
    S,
    data_sync_reg1_0,
    userclk);
  output [0:0]GRAY_TO_BIN;
  output [6:0]D;
  input [1:0]Q;
  input data_out;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input \RD_OCCUPANCY_reg[6]_2 ;
  input \RD_OCCUPANCY_reg[6]_3 ;
  input [4:0]DI;
  input [4:0]S;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [6:0]D;
  wire [4:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [1:0]Q;
  wire \RD_OCCUPANCY[6]_i_13__0_n_0 ;
  wire \RD_OCCUPANCY[6]_i_14__0_n_0 ;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire \RD_OCCUPANCY_reg[6]_2 ;
  wire \RD_OCCUPANCY_reg[6]_3 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__0_n_2 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__0_n_3 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__0_n_4 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__0_n_5 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__0_n_6 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__0_n_7 ;
  wire [4:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire p_1_out;
  wire userclk;
  wire [7:6]\NLW_RD_OCCUPANCY_reg[6]_i_1__0_CO_UNCONNECTED ;
  wire [7:7]\NLW_RD_OCCUPANCY_reg[6]_i_1__0_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[6]_i_13__0 
       (.I0(GRAY_TO_BIN),
        .I1(Q[1]),
        .O(\RD_OCCUPANCY[6]_i_13__0_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[6]_i_14__0 
       (.I0(GRAY_TO_BIN),
        .I1(data_out),
        .I2(Q[0]),
        .O(\RD_OCCUPANCY[6]_i_14__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \RD_OCCUPANCY[6]_i_6__0 
       (.I0(p_1_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(\RD_OCCUPANCY_reg[6]_2 ),
        .I5(\RD_OCCUPANCY_reg[6]_3 ),
        .O(GRAY_TO_BIN));
  CARRY8 \RD_OCCUPANCY_reg[6]_i_1__0 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_RD_OCCUPANCY_reg[6]_i_1__0_CO_UNCONNECTED [7:6],\RD_OCCUPANCY_reg[6]_i_1__0_n_2 ,\RD_OCCUPANCY_reg[6]_i_1__0_n_3 ,\RD_OCCUPANCY_reg[6]_i_1__0_n_4 ,\RD_OCCUPANCY_reg[6]_i_1__0_n_5 ,\RD_OCCUPANCY_reg[6]_i_1__0_n_6 ,\RD_OCCUPANCY_reg[6]_i_1__0_n_7 }),
        .DI({1'b0,1'b0,DI[4:1],GRAY_TO_BIN,DI[0]}),
        .O({\NLW_RD_OCCUPANCY_reg[6]_i_1__0_O_UNCONNECTED [7],D}),
        .S({1'b0,S,\RD_OCCUPANCY[6]_i_13__0_n_0 ,\RD_OCCUPANCY[6]_i_14__0_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_1_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_129
   (DI,
    data_out,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    \RD_OCCUPANCY_reg[6]_2 ,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input \RD_OCCUPANCY_reg[6]_2 ;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire \RD_OCCUPANCY_reg[6]_2 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk;

  LUT5 #(
    .INIT(32'h96696996)) 
    \RD_OCCUPANCY[6]_i_5__0 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(\RD_OCCUPANCY_reg[6]_2 ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_130
   (S,
    data_out,
    DI,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    \RD_OCCUPANCY_reg[6]_2 ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input \RD_OCCUPANCY_reg[6]_2 ;
  input [0:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire \RD_OCCUPANCY_reg[6]_2 ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \RD_OCCUPANCY[6]_i_12__0 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(\RD_OCCUPANCY_reg[6]_2 ),
        .I5(Q),
        .O(S));
  LUT4 #(
    .INIT(16'h6996)) 
    \RD_OCCUPANCY[6]_i_4__0 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_131
   (S,
    data_out,
    DI,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input [0:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \RD_OCCUPANCY[6]_i_11__0 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(Q),
        .O(S));
  LUT3 #(
    .INIT(8'h96)) 
    \RD_OCCUPANCY[6]_i_3__0 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_132
   (S,
    data_out,
    DI,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input [0:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT4 #(
    .INIT(16'h9669)) 
    \RD_OCCUPANCY[6]_i_10__0 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(Q),
        .O(S));
  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[6]_i_2__0 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_133
   (S,
    data_out,
    \RD_OCCUPANCY_reg[6] ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [1:0]S;
  output data_out;
  input \RD_OCCUPANCY_reg[6] ;
  input [1:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [1:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire [1:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[6]_i_8__0 
       (.I0(data_out),
        .I1(Q[1]),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[6]_i_9__0 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(Q[0]),
        .O(S[0]));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_134
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_135
   (S,
    Q,
    data_out,
    \WR_OCCUPANCY[6]_i_8_0 ,
    \WR_OCCUPANCY[6]_i_8_1 ,
    \WR_OCCUPANCY[6]_i_8_2 ,
    \WR_OCCUPANCY[6]_i_8_3 ,
    \WR_OCCUPANCY_reg[6] ,
    data_sync_reg1_0,
    rxrecclk);
  output [1:0]S;
  input [1:0]Q;
  input data_out;
  input \WR_OCCUPANCY[6]_i_8_0 ;
  input \WR_OCCUPANCY[6]_i_8_1 ;
  input \WR_OCCUPANCY[6]_i_8_2 ;
  input \WR_OCCUPANCY[6]_i_8_3 ;
  input \WR_OCCUPANCY_reg[6] ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [1:0]Q;
  wire [1:0]S;
  wire \WR_OCCUPANCY[6]_i_8_0 ;
  wire \WR_OCCUPANCY[6]_i_8_1 ;
  wire \WR_OCCUPANCY[6]_i_8_2 ;
  wire \WR_OCCUPANCY[6]_i_8_3 ;
  wire \WR_OCCUPANCY_reg[6] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire p_31_in;
  wire p_4_in27_in;
  wire rxrecclk;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[6]_i_7 
       (.I0(Q[1]),
        .I1(p_31_in),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[6]_i_8 
       (.I0(Q[0]),
        .I1(p_31_in),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .O(S[0]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \WR_OCCUPANCY[6]_i_9 
       (.I0(p_4_in27_in),
        .I1(data_out),
        .I2(\WR_OCCUPANCY[6]_i_8_0 ),
        .I3(\WR_OCCUPANCY[6]_i_8_1 ),
        .I4(\WR_OCCUPANCY[6]_i_8_2 ),
        .I5(\WR_OCCUPANCY[6]_i_8_3 ),
        .O(p_31_in));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_4_in27_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_136
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_137
   (S,
    data_out,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    \WR_OCCUPANCY_reg[6]_0 ,
    \WR_OCCUPANCY_reg[6]_1 ,
    \WR_OCCUPANCY_reg[6]_2 ,
    data_sync_reg1_0,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input \WR_OCCUPANCY_reg[6]_0 ;
  input \WR_OCCUPANCY_reg[6]_1 ;
  input \WR_OCCUPANCY_reg[6]_2 ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]S;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_0 ;
  wire \WR_OCCUPANCY_reg[6]_1 ;
  wire \WR_OCCUPANCY_reg[6]_2 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;

  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \WR_OCCUPANCY[6]_i_6 
       (.I0(Q),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .I3(\WR_OCCUPANCY_reg[6]_0 ),
        .I4(\WR_OCCUPANCY_reg[6]_1 ),
        .I5(\WR_OCCUPANCY_reg[6]_2 ),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_138
   (S,
    data_out,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    \WR_OCCUPANCY_reg[6]_0 ,
    \WR_OCCUPANCY_reg[6]_1 ,
    data_sync_reg1_0,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input \WR_OCCUPANCY_reg[6]_0 ;
  input \WR_OCCUPANCY_reg[6]_1 ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]S;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_0 ;
  wire \WR_OCCUPANCY_reg[6]_1 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \WR_OCCUPANCY[6]_i_5 
       (.I0(Q),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .I3(\WR_OCCUPANCY_reg[6]_0 ),
        .I4(\WR_OCCUPANCY_reg[6]_1 ),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_139
   (S,
    data_out,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    \WR_OCCUPANCY_reg[6]_0 ,
    data_sync_reg1_0,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input \WR_OCCUPANCY_reg[6]_0 ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]S;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_0 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;

  LUT4 #(
    .INIT(16'h9669)) 
    \WR_OCCUPANCY[6]_i_4 
       (.I0(Q),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .I3(\WR_OCCUPANCY_reg[6]_0 ),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_140
   (data_out,
    D,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    S,
    data_sync_reg1_0,
    rxrecclk);
  output data_out;
  output [5:0]D;
  input [6:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input [4:0]S;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [5:0]D;
  wire [6:0]Q;
  wire [4:0]S;
  wire \WR_OCCUPANCY[6]_i_2_n_0 ;
  wire \WR_OCCUPANCY[6]_i_3_n_0 ;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_i_1_n_2 ;
  wire \WR_OCCUPANCY_reg[6]_i_1_n_3 ;
  wire \WR_OCCUPANCY_reg[6]_i_1_n_4 ;
  wire \WR_OCCUPANCY_reg[6]_i_1_n_5 ;
  wire \WR_OCCUPANCY_reg[6]_i_1_n_6 ;
  wire \WR_OCCUPANCY_reg[6]_i_1_n_7 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;
  wire [7:6]\NLW_WR_OCCUPANCY_reg[6]_i_1_CO_UNCONNECTED ;
  wire [7:0]\NLW_WR_OCCUPANCY_reg[6]_i_1_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[6]_i_2 
       (.I0(Q[6]),
        .I1(data_out),
        .O(\WR_OCCUPANCY[6]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[6]_i_3 
       (.I0(Q[5]),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .O(\WR_OCCUPANCY[6]_i_3_n_0 ));
  CARRY8 \WR_OCCUPANCY_reg[6]_i_1 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_WR_OCCUPANCY_reg[6]_i_1_CO_UNCONNECTED [7:6],\WR_OCCUPANCY_reg[6]_i_1_n_2 ,\WR_OCCUPANCY_reg[6]_i_1_n_3 ,\WR_OCCUPANCY_reg[6]_i_1_n_4 ,\WR_OCCUPANCY_reg[6]_i_1_n_5 ,\WR_OCCUPANCY_reg[6]_i_1_n_6 ,\WR_OCCUPANCY_reg[6]_i_1_n_7 }),
        .DI({1'b0,1'b0,Q[5:0]}),
        .O({\NLW_WR_OCCUPANCY_reg[6]_i_1_O_UNCONNECTED [7],D,\NLW_WR_OCCUPANCY_reg[6]_i_1_O_UNCONNECTED [0]}),
        .S({1'b0,\WR_OCCUPANCY[6]_i_2_n_0 ,\WR_OCCUPANCY[6]_i_3_n_0 ,S}));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_141
   (DI,
    data_out,
    GRAY_TO_BIN,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input [0:0]GRAY_TO_BIN;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk;

  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[6]_i_7 
       (.I0(data_out),
        .I1(GRAY_TO_BIN),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_142
   (GRAY_TO_BIN,
    D,
    Q,
    data_out,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    \RD_OCCUPANCY_reg[6]_2 ,
    \RD_OCCUPANCY_reg[6]_3 ,
    DI,
    S,
    data_sync_reg1_0,
    userclk);
  output [0:0]GRAY_TO_BIN;
  output [6:0]D;
  input [1:0]Q;
  input data_out;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input \RD_OCCUPANCY_reg[6]_2 ;
  input \RD_OCCUPANCY_reg[6]_3 ;
  input [4:0]DI;
  input [4:0]S;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [6:0]D;
  wire [4:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [1:0]Q;
  wire \RD_OCCUPANCY[6]_i_13_n_0 ;
  wire \RD_OCCUPANCY[6]_i_14_n_0 ;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire \RD_OCCUPANCY_reg[6]_2 ;
  wire \RD_OCCUPANCY_reg[6]_3 ;
  wire \RD_OCCUPANCY_reg[6]_i_1_n_2 ;
  wire \RD_OCCUPANCY_reg[6]_i_1_n_3 ;
  wire \RD_OCCUPANCY_reg[6]_i_1_n_4 ;
  wire \RD_OCCUPANCY_reg[6]_i_1_n_5 ;
  wire \RD_OCCUPANCY_reg[6]_i_1_n_6 ;
  wire \RD_OCCUPANCY_reg[6]_i_1_n_7 ;
  wire [4:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire p_1_out;
  wire userclk;
  wire [7:6]\NLW_RD_OCCUPANCY_reg[6]_i_1_CO_UNCONNECTED ;
  wire [7:7]\NLW_RD_OCCUPANCY_reg[6]_i_1_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[6]_i_13 
       (.I0(GRAY_TO_BIN),
        .I1(Q[1]),
        .O(\RD_OCCUPANCY[6]_i_13_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[6]_i_14 
       (.I0(GRAY_TO_BIN),
        .I1(data_out),
        .I2(Q[0]),
        .O(\RD_OCCUPANCY[6]_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \RD_OCCUPANCY[6]_i_6 
       (.I0(p_1_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(\RD_OCCUPANCY_reg[6]_2 ),
        .I5(\RD_OCCUPANCY_reg[6]_3 ),
        .O(GRAY_TO_BIN));
  CARRY8 \RD_OCCUPANCY_reg[6]_i_1 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_RD_OCCUPANCY_reg[6]_i_1_CO_UNCONNECTED [7:6],\RD_OCCUPANCY_reg[6]_i_1_n_2 ,\RD_OCCUPANCY_reg[6]_i_1_n_3 ,\RD_OCCUPANCY_reg[6]_i_1_n_4 ,\RD_OCCUPANCY_reg[6]_i_1_n_5 ,\RD_OCCUPANCY_reg[6]_i_1_n_6 ,\RD_OCCUPANCY_reg[6]_i_1_n_7 }),
        .DI({1'b0,1'b0,DI[4:1],GRAY_TO_BIN,DI[0]}),
        .O({\NLW_RD_OCCUPANCY_reg[6]_i_1_O_UNCONNECTED [7],D}),
        .S({1'b0,S,\RD_OCCUPANCY[6]_i_13_n_0 ,\RD_OCCUPANCY[6]_i_14_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_1_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_143
   (DI,
    data_out,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    \RD_OCCUPANCY_reg[6]_2 ,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input \RD_OCCUPANCY_reg[6]_2 ;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire \RD_OCCUPANCY_reg[6]_2 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk;

  LUT5 #(
    .INIT(32'h96696996)) 
    \RD_OCCUPANCY[6]_i_5 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(\RD_OCCUPANCY_reg[6]_2 ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_144
   (S,
    data_out,
    DI,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    \RD_OCCUPANCY_reg[6]_2 ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input \RD_OCCUPANCY_reg[6]_2 ;
  input [0:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire \RD_OCCUPANCY_reg[6]_2 ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \RD_OCCUPANCY[6]_i_12 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(\RD_OCCUPANCY_reg[6]_2 ),
        .I5(Q),
        .O(S));
  LUT4 #(
    .INIT(16'h6996)) 
    \RD_OCCUPANCY[6]_i_4 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_145
   (S,
    data_out,
    DI,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    \RD_OCCUPANCY_reg[6]_1 ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input \RD_OCCUPANCY_reg[6]_1 ;
  input [0:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire \RD_OCCUPANCY_reg[6]_1 ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \RD_OCCUPANCY[6]_i_11 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(\RD_OCCUPANCY_reg[6]_1 ),
        .I4(Q),
        .O(S));
  LUT3 #(
    .INIT(8'h96)) 
    \RD_OCCUPANCY[6]_i_3 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_146
   (S,
    data_out,
    DI,
    \RD_OCCUPANCY_reg[6] ,
    \RD_OCCUPANCY_reg[6]_0 ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input \RD_OCCUPANCY_reg[6] ;
  input \RD_OCCUPANCY_reg[6]_0 ;
  input [0:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire \RD_OCCUPANCY_reg[6]_0 ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT4 #(
    .INIT(16'h9669)) 
    \RD_OCCUPANCY[6]_i_10 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(\RD_OCCUPANCY_reg[6]_0 ),
        .I3(Q),
        .O(S));
  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[6]_i_2 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_147
   (S,
    data_out,
    \RD_OCCUPANCY_reg[6] ,
    Q,
    data_sync_reg1_0,
    userclk);
  output [1:0]S;
  output data_out;
  input \RD_OCCUPANCY_reg[6] ;
  input [1:0]Q;
  input [0:0]data_sync_reg1_0;
  input userclk;

  wire [1:0]Q;
  wire \RD_OCCUPANCY_reg[6] ;
  wire [1:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire userclk;

  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[6]_i_8 
       (.I0(data_out),
        .I1(Q[1]),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[6]_i_9 
       (.I0(data_out),
        .I1(\RD_OCCUPANCY_reg[6] ),
        .I2(Q[0]),
        .O(S[0]));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_93
   (S,
    Q,
    data_out,
    \WR_OCCUPANCY[6]_i_8__2_0 ,
    \WR_OCCUPANCY[6]_i_8__2_1 ,
    \WR_OCCUPANCY[6]_i_8__2_2 ,
    \WR_OCCUPANCY[6]_i_8__2_3 ,
    \WR_OCCUPANCY_reg[6] ,
    data_sync_reg1_0,
    rxrecclk);
  output [1:0]S;
  input [1:0]Q;
  input data_out;
  input \WR_OCCUPANCY[6]_i_8__2_0 ;
  input \WR_OCCUPANCY[6]_i_8__2_1 ;
  input \WR_OCCUPANCY[6]_i_8__2_2 ;
  input \WR_OCCUPANCY[6]_i_8__2_3 ;
  input \WR_OCCUPANCY_reg[6] ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [1:0]Q;
  wire [1:0]S;
  wire \WR_OCCUPANCY[6]_i_8__2_0 ;
  wire \WR_OCCUPANCY[6]_i_8__2_1 ;
  wire \WR_OCCUPANCY[6]_i_8__2_2 ;
  wire \WR_OCCUPANCY[6]_i_8__2_3 ;
  wire \WR_OCCUPANCY_reg[6] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire p_31_in;
  wire p_4_in27_in;
  wire rxrecclk;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[6]_i_7__2 
       (.I0(Q[1]),
        .I1(p_31_in),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[6]_i_8__2 
       (.I0(Q[0]),
        .I1(p_31_in),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .O(S[0]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \WR_OCCUPANCY[6]_i_9__2 
       (.I0(p_4_in27_in),
        .I1(data_out),
        .I2(\WR_OCCUPANCY[6]_i_8__2_0 ),
        .I3(\WR_OCCUPANCY[6]_i_8__2_1 ),
        .I4(\WR_OCCUPANCY[6]_i_8__2_2 ),
        .I5(\WR_OCCUPANCY[6]_i_8__2_3 ),
        .O(p_31_in));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_4_in27_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_94
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_95
   (S,
    data_out,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    \WR_OCCUPANCY_reg[6]_0 ,
    \WR_OCCUPANCY_reg[6]_1 ,
    \WR_OCCUPANCY_reg[6]_2 ,
    data_sync_reg1_0,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input \WR_OCCUPANCY_reg[6]_0 ;
  input \WR_OCCUPANCY_reg[6]_1 ;
  input \WR_OCCUPANCY_reg[6]_2 ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]S;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_0 ;
  wire \WR_OCCUPANCY_reg[6]_1 ;
  wire \WR_OCCUPANCY_reg[6]_2 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;

  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \WR_OCCUPANCY[6]_i_6__2 
       (.I0(Q),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .I3(\WR_OCCUPANCY_reg[6]_0 ),
        .I4(\WR_OCCUPANCY_reg[6]_1 ),
        .I5(\WR_OCCUPANCY_reg[6]_2 ),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_96
   (S,
    data_out,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    \WR_OCCUPANCY_reg[6]_0 ,
    \WR_OCCUPANCY_reg[6]_1 ,
    data_sync_reg1_0,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input \WR_OCCUPANCY_reg[6]_0 ;
  input \WR_OCCUPANCY_reg[6]_1 ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]S;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_0 ;
  wire \WR_OCCUPANCY_reg[6]_1 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \WR_OCCUPANCY[6]_i_5__2 
       (.I0(Q),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .I3(\WR_OCCUPANCY_reg[6]_0 ),
        .I4(\WR_OCCUPANCY_reg[6]_1 ),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_97
   (S,
    data_out,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    \WR_OCCUPANCY_reg[6]_0 ,
    data_sync_reg1_0,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input \WR_OCCUPANCY_reg[6]_0 ;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]S;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_0 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;

  LUT4 #(
    .INIT(16'h9669)) 
    \WR_OCCUPANCY[6]_i_4__2 
       (.I0(Q),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .I3(\WR_OCCUPANCY_reg[6]_0 ),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_98
   (data_out,
    D,
    Q,
    \WR_OCCUPANCY_reg[6] ,
    S,
    data_sync_reg1_0,
    rxrecclk);
  output data_out;
  output [5:0]D;
  input [6:0]Q;
  input \WR_OCCUPANCY_reg[6] ;
  input [4:0]S;
  input [0:0]data_sync_reg1_0;
  input rxrecclk;

  wire [5:0]D;
  wire [6:0]Q;
  wire [4:0]S;
  wire \WR_OCCUPANCY[6]_i_2__2_n_0 ;
  wire \WR_OCCUPANCY[6]_i_3__2_n_0 ;
  wire \WR_OCCUPANCY_reg[6] ;
  wire \WR_OCCUPANCY_reg[6]_i_1__2_n_2 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__2_n_3 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__2_n_4 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__2_n_5 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__2_n_6 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__2_n_7 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire [0:0]data_sync_reg1_0;
  wire rxrecclk;
  wire [7:6]\NLW_WR_OCCUPANCY_reg[6]_i_1__2_CO_UNCONNECTED ;
  wire [7:0]\NLW_WR_OCCUPANCY_reg[6]_i_1__2_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[6]_i_2__2 
       (.I0(Q[6]),
        .I1(data_out),
        .O(\WR_OCCUPANCY[6]_i_2__2_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[6]_i_3__2 
       (.I0(Q[5]),
        .I1(data_out),
        .I2(\WR_OCCUPANCY_reg[6] ),
        .O(\WR_OCCUPANCY[6]_i_3__2_n_0 ));
  CARRY8 \WR_OCCUPANCY_reg[6]_i_1__2 
       (.CI(1'b1),
        .CI_TOP(1'b0),
        .CO({\NLW_WR_OCCUPANCY_reg[6]_i_1__2_CO_UNCONNECTED [7:6],\WR_OCCUPANCY_reg[6]_i_1__2_n_2 ,\WR_OCCUPANCY_reg[6]_i_1__2_n_3 ,\WR_OCCUPANCY_reg[6]_i_1__2_n_4 ,\WR_OCCUPANCY_reg[6]_i_1__2_n_5 ,\WR_OCCUPANCY_reg[6]_i_1__2_n_6 ,\WR_OCCUPANCY_reg[6]_i_1__2_n_7 }),
        .DI({1'b0,1'b0,Q[5:0]}),
        .O({\NLW_WR_OCCUPANCY_reg[6]_i_1__2_O_UNCONNECTED [7],D,\NLW_WR_OCCUPANCY_reg[6]_i_1__2_O_UNCONNECTED [0]}),
        .S({1'b0,\WR_OCCUPANCY[6]_i_2__2_n_0 ,\WR_OCCUPANCY[6]_i_3__2_n_0 ,S}));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync_reg1_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module quadsgmii_0_TEST_qsgmii_sync_block_99
   (DI,
    data_out,
    GRAY_TO_BIN,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input [0:0]GRAY_TO_BIN;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk;

  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[6]_i_7__2 
       (.I0(data_out),
        .I1(GRAY_TO_BIN),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_v3_4_6" *) (* c_component_name = "quadsgmii_0_TEST" *) (* c_elaboration_transient_dir = "BlankString" *) 
(* c_family = "zynquplus" *) (* c_gmii_or_mii_mode = "TRUE" *) (* c_has_an = "TRUE" *) 
(* c_has_mdio = "TRUE" *) (* c_qsgmii_phy_mode = "FALSE" *) (* c_rx_gmii_clk = "TXOUTCLK" *) 
module quadsgmii_0_TEST_quadsgmii_v3_4_6
   (reset,
    signal_detect,
    reset_done,
    link_timer_value_ch0,
    link_timer_value_ch1,
    link_timer_value_ch2,
    link_timer_value_ch3,
    gt_channel_valid_ch0,
    gt_channel_valid_ch1,
    gt_channel_valid_ch2,
    gt_channel_valid_ch3,
    mgt_rx_reset,
    mgt_tx_reset,
    userclk,
    userclk2,
    rxrecclk,
    dcm_locked,
    rxchariscomma,
    rxcharisk,
    rxclkcorcnt,
    rxdata,
    rxdisperr,
    rxnotintable,
    rxrundisp,
    txbuferr,
    powerdown,
    txchardispmode,
    txchardispval,
    txcharisk,
    txdata,
    enablealign,
    gmii_txd_ch0,
    gmii_tx_en_ch0,
    gmii_tx_er_ch0,
    gmii_rxd_ch0,
    gmii_rx_dv_ch0,
    gmii_rx_er_ch0,
    gmii_isolate_ch0,
    an_interrupt_ch0,
    phyad_ch0,
    mdc_ch0,
    mdio_in_ch0,
    mdio_out_ch0,
    mdio_tri_ch0,
    configuration_vector_ch0,
    configuration_valid_ch0,
    status_vector_ch0,
    an_adv_config_vector_ch0,
    an_adv_config_val_ch0,
    an_restart_config_ch0,
    gmii_txd_ch1,
    gmii_tx_en_ch1,
    gmii_tx_er_ch1,
    gmii_rxd_ch1,
    gmii_rx_dv_ch1,
    gmii_rx_er_ch1,
    gmii_isolate_ch1,
    an_interrupt_ch1,
    phyad_ch1,
    mdc_ch1,
    mdio_in_ch1,
    mdio_out_ch1,
    mdio_tri_ch1,
    configuration_vector_ch1,
    configuration_valid_ch1,
    status_vector_ch1,
    an_adv_config_vector_ch1,
    an_adv_config_val_ch1,
    an_restart_config_ch1,
    gmii_txd_ch2,
    gmii_tx_en_ch2,
    gmii_tx_er_ch2,
    gmii_rxd_ch2,
    gmii_rx_dv_ch2,
    gmii_rx_er_ch2,
    gmii_isolate_ch2,
    an_interrupt_ch2,
    phyad_ch2,
    mdc_ch2,
    mdio_in_ch2,
    mdio_out_ch2,
    mdio_tri_ch2,
    configuration_vector_ch2,
    configuration_valid_ch2,
    status_vector_ch2,
    an_adv_config_vector_ch2,
    an_adv_config_val_ch2,
    an_restart_config_ch2,
    gmii_txd_ch3,
    gmii_tx_en_ch3,
    gmii_tx_er_ch3,
    gmii_rxd_ch3,
    gmii_rx_dv_ch3,
    gmii_rx_er_ch3,
    gmii_isolate_ch3,
    an_interrupt_ch3,
    phyad_ch3,
    mdc_ch3,
    mdio_in_ch3,
    mdio_out_ch3,
    mdio_tri_ch3,
    configuration_vector_ch3,
    configuration_valid_ch3,
    status_vector_ch3,
    an_adv_config_vector_ch3,
    an_adv_config_val_ch3,
    an_restart_config_ch3);
  input reset;
  input signal_detect;
  input reset_done;
  input [8:0]link_timer_value_ch0;
  input [8:0]link_timer_value_ch1;
  input [8:0]link_timer_value_ch2;
  input [8:0]link_timer_value_ch3;
  output gt_channel_valid_ch0;
  output gt_channel_valid_ch1;
  output gt_channel_valid_ch2;
  output gt_channel_valid_ch3;
  output mgt_rx_reset;
  output mgt_tx_reset;
  input userclk;
  input userclk2;
  input rxrecclk;
  input dcm_locked;
  input [3:0]rxchariscomma;
  input [3:0]rxcharisk;
  input [2:0]rxclkcorcnt;
  input [31:0]rxdata;
  input [3:0]rxdisperr;
  input [3:0]rxnotintable;
  input [3:0]rxrundisp;
  input txbuferr;
  output powerdown;
  output [3:0]txchardispmode;
  output [3:0]txchardispval;
  output [3:0]txcharisk;
  output [31:0]txdata;
  output enablealign;
  input [7:0]gmii_txd_ch0;
  input gmii_tx_en_ch0;
  input gmii_tx_er_ch0;
  output [7:0]gmii_rxd_ch0;
  output gmii_rx_dv_ch0;
  output gmii_rx_er_ch0;
  output gmii_isolate_ch0;
  output an_interrupt_ch0;
  input [4:0]phyad_ch0;
  input mdc_ch0;
  input mdio_in_ch0;
  output mdio_out_ch0;
  output mdio_tri_ch0;
  input [4:0]configuration_vector_ch0;
  input configuration_valid_ch0;
  output [15:0]status_vector_ch0;
  input [15:0]an_adv_config_vector_ch0;
  input an_adv_config_val_ch0;
  input an_restart_config_ch0;
  input [7:0]gmii_txd_ch1;
  input gmii_tx_en_ch1;
  input gmii_tx_er_ch1;
  output [7:0]gmii_rxd_ch1;
  output gmii_rx_dv_ch1;
  output gmii_rx_er_ch1;
  output gmii_isolate_ch1;
  output an_interrupt_ch1;
  input [4:0]phyad_ch1;
  input mdc_ch1;
  input mdio_in_ch1;
  output mdio_out_ch1;
  output mdio_tri_ch1;
  input [4:0]configuration_vector_ch1;
  input configuration_valid_ch1;
  output [15:0]status_vector_ch1;
  input [15:0]an_adv_config_vector_ch1;
  input an_adv_config_val_ch1;
  input an_restart_config_ch1;
  input [7:0]gmii_txd_ch2;
  input gmii_tx_en_ch2;
  input gmii_tx_er_ch2;
  output [7:0]gmii_rxd_ch2;
  output gmii_rx_dv_ch2;
  output gmii_rx_er_ch2;
  output gmii_isolate_ch2;
  output an_interrupt_ch2;
  input [4:0]phyad_ch2;
  input mdc_ch2;
  input mdio_in_ch2;
  output mdio_out_ch2;
  output mdio_tri_ch2;
  input [4:0]configuration_vector_ch2;
  input configuration_valid_ch2;
  output [15:0]status_vector_ch2;
  input [15:0]an_adv_config_vector_ch2;
  input an_adv_config_val_ch2;
  input an_restart_config_ch2;
  input [7:0]gmii_txd_ch3;
  input gmii_tx_en_ch3;
  input gmii_tx_er_ch3;
  output [7:0]gmii_rxd_ch3;
  output gmii_rx_dv_ch3;
  output gmii_rx_er_ch3;
  output gmii_isolate_ch3;
  output an_interrupt_ch3;
  input [4:0]phyad_ch3;
  input mdc_ch3;
  input mdio_in_ch3;
  output mdio_out_ch3;
  output mdio_tri_ch3;
  input [4:0]configuration_vector_ch3;
  input configuration_valid_ch3;
  output [15:0]status_vector_ch3;
  input [15:0]an_adv_config_vector_ch3;
  input an_adv_config_val_ch3;
  input an_restart_config_ch3;

  wire \<const0> ;
  wire an_interrupt_ch0;
  wire an_interrupt_ch1;
  wire an_interrupt_ch2;
  wire an_interrupt_ch3;
  wire dcm_locked;
  wire enablealign;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_ch3;
  wire [7:0]gmii_rxd_ch0;
  wire [7:0]gmii_rxd_ch1;
  wire [7:0]gmii_rxd_ch2;
  wire [7:0]gmii_rxd_ch3;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch3;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch3;
  wire [7:0]gmii_txd_ch0;
  wire [7:0]gmii_txd_ch1;
  wire [7:0]gmii_txd_ch2;
  wire [7:0]gmii_txd_ch3;
  wire [8:0]link_timer_value_ch0;
  wire [8:0]link_timer_value_ch1;
  wire [8:0]link_timer_value_ch2;
  wire [8:0]link_timer_value_ch3;
  wire mdc_ch0;
  wire mdc_ch1;
  wire mdc_ch2;
  wire mdc_ch3;
  wire mdio_in_ch0;
  wire mdio_in_ch1;
  wire mdio_in_ch2;
  wire mdio_in_ch3;
  wire mdio_out_ch0;
  wire mdio_out_ch1;
  wire mdio_out_ch2;
  wire mdio_out_ch3;
  wire mdio_tri_ch0;
  wire mdio_tri_ch1;
  wire mdio_tri_ch2;
  wire mdio_tri_ch3;
  wire mgt_rx_reset;
  wire mgt_tx_reset;
  wire [4:0]phyad_ch0;
  wire [4:0]phyad_ch1;
  wire [4:0]phyad_ch2;
  wire [4:0]phyad_ch3;
  wire powerdown;
  wire reset;
  wire reset_done;
  wire [3:0]rxchariscomma;
  wire [3:0]rxcharisk;
  wire [31:0]rxdata;
  wire [3:0]rxdisperr;
  wire [3:0]rxnotintable;
  wire rxrecclk;
  wire signal_detect;
  wire [13:0]\^status_vector_ch0 ;
  wire [13:0]\^status_vector_ch1 ;
  wire [13:0]\^status_vector_ch2 ;
  wire [13:0]\^status_vector_ch3 ;
  wire txbuferr;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire userclk;

  assign gmii_isolate_ch0 = \<const0> ;
  assign gmii_isolate_ch1 = \<const0> ;
  assign gmii_isolate_ch2 = \<const0> ;
  assign gmii_isolate_ch3 = \<const0> ;
  assign gt_channel_valid_ch0 = \<const0> ;
  assign gt_channel_valid_ch1 = \<const0> ;
  assign gt_channel_valid_ch2 = \<const0> ;
  assign gt_channel_valid_ch3 = \<const0> ;
  assign status_vector_ch0[15] = \<const0> ;
  assign status_vector_ch0[14] = \<const0> ;
  assign status_vector_ch0[13:9] = \^status_vector_ch0 [13:9];
  assign status_vector_ch0[8] = \<const0> ;
  assign status_vector_ch0[7:0] = \^status_vector_ch0 [7:0];
  assign status_vector_ch1[15] = \<const0> ;
  assign status_vector_ch1[14] = \<const0> ;
  assign status_vector_ch1[13:9] = \^status_vector_ch1 [13:9];
  assign status_vector_ch1[8] = \<const0> ;
  assign status_vector_ch1[7:0] = \^status_vector_ch1 [7:0];
  assign status_vector_ch2[15] = \<const0> ;
  assign status_vector_ch2[14] = \<const0> ;
  assign status_vector_ch2[13:9] = \^status_vector_ch2 [13:9];
  assign status_vector_ch2[8] = \<const0> ;
  assign status_vector_ch2[7:0] = \^status_vector_ch2 [7:0];
  assign status_vector_ch3[15] = \<const0> ;
  assign status_vector_ch3[14] = \<const0> ;
  assign status_vector_ch3[13:9] = \^status_vector_ch3 [13:9];
  assign status_vector_ch3[8] = \<const0> ;
  assign status_vector_ch3[7:0] = \^status_vector_ch3 [7:0];
  assign txchardispmode[3] = \<const0> ;
  assign txchardispmode[2] = \<const0> ;
  assign txchardispmode[1] = \<const0> ;
  assign txchardispmode[0] = \<const0> ;
  assign txchardispval[3] = \<const0> ;
  assign txchardispval[2] = \<const0> ;
  assign txchardispval[1] = \<const0> ;
  assign txchardispval[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  quadsgmii_0_TEST_QSGMII_GEN qsgmii_inst
       (.MGT_RX_RESET(mgt_rx_reset),
        .MGT_TX_RESET(mgt_tx_reset),
        .an_interrupt_ch0(an_interrupt_ch0),
        .an_interrupt_ch1(an_interrupt_ch1),
        .an_interrupt_ch2(an_interrupt_ch2),
        .an_interrupt_ch3(an_interrupt_ch3),
        .dcm_locked(dcm_locked),
        .enablealign(enablealign),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3),
        .gmii_rx_er_ch0(gmii_rx_er_ch0),
        .gmii_rx_er_ch1(gmii_rx_er_ch1),
        .gmii_rx_er_ch2(gmii_rx_er_ch2),
        .gmii_rx_er_ch3(gmii_rx_er_ch3),
        .gmii_rxd_ch0(gmii_rxd_ch0),
        .gmii_rxd_ch1(gmii_rxd_ch1),
        .gmii_rxd_ch2(gmii_rxd_ch2),
        .gmii_rxd_ch3(gmii_rxd_ch3),
        .gmii_tx_en_ch0(gmii_tx_en_ch0),
        .gmii_tx_en_ch1(gmii_tx_en_ch1),
        .gmii_tx_en_ch2(gmii_tx_en_ch2),
        .gmii_tx_en_ch3(gmii_tx_en_ch3),
        .gmii_tx_er_ch0(gmii_tx_er_ch0),
        .gmii_tx_er_ch1(gmii_tx_er_ch1),
        .gmii_tx_er_ch2(gmii_tx_er_ch2),
        .gmii_tx_er_ch3(gmii_tx_er_ch3),
        .gmii_txd_ch0(gmii_txd_ch0),
        .gmii_txd_ch1(gmii_txd_ch1),
        .gmii_txd_ch2(gmii_txd_ch2),
        .gmii_txd_ch3(gmii_txd_ch3),
        .link_timer_value_ch0(link_timer_value_ch0),
        .link_timer_value_ch1(link_timer_value_ch1),
        .link_timer_value_ch2(link_timer_value_ch2),
        .link_timer_value_ch3(link_timer_value_ch3),
        .mdc_ch0(mdc_ch0),
        .mdc_ch1(mdc_ch1),
        .mdc_ch2(mdc_ch2),
        .mdc_ch3(mdc_ch3),
        .mdio_in_ch0(mdio_in_ch0),
        .mdio_in_ch1(mdio_in_ch1),
        .mdio_in_ch2(mdio_in_ch2),
        .mdio_in_ch3(mdio_in_ch3),
        .mdio_out_ch0(mdio_out_ch0),
        .mdio_out_ch1(mdio_out_ch1),
        .mdio_out_ch2(mdio_out_ch2),
        .mdio_out_ch3(mdio_out_ch3),
        .mdio_tri_ch0(mdio_tri_ch0),
        .mdio_tri_ch1(mdio_tri_ch1),
        .mdio_tri_ch2(mdio_tri_ch2),
        .mdio_tri_ch3(mdio_tri_ch3),
        .phyad_ch0(phyad_ch0),
        .phyad_ch1(phyad_ch1),
        .phyad_ch2(phyad_ch2),
        .phyad_ch3(phyad_ch3),
        .powerdown(powerdown),
        .reset(reset),
        .reset_done(reset_done),
        .rxchariscomma(rxchariscomma),
        .rxcharisk(rxcharisk),
        .rxdata(rxdata),
        .rxdisperr(rxdisperr),
        .rxnotintable(rxnotintable),
        .rxrecclk(rxrecclk),
        .signal_detect(signal_detect),
        .status_vector_ch0({\^status_vector_ch0 [13:9],\^status_vector_ch0 [7:0]}),
        .status_vector_ch1({\^status_vector_ch1 [13:9],\^status_vector_ch1 [7:0]}),
        .status_vector_ch2({\^status_vector_ch2 [13:9],\^status_vector_ch2 [7:0]}),
        .status_vector_ch3({\^status_vector_ch3 [13:9],\^status_vector_ch3 [7:0]}),
        .txbuferr(txbuferr),
        .txcharisk(txcharisk),
        .txdata(txdata),
        .userclk(userclk));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module quadsgmii_0_TEST_reset_sync_block
   (reset_out,
    userclk,
    RESET_OUT);
  output reset_out;
  input userclk;
  input RESET_OUT;

  wire RESET_OUT;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire userclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module quadsgmii_0_TEST_reset_sync_block_148
   (reset_out,
    rxrecclk,
    RESET_OUT);
  output reset_out;
  input rxrecclk;
  input RESET_OUT;

  wire RESET_OUT;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module quadsgmii_0_TEST_reset_sync_block_149
   (p_6_out,
    dcm_locked,
    reset_out,
    rxrecclk,
    SOFT_RESET);
  output p_6_out;
  input dcm_locked;
  input reset_out;
  input rxrecclk;
  input SOFT_RESET;

  wire SOFT_RESET;
  wire SOFT_RESET_RXRECCLK;
  wire dcm_locked;
  wire p_6_out;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  LUT3 #(
    .INIT(8'hFB)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_i_1__2 
       (.I0(SOFT_RESET_RXRECCLK),
        .I1(dcm_locked),
        .I2(reset_out),
        .O(p_6_out));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(SOFT_RESET_RXRECCLK));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module quadsgmii_0_TEST_reset_sync_block_155
   (reset_out,
    userclk,
    RESET_OUT);
  output reset_out;
  input userclk;
  input RESET_OUT;

  wire RESET_OUT;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire userclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module quadsgmii_0_TEST_reset_sync_block_156
   (reset_out,
    rxrecclk,
    RESET_OUT);
  output reset_out;
  input rxrecclk;
  input RESET_OUT;

  wire RESET_OUT;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module quadsgmii_0_TEST_reset_sync_block_157
   (p_6_out,
    dcm_locked,
    reset_out,
    rxrecclk,
    SOFT_RESET);
  output p_6_out;
  input dcm_locked;
  input reset_out;
  input rxrecclk;
  input SOFT_RESET;

  wire SOFT_RESET;
  wire SOFT_RESET_RXRECCLK;
  wire dcm_locked;
  wire p_6_out;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  LUT3 #(
    .INIT(8'hFB)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_i_1__1 
       (.I0(SOFT_RESET_RXRECCLK),
        .I1(dcm_locked),
        .I2(reset_out),
        .O(p_6_out));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(SOFT_RESET_RXRECCLK));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module quadsgmii_0_TEST_reset_sync_block_167
   (reset_out,
    userclk,
    RESET_OUT);
  output reset_out;
  input userclk;
  input RESET_OUT;

  wire RESET_OUT;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire userclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module quadsgmii_0_TEST_reset_sync_block_168
   (reset_out,
    rxrecclk,
    RESET_OUT);
  output reset_out;
  input rxrecclk;
  input RESET_OUT;

  wire RESET_OUT;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module quadsgmii_0_TEST_reset_sync_block_169
   (p_6_out,
    dcm_locked,
    reset_out,
    rxrecclk,
    SOFT_RESET);
  output p_6_out;
  input dcm_locked;
  input reset_out;
  input rxrecclk;
  input SOFT_RESET;

  wire SOFT_RESET;
  wire SOFT_RESET_RXRECCLK;
  wire dcm_locked;
  wire p_6_out;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  LUT3 #(
    .INIT(8'hFB)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_i_1__0 
       (.I0(SOFT_RESET_RXRECCLK),
        .I1(dcm_locked),
        .I2(reset_out),
        .O(p_6_out));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(SOFT_RESET_RXRECCLK));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module quadsgmii_0_TEST_reset_sync_block_179
   (reset_out,
    userclk,
    RESET_OUT);
  output reset_out;
  input userclk;
  input RESET_OUT;

  wire RESET_OUT;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire userclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module quadsgmii_0_TEST_reset_sync_block_180
   (reset_out,
    rxrecclk,
    RESET_OUT);
  output reset_out;
  input rxrecclk;
  input RESET_OUT;

  wire RESET_OUT;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module quadsgmii_0_TEST_reset_sync_block_181
   (p_6_out,
    dcm_locked,
    reset_out,
    rxrecclk,
    SOFT_RESET);
  output p_6_out;
  input dcm_locked;
  input reset_out;
  input rxrecclk;
  input SOFT_RESET;

  wire SOFT_RESET;
  wire SOFT_RESET_RXRECCLK;
  wire dcm_locked;
  wire p_6_out;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  LUT3 #(
    .INIT(8'hFB)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_i_1 
       (.I0(SOFT_RESET_RXRECCLK),
        .I1(dcm_locked),
        .I2(reset_out),
        .O(p_6_out));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(SOFT_RESET),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(SOFT_RESET_RXRECCLK));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module quadsgmii_0_TEST_sync_block
   (data_sync_reg6_0,
    data_out,
    SIGNAL_DETECT_MOD,
    SIGNAL_DETECT_REG_reg,
    \MASK_RUDI_BUFERR_TIMER_reg[12] ,
    \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ,
    signal_detect,
    userclk);
  output data_sync_reg6_0;
  output data_out;
  output SIGNAL_DETECT_MOD;
  input SIGNAL_DETECT_REG_reg;
  input \MASK_RUDI_BUFERR_TIMER_reg[12] ;
  input \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  input signal_detect;
  input userclk;

  wire \MASK_RUDI_BUFERR_TIMER_reg[12] ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  wire SIGNAL_DETECT_MOD;
  wire SIGNAL_DETECT_REG_reg;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire signal_detect;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair322" *) 
  LUT4 #(
    .INIT(16'h20FF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_1__2 
       (.I0(data_out),
        .I1(SIGNAL_DETECT_REG_reg),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12] ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .O(data_sync_reg6_0));
  (* SOFT_HLUTNM = "soft_lutpair322" *) 
  LUT2 #(
    .INIT(4'h2)) 
    SIGNAL_DETECT_REG_i_1__2
       (.I0(data_out),
        .I1(SIGNAL_DETECT_REG_reg),
        .O(SIGNAL_DETECT_MOD));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(signal_detect),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module quadsgmii_0_TEST_sync_block_150
   (MDC_RISING_REG10,
    data_out,
    MDC_REG3,
    mdc_ch3,
    userclk);
  output MDC_RISING_REG10;
  output data_out;
  input MDC_REG3;
  input mdc_ch3;
  input userclk;

  wire MDC_REG3;
  wire MDC_RISING_REG10;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire mdc_ch3;
  wire userclk;

  LUT2 #(
    .INIT(4'h2)) 
    MDC_RISING_REG1_i_1__2
       (.I0(data_out),
        .I1(MDC_REG3),
        .O(MDC_RISING_REG10));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(mdc_ch3),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module quadsgmii_0_TEST_sync_block_151
   (data_out,
    mdio_in_ch3,
    userclk);
  output data_out;
  input mdio_in_ch3;
  input userclk;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire mdio_in_ch3;
  wire userclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(mdio_in_ch3),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module quadsgmii_0_TEST_sync_block_160
   (data_sync_reg6_0,
    data_out,
    SIGNAL_DETECT_MOD,
    SIGNAL_DETECT_REG_reg,
    \MASK_RUDI_BUFERR_TIMER_reg[12] ,
    \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ,
    signal_detect,
    userclk);
  output data_sync_reg6_0;
  output data_out;
  output SIGNAL_DETECT_MOD;
  input SIGNAL_DETECT_REG_reg;
  input \MASK_RUDI_BUFERR_TIMER_reg[12] ;
  input \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  input signal_detect;
  input userclk;

  wire \MASK_RUDI_BUFERR_TIMER_reg[12] ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  wire SIGNAL_DETECT_MOD;
  wire SIGNAL_DETECT_REG_reg;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire signal_detect;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT4 #(
    .INIT(16'h20FF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_1__1 
       (.I0(data_out),
        .I1(SIGNAL_DETECT_REG_reg),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12] ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .O(data_sync_reg6_0));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT2 #(
    .INIT(4'h2)) 
    SIGNAL_DETECT_REG_i_1__1
       (.I0(data_out),
        .I1(SIGNAL_DETECT_REG_reg),
        .O(SIGNAL_DETECT_MOD));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(signal_detect),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module quadsgmii_0_TEST_sync_block_162
   (MDC_RISING_REG10,
    data_out,
    MDC_REG3,
    mdc_ch2,
    userclk);
  output MDC_RISING_REG10;
  output data_out;
  input MDC_REG3;
  input mdc_ch2;
  input userclk;

  wire MDC_REG3;
  wire MDC_RISING_REG10;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire mdc_ch2;
  wire userclk;

  LUT2 #(
    .INIT(4'h2)) 
    MDC_RISING_REG1_i_1__1
       (.I0(data_out),
        .I1(MDC_REG3),
        .O(MDC_RISING_REG10));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(mdc_ch2),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module quadsgmii_0_TEST_sync_block_163
   (data_out,
    mdio_in_ch2,
    userclk);
  output data_out;
  input mdio_in_ch2;
  input userclk;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire mdio_in_ch2;
  wire userclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(mdio_in_ch2),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module quadsgmii_0_TEST_sync_block_172
   (data_sync_reg6_0,
    data_out,
    SIGNAL_DETECT_MOD,
    SIGNAL_DETECT_REG_reg,
    \MASK_RUDI_BUFERR_TIMER_reg[12] ,
    \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ,
    signal_detect,
    userclk);
  output data_sync_reg6_0;
  output data_out;
  output SIGNAL_DETECT_MOD;
  input SIGNAL_DETECT_REG_reg;
  input \MASK_RUDI_BUFERR_TIMER_reg[12] ;
  input \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  input signal_detect;
  input userclk;

  wire \MASK_RUDI_BUFERR_TIMER_reg[12] ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  wire SIGNAL_DETECT_MOD;
  wire SIGNAL_DETECT_REG_reg;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire signal_detect;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'h20FF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_1__0 
       (.I0(data_out),
        .I1(SIGNAL_DETECT_REG_reg),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12] ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .O(data_sync_reg6_0));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT2 #(
    .INIT(4'h2)) 
    SIGNAL_DETECT_REG_i_1__0
       (.I0(data_out),
        .I1(SIGNAL_DETECT_REG_reg),
        .O(SIGNAL_DETECT_MOD));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(signal_detect),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module quadsgmii_0_TEST_sync_block_174
   (MDC_RISING_REG10,
    data_out,
    MDC_REG3,
    mdc_ch1,
    userclk);
  output MDC_RISING_REG10;
  output data_out;
  input MDC_REG3;
  input mdc_ch1;
  input userclk;

  wire MDC_REG3;
  wire MDC_RISING_REG10;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire mdc_ch1;
  wire userclk;

  LUT2 #(
    .INIT(4'h2)) 
    MDC_RISING_REG1_i_1__0
       (.I0(data_out),
        .I1(MDC_REG3),
        .O(MDC_RISING_REG10));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(mdc_ch1),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module quadsgmii_0_TEST_sync_block_175
   (data_out,
    mdio_in_ch1,
    userclk);
  output data_out;
  input mdio_in_ch1;
  input userclk;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire mdio_in_ch1;
  wire userclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(mdio_in_ch1),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module quadsgmii_0_TEST_sync_block_184
   (data_sync_reg6_0,
    data_out,
    SIGNAL_DETECT_MOD,
    SIGNAL_DETECT_REG_reg,
    \MASK_RUDI_BUFERR_TIMER_reg[12] ,
    \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ,
    signal_detect,
    userclk);
  output data_sync_reg6_0;
  output data_out;
  output SIGNAL_DETECT_MOD;
  input SIGNAL_DETECT_REG_reg;
  input \MASK_RUDI_BUFERR_TIMER_reg[12] ;
  input \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  input signal_detect;
  input userclk;

  wire \MASK_RUDI_BUFERR_TIMER_reg[12] ;
  wire \MASK_RUDI_BUFERR_TIMER_reg[12]_0 ;
  wire SIGNAL_DETECT_MOD;
  wire SIGNAL_DETECT_REG_reg;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire signal_detect;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT4 #(
    .INIT(16'h20FF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_1 
       (.I0(data_out),
        .I1(SIGNAL_DETECT_REG_reg),
        .I2(\MASK_RUDI_BUFERR_TIMER_reg[12] ),
        .I3(\MASK_RUDI_BUFERR_TIMER_reg[12]_0 ),
        .O(data_sync_reg6_0));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT2 #(
    .INIT(4'h2)) 
    SIGNAL_DETECT_REG_i_1
       (.I0(data_out),
        .I1(SIGNAL_DETECT_REG_reg),
        .O(SIGNAL_DETECT_MOD));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(signal_detect),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module quadsgmii_0_TEST_sync_block_186
   (MDC_RISING_REG10,
    data_out,
    MDC_REG3,
    mdc_ch0,
    userclk);
  output MDC_RISING_REG10;
  output data_out;
  input MDC_REG3;
  input mdc_ch0;
  input userclk;

  wire MDC_REG3;
  wire MDC_RISING_REG10;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire mdc_ch0;
  wire userclk;

  LUT2 #(
    .INIT(4'h2)) 
    MDC_RISING_REG1_i_1
       (.I0(data_out),
        .I1(MDC_REG3),
        .O(MDC_RISING_REG10));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(mdc_ch0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module quadsgmii_0_TEST_sync_block_187
   (data_out,
    mdio_in_ch0,
    userclk);
  output data_out;
  input mdio_in_ch0;
  input userclk;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire mdio_in_ch0;
  wire userclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(mdio_in_ch0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
