<?xml version="1.0" encoding="UTF-8"?>
<spirit:component xmlns:xilinx="http://www.xilinx.com" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <spirit:vendor>xilinx.com</spirit:vendor>
  <spirit:library>customized_ip</spirit:library>
  <spirit:name>quadsgmii_0_TEST</spirit:name>
  <spirit:version>1.0</spirit:version>
  <spirit:busInterfaces>
    <spirit:busInterface>
      <spirit:name>qsgmii</spirit:name>
      <spirit:displayName>qsgmii</spirit:displayName>
      <spirit:description>QSGMII Board Interface, between GT and PHY</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="sfp_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxn</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxp</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txn</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXP</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txp</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gmii_ch0</spirit:name>
      <spirit:displayName>gmii_ch0</spirit:displayName>
      <spirit:description>GMII Interface for Channel 0</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>GTX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtx_clk_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_clk_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_dv_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_er_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxd_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_en_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_er_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txd_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gmii_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true()))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>mdio_ch0</spirit:name>
      <spirit:displayName>mdio_ch0</spirit:displayName>
      <spirit:description>MDIO Interface for Channel 0</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDC</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdc_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_i_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_o_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_T</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_t_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>CAN_DEBUG</spirit:name>
          <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.MDIO_CH0.CAN_DEBUG">false</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.mdio_ch0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gmii_ch1</spirit:name>
      <spirit:displayName>gmii_ch1</spirit:displayName>
      <spirit:description>GMII Interface for Channel 1</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>GTX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtx_clk_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_clk_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_dv_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_er_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxd_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_en_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_er_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txd_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gmii_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true()))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>mdio_ch1</spirit:name>
      <spirit:displayName>mdio_ch1</spirit:displayName>
      <spirit:description>MDIO Interface for Channel 1</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDC</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdc_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_i_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_o_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_T</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_t_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>CAN_DEBUG</spirit:name>
          <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.MDIO_CH1.CAN_DEBUG">false</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.mdio_ch1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gmii_ch2</spirit:name>
      <spirit:displayName>gmii_ch2</spirit:displayName>
      <spirit:description>GMII Interface for Channel 2</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>GTX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtx_clk_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_clk_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_dv_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_er_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxd_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_en_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_er_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txd_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gmii_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true()))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>mdio_ch2</spirit:name>
      <spirit:displayName>mdio_ch2</spirit:displayName>
      <spirit:description>MDIO Interface for Channel 2</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDC</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdc_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_i_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_o_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_T</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_t_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>CAN_DEBUG</spirit:name>
          <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.MDIO_CH2.CAN_DEBUG">false</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.mdio_ch2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gmii_ch3</spirit:name>
      <spirit:displayName>gmii_ch3</spirit:displayName>
      <spirit:description>GMII Interface for Channel 3</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>GTX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtx_clk_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_clk_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_dv_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_er_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxd_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_en_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_er_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txd_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gmii_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true()))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>mdio_ch3</spirit:name>
      <spirit:displayName>mdio_ch3</spirit:displayName>
      <spirit:description>MDIO Interface for Channel 3</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mdio_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDC</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdc_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_I</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_i_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_O</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_o_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>MDIO_T</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mdio_t_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>CAN_DEBUG</spirit:name>
          <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.MDIO_CH3.CAN_DEBUG">false</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.mdio_ch3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>reset_port</spirit:name>
      <spirit:displayName>reset_port</spirit:displayName>
      <spirit:description>Asynchronous Reset</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>reset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RESET_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.RESET_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>diff_refclk_port</spirit:name>
      <spirit:displayName>diff_refclk_port</spirit:displayName>
      <spirit:description>Reference clock for Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="diff_clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="diff_clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK_N</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtrefclk_n</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK_P</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtrefclk_p</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>CAN_DEBUG</spirit:name>
          <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.DIFF_REFCLK_PORT.CAN_DEBUG">false</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.DIFF_REFCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.diff_refclk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gtrefclk_out_port</spirit:name>
      <spirit:displayName>gtrefclk_out_port</spirit:displayName>
      <spirit:description>Reference clock for Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtrefclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_OUT_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GTREFCLK_OUT_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GTREFCLK_OUT_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GTREFCLK_OUT_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GTREFCLK_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gtrefclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gtrefclk_port</spirit:name>
      <spirit:displayName>gtrefclk_port</spirit:displayName>
      <spirit:description>Reference clock for Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gtrefclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GTREFCLK_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GTREFCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GTREFCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GTREFCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GTREFCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gtrefclk_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>userclk_out_port</spirit:name>
      <spirit:displayName>userclk_out_port</spirit:displayName>
      <spirit:description>USERCLK port to Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>userclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK_OUT_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK_OUT_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK_OUT_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK_OUT_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK_OUT_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.USERCLK_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.userclk_out_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>userclk2_out_port</spirit:name>
      <spirit:displayName>userclk2_out_port</spirit:displayName>
      <spirit:description>USERCLK2 port to Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>userclk2_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.USERCLK2_OUT_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.USERCLK2_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK2_OUT_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK2_OUT_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK2_OUT_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.USERCLK2_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.userclk2_out_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rxuserclk_out_port</spirit:name>
      <spirit:displayName>rxuserclk_out_port</spirit:displayName>
      <spirit:description>RXUSERCLK port to Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxuserclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_OUT_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_OUT_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_OUT_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_OUT_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_OUT_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rxuserclk_out_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rxuserclk2_out_port</spirit:name>
      <spirit:displayName>rxuserclk2_out_port</spirit:displayName>
      <spirit:description>RXUSERCLK2 port to Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxuserclk2_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_OUT_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_OUT_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_OUT_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_OUT_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rxuserclk2_out_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>txoutclk_port</spirit:name>
      <spirit:displayName>txoutclk_port</spirit:displayName>
      <spirit:description>TXOUTCLK port from Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>txoutclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.TXOUTCLK_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.TXOUTCLK_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TXOUTCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TXOUTCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.TXOUTCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.TXOUTCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.txoutclk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rxoutclk_port</spirit:name>
      <spirit:displayName>rxoutclk_port</spirit:displayName>
      <spirit:description>RXOUTCLK port from Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxoutclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXOUTCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXOUTCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXOUTCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXOUTCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXOUTCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.RXOUTCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rxoutclk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll0outclk_out_port</spirit:name>
      <spirit:displayName>gt0_pll0outclk_out_port</spirit:displayName>
      <spirit:description>PLL0 Output Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll0outclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTCLK_OUT_PORT.FREQ_HZ">2500000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTCLK_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTCLK_OUT_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTCLK_OUT_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTCLK_OUT_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTCLK_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll0outclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll0outrefclk_out_port</spirit:name>
      <spirit:displayName>gt0_pll0outrefclk_out_port</spirit:displayName>
      <spirit:description>PLL0 Output Reference Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll0outrefclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTREFCLK_OUT_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTREFCLK_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTREFCLK_OUT_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTREFCLK_OUT_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTREFCLK_OUT_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTREFCLK_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll0outrefclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll1outclk_out_port</spirit:name>
      <spirit:displayName>gt0_pll1outclk_out_port</spirit:displayName>
      <spirit:description>PLL1 Output Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll1outclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTCLK_OUT_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTCLK_OUT_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTCLK_OUT_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTCLK_OUT_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTCLK_OUT_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTCLK_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll1outclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll1outrefclk_out_port</spirit:name>
      <spirit:displayName>gt0_pll1outrefclk_out_port</spirit:displayName>
      <spirit:description>PLL1 Output Reference Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll1outrefclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTREFCLK_OUT_PORT.FREQ_HZ">125000000</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTREFCLK_OUT_PORT.PHASE">0</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTREFCLK_OUT_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTREFCLK_OUT_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTREFCLK_OUT_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTREFCLK_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll1outrefclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_qplloutclk_out_port</spirit:name>
      <spirit:displayName>gt0_qplloutclk_out_port</spirit:displayName>
      <spirit:description>PLL Output Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_qplloutclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTCLK_OUT_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTCLK_OUT_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTCLK_OUT_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTCLK_OUT_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTCLK_OUT_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTCLK_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_qplloutclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_qplloutrefclk_out_port</spirit:name>
      <spirit:displayName>gt0_qplloutrefclk_out_port</spirit:displayName>
      <spirit:description>PLL Output Reference Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_qplloutrefclk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTREFCLK_OUT_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTREFCLK_OUT_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTREFCLK_OUT_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTREFCLK_OUT_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTREFCLK_OUT_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTREFCLK_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_qplloutrefclk_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll0outclk_in_port</spirit:name>
      <spirit:displayName>gt0_pll0outclk_in_port</spirit:displayName>
      <spirit:description>PLL0 Output Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll0outclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTCLK_IN_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTCLK_IN_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTCLK_IN_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTCLK_IN_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTCLK_IN_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTCLK_IN_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll0outclk_in_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll0outrefclk_in_port</spirit:name>
      <spirit:displayName>gt0_pll0outrefclk_in_port</spirit:displayName>
      <spirit:description>PLL0 Output Reference Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll0outrefclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTREFCLK_IN_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTREFCLK_IN_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTREFCLK_IN_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTREFCLK_IN_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTREFCLK_IN_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0OUTREFCLK_IN_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll0outrefclk_in_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll1outclk_in_port</spirit:name>
      <spirit:displayName>gt0_pll1outclk_in_port</spirit:displayName>
      <spirit:description>PLL1 Output Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll1outclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTCLK_IN_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTCLK_IN_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTCLK_IN_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTCLK_IN_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTCLK_IN_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTCLK_IN_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll1outclk_in_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll1outrefclk_in_port</spirit:name>
      <spirit:displayName>gt0_pll1outrefclk_in_port</spirit:displayName>
      <spirit:description>PLL1 Output Reference Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll1outrefclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTREFCLK_IN_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTREFCLK_IN_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTREFCLK_IN_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTREFCLK_IN_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTREFCLK_IN_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_PLL1OUTREFCLK_IN_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll1outrefclk_in_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_pll0reset_out_port</spirit:name>
      <spirit:displayName>gt0_pll0reset_out_port</spirit:displayName>
      <spirit:description>Reset to GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_pll0reset_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GT0_PLL0RESET_OUT_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_PLL0RESET_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_pll0reset_out_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_qplloutclk_in_port</spirit:name>
      <spirit:displayName>gt0_qplloutclk_in_port</spirit:displayName>
      <spirit:description>PLL Output Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_qplloutclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTCLK_IN_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTCLK_IN_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTCLK_IN_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTCLK_IN_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTCLK_IN_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTCLK_IN_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_qplloutclk_in_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;)  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_qplloutrefclk_in_port</spirit:name>
      <spirit:displayName>gt0_qplloutrefclk_in_port</spirit:displayName>
      <spirit:description>PLL Output Reference Clock from GT Common module</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_qplloutrefclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTREFCLK_IN_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTREFCLK_IN_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTREFCLK_IN_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTREFCLK_IN_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTREFCLK_IN_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_QPLLOUTREFCLK_IN_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_qplloutrefclk_in_port" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_drpclk_port</spirit:name>
      <spirit:displayName>gt0_drpclk_in</spirit:displayName>
      <spirit:description>DRP clock for Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpclk_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GT0_DRPCLK_PORT.ASSOCIATED_BUSIF">gt0_drp_interface</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_DRPCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_DRPCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_DRPCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT0_DRPCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT0_DRPCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_drpclk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;)  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;)  and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt_drpclk_port</spirit:name>
      <spirit:displayName>gt_drpclk</spirit:displayName>
      <spirit:description>DRP clock for Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drpclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.GT_DRPCLK_PORT.ASSOCIATED_BUSIF">gt_drp</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT_DRPCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT_DRPCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT_DRPCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.GT_DRPCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.GT_DRPCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt_drpclk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;)  or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>userclk_port</spirit:name>
      <spirit:displayName>userclk_port</spirit:displayName>
      <spirit:description>userclk clock for Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>userclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.USERCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.userclk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>userclk2_port</spirit:name>
      <spirit:displayName>userclk2_port</spirit:displayName>
      <spirit:description>125 MHz user clock for Core and Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>userclk2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK2_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK2_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK2_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK2_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.USERCLK2_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.USERCLK2_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.userclk2_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rxuserclk_port</spirit:name>
      <spirit:displayName>rxuserclk_port</spirit:displayName>
      <spirit:description>rxuserclk clock for Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxuserclk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rxuserclk_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>rxuserclk2_port</spirit:name>
      <spirit:displayName>rxuserclk2_port</spirit:displayName>
      <spirit:description>125 MHz user clock for Core and Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>rxuserclk2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.RXUSERCLK2_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.rxuserclk2_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>independent_clock_port</spirit:name>
      <spirit:displayName>independent_clock_port</spirit:displayName>
      <spirit:description>200 MHz reference clock for IODelay Ctrl</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>independent_clock_bufg</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>independent_clock_bufgdiv4_port</spirit:name>
      <spirit:displayName>independent_clock_bufgdiv4_port</spirit:displayName>
      <spirit:description>Independent clock divided by 4</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>independent_clock_bufgdiv4</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_BUFGDIV4_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_BUFGDIV4_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_BUFGDIV4_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_BUFGDIV4_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_BUFGDIV4_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_BUFGDIV4_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.independent_clock_bufgdiv4_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = false() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>independent_clock_bufgdiv4_out_port</spirit:name>
      <spirit:displayName>independent_clock_bufgdiv4_out_port</spirit:displayName>
      <spirit:description>independent_clock_bufg divided by 4 port to Transceiver</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clock_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>independent_clock_bufgdiv4_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>FREQ_HZ</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_BUFGDIV4_OUT_PORT.FREQ_HZ">100000000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PHASE</spirit:name>
          <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_BUFGDIV4_OUT_PORT.PHASE">0.000</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>CLK_DOMAIN</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_BUFGDIV4_OUT_PORT.CLK_DOMAIN"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_BUSIF</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_BUFGDIV4_OUT_PORT.ASSOCIATED_BUSIF"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>ASSOCIATED_RESET</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_BUFGDIV4_OUT_PORT.ASSOCIATED_RESET"/>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.INDEPENDENT_CLOCK_BUFGDIV4_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.independent_clock_bufgdiv4_out_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = false() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>pma_reset_port</spirit:name>
      <spirit:displayName>pma_reset_port</spirit:displayName>
      <spirit:description>Reset port synchronized to independent clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>pma_reset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.PMA_RESET_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.PMA_RESET_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.pma_reset_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>pma_reset_out_port</spirit:name>
      <spirit:displayName>pma_reset_out_port</spirit:displayName>
      <spirit:description>Reset port synchronized to independent clock</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="reset_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RST</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>pma_reset_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.PMA_RESET_OUT_PORT.POLARITY">ACTIVE_HIGH</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>INSERT_VIP</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="BUSIFPARAM_VALUE.PMA_RESET_OUT_PORT.INSERT_VIP">0</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>simulation.rtl</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.pma_reset_out_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sgmii_clk_en_ch0_port</spirit:name>
      <spirit:displayName>sgmii_clk_en_ch0_port</spirit:displayName>
      <spirit:description>Clock enables for 10/100 Mbps mode of operation on channel 0</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>sgmii_clk_en_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.SGMII_CLK_EN_CH0_PORT.POLARITY">ACTIVE_LOW</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sgmii_clk_en_ch0_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>an_interrupt_ch0_port</spirit:name>
      <spirit:displayName>an_interrupt_ch0_port</spirit:displayName>
      <spirit:description>Interrupt that Auto Negotiation is complete on channel 0</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>an_interrupt_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.AN_INTERRUPT_CH0_PORT.SENSITIVITY">LEVEL_HIGH</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PortWidth</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.AN_INTERRUPT_CH0_PORT.PortWidth">1</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.an_interrupt_ch0_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sgmii_clk_en_ch1_port</spirit:name>
      <spirit:displayName>sgmii_clk_en_ch1_port</spirit:displayName>
      <spirit:description>Clock enables for 10/100 Mbps mode of operation on channel 1</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>sgmii_clk_en_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.SGMII_CLK_EN_CH1_PORT.POLARITY">ACTIVE_LOW</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sgmii_clk_en_ch1_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>an_interrupt_ch1_port</spirit:name>
      <spirit:displayName>an_interrupt_ch1_port</spirit:displayName>
      <spirit:description>Interrupt that Auto Negotiation is complete on channel 1</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>an_interrupt_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.AN_INTERRUPT_CH1_PORT.SENSITIVITY">LEVEL_HIGH</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PortWidth</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.AN_INTERRUPT_CH1_PORT.PortWidth">1</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.an_interrupt_ch1_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sgmii_clk_en_ch2_port</spirit:name>
      <spirit:displayName>sgmii_clk_en_ch2_port</spirit:displayName>
      <spirit:description>Clock enables for 10/100 Mbps mode of operation on channel 2</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>sgmii_clk_en_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.SGMII_CLK_EN_CH2_PORT.POLARITY">ACTIVE_LOW</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sgmii_clk_en_ch2_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>an_interrupt_ch2_port</spirit:name>
      <spirit:displayName>an_interrupt_ch2_port</spirit:displayName>
      <spirit:description>Interrupt that Auto Negotiation is complete on channel 2</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>an_interrupt_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.AN_INTERRUPT_CH2_PORT.SENSITIVITY">LEVEL_HIGH</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PortWidth</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.AN_INTERRUPT_CH2_PORT.PortWidth">1</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.an_interrupt_ch2_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>sgmii_clk_en_ch3_port</spirit:name>
      <spirit:displayName>sgmii_clk_en_ch3_port</spirit:displayName>
      <spirit:description>Clock enables for 10/100 Mbps mode of operation on channel 3</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="clockenable_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>CE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>sgmii_clk_en_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>POLARITY</spirit:name>
          <spirit:value spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.SGMII_CLK_EN_CH3_PORT.POLARITY">ACTIVE_LOW</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.sgmii_clk_en_ch3_port" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>an_interrupt_ch3_port</spirit:name>
      <spirit:displayName>an_interrupt_ch3_port</spirit:displayName>
      <spirit:description>Interrupt that Auto Negotiation is complete on channel 3</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="signal" spirit:name="interrupt_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>INTERRUPT</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>an_interrupt_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:parameters>
        <spirit:parameter>
          <spirit:name>SENSITIVITY</spirit:name>
          <spirit:value spirit:id="BUSIFPARAM_VALUE.AN_INTERRUPT_CH3_PORT.SENSITIVITY">LEVEL_HIGH</spirit:value>
        </spirit:parameter>
        <spirit:parameter>
          <spirit:name>PortWidth</spirit:name>
          <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="BUSIFPARAM_VALUE.AN_INTERRUPT_CH3_PORT.PortWidth">1</spirit:value>
          <spirit:vendorExtensions>
            <xilinx:parameterInfo>
              <xilinx:parameterUsage>none</xilinx:parameterUsage>
            </xilinx:parameterInfo>
          </spirit:vendorExtensions>
        </spirit:parameter>
      </spirit:parameters>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.an_interrupt_ch3_port" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)))">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>internal_gmii_ch0</spirit:name>
      <spirit:displayName>internal_gmii_ch0</spirit:displayName>
      <spirit:description>Internal GMII interface for Channel 0</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_dv_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_er_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxd_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_en_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_er_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txd_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.internal_gmii_ch0" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>internal_gmii_ch1</spirit:name>
      <spirit:displayName>internal_gmii_ch1</spirit:displayName>
      <spirit:description>Internal GMII Interface for Channel 1</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_dv_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_er_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxd_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_en_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_er_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txd_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.internal_gmii_ch1" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>internal_gmii_ch2</spirit:name>
      <spirit:displayName>internal_gmii_ch2</spirit:displayName>
      <spirit:description>Internal GMII Interface for Channel 2</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_dv_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_er_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxd_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_en_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_er_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txd_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.internal_gmii_ch2" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>internal_gmii_ch3</spirit:name>
      <spirit:displayName>internal_gmii_ch3</spirit:displayName>
      <spirit:description>Internal GMII Interface for Channel 3</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="gmii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_dv_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rx_er_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_rxd_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_en_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_tx_er_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gmii_txd_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.internal_gmii_ch3" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false())">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>mii_ch0</spirit:name>
      <spirit:displayName>mii_ch0</spirit:displayName>
      <spirit:description>MII Interface for Channel 0</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rx_clk_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rx_dv_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rx_er_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rxd_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_tx_clk_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_tx_en_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_tx_er_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_txd_ch0</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.mii_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>mii_ch1</spirit:name>
      <spirit:displayName>mii_ch1</spirit:displayName>
      <spirit:description>MII Interface for Channel 1</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rx_clk_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rx_dv_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rx_er_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rxd_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_tx_clk_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_tx_en_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_tx_er_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_txd_ch1</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.mii_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>mii_ch2</spirit:name>
      <spirit:displayName>mii_ch2</spirit:displayName>
      <spirit:description>MII Interface for Channel 2</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rx_clk_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rx_dv_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rx_er_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rxd_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_tx_clk_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_tx_en_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_tx_er_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_txd_ch2</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.mii_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>mii_ch3</spirit:name>
      <spirit:displayName>mii_ch3</spirit:displayName>
      <spirit:description>MII Interface for Channel 3</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mii" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="mii_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rx_clk_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_DV</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rx_dv_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rx_er_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>RXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_rxd_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_CLK</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_tx_clk_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_EN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_tx_en_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TX_ER</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_tx_er_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>TXD</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>mii_txd_ch3</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.mii_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt0_drp_interface</spirit:name>
      <spirit:displayName>gt0_drp_interface</spirit:displayName>
      <spirit:description>DRP Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpaddr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpdi_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpdo_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drprdy_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_drpwe_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt0_drp_interface" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>gt_drp</spirit:name>
      <spirit:displayName>gt_drp</spirit:displayName>
      <spirit:description>DRP Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="interface" spirit:name="drp_rtl" spirit:version="1.0"/>
      <spirit:slave/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DADDR</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drpaddr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DEN</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drpen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DI</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drpdi</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DO</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drpdo</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DRDY</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drprdy</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>DWE</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_drpwe</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.gt_drp" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug</spirit:name>
      <spirit:displayName>transceiver_debug</spirit:displayName>
      <spirit:description>Transceiver Debug Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_quadsgmii" spirit:name="gt_xcvr_debug_io" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_quadsgmii" spirit:name="gt_xcvr_debug_io_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_cplllock_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_dmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_eyescandataerror_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_eyescanreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_eyescantrigger_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>gtrxreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_gtrxreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>gttxreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_gttxreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_loopback_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbufreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbyteisaligned_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxbyterealign_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxcdrhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxchariscomma</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxchariscomma_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxcharisk_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxcommadet_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfeagcovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxdfeagcovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxdfelpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxdisperr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmen_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmhfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmhfovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmhfovrden_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmlfhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmlfhold_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxlpmreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxmonitorout_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxmonitorsel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxnotintable_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmaresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpmaresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxprbscntreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxprbserr_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxrate</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxrate_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxratedone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxratedone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_rxresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txbufstatus_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txdiffctrl_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txinhibit_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpcsreset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpmareset_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpolarity_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txpostcursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txprbsforceerr_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txprbssel_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txprecursor_in</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt0_txresetdone_out</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
    <spirit:busInterface>
      <spirit:name>transceiver_debug_ser8</spirit:name>
      <spirit:displayName>transceiver_debug</spirit:displayName>
      <spirit:description>Transceiver Debug Interface</spirit:description>
      <spirit:busType spirit:vendor="xilinx.com" spirit:library="display_quadsgmii" spirit:name="gt_xcvr_debug_io" spirit:version="1.0"/>
      <spirit:abstractionType spirit:vendor="xilinx.com" spirit:library="display_quadsgmii" spirit:name="gt_xcvr_debug_io_rtl" spirit:version="1.0"/>
      <spirit:master/>
      <spirit:portMaps>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>cplllock</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_cplllock</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>dmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_dmonitorout</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescandataerror</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_eyescandataerror</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescanreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_eyescanreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>eyescantrigger</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_eyescantrigger</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>loopback</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_loopback</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>pcsrsvdin</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_pcsrsvdin</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxbufreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxbufstatus</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyteisaligned</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxbyteisaligned</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxbyterealign</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxbyterealign</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcdrhold</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxcdrhold</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxchariscomma</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxchariscomma</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcharisk</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxcharisk</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxcommadet</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxcommadet</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfeagcovrden</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxdfeagcovrden</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdfelpmreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxdfelpmreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxdisperr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxdisperr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxlpmen</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxlpmen</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorout</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxmonitorout</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxmonitorsel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxmonitorsel</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxnotintable</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxnotintable</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxpcsreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxpmareset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpmaresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxpmaresetdone</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxpolarity</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbscntreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxprbscntreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbserr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxprbserr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxprbssel</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxrate</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxrate</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxratedone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxratedone</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>rxresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_rxresetdone</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txbufstatus</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txbufstatus</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txdiffctrl</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txdiffctrl</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txinhibit</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txinhibit</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpcsreset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txpcsreset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpmareset</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txpmareset</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpolarity</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txpolarity</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txpostcursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txpostcursor</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbsforceerr</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txprbsforceerr</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprbssel</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txprbssel</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txprecursor</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txprecursor</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
        <spirit:portMap>
          <spirit:logicalPort>
            <spirit:name>txresetdone</spirit:name>
          </spirit:logicalPort>
          <spirit:physicalPort>
            <spirit:name>gt_txresetdone</spirit:name>
          </spirit:physicalPort>
        </spirit:portMap>
      </spirit:portMaps>
      <spirit:vendorExtensions>
        <xilinx:busInterfaceInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="BUSIF_ENABLEMENT.transceiver_debug_ser8" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:busInterfaceInfo>
      </spirit:vendorExtensions>
    </spirit:busInterface>
  </spirit:busInterfaces>
  <spirit:model>
    <spirit:views>
      <spirit:view>
        <spirit:name>xilinx_elaboratesubcores</spirit:name>
        <spirit:displayName>Elaborate Sub-Cores</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:elaborate.subcores</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_elaboratesubcores_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:d5bacb04</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_veriloginstantiationtemplate</spirit:name>
        <spirit:displayName>Verilog Instantiation Template</spirit:displayName>
        <spirit:envIdentifier>verilogSource:vivado.xilinx.com:synthesis.template</spirit:envIdentifier>
        <spirit:language>verilog</spirit:language>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_veriloginstantiationtemplate_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Fri Jun 25 15:35:26 UTC 2021</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:9323044b</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_anylanguagesynthesis</spirit:name>
        <spirit:displayName>Synthesis</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:synthesis</spirit:envIdentifier>
        <spirit:modelName>quadsgmii_v3_4_6</spirit:modelName>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagesynthesis_xilinx_com_ip_gig_ethernet_pcs_pma_16_1__ref_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagesynthesis_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Fri Jun 25 15:35:32 UTC 2021</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:9323044b</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_synthesisconstraints</spirit:name>
        <spirit:displayName>Synthesis Constraints</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:synthesis.constraints</spirit:envIdentifier>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:9323044b</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_verilogsynthesiswrapper</spirit:name>
        <spirit:displayName>Verilog Synthesis Wrapper</spirit:displayName>
        <spirit:envIdentifier>verilogSource:vivado.xilinx.com:synthesis.wrapper</spirit:envIdentifier>
        <spirit:language>verilog</spirit:language>
        <spirit:modelName>quadsgmii_0_TEST</spirit:modelName>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_verilogsynthesiswrapper_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Fri Jun 25 15:35:32 UTC 2021</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:9323044b</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_anylanguagebehavioralsimulation</spirit:name>
        <spirit:displayName>Simulation</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:simulation</spirit:envIdentifier>
        <spirit:modelName>quadsgmii_v3_4_6</spirit:modelName>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagebehavioralsimulation_xilinx_com_ip_gig_ethernet_pcs_pma_16_1__ref_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_anylanguagebehavioralsimulation_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Fri Jun 25 15:35:32 UTC 2021</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:d99d4c72</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_verilogsimulationwrapper</spirit:name>
        <spirit:displayName>Verilog Simulation Wrapper</spirit:displayName>
        <spirit:envIdentifier>verilogSource:vivado.xilinx.com:simulation.wrapper</spirit:envIdentifier>
        <spirit:language>verilog</spirit:language>
        <spirit:modelName>quadsgmii_0_TEST</spirit:modelName>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_verilogsimulationwrapper_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Fri Jun 25 15:35:32 UTC 2021</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:d99d4c72</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_versioninformation</spirit:name>
        <spirit:displayName>Version Information</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:docs.versioninfo</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_versioninformation_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Fri Jun 25 15:35:33 UTC 2021</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:9323044b</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
      <spirit:view>
        <spirit:name>xilinx_externalfiles</spirit:name>
        <spirit:displayName>External Files</spirit:displayName>
        <spirit:envIdentifier>:vivado.xilinx.com:external.files</spirit:envIdentifier>
        <spirit:fileSetRef>
          <spirit:localName>xilinx_externalfiles_view_fileset</spirit:localName>
        </spirit:fileSetRef>
        <spirit:parameters>
          <spirit:parameter>
            <spirit:name>GENtimestamp</spirit:name>
            <spirit:value>Fri Jun 25 15:37:09 UTC 2021</spirit:value>
          </spirit:parameter>
          <spirit:parameter>
            <spirit:name>outputProductCRC</spirit:name>
            <spirit:value>9:9323044b</spirit:value>
          </spirit:parameter>
        </spirit:parameters>
      </spirit:view>
    </spirit:views>
    <spirit:ports>
      <spirit:port>
        <spirit:name>reset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>signal_detect</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtrefclk_p</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtrefclk_p" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtrefclk_n</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtrefclk_n" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtrefclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtrefclk_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtrefclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtrefclk" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>txn</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>txp</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxn</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxp</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>userclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.userclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>userclk2_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.userclk2_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxuserclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxuserclk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxuserclk2_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxuserclk2_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>txoutclk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.txoutclk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxoutclk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxoutclk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>resetdone</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.resetdone" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>userclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.userclk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>userclk2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.userclk2" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxuserclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxuserclk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>rxuserclk2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.rxuserclk2" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>independent_clock_bufg</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>pma_reset_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.pma_reset_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mmcm_locked_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mmcm_locked_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true())">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>pma_reset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.pma_reset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mmcm_locked</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mmcm_locked" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false())">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_en_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_en_ch0" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false())">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_en_rx_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_en_rx_ch0" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_GMII_CLK_SRC&apos;))) == &quot;RXOUTCLK&quot;)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_txd_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_txd_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_en_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_en_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_er_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_er_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rxd_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rxd_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_dv_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_dv_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_er_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_er_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtx_clk_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtx_clk_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_clk_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_clk_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_txd_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_txd_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_tx_en_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_tx_en_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_tx_er_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_tx_er_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rxd_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rxd_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rx_dv_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rx_dv_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rx_er_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rx_er_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_tx_clk_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_tx_clk_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rx_clk_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rx_clk_ch0" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdc_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdc_ch0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_i_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_i_ch0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_o_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_o_ch0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_t_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_t_ch0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_vector_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">5</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">110000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_vector_ch0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_valid_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_valid_ch0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_interrupt_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_interrupt_ch0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_vector_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0001100000000001</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_vector_ch0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_AN_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_val_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_val_ch0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;))) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_AN_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_restart_config_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_restart_config_ch0" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_AN_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_10_100_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_100_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>status_vector_ch0</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_en_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_en_ch1" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false())">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_en_rx_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_en_rx_ch1" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_GMII_CLK_SRC&apos;))) == &quot;RXOUTCLK&quot;)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_txd_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_txd_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_en_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_en_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_er_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_er_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rxd_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rxd_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_dv_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_dv_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_er_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_er_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtx_clk_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtx_clk_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_clk_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_clk_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_txd_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_txd_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_tx_en_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_tx_en_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_tx_er_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_tx_er_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rxd_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rxd_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rx_dv_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rx_dv_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rx_er_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rx_er_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_tx_clk_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_tx_clk_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rx_clk_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rx_clk_ch1" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdc_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdc_ch1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_i_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_i_ch1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_o_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_o_ch1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_t_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_t_ch1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_vector_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">5</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">110000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_vector_ch1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_valid_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_valid_ch1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_interrupt_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_interrupt_ch1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_vector_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0001100000000001</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_vector_ch1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_AN_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_val_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_val_ch1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;))) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_AN_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_restart_config_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_restart_config_ch1" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_AN_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_10_100_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_100_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>status_vector_ch1</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_en_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_en_ch2" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false())">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_en_rx_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_en_rx_ch2" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_GMII_CLK_SRC&apos;))) == &quot;RXOUTCLK&quot;)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_txd_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_txd_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_en_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_en_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_er_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_er_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rxd_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rxd_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_dv_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_dv_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_er_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_er_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtx_clk_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtx_clk_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_clk_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_clk_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_txd_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_txd_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_tx_en_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_tx_en_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_tx_er_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_tx_er_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rxd_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rxd_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rx_dv_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rx_dv_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rx_er_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rx_er_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_tx_clk_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_tx_clk_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rx_clk_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rx_clk_ch2" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdc_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdc_ch2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_i_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_i_ch2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_o_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_o_ch2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_t_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_t_ch2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_vector_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">5</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">110000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_vector_ch2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_valid_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_valid_ch2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_interrupt_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_interrupt_ch2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_vector_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0001100000000001</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_vector_ch2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_AN_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_val_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_val_ch2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;))) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_AN_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_restart_config_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_restart_config_ch2" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_AN_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_10_100_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_100_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>status_vector_ch2</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_en_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_en_ch3" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false())">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>sgmii_clk_en_rx_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.sgmii_clk_en_rx_ch3" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false() and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_RX_GMII_CLK_SRC&apos;))) == &quot;RXOUTCLK&quot;)">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_txd_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_txd_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_en_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_en_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_tx_er_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_tx_er_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rxd_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rxd_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_dv_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_dv_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_er_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_er_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = false()) or (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true())))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gtx_clk_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gtx_clk_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gmii_rx_clk_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gmii_rx_clk_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = true()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_txd_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_txd_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_tx_en_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_tx_en_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_tx_er_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_tx_er_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rxd_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rxd_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rx_dv_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rx_dv_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rx_er_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rx_er_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_tx_clk_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_tx_clk_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mii_rx_clk_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mii_rx_clk_ch3" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_QSGMII_PHY_MODE&apos;))) = true()) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_GMII_OR_MII_MODE&apos;))) = false()))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdc_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdc_ch3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_i_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_i_ch3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_o_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_o_ch3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>mdio_t_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.mdio_t_ch3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_vector_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">5</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">110000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_vector_ch3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>configuration_valid_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.configuration_valid_ch3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_interrupt_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_interrupt_ch3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_vector_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0001100000000001</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_vector_ch3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_AN_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_adv_config_val_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_adv_config_val_ch3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and (spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_MDIO&apos;))) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_AN_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>an_restart_config_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.an_restart_config_ch3" xilinx:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AN&apos;)) and spirit:decode(id(&apos;MODELPARAM_VALUE.C_AN_CONFIG_INTERFACE&apos;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_10_100_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>speed_is_100_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>status_vector_ch3</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0outclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0outclk_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0outrefclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0outrefclk_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll1outclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll1outclk_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll1outrefclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll1outrefclk_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0lock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0lock_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0refclklost_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0refclklost_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_qplloutclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_qplloutclk_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_qplloutrefclk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_qplloutrefclk_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0outclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0outclk_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0outrefclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0outrefclk_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll1outclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll1outclk_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll1outrefclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll1outrefclk_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0lock_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0lock_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0refclklost_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0refclklost_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_pll0reset_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_pll0reset_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_qplloutclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_qplloutclk_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_qplloutrefclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_qplloutrefclk_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;)) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxchariscomma_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxchariscomma_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxchariscomma</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxchariscomma" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxcharisk_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxcharisk_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxcharisk</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxcharisk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxbyteisaligned_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxbyteisaligned_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxbyteisaligned</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxbyteisaligned" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_powergood_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_powergood_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxbyterealign_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxbyterealign_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxbyterealign</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxbyterealign" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxcommadet_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxcommadet_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxcommadet</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxcommadet" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxpmaresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxpmaresetdone_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxpmaresetdone</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxpmaresetdone" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_cplllock</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_cplllock" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txpolarity_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txpolarity</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txpolarity" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_gttxreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_gttxreset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txpcsreset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txpcsreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txpcsreset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txpmareset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txpmareset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txpmareset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_gtrxreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_gtrxreset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxpcsreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxpcsreset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxpcsreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxpcsreset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxbufreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxbufreset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxbufreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxbufreset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxpmareset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxpmareset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxpmareset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxpmareset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txdiffctrl_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txdiffctrl_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txdiffctrl</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_TXDIFFCTRL_WIDTH&apos;))-1)">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txdiffctrl" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txpostcursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txpostcursor_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txpostcursor</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txpostcursor" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txprecursor_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txprecursor_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txprecursor</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">4</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txprecursor" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxpolarity_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxpolarity_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxpolarity</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxpolarity" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txinhibit_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txinhibit_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txinhibit</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txinhibit" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txprbssel_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txprbssel</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txprbssel" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txprbsforceerr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txprbsforceerr_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txprbsforceerr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txprbsforceerr" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxprbscntreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxprbscntreset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxprbscntreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxprbscntreset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxprbserr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxprbserr_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxprbserr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxprbserr" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxprbssel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxprbssel_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxprbssel</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxprbssel" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_loopback_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_loopback_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_loopback</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_loopback" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txresetdone_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txresetdone</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txresetdone" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxresetdone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxresetdone_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxresetdone</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxresetdone" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drp_busy_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drp_busy_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpaddr_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_DRPADDR_WIDTH&apos;))-1)">9</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpaddr_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drpaddr</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_DRPADDR_WIDTH&apos;))-1)">9</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drpaddr" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpclk_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpclk_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drpclk</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drpclk" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpdi_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0000000000000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpdi_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drpdi</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0000000000000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drpdi" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpdo_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpdo_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drpdo</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drpdo" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpen_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drpen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drpen" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drprdy_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drprdy_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drprdy</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drprdy" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_drpwe_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_drpwe_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_drpwe</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_drpwe" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_pcsrsvdin</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0000000000000000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_pcsrsvdin" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxdisperr_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxdisperr_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxdisperr</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxdisperr" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxnotintable_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxnotintable_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxnotintable</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">3</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxnotintable" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_eyescanreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_eyescanreset_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_eyescanreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_eyescanreset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_eyescandataerror_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_eyescandataerror_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_eyescandataerror</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_eyescandataerror" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_eyescantrigger_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_eyescantrigger_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_eyescantrigger</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_eyescantrigger" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxrate_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxrate_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxrate</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">000</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxrate" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxcdrhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxcdrhold_in" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxcdrhold</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxcdrhold" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxratedone_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxratedone_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxratedone</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxratedone" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmhfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmhfhold_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmreset_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmlfhold_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmlfhold_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmhfovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmhfovrden_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;artix7&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) = &quot;xc7z015&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxdfelpmreset_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxdfelpmreset_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxdfelpmreset</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxdfelpmreset" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxdfeagcovrden_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxdfeagcovrden_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxdfeagcovrden</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxdfeagcovrden" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxlpmen_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxlpmen_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxlpmen</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">1</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxlpmen" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_RXMONITOROUT_WIDTH&apos;))-1)">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxmonitorout_out" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxmonitorout</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_RXMONITOROUT_WIDTH&apos;))-1)">7</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxmonitorout" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxmonitorsel_in</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxmonitorsel_in" xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;)) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxmonitorsel</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">00</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxmonitorsel" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_txbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_txbufstatus_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_rxbufstatus_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_rxbufstatus_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_txbufstatus</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">1</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_txbufstatus" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_rxbufstatus</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long">2</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_rxbufstatus" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_dmonitorout_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_DMONITOROUT_WIDTH&apos;))-1)">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_dmonitorout_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt_dmonitorout</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:vector>
            <spirit:left spirit:format="long" spirit:resolve="dependent" spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_GT_DMONITOROUT_WIDTH&apos;))-1)">15</spirit:left>
            <spirit:right spirit:format="long">0</spirit:right>
          </spirit:vector>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic_vector</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt_dmonitorout" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>gt0_cplllock_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.gt0_cplllock_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = true() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;artix7&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_XDEVICEFAMILY&apos;))) != &quot;xc7z015&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexu&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;zynquplusRFSOC&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;kintexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplus&quot;) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) != &quot;virtexuplusHBM&quot;))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>independent_clock_bufgdiv4_out</spirit:name>
        <spirit:wire>
          <spirit:direction>out</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.independent_clock_bufgdiv4_out" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = false() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = true()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">false</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
      <spirit:port>
        <spirit:name>independent_clock_bufgdiv4</spirit:name>
        <spirit:wire>
          <spirit:direction>in</spirit:direction>
          <spirit:wireTypeDefs>
            <spirit:wireTypeDef>
              <spirit:typeName>std_logic</spirit:typeName>
              <spirit:viewNameRef>xilinx_anylanguagesynthesis</spirit:viewNameRef>
              <spirit:viewNameRef>xilinx_anylanguagebehavioralsimulation</spirit:viewNameRef>
            </spirit:wireTypeDef>
          </spirit:wireTypeDefs>
          <spirit:driver>
            <spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
          </spirit:driver>
        </spirit:wire>
        <spirit:vendorExtensions>
          <xilinx:portInfo>
            <xilinx:enablement>
              <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PORT_ENABLEMENT.independent_clock_bufgdiv4" xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_TRANSCEIVERCONTROL&apos;))) = false() and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_SUPPORT_LEVEL&apos;))) = false()) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexu&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;zynquplusRFSOC&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;kintexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplus&quot;) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_FAMILY&apos;))) = &quot;virtexuplusHBM&quot;)))">true</xilinx:isEnabled>
            </xilinx:enablement>
          </xilinx:portInfo>
        </spirit:vendorExtensions>
      </spirit:port>
    </spirit:ports>
    <spirit:modelParameters>
      <spirit:modelParameter xsi:type="spirit:nameValueTypeType" spirit:dataType="string">
        <spirit:name>c_elaboration_transient_dir</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_elaboration_transient_dir">./</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_component_name</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_component_name">quadsgmii_0_TEST</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_family</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_family">zynquplus</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_xdevicefamily</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_xdevicefamily">xczu19eg</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_has_an</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_has_an">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_has_mdio</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_has_mdio">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_qsgmii_phy_mode</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_qsgmii_phy_mode">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_gmii_or_mii_mode</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_gmii_or_mii_mode">true</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PHYADDR_0</spirit:name>
        <spirit:displayName>C Phy Addr Ch0</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PHYADDR_0" spirit:maximum="31" spirit:rangeType="long">1</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PHYADDR_1</spirit:name>
        <spirit:displayName>C Phy Addr Ch1</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PHYADDR_1" spirit:maximum="31" spirit:rangeType="long">2</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PHYADDR_2</spirit:name>
        <spirit:displayName>C Phy Addr Ch2</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PHYADDR_2" spirit:maximum="31" spirit:rangeType="long">3</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>C_PHYADDR_3</spirit:name>
        <spirit:displayName>C Phy Addr Ch3</spirit:displayName>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.C_PHYADDR_3" spirit:maximum="31" spirit:rangeType="long">4</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>EXAMPLE_SIMULATION</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.EXAMPLE_SIMULATION" spirit:maximum="1" spirit:rangeType="long">0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_support_level</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_support_level">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_transceivercontrol</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_transceivercontrol">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_config_interface</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_config_interface">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_an_config_interface</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_an_config_interface">false</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_sub_core_name</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_sub_core_name">quadsgmii_0_TEST_gt</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_gt_dmonitorout_width</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_gt_dmonitorout_width">16</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_gt_drpaddr_width</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_gt_drpaddr_width">10</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_gt_txdiffctrl_width</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_gt_txdiffctrl_width">5</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_gt_rxmonitorout_width</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_gt_rxmonitorout_width">8</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_gt_loc</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_gt_loc">X0Y0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_refclk</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_refclk">clk0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="float">
        <spirit:name>c_drpclkrate</spirit:name>
        <spirit:value spirit:format="float" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_drpclkrate" spirit:minimum="6.25" spirit:maximum="125">75.0</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="integer">
        <spirit:name>c_gttype</spirit:name>
        <spirit:value spirit:format="long" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_gttype">5</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="string">
        <spirit:name>c_rx_gmii_clk_src</spirit:name>
        <spirit:value spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_rx_gmii_clk_src">TXOUTCLK</spirit:value>
      </spirit:modelParameter>
      <spirit:modelParameter spirit:dataType="boolean">
        <spirit:name>c_enable_tx_userclk_reset_port</spirit:name>
        <spirit:value spirit:format="bool" spirit:resolve="generated" spirit:id="MODELPARAM_VALUE.c_enable_tx_userclk_reset_port">true</spirit:value>
      </spirit:modelParameter>
    </spirit:modelParameters>
  </spirit:model>
  <spirit:choices>
    <spirit:choice>
      <spirit:name>choice_list_11c8f0f1</spirit:name>
      <spirit:enumeration>TXOUTCLK</spirit:enumeration>
      <spirit:enumeration>RXOUTCLK</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_20920dd1</spirit:name>
      <spirit:enumeration>GTH</spirit:enumeration>
      <spirit:enumeration>GTY</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_8b2829b8</spirit:name>
      <spirit:enumeration>GMII</spirit:enumeration>
      <spirit:enumeration>MII</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_98fc3a4d</spirit:name>
      <spirit:enumeration>X0Y0</spirit:enumeration>
      <spirit:enumeration>X0Y1</spirit:enumeration>
      <spirit:enumeration>X0Y2</spirit:enumeration>
      <spirit:enumeration>X0Y3</spirit:enumeration>
      <spirit:enumeration>X0Y4</spirit:enumeration>
      <spirit:enumeration>X0Y5</spirit:enumeration>
      <spirit:enumeration>X0Y6</spirit:enumeration>
      <spirit:enumeration>X0Y7</spirit:enumeration>
      <spirit:enumeration>X0Y8</spirit:enumeration>
      <spirit:enumeration>X0Y9</spirit:enumeration>
      <spirit:enumeration>X0Y10</spirit:enumeration>
      <spirit:enumeration>X0Y11</spirit:enumeration>
      <spirit:enumeration>X0Y12</spirit:enumeration>
      <spirit:enumeration>X0Y13</spirit:enumeration>
      <spirit:enumeration>X0Y14</spirit:enumeration>
      <spirit:enumeration>X0Y15</spirit:enumeration>
      <spirit:enumeration>X0Y16</spirit:enumeration>
      <spirit:enumeration>X0Y17</spirit:enumeration>
      <spirit:enumeration>X0Y18</spirit:enumeration>
      <spirit:enumeration>X0Y19</spirit:enumeration>
      <spirit:enumeration>X0Y20</spirit:enumeration>
      <spirit:enumeration>X0Y21</spirit:enumeration>
      <spirit:enumeration>X0Y22</spirit:enumeration>
      <spirit:enumeration>X0Y23</spirit:enumeration>
      <spirit:enumeration>X0Y24</spirit:enumeration>
      <spirit:enumeration>X0Y25</spirit:enumeration>
      <spirit:enumeration>X0Y26</spirit:enumeration>
      <spirit:enumeration>X0Y27</spirit:enumeration>
      <spirit:enumeration>X0Y28</spirit:enumeration>
      <spirit:enumeration>X0Y29</spirit:enumeration>
      <spirit:enumeration>X0Y30</spirit:enumeration>
      <spirit:enumeration>X0Y31</spirit:enumeration>
      <spirit:enumeration>X0Y32</spirit:enumeration>
      <spirit:enumeration>X0Y33</spirit:enumeration>
      <spirit:enumeration>X0Y34</spirit:enumeration>
      <spirit:enumeration>X0Y35</spirit:enumeration>
      <spirit:enumeration>X0Y36</spirit:enumeration>
      <spirit:enumeration>X0Y37</spirit:enumeration>
      <spirit:enumeration>X0Y38</spirit:enumeration>
      <spirit:enumeration>X0Y39</spirit:enumeration>
      <spirit:enumeration>X0Y40</spirit:enumeration>
      <spirit:enumeration>X0Y41</spirit:enumeration>
      <spirit:enumeration>X0Y42</spirit:enumeration>
      <spirit:enumeration>X0Y43</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_list_e32fe488</spirit:name>
      <spirit:enumeration>GTPE2</spirit:enumeration>
      <spirit:enumeration>GTXE2</spirit:enumeration>
      <spirit:enumeration>GTHE2</spirit:enumeration>
      <spirit:enumeration>GTHE3</spirit:enumeration>
      <spirit:enumeration>GTYE3</spirit:enumeration>
      <spirit:enumeration>GTHE4</spirit:enumeration>
      <spirit:enumeration>GTYE4</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_3a66ace2</spirit:name>
      <spirit:enumeration spirit:text="refclk0-2">clk0-2</spirit:enumeration>
      <spirit:enumeration spirit:text="refclk1-2">clk1-2</spirit:enumeration>
      <spirit:enumeration spirit:text="refclk0-1">clk0-1</spirit:enumeration>
      <spirit:enumeration spirit:text="refclk1-1">clk1-1</spirit:enumeration>
      <spirit:enumeration spirit:text="refclk0">clk0</spirit:enumeration>
      <spirit:enumeration spirit:text="refclk1">clk1</spirit:enumeration>
      <spirit:enumeration spirit:text="refclk0+1">clk0+1</spirit:enumeration>
      <spirit:enumeration spirit:text="refclk1+1">clk1+1</spirit:enumeration>
      <spirit:enumeration spirit:text="refclk0+2">clk0+2</spirit:enumeration>
      <spirit:enumeration spirit:text="refclk1+2">clk1+2</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_8744add4</spirit:name>
      <spirit:enumeration spirit:text="MAC MODE">MAC_MODE</spirit:enumeration>
      <spirit:enumeration spirit:text="PHY MODE">PHY_MODE</spirit:enumeration>
    </spirit:choice>
    <spirit:choice>
      <spirit:name>choice_pairs_b2abe35f</spirit:name>
      <spirit:enumeration spirit:text="Include Shared Logic in Core">Include_Shared_Logic_in_Core</spirit:enumeration>
      <spirit:enumeration spirit:text="Include Shared Logic in Example Design">Include_Shared_Logic_in_Example_Design</spirit:enumeration>
    </spirit:choice>
  </spirit:choices>
  <spirit:fileSets>
    <spirit:fileSet>
      <spirit:name>xilinx_elaboratesubcores_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>ip_0/quadsgmii_0_TEST_gt.xci</spirit:name>
        <spirit:userFileType>xci</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>ip_0/quadsgmii_0_TEST_gt.xml</spirit:name>
        <spirit:userFileType>xml</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_veriloginstantiationtemplate_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>quadsgmii_0_TEST.vho</spirit:name>
        <spirit:userFileType>vhdlTemplate</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>quadsgmii_0_TEST.veo</spirit:name>
        <spirit:userFileType>verilogTemplate</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagesynthesis_xilinx_com_ip_gig_ethernet_pcs_pma_16_1__ref_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>hdl/gig_ethernet_pcs_pma_v16_1_rfs.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v16_1_6</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>hdl/gig_ethernet_pcs_pma_v16_1_rfs.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v16_1_6</spirit:logicalName>
      </spirit:file>
      <spirit:vendorExtensions>
        <xilinx:subCoreRef>
          <xilinx:componentRef xilinx:vendor="xilinx.com" xilinx:library="ip" xilinx:name="gig_ethernet_pcs_pma" xilinx:version="16.1" xilinx:isGenerated="true" xilinx:checksum="e4b62046">
            <xilinx:mode xilinx:name="copy_mode"/>
          </xilinx:componentRef>
        </xilinx:subCoreRef>
      </spirit:vendorExtensions>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagesynthesis_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>hdl/quadsgmii_v3_4_syn_rfs.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:logicalName>quadsgmii_v3_4_6</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/quadsgmii_0_TEST_block.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_clk_gen.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_clock_div.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_johnson_cntr.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_qsgmii_adapt.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/quadsgmii_0_TEST_reset_sync.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_rx_rate_adapt.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_sgmii_adapt.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/quadsgmii_0_TEST_sync_block.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/quadsgmii_0_TEST_transceiver.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_tx_rate_adapt.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/quadsgmii_0_TEST_clocks.xdc</spirit:name>
        <spirit:userFileType>xdc</spirit:userFileType>
        <spirit:define>
          <spirit:name>processing_order</spirit:name>
          <spirit:value>late</spirit:value>
        </spirit:define>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/quadsgmii_0_TEST.xdc</spirit:name>
        <spirit:userFileType>xdc</spirit:userFileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/quadsgmii_0_TEST_ooc.xdc</spirit:name>
        <spirit:userFileType>xdc</spirit:userFileType>
        <spirit:userFileType>USED_IN_implementation</spirit:userFileType>
        <spirit:userFileType>USED_IN_out_of_context</spirit:userFileType>
        <spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_verilogsynthesiswrapper_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>synth/quadsgmii_0_TEST.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagebehavioralsimulation_xilinx_com_ip_gig_ethernet_pcs_pma_16_1__ref_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>hdl/gig_ethernet_pcs_pma_v16_1_rfs.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>USED_IN_ipstatic</spirit:userFileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v16_1_6</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>hdl/gig_ethernet_pcs_pma_v16_1_rfs.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>USED_IN_ipstatic</spirit:userFileType>
        <spirit:logicalName>gig_ethernet_pcs_pma_v16_1_6</spirit:logicalName>
      </spirit:file>
      <spirit:vendorExtensions>
        <xilinx:subCoreRef>
          <xilinx:componentRef xsi:type="xilinx:componentRefType" xilinx:vendor="xilinx.com" xilinx:library="ip" xilinx:name="gig_ethernet_pcs_pma" xilinx:version="16.1" xilinx:isGenerated="true" xilinx:checksum="c843e52e">
            <xilinx:mode xilinx:name="copy_mode"/>
          </xilinx:componentRef>
        </xilinx:subCoreRef>
      </spirit:vendorExtensions>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_anylanguagebehavioralsimulation_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>hdl/quadsgmii_v3_4_rfs.vhd</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>USED_IN_ipstatic</spirit:userFileType>
        <spirit:logicalName>quadsgmii_v3_4_6</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/quadsgmii_0_TEST_block.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_clk_gen.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_clock_div.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_johnson_cntr.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_qsgmii_adapt.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/quadsgmii_0_TEST_reset_sync.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_rx_rate_adapt.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_sgmii_adapt.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/quadsgmii_0_TEST_sync_block.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/transceiver/quadsgmii_0_TEST_transceiver.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
      <spirit:file>
        <spirit:name>synth/qsgmii_adapt/quadsgmii_0_TEST_tx_rate_adapt.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_verilogsimulationwrapper_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>synth/quadsgmii_0_TEST.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_versioninformation_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>doc/quadsgmii_v3_4_changelog.txt</spirit:name>
        <spirit:userFileType>text</spirit:userFileType>
      </spirit:file>
    </spirit:fileSet>
    <spirit:fileSet>
      <spirit:name>xilinx_externalfiles_view_fileset</spirit:name>
      <spirit:file>
        <spirit:name>quadsgmii_0_TEST.dcp</spirit:name>
        <spirit:userFileType>dcp</spirit:userFileType>
        <spirit:userFileType>USED_IN_implementation</spirit:userFileType>
        <spirit:userFileType>USED_IN_synthesis</spirit:userFileType>
        <spirit:logicalName>xil_defaultlib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>quadsgmii_0_TEST_stub.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>USED_IN_synth_blackbox_stub</spirit:userFileType>
        <spirit:logicalName>xil_defaultlib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>quadsgmii_0_TEST_stub.vhdl</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>USED_IN_synth_blackbox_stub</spirit:userFileType>
        <spirit:logicalName>xil_defaultlib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>quadsgmii_0_TEST_sim_netlist.v</spirit:name>
        <spirit:fileType>verilogSource</spirit:fileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:userFileType>USED_IN_single_language</spirit:userFileType>
        <spirit:logicalName>xil_defaultlib</spirit:logicalName>
      </spirit:file>
      <spirit:file>
        <spirit:name>quadsgmii_0_TEST_sim_netlist.vhdl</spirit:name>
        <spirit:fileType>vhdlSource</spirit:fileType>
        <spirit:userFileType>USED_IN_simulation</spirit:userFileType>
        <spirit:userFileType>USED_IN_single_language</spirit:userFileType>
        <spirit:logicalName>xil_defaultlib</spirit:logicalName>
      </spirit:file>
    </spirit:fileSet>
  </spirit:fileSets>
  <spirit:description>The Xilinx Quad Serial Gigabit Media Independent Interface (QSGMII) LogiCORE provides a single lane high speed serial interface, operating at 5 Gigabits per second (Gbps) total throughput.  The LogiCORE implements Cisco QSGMII V1.2 Specification. The core supports an optional serial MDIO management interface for accessing the internal management registers.  The MDIO interface may be omitted to save slice logic, in which case a simplified management interface is provided via bit vectors.  The core is designed to seamlessly interface with the Trimode Ethernet Media Access Controller (TEMAC) LogiCORE via the GMII. The QSGMII LogiCORE is available for the 7 Series, leveraging the capabilities of the embedded GT Transceivers in the device family.</spirit:description>
  <spirit:parameters>
    <spirit:parameter>
      <spirit:name>Component_Name</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Component_Name" spirit:order="1">quadsgmii_0_TEST</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Mode</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Mode" spirit:choiceRef="choice_pairs_8744add4" spirit:order="1000" spirit:configGroups="1 UnGrouped">MAC_MODE</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Management_Interface</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.Management_Interface" spirit:order="1100" spirit:configGroups="1 UnGrouped">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Config_Interface</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.Config_Interface" spirit:order="1101" spirit:configGroups="1 UnGrouped">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Auto_Negotiation</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.Auto_Negotiation" spirit:order="1200" spirit:configGroups="1 UnGrouped">true</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>AN_Config_Interface</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.AN_Config_Interface" spirit:order="1201" spirit:configGroups="1 UnGrouped">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>GMII_or_MII_Mode</spirit:name>
      <spirit:displayName>Gmii Or Mii Mode</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.GMII_or_MII_Mode" spirit:choiceRef="choice_list_8b2829b8" spirit:order="2000" spirit:configGroups="2 UnGrouped">GMII</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PHYADDR_0</spirit:name>
      <spirit:displayName>C Phy Addr Ch0</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PHYADDR_0" spirit:order="1110" spirit:configGroups="1 UnGrouped" spirit:minimum="0" spirit:maximum="31" spirit:rangeType="long">1</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PHYADDR_1</spirit:name>
      <spirit:displayName>C Phy Addr Ch1</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PHYADDR_1" spirit:order="1120" spirit:configGroups="1 UnGrouped" spirit:minimum="0" spirit:maximum="31" spirit:rangeType="long">2</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PHYADDR_2</spirit:name>
      <spirit:displayName>C Phy Addr Ch2</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PHYADDR_2" spirit:order="1130" spirit:configGroups="1 UnGrouped" spirit:minimum="0" spirit:maximum="31" spirit:rangeType="long">3</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>C_PHYADDR_3</spirit:name>
      <spirit:displayName>C Phy Addr Ch3</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.C_PHYADDR_3" spirit:order="1140" spirit:configGroups="1 UnGrouped" spirit:minimum="0" spirit:maximum="31" spirit:rangeType="long">4</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>EXAMPLE_SIMULATION</spirit:name>
      <spirit:displayName>Example Simulation</spirit:displayName>
      <spirit:value spirit:format="long" spirit:resolve="user" spirit:id="PARAM_VALUE.EXAMPLE_SIMULATION" spirit:order="1300" spirit:configGroups="1 UnGrouped" spirit:minimum="0" spirit:maximum="1" spirit:rangeType="long">0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>SupportLevel</spirit:name>
      <spirit:displayName>Shared Logic</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.SupportLevel" spirit:choiceRef="choice_pairs_b2abe35f" spirit:order="3000" spirit:configGroups="1 UnGrouped">Include_Shared_Logic_in_Example_Design</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>TransceiverControl</spirit:name>
      <spirit:value spirit:format="bool" spirit:resolve="user" spirit:id="PARAM_VALUE.TransceiverControl" spirit:order="4000" spirit:configGroups="1 UnGrouped">false</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Transceiver_type</spirit:name>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Transceiver_type" spirit:choiceRef="choice_list_e32fe488" spirit:order="5000" spirit:configGroups="1 UnGrouped">GTXE2</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.Transceiver_type">false</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>Locations</spirit:name>
      <spirit:displayName>Transceiver Location</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.Locations" spirit:choiceRef="choice_list_98fc3a4d" spirit:order="5100">X0Y0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>RefClk</spirit:name>
      <spirit:displayName>Transceiver RefClk</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.RefClk" spirit:choiceRef="choice_pairs_3a66ace2" spirit:order="5000">clk0</spirit:value>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>DrpClkRate</spirit:name>
      <spirit:value spirit:format="float" spirit:resolve="user" spirit:id="PARAM_VALUE.DrpClkRate" spirit:order="4001">75.0</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.DrpClkRate">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>vu_gt_type</spirit:name>
      <spirit:displayName>GT TYPE</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.vu_gt_type" spirit:choiceRef="choice_list_20920dd1" spirit:order="4002">GTH</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.vu_gt_type">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
    <spirit:parameter>
      <spirit:name>RxGmiiClkSrc</spirit:name>
      <spirit:displayName>Receive GMII Clock Source</spirit:displayName>
      <spirit:value spirit:resolve="user" spirit:id="PARAM_VALUE.RxGmiiClkSrc" spirit:choiceRef="choice_list_11c8f0f1" spirit:order="6000">TXOUTCLK</spirit:value>
      <spirit:vendorExtensions>
        <xilinx:parameterInfo>
          <xilinx:enablement>
            <xilinx:isEnabled xilinx:resolve="dependent" xilinx:id="PARAM_ENABLEMENT.RxGmiiClkSrc">true</xilinx:isEnabled>
          </xilinx:enablement>
        </xilinx:parameterInfo>
      </spirit:vendorExtensions>
    </spirit:parameter>
  </spirit:parameters>
  <spirit:vendorExtensions>
    <xilinx:coreExtensions>
      <xilinx:displayName>QSGMII</xilinx:displayName>
      <xilinx:coreRevision>6</xilinx:coreRevision>
    </xilinx:coreExtensions>
    <xilinx:packagingInfo>
      <xilinx:xilinxVersion>2019.1</xilinx:xilinxVersion>
      <xilinx:checksum xilinx:scope="busInterfaces" xilinx:value="abb8ba24"/>
      <xilinx:checksum xilinx:scope="fileGroups" xilinx:value="29275dfd"/>
      <xilinx:checksum xilinx:scope="ports" xilinx:value="51cee431"/>
      <xilinx:checksum xilinx:scope="hdlParameters" xilinx:value="73c9815b"/>
      <xilinx:checksum xilinx:scope="parameters" xilinx:value="f4c4916a"/>
    </xilinx:packagingInfo>
  </spirit:vendorExtensions>
</spirit:component>
